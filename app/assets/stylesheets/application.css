/*SMACSS categorizes styles as follows:

Base styles are the default styles for HTML elements (h1, p, pre, etc.).
Layout styles are grid and other reusable layout classes. All of these classes are prefixed with l- (e.g. .l-sidebar).
All remaining CSS is classified into modules, with classes namespaced by module. For example, an alert module might have the following rules: .alert, .alert-message, .alert-icon.
These practices are strongly recommended:

Avoid IDs in CSS
Minimize the depth of CSS selectors
Use classes to define visual presentation patterns1*/
/* Do not remove the comments below. It's the markers used by gulp-inject to inject
   all your sass files automatically */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/* import all globals */
/* used for math */
/* user */
/* first and last item of list*/
/* Last index of value x */
/* Inserting value at index n */
/* Replacing value x */
/* Replacing value at index n */
/* Removing values x */
/* Removing value at index n */
/* Slicing a list */
/* Reverse a list */
/* Convert a list into a string */
/* Shift indexes of a list */
.add-dataroot-child, .del-dataroot-child, .leaf .remove-child, .leaf .add-child {
  border-radius: 50% 50%;
  color: #FFF;
  height: 1.2rem;
  width: 1.2rem;
  line-height: 1.2rem;
  text-align: center;
  display: inline-block;
  cursor: pointer; }

.user-info-card, .micropost-form {
  padding: 1rem;
  width: 50rem;
  margin: 0 auto;
  border: 1px solid #e1e8ed; }

.new-post-toolbar .btn-submit:hover {
  background-color: #000;
  color: #fff; }

.ellipsis {
  /**
     * 1. Hide any overflow
     * 2. Prevent any line-break
     * 3. Add ellipsis at end of line
     */
  overflow: hidden;
  /* 1 */
  white-space: nowrap;
  /* 2 */
  text-overflow: ellipsis;
  /* 3 */ }

.reverse-ellipsis {
  text-overflow: clip;
  position: relative;
  background-color: white; }
  .reverse-ellipsis:before {
    content: '\02026';
    position: absolute;
    z-index: 1;
    left: -1em;
    background-color: inherit;
    padding-left: 1em;
    margin-left: 0.5em; }
  .reverse-ellipsis span {
    min-width: 100%;
    position: relative;
    display: inline-block;
    float: right;
    overflow: visible;
    background-color: inherit;
    text-indent: 0.5em; }
    .reverse-ellipsis span:before {
      content: '';
      position: absolute;
      display: inline-block;
      width: 1em;
      height: 1em;
      background-color: inherit;
      z-index: 200;
      left: -.5em; }

.gravatar_edit .image-upload input, .new-post-toolbar .micropost-input-file {
  width: 0.1px;
  height: 0.1px;
  /* width and height are set to 0.1px instead of just 0px. Setting the property values to zero ends up throwing the element out of tab party in some browsers.  */
  opacity: 0;
  overflow: hidden;
  position: absolute;
  z-index: -1; }
  .gravatar_edit .image-upload input + label, .new-post-toolbar .micropost-input-file + label {
    color: #000;
    background-color: #fff;
    display: inline-block;
    cursor: pointer;
    border-radius: 4px;
    box-shadow: none;
    outline: none;
    border: 1px solid #999;
    line-height: 1rem;
    height: 26px;
    padding: .5rem 1rem;
    max-width: 20rem; }
    .gravatar_edit .image-upload input + label *, .new-post-toolbar .micropost-input-file + label * {
      pointer-events: none;
      /* deal with Possible Touch Issues */ }
  .gravatar_edit .image-upload input:focus + label, .new-post-toolbar .micropost-input-file:focus + label, .gravatar_edit .image-upload input + label:hover, .new-post-toolbar .micropost-input-file + label:hover {
    background-color: #000;
    color: #fff; }

/* Pro tip: Use functions when you need to calculate a value that may be reused somewhere else. */
/* FACTORIAL */
/* http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass#coding-the-atan-function */
/* inverse trigonometric functions */
/* return fibonacci sequences */
/* Juggler sequence */
/* Look-and-say sequence */
/* 
Start from last character
Check the number of identical characters previous to and including this one (basically 1, 2 or 3)
Prepend this count and the character to the new entry
Start back to next unchecked character 
*/
html {
  box-sizing: border-box;
  font-size: 12px; }
  html *,
  html *::before,
  html *::after {
    box-sizing: border-box; }

body {
  font-family: Arial,'Helvetica Neue',Helvetica,sans-serif;
  background-color: #fff; }

.hide {
  display: none; }

.center {
  text-align: center; }

input:not([type=checkbox]) {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none; }

input,
select {
  border: none; }
  input:focus,
  select:focus {
    outline: none; }

input:-webkit-autofill,
textarea:-webkit-autofill,
select:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
  -webkit-text-fill-color: #000; }
  input:-webkit-autofill:focus,
  textarea:-webkit-autofill:focus,
  select:-webkit-autofill:focus {
    box-shadow: 0 0 0 1000px white inset;
    -webkit-text-fill-color: #000; }

input[type="hidden"] {
  display: none !important; }

textarea[type="hidden"] {
  display: none; }

/* import all modules */
.users .row {
  height: 3rem;
  line-height: 3rem; }
  .users .row + .row {
    margin-top: .5rem; }

.users input {
  display: inline-block;
  height: 3rem;
  line-height: 3rem;
  border-top: none;
  border-left: none;
  border-right: none;
  border-bottom: 1px solid #999; }
  .users input:focus {
    border-bottom: 1px solid #000; }

.users .btn-submit {
  display: block;
  margin: 0 auto;
  width: 10rem;
  padding: 0;
  background-color: #fff;
  border: 1px solid #999;
  border-radius: 4px; }

.form-container {
  margin: 0 auto;
  width: 40rem; }

.row {
  font-size: 0;
  position: relative; }
  .row label {
    font-size: 12px; }

.form-label {
  display: inline-block;
  width: 13rem;
  text-align: right;
  font-size: 12px;
  padding: 0 1rem 0 0; }

.form-control {
  display: inline-block;
  font-size: 12px;
  width: 27rem; }

.form-extra {
  font-size: 12px;
  display: inline-block;
  padding: 0 0 0 1rem;
  position: absolute;
  left: 40rem;
  top: 0;
  white-space: nowrap; }

.btn-submit {
  display: block;
  font-size: 12px;
  margin: 0 auto; }

.extra {
  text-align: center; }

.users-list {
  margin: 0 auto;
  width: 50rem; }

.gravatar_edit {
  text-align: center; }

.s-avatar {
  font-size: 0; }

.userName, .email {
  padding: 0 .2rem; }

.show-link {
  margin-left: .5rem; }

.show-link + .edit-link {
  margin-left: .5rem; }

.edit-link + .delete-user {
  margin-left: .5rem; }

.tweet-box[contenteditable="true"] {
  outline: none;
  border: 1px solid rgba(74, 145, 60, 0.25);
  padding: 8px 10px;
  color: #333; }
  .tweet-box[contenteditable="true"].showPlaceholder:before {
    content: attr(data-placeholder-default);
    color: #ccd6dd;
    position: absolute; }

.user-info-card {
  background-image: -webkit-linear-gradient(top, rgba(255, 255, 255, 0) 60%, #fff), -webkit-linear-gradient(20deg, #e0f1ff 32%, #fffae3);
  background-image: linear-gradient(180deg, rgba(255, 255, 255, 0) 60%, #fff), linear-gradient(70deg, #e0f1ff 32%, #fffae3); }
  .user-info-card .self-info {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: center;
    -webkit-justify-content: center;
        -ms-flex-pack: center;
            justify-content: center;
    -webkit-box-align: center;
    -webkit-align-items: center;
        -ms-flex-align: center;
            align-items: center; }
  .user-info-card .info {
    padding: 0 1rem; }
  .user-info-card .card-block-btn {
    width: 100%; }
  .user-info-card .card-link-following {
    padding: 0 0.5rem; }
  .user-info-card .card-link-followers {
    padding: 0 0.5rem;
    margin: 0 0 0 1rem; }
  .user-info-card .user-avatars {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    padding: .3rem 0 0 0; }
    .user-info-card .user-avatars:hover {
      background-color: initial;
      color: #333; }
  .user-info-card .follow-avatar-name {
    margin: 0 2px; }
    .user-info-card .follow-avatar-name .avatar {
      font-size: 0; }
    .user-info-card .follow-avatar-name .name {
      text-align: center; }
  .user-info-card .follow-status {
    padding: 1rem 0 0 0; }
  .user-info-card .follow-action {
    padding: 1rem 0 0 0; }

.micropost-text {
  word-break: break-all;
  padding: 0.5rem 0; }

.new-post,
.profile-post {
  font-size: 12px; }

.new-post-text {
  outline: none;
  width: 100%;
  max-width: 100%; }

.new-post-toolbar {
  text-align: center; }
  .new-post-toolbar:before, .new-post-toolbar:after {
    content: " ";
    display: table; }
  .new-post-toolbar:after {
    clear: both; }
  .new-post-toolbar .image-upload {
    position: relative;
    float: left; }
  .new-post-toolbar .btn-submit {
    display: inline-block;
    float: right;
    background-color: #fff;
    border-radius: 4px;
    box-shadow: none;
    outline: none;
    border: 1px solid #999;
    line-height: 1rem;
    height: 1rem;
    padding: .5rem 2rem;
    box-sizing: content-box; }

.feeds {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
  padding: 1rem 0 0 0; }

.microposts {
  padding: 0;
  width: 50rem;
  border: 1px solid #e1e8ed; }

.micropost {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  border-top: 1px solid #e1e8ed;
  padding: .8rem 1rem; }
  .micropost:first-child {
    border-top: none; }
  .micropost .avatar-section {
    -webkit-flex-basis: 5rem;
        -ms-flex-preferred-size: 5rem;
            flex-basis: 5rem;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: start;
    -webkit-align-items: flex-start;
        -ms-flex-align: start;
            align-items: flex-start;
    font-size: 0; }
  .micropost .content {
    -webkit-box-flex: 1;
    -webkit-flex: 1;
        -ms-flex: 1;
            flex: 1; }
  .micropost .micropost-img {
    max-height: 665px;
    overflow: hidden; }

.pagination .disabled {
  display: none; }

.sessions .row {
  height: 3rem;
  line-height: 3rem; }
  .sessions .row + .row {
    margin-top: .5rem; }

.sessions input {
  display: inline-block;
  line-height: 3rem;
  border-top: none;
  border-left: none;
  border-right: none;
  border-bottom: 1px solid #999; }
  .sessions input:focus {
    border-bottom: 1px solid #000; }

.sessions .btn-submit {
  display: block;
  margin: 0 auto;
  width: 10rem;
  padding: 0;
  background-color: #fff;
  border: 1px solid #999;
  border-radius: 4px; }

.password_resets .row {
  height: 3rem;
  line-height: 3rem; }
  .password_resets .row + .row {
    margin-top: .5rem; }

.password_resets input {
  display: inline-block;
  line-height: 3rem;
  border-top: none;
  border-left: none;
  border-right: none;
  border-bottom: 1px solid #999; }
  .password_resets input:focus {
    border-bottom: 1px solid #000; }

.password_resets .btn-submit {
  display: block;
  margin: 0 auto;
  width: 10rem;
  padding: 0;
  background-color: #fff;
  border: 1px solid #999;
  border-radius: 4px; }

.api-ul-wrapper input {
  border-bottom: 1px solid #999; }

.api-ul-wrapper select {
  border: 0;
  box-shadow: 0 1px 0 #999;
  background-color: #fff; }

.api-ul-wrapper .api-ul {
  list-style: none;
  padding: .5rem; }

.api-ul-wrapper .api-li {
  border-top: 1px solid #999;
  border-bottom: 1px solid #ddd;
  border-left: 1px solid #999;
  border-right: 1px solid #999; }
  .api-ul-wrapper .api-li + .api-li {
    margin-top: 1.5rem; }

.api-ul-wrapper .api-li-uri {
  display: inline-block;
  width: 20rem;
  padding: 0 0 0 1rem; }

.api-ul-wrapper .api-li-description {
  padding: .5rem 1rem;
  background-color: #FFFAF0; }
  .api-ul-wrapper .api-li-description + .per-api {
    display: none;
    border-top: 1px solid #ddd; }
  .api-ul-wrapper .api-li-description.unfold + .per-api {
    display: block; }

.alert-success {
  background-color: #7FFFD4;
  color: #fff; }

.alert-danger {
  background-color: #B22222;
  color: #fff; }

.alert-info {
  background-color: #E6E6FA; }

.add-api {
  border-bottom: 1px solid #ddd;
  padding: 5px 10px;
  margin: 0 0 1em 0; }

.per-api {
  padding: 1rem 0 2rem 0;
  margin: 0 1rem 0 1rem;
  box-shadow: 0 5px 4px -5px purple; }

.api-edit, .api-save, .api-test, .data-raw, .data-beautify, .data-highlight, .data-preview {
  border: 1px solid #ddd;
  padding: 0 10px;
  margin: 0 1em 0 0;
  cursor: pointer; }

.api-uri:disabled {
  background-color: #ddd; }

.api-tree-wrapper {
  position: relative;
  margin: 1rem 0 0 0;
  overflow-x: scroll;
  overflow-y: hidden; }

.api-data {
  padding: .5rem 0 0 0; }

.api-tree-frame {
  padding: 0 0 0 1.2rem; }

.api-tree {
  position: absolute;
  top: 0;
  left: 0;
  padding: 0 0 0 44.44px;
  height: 0; }

.api-svg:not(:root) {
  overflow: visible; }

.api-svg .api-svg-path {
  stroke: purple;
  stroke-width: 1;
  fill: transparent; }

i {
  cursor: pointer; }

.layer {
  margin: 0 0 1em 0;
  width: 23em;
  border-right: 1px solid #ddd; }

.add-dataroot-child {
  position: absolute;
  top: 2px;
  left: 0;
  background-color: green; }

.del-dataroot-child {
  position: absolute;
  top: 36px;
  left: 0;
  background-color: red; }

.leaf {
  display: inline-block;
  height: 22px;
  width: 469px;
  padding: 0 .5em;
  position: absolute;
  margin: 0 0 1.3em 0;
  white-space: nowrap;
  text-align: center;
  font-size: 0;
  font-size: 0; }
  .leaf > input {
    display: inline-block;
    vertical-align: top; }
  .leaf > i {
    display: inline-block;
    vertical-align: top; }
  .leaf .remove-child {
    background-color: #F00;
    margin: 2px .2em 0 0; }
  .leaf input, .leaf i {
    font-size: 12px; }
  .leaf input {
    width: 130px;
    height: 20px; }
  .leaf i {
    width: 20px; }
  .leaf .add-child {
    background-color: blue;
    margin: 2px 0 0 .2em; }
  .leaf .leaf-key {
    padding: 0 1em; }
  .leaf .add-sibling {
    position: absolute;
    top: 130%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%); }

.card {
  display: inline-block;
  position: relative;
  border: 1px solid #07d;
  border-top-width: 3px;
  border-radius: 3px;
  background: #fff;
  text-decoration: none;
  line-height: 18px; }

.json pre {
  outline: 1px solid #ccc;
  padding: 5px;
  margin: 5px;
  white-space: pre; }

.json .string {
  color: green; }

.json .number {
  color: darkorange; }

.json .boolean {
  color: blue; }

.json .null {
  color: magenta; }

.json .key {
  color: red; }

.user-link {
  display: inline-block;
  font-size: 0; }

.nav {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
  position: relative; }
  .nav .static-links,
  .nav .user-links {
    padding: 0 2rem;
    position: relative; }
  .nav .first-layer {
    display: inline-block;
    vertical-align: top; }

.per-row {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  border-bottom: 1px solid #ddd;
  border-left: 1px solid #ddd;
  border-right: 1px solid #ddd;
  padding: .5rem; }
  .per-row:first-child {
    border-top: 1px solid #ddd; }
  .per-row .follow_form {
    display: inline-block;
    margin-left: auto; }

.navbar {
  height: 3em; }

pre {
  background-color: #eee;
  padding: 10px; }

a {
  color: #000;
  text-decoration: none;
  box-shadow: 0 1px 0 0 #000;
  padding: .2rem .2rem; }
  a.avatar {
    box-shadow: none;
    padding: 0;
    display: inline-block;
    font-size: 0; }
  a:visited {
    color: #666; }
  a:hover {
    color: #fff;
    background-color: #000;
    box-shadow: none; }

div.field, div.actions {
  margin-bottom: 10px; }

#notice {
  color: green; }

.alert {
  font-size: 12px;
  padding: .5rem 1.5rem; }

.field_with_errors {
  background-color: red;
  display: inline-block; }

.pagination {
  text-align: center; }
  .pagination li {
    display: inline; }

#error_explanation {
  border: 2px solid red;
  padding: 7px;
  padding-bottom: 0;
  margin-bottom: 20px;
  background-color: #f0f0f0; }
  #error_explanation h2 {
    text-align: left;
    font-weight: bold;
    padding: 5px 5px 5px 15px;
    font-size: 12px;
    margin: -7px;
    margin-bottom: 0px;
    background-color: #c00;
    color: #fff; }
  #error_explanation ul li {
    font-size: 12px;
    list-style: square; }

.icon {
  display: inline-block;
  width: 1rem;
  height: 1rem;
  fill: currentColor; }

.collapsing {
  position: relative;
  height: 0;
  overflow: hidden;
  -webkit-transition-timing-function: ease;
          transition-timing-function: ease;
  -webkit-transition-duration: .35s;
          transition-duration: .35s;
  -webkit-transition-property: height, visibility;
  transition-property: height, visibility; }

.unfold svg {
  -webkit-transform: rotate(180deg);
          transform: rotate(180deg); }

.popup-shadow {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.45); }

.popup-content {
  background-color: #fff;
  width: 20rem;
  border-radius: .4rem;
  will-change: transform;
  -webkit-transform: translate3d(0, 0, 0);
          transform: translate3d(0, 0, 0); }

.popup-text {
  padding: 1rem;
  border-bottom: 1px solid #ddd; }

.popup-btns {
  font-size: 0; }
  .popup-btns .popup-btn:only-child {
    display: block; }

.popup-btn {
  display: inline-block;
  width: 50%;
  font-size: 1rem;
  text-align: center;
  padding: .8rem; }
  .popup-btn + .popup-btn {
    border-left: 1px solid #ddd; }

.flash-layer {
  position: fixed;
  top: 3rem;
  left: 0;
  right: 0;
  text-align: center;
  padding: .3rem 1rem; }
  .flash-layer.error {
    background-color: red; }
  .flash-layer.success {
    background-color: green; }
    .flash-layer.success .message {
      color: white; }

.blink {
  -webkit-animation-name: blink;
          animation-name: blink;
  -webkit-animation-iteration-count: 3;
          animation-iteration-count: 3;
  -webkit-animation-timing-function: ease-in-out;
          animation-timing-function: ease-in-out;
  -webkit-animation-duration: .4s;
          animation-duration: .4s; }

@-webkit-keyframes blink {
  from {
    opacity: 0.3; }
  to {
    opacity: 1; } }

@keyframes blink {
  from {
    opacity: 0.3; }
  to {
    opacity: 1; } }

/* import all pages */
.user-info-card + .micropost-form {
  border-top: none; }

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3N0ZGluIiwiYXBwbGljYXRpb24uY3NzIiwiZ2xvYmFscy9fdmFyaWFibGVzLnNjc3MiLCJnbG9iYWxzL19mdW5jdGlvbnMuc2NzcyIsIm1vZHVsZXMvX2FwaS10cmVlLnNjc3MiLCJnbG9iYWxzL19wbGFjZWhvbGRlcnMuc2NzcyIsIm1vZHVsZXMvX3VzZXItaW5mby1jYXJkLnNjc3MiLCJtb2R1bGVzL19taWNyb3Bvc3Quc2NzcyIsImdsb2JhbHMvX2NvbW1vbi5zY3NzIiwibW9kdWxlcy9fdXNlcnMuc2NzcyIsImdsb2JhbHMvX21hdGguc2NzcyIsImdsb2JhbHMvX21peGlucy5zY3NzIiwibW9kdWxlcy9fcGFnaW5hdGlvbi5zY3NzIiwibW9kdWxlcy9fc2Vzc2lvbnMuc2NzcyIsIm1vZHVsZXMvX3Bhc3N3b3JkLXJlc2V0cy5zY3NzIiwibW9kdWxlcy9fYXBpcy5zY3NzIiwibW9kdWxlcy9fYWxlcnQuc2NzcyIsIm1vZHVsZXMvX2NhcmQuc2NzcyIsIm1vZHVsZXMvX2pzb24uc2NzcyIsIm1vZHVsZXMvX25hdi5zY3NzIiwibW9kdWxlcy9fcHJvZmlsZS5zY3NzIiwibW9kdWxlcy9fZm9ybS5zY3NzIiwibW9kdWxlcy9faWNvbi5zY3NzIiwibW9kdWxlcy9fY29sbGFwc2Uuc2NzcyIsIm1vZHVsZXMvX3BvcHVwLnNjc3MiLCJtb2R1bGVzL19mbGFzaC5zY3NzIiwicGFnZXMvX2luZGV4LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztxREFTcUQ7QUFFckQ7dUNBQ3VDO0FBR3ZDLDRFQUE0RTtBQUU1RTs7OztHQUlHO0FBRUg7RUFDRSx3QkFBd0I7RUFBRSxPQUFPO0VBQ2pDLDJCQUEyQjtFQUFFLE9BQU87RUFDcEMsK0JBQStCO0VBQUUsT0FBTyxFQUN6Qzs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsVUFBVSxFQUNYOztBQUVEO2dGQUNnRjtBQUVoRjs7Ozs7R0FLRztBQUVIOzs7Ozs7Ozs7Ozs7O0VBYUUsZUFBZSxFQUNoQjs7QUFFRDs7O0dBR0c7QUFFSDs7OztFQUlFLHNCQUFzQjtFQUFFLE9BQU87RUFDL0IseUJBQXlCO0VBQUUsT0FBTyxFQUNuQzs7QUFFRDs7O0dBR0c7QUFFSDtFQUNFLGNBQWM7RUFDZCxVQUFVLEVBQ1g7O0FBRUQ7OztHQUdHO0FDVEg7O0VEYUUsY0FBYyxFQUNmOztBQUVEO2dGQUNnRjtBQUVoRjs7R0FFRztBQUVIO0VBQ0UsOEJBQThCLEVBQy9COztBQUVEOzs7R0FHRztBQUVIOztFQUVFLFdBQVcsRUFDWjs7QUFFRDtnRkFDZ0Y7QUFFaEY7O0dBRUc7QUFFSDtFQUNFLDBCQUEwQixFQUMzQjs7QUFFRDs7R0FFRztBQUVIOztFQUVFLGtCQUFrQixFQUNuQjs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsbUJBQW1CLEVBQ3BCOztBQUVEOzs7R0FHRztBQUVIO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQixFQUNsQjs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsaUJBQWlCO0VBQ2pCLFlBQVksRUFDYjs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsZUFBZSxFQUNoQjs7QUFFRDs7R0FFRztBQUVIOztFQUVFLGVBQWU7RUFDZixlQUFlO0VBQ2YsbUJBQW1CO0VBQ25CLHlCQUF5QixFQUMxQjs7QUFFRDtFQUNFLFlBQVksRUFDYjs7QUFFRDtFQUNFLGdCQUFnQixFQUNqQjs7QUFFRDtnRkFDZ0Y7QUFFaEY7O0dBRUc7QUFFSDtFQUNFLFVBQVUsRUFDWDs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsaUJBQWlCLEVBQ2xCOztBQUVEO2dGQUNnRjtBQUVoRjs7R0FFRztBQUVIO0VBQ0UsaUJBQWlCLEVBQ2xCOztBQUVEOztHQUVHO0FBRUg7RUFDRSx3QkFBd0I7RUFDeEIsVUFBVSxFQUNYOztBQUVEOztHQUVHO0FBRUg7RUFDRSxlQUFlLEVBQ2hCOztBQUVEOztHQUVHO0FBRUg7Ozs7RUFJRSxrQ0FBa0M7RUFDbEMsZUFBZSxFQUNoQjs7QUFFRDtnRkFDZ0Y7QUFFaEY7OztHQUdHO0FBRUg7Ozs7O0dBS0c7QUFFSDs7Ozs7RUFLRSxlQUFlO0VBQUUsT0FBTztFQUN4QixjQUFjO0VBQUUsT0FBTztFQUN2QixVQUFVO0VBQUUsT0FBTyxFQUNwQjs7QUFFRDs7R0FFRztBQUVIO0VBQ0Usa0JBQWtCLEVBQ25COztBQUVEOzs7OztHQUtHO0FBRUg7O0VBRUUscUJBQXFCLEVBQ3RCOztBQUVEOzs7Ozs7R0FNRztBQUVIOzs7O0VBSUUsMkJBQTJCO0VBQUUsT0FBTztFQUNwQyxnQkFBZ0I7RUFBRSxPQUFPLEVBQzFCOztBQUVEOztHQUVHO0FBRUg7O0VBRUUsZ0JBQWdCLEVBQ2pCOztBQUVEOztHQUVHO0FBRUg7O0VBRUUsVUFBVTtFQUNWLFdBQVcsRUFDWjs7QUFFRDs7O0dBR0c7QUFFSDtFQUNFLG9CQUFvQixFQUNyQjs7QUFFRDs7Ozs7O0dBTUc7QUFFSDs7RUFFRSx1QkFBdUI7RUFBRSxPQUFPO0VBQ2hDLFdBQVc7RUFBRSxPQUFPLEVBQ3JCOztBQUVEOzs7O0dBSUc7QUFFSDs7RUFFRSxhQUFhLEVBQ2Q7O0FBRUQ7OztHQUdHO0FBRUg7RUFDRSw4QkFBOEI7RUFBRSxPQUFPO0VBQ3ZDLHdCQUF3QjtFQUFFLE9BQU8sRUFDbEM7O0FBRUQ7Ozs7R0FJRztBQUVIOztFQUVFLHlCQUF5QixFQUMxQjs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsMEJBQTBCO0VBQzFCLGNBQWM7RUFDZCwrQkFBK0IsRUFDaEM7O0FBRUQ7OztHQUdHO0FBRUg7RUFDRSxVQUFVO0VBQUUsT0FBTztFQUNuQixXQUFXO0VBQUUsT0FBTyxFQUNyQjs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsZUFBZSxFQUNoQjs7QUFFRDs7O0dBR0c7QUFFSDtFQUNFLGtCQUFrQixFQUNuQjs7QUFFRDtnRkFDZ0Y7QUFFaEY7O0dBRUc7QUFFSDtFQUNFLDBCQUEwQjtFQUMxQixrQkFBa0IsRUFDbkI7O0FBRUQ7O0VBRUUsV0FBVyxFQUNaOztBQU1ELHdCQUF3QjtBRXBieEIsbUJBQW1CO0FBSW5CLFVBQVU7QUNKVixnQ0FBZ0M7QUFTaEMsMkJBQTJCO0FBYzNCLGdDQUFnQztBQXdCaEMsdUJBQXVCO0FBbUJ2QixnQ0FBZ0M7QUEyQmhDLHVCQUF1QjtBQWN2QiwrQkFBK0I7QUF3Qi9CLG9CQUFvQjtBQTJCcEIsb0JBQW9CO0FBY3BCLGtDQUFrQztBQWdCbEMsNkJBQTZCO0FDbEk3QjtFQ2pFSSx1QkFBdUI7RUFDdkIsWUFBWTtFQUNaLGVBQWU7RUFDZixjQUFjO0VBQ2Qsb0JBQW9CO0VBQ3BCLG1CQUFtQjtFQUNuQixzQkFBc0I7RUFDdEIsZ0JBQWdCLEVBQ25COztBQ1REO0VEV0MsY0FBYztFQUNkLGFBQWE7RUFDYixlQUFlO0VBQ2YsMEJBQTBCLEVBQzFCOztBRUZEO0VGSUksdUJBQXVCO0VBQ3ZCLFlBQVksRUFDZjs7QUcyQkQ7RUh6Qkk7Ozs7T0FJRztFQUNILGlCQUFpQjtFQUFTLE9BQU87RUFDakMsb0JBQW9CO0VBQU0sT0FBTztFQUNqQyx3QkFBd0I7RUFBRSxPQUFPLEVBQ3BDOztBR29CRDtFSGxCRSxvQkFBb0I7RUFDcEIsbUJBQW1CO0VBQ25CLHdCQUF3QixFQTZCekI7RUdiRDtJSGRJLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsV0FBVztJQUNYLFdBQVc7SUFDWCwwQkFBMEI7SUFDMUIsa0JBQWtCO0lBQ2xCLG1CQUFtQixFQUNwQjtFR09IO0lITEksZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixzQkFBc0I7SUFDdEIsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQiwwQkFBMEI7SUFDMUIsbUJBQW1CLEVBV3BCO0lHWkg7TUhHUSxZQUFZO01BQ1osbUJBQW1CO01BQ25CLHNCQUFzQjtNQUN0QixXQUFXO01BQ1gsWUFBWTtNQUNaLDBCQUEwQjtNQUMxQixhQUFhO01BQ2IsWUFBWSxFQUNmOztBSWVMO0VKWEksYUFBYTtFQUNiLGNBQWM7RUFBRSxpS0FBaUs7RUFDakwsV0FBVztFQUNYLGlCQUFpQjtFQUNqQixtQkFBbUI7RUFDbkIsWUFBWSxFQTJCZjtFSXJCRDtJSkpNLFlBQVk7SUFDWix1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCx1QkFBdUI7SUFDdkIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixvQkFBb0I7SUFDcEIsaUJBQWlCLEVBSWxCO0lJWEw7TUpTUSxxQkFBcUI7TUFBRSxxQ0FBcUMsRUFDN0Q7RUlWUDtJSmNRLHVCQUF1QjtJQUN2QixZQUFZLEVBQ2Y7O0FLM0ZMLGtHQUFrRztBQTBCbEcsZUFBZTtBQW9EZix1R0FBdUc7QUF5QnZHLHFDQUFxQztBQTJDckMsZ0NBQWdDO0FBVWhDLHNCQUFzQjtBQVl0QiwyQkFBMkI7QUFDM0I7Ozs7O0VBS0U7QUY5S0Y7RUFDQyx1QkFBdUI7RUFDdkIsZ0JBQWdCLEVBTWhCO0VBUkQ7OztJQU1FLHVCQUF1QixFQUN2Qjs7QUFFRjtFQUNDLHlEQUF5RDtFQUN6RCx1QkFBdUIsRUFDdkI7O0FBQ0Q7RUFDQyxjQUFjLEVBQ2Q7O0FBQ0Q7RUFDQyxtQkFBbUIsRUFDbkI7O0FBQ0Q7RUFDQyx5QkFBaUI7S0FBakIsc0JBQWlCO1VBQWpCLGlCQUFpQixFQUNqQjs7QUFDRDs7RUFFQyxhQUFhLEVBSWI7RUFORDs7SUFJRSxjQUFjLEVBQ2Q7O0FBRUY7OztFQUdFLHFDQUFxQztFQUNyQyw4QkFBOEIsRUFLL0I7RUFURDs7O0lBTUcscUNBQXFDO0lBQ3JDLDhCQUE4QixFQUM5Qjs7QUFFSDtFQUNDLHlCQUF5QixFQUN6Qjs7QUFFRDtFQUNJLGNBQWMsRUFDakI7O0FSdVpELHdCQUF3QjtBU2pjeEI7RUVnQkksYUZkZ0M7RUVlaEMsa0JGZmdDLEVBSWxDO0VBTkY7SUFJRyxrQkFBa0IsRUFDbEI7O0FBTEg7RUFRRSxzQkFBc0I7RUVRcEIsYUZQZ0M7RUVRaEMsa0JGUmdDO0VBQ2xDLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsbUJBQW1CO0VBQ25CLDhCQUE4QixFQUk5QjtFQWpCRjtJQWVHLDhCQUE4QixFQUM5Qjs7QUFoQkg7RUFtQkUsZUFBZTtFQUNmLGVBQWU7RUFDZixhQUFhO0VBQ2IsV0FBVztFQUNYLHVCQUF1QjtFQUN2Qix1QkFBdUI7RUFDdkIsbUJBQW1CLEVBQ25COztBQUVGO0VBQ0MsZUFBZTtFQUNmLGFBQWEsRUFDYjs7QUFDRDtFQUNDLGFBQWE7RUFDYixtQkFBbUIsRUFJbkI7RUFORDtJQUlFLGdCQUFnQixFQUNoQjs7QUFFRjtFQUNDLHNCQUFzQjtFQUN0QixhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixvQkFBb0IsRUFDcEI7O0FBQ0Q7RUFDQyxzQkFBc0I7RUFDdEIsZ0JBQWdCO0VBQ2hCLGFBQWEsRUFDYjs7QUFDRDtFQUNDLGdCQUFnQjtFQUNoQixzQkFBc0I7RUFDdEIsb0JBQW9CO0VBQ3BCLG1CQUFtQjtFQUNuQixZQUFZO0VBQ1osT0FBTztFQUNKLG9CQUFvQixFQUN2Qjs7QUFDRDtFQUNDLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEIsZUFBZSxFQUNmOztBQUNEO0VBQ0MsbUJBQW1CLEVBQ25COztBQUNEO0VBQ0MsZUFBZTtFQUNaLGFBQWEsRUFDaEI7O0FBQ0Q7RUFDQyxtQkFBbUIsRUFNbkI7O0FBQ0Q7RUFDQyxhQUFhLEVBQ2I7O0FBRUQ7RUFDQyxpQkFBaUIsRUFDakI7O0FBSUQ7RUFDQyxtQkFBbUIsRUFDbkI7O0FBQ0Q7RUFDQyxtQkFBbUIsRUFDbkI7O0FBQ0Q7RUFDQyxtQkFBbUIsRUFDbkI7O0FBQ0Q7RUFDQyxjQUFjO0VBQ1gsMENBQXNCO0VBQ3RCLGtCQUFrQjtFQUNsQixZQUFZLEVBUWY7RUFaRDtJQU9NLHdDQUFhO0lBQ2IsZUFBZTtJQUNmLG1CQUFtQixFQUN0Qjs7QUhoSEg7RUFDQyx1SUFDd0I7RUFEeEIsMEhBQ3dCLEVBOEN4QjtFQWhERDtJQUtFLHFCQUFjO0lBQWQsc0JBQWM7SUFBZCxxQkFBYztJQUFkLGNBQWM7SUFDZCx5QkFBd0I7SUFBeEIsZ0NBQXdCO1FBQXhCLHNCQUF3QjtZQUF4Qix3QkFBd0I7SUFDeEIsMEJBQW9CO0lBQXBCLDRCQUFvQjtRQUFwQix1QkFBb0I7WUFBcEIsb0JBQW9CLEVBQ3BCO0VBUkY7SUFVRSxnQkFBZ0IsRUFDaEI7RUFYRjtJQWFFLFlBQVksRUFDWjtFQWRGO0lBZ0JFLGtCSkhtQyxFSUtuQztFQWxCRjtJQW9CRSxrQkpQbUM7SUlRbkMsbUJBQ0EsRUFBQztFQXRCSDtJQXdCSyxxQkFBYztJQUFkLHNCQUFjO0lBQWQscUJBQWM7SUFBZCxjQUFjO0lBQ2QscUJBQXFCLEVBS3hCO0lBOUJGO01BMkJLLDBCQUEwQjtNQUMxQixZQUFZLEVBQ1o7RUE3Qkw7SUFnQ0UsY0FBYyxFQU9kO0lBdkNGO01Ba0NHLGFBQWEsRUFDYjtJQW5DSDtNQXFDRyxtQkFBbUIsRUFDbkI7RUF0Q0g7SUEwQ0csb0JKMUIrQixFSTJCL0I7RUEzQ0g7SUE2Q0csb0JKOUIrQixFSStCL0I7O0FDOUNIO0VBQ0Msc0JBQXNCO0VBQ3RCLGtCQUFrQixFQUNsQjs7QUFDRDs7RUFFQyxnQkFBZ0IsRUFDaEI7O0FBQ0Q7RUFDQyxjQUFjO0VBQ2QsWUFBWTtFQUNaLGdCQUFnQixFQUNoQjs7QUFDRDtFQUVDLG1CQUFtQixFQTBCbkI7RUE1QkQ7SUlYUSxhQUFhO0lBQ2IsZUFBZSxFQUNsQjtFSlNMO0lJUFEsWUFBWSxFQUNmO0VKTUw7SUFLRSxtQkFBbUI7SUFDbkIsWUFBWSxFQUVaO0VBUkY7SUFhRSxzQkFBc0I7SUFDdEIsYUFBYTtJQUNiLHVCQUF1QjtJQUNyQixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCx1QkFBdUI7SUFDdkIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixvQkFBb0I7SUFDcEIsd0JBQXdCLEVBSTFCOztBQUVGO0VBQ0MscUJBQWM7RUFBZCxzQkFBYztFQUFkLHFCQUFjO0VBQWQsY0FBYztFQUNiLDBCQUFvQjtFQUFwQiw0QkFBb0I7TUFBcEIsdUJBQW9CO1VBQXBCLG9CQUFvQjtFQUNwQiw2QkFBdUI7RUFBdkIsOEJBQXVCO0VBQXZCLCtCQUF1QjtNQUF2QiwyQkFBdUI7VUFBdkIsdUJBQXVCO0VBQ3ZCLG9CQUFvQixFQUNyQjs7QUFDRDtFQUNDLFdBQVc7RUFDWCxhQUFhO0VBQ2IsMEJBQTBCLEVBQzFCOztBQUVEO0VBQ0MscUJBQWM7RUFBZCxzQkFBYztFQUFkLHFCQUFjO0VBQWQsY0FBYztFQUNkLDhCQUE4QjtFQUM5QixvQkFBb0IsRUFpQnBCO0VBcEJEO0lBS0UsaUJBQWlCLEVBQ2pCO0VBTkY7SUFRRSx5QkFBaUI7UUFBakIsOEJBQWlCO1lBQWpCLGlCQUFpQjtJQUNqQixxQkFBYztJQUFkLHNCQUFjO0lBQWQscUJBQWM7SUFBZCxjQUFjO0lBQ1oseUJBQXdCO0lBQXhCLGdDQUF3QjtRQUF4QixzQkFBd0I7WUFBeEIsd0JBQXdCO0lBQ3hCLGFBQWEsRUFDZjtFQVpGO0lBY0Usb0JBQVE7SUFBUixnQkFBUTtRQUFSLFlBQVE7WUFBUixRQUFRLEVBQ1I7RUFmRjtJQWlCRSxrQkFBa0I7SUFDbEIsaUJBQWlCLEVBQ2pCOztBS3pFRjtFQUVFLGNBQWMsRUFDZDs7QUNIRjtFRm1CSSxhRWpCZ0M7RUZrQmhDLGtCRWxCZ0MsRUFJbEM7RUFORjtJQUlHLGtCQUFrQixFQUNsQjs7QUFMSDtFQVFFLHNCQUFzQjtFQUN0QixrQkFBa0I7RUFDbEIsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsOEJBQThCLEVBSTlCO0VBakJGO0lBZUcsOEJBQThCLEVBQzlCOztBQWhCSDtFQW1CRSxlQUFlO0VBQ2YsZUFBZTtFQUNmLGFBQWE7RUFDYixXQUFXO0VBQ1gsdUJBQXVCO0VBQ3ZCLHVCQUF1QjtFQUN2QixtQkFBbUIsRUFDbkI7O0FDMUJGO0VIbUJJLGFHakJnQztFSGtCaEMsa0JHbEJnQyxFQUlsQztFQU5GO0lBSUcsa0JBQWtCLEVBQ2xCOztBQUxIO0VBUUUsc0JBQXNCO0VBQ3RCLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLG1CQUFtQjtFQUNuQiw4QkFBOEIsRUFJOUI7RUFqQkY7SUFlRyw4QkFBOEIsRUFDOUI7O0FBaEJIO0VBbUJFLGVBQWU7RUFDZixlQUFlO0VBQ2YsYUFBYTtFQUNiLFdBQVc7RUFDWCx1QkFBdUI7RUFDdkIsdUJBQXVCO0VBQ3ZCLG1CQUFtQixFQUNuQjs7QUMxQkY7RUFFRSw4QkFBOEIsRUFDOUI7O0FBSEY7RUFLRSxVQUFVO0VBRVYseUJBQXlCO0VBQ3pCLHVCQUF1QixFQUV2Qjs7QUFWRjtFQVlFLGlCQUFpQjtFQUNqQixlQUFlLEVBQ2Y7O0FBZEY7RUFnQkUsMkJBQTJCO0VBQzNCLDhCQUE4QjtFQUM5Qiw0QkFBNEI7RUFDNUIsNkJBQTZCLEVBSTdCO0VBdkJGO0lBcUJHLG1CQUFtQixFQUNuQjs7QUF0Qkg7RUF5QkUsc0JBQXNCO0VBQ3RCLGFBQWE7RUFDYixvQkFBb0IsRUFDcEI7O0FBNUJGO0VBOEJFLG9CQUFvQjtFQUNwQiwwQkFBMEIsRUFRMUI7RUF2Q0Y7SUFpQ0csY0FBYztJQUNkLDJCQUEyQixFQUMzQjtFQW5DSDtJQXFDRyxlQUFlLEVBQ2Y7O0FDdENIO0VBRUUsMEJkRHdCO0VjRXhCLFlkSGtCLEVjSWxCOztBQUpGO0VBTUUsMEJkSHVCO0VjSXZCLFlkSGlCLEVjSWpCOztBQVJGO0VBVUUsMEJkSnFCLEVjS3JCOztBWlhGO0VBQ0ksOEJBQThCO0VBQzlCLGtCQUFrQjtFQUNsQixrQkFBa0IsRUFDckI7O0FBQ0Q7RUFDSSx1QkFBdUI7RUFDdkIsc0JBQXNCO0VBQ3RCLGtDQUFrQyxFQUNyQzs7QUFDRDtFQUNJLHVCQUF1QjtFQUN2QixnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLGdCQUFnQixFQUNuQjs7QUFDRDtFQUVRLHVCQUF1QixFQUMxQjs7QUFRTDtFQUNJLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsbUJBQW1CO0VBQ25CLG1CQUFtQixFQUN0Qjs7QUFDRDtFQUNJLHFCQUFxQixFQUN4Qjs7QUFDRDtFQUNJLHNCQUFzQixFQUN6Qjs7QUFDRDtFQUNJLG1CQUFtQjtFQUNuQixPQUFNO0VBQ04sUUFBTztFQUdQLHVCQUF1QjtFQUN2QixVQUFVLEVBQ2I7O0FBQ0Q7RUFFUSxrQkFBa0IsRUFDckI7O0FBSEw7RUFLUSxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLGtCQUFrQixFQUNyQjs7QUFFTDtFQUNJLGdCQUFnQixFQUNuQjs7QUFDRDtFQUNJLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osNkJBQTZCLEVBQ2hDOztBQUNEO0VBQ0ksbUJBQW1CO0VBQ25CLFNBQVM7RUFDVCxRQUFRO0VBRVIsd0JBQXdCLEVBQzNCOztBQUNEO0VBRUksbUJBQW1CO0VBQ25CLFVBQVU7RUFDVixRQUFRO0VBQ1Isc0JBQXNCLEVBQ3pCOztBQUVEO0VBQ0ksc0JBQXNCO0VBQ3RCLGFBQWE7RUFDYixhQUFhO0VBQ2IsZ0JBQWdCO0VBQ2hCLG1CQUFtQjtFQUNuQixvQkFBb0I7RUFDcEIsb0JBQW9CO0VBQ3BCLG1CQUFtQjtFTzlFbkIsYUFBYTtFQUFiLGFBQWEsRVBnSGhCO0VBMUNEO0lPcEVRLHNCQUFzQjtJQUN0QixvQkFBb0IsRUFDdkI7RVBrRUw7SU9wRVEsc0JBQXNCO0lBQ3RCLG9CQUFvQixFQUN2QjtFUGtFTDtJQVlRLHVCQUF1QjtJQUN2QixxQkFBcUIsRUFFeEI7RUFmTDtJQWlCUSxnQkFBZ0IsRUFDbkI7RUFsQkw7SUFvQlEsYUFBYTtJQUNiLGFBQWEsRUFDaEI7RUF0Qkw7SUF3QlEsWUFBWSxFQUNmO0VBekJMO0lBMkJRLHVCQUF1QjtJQUN2QixxQkFBcUIsRUFFeEI7RUE5Qkw7SUFrQ1EsZUFBZSxFQUNsQjtFQW5DTDtJQXFDUSxtQkFBbUI7SUFDbkIsVUFBVTtJQUNWLFVBQVU7SUFDVix5Q0FBb0I7WUFBcEIsaUNBQW9CLEVBQ3ZCOztBYTFITDtFQUNDLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDaEIsdUJBQXVCO0VBQ3ZCLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsaUJBQWlCO0VBQ2pCLHNCQUFzQjtFQUN0QixrQkFBa0IsRUFDckI7O0FDVEQ7RUFDTSx3QkFBd0I7RUFBRSxhQUFhO0VBQUUsWUFBWTtFQUFFLGlCQUFnQixFQUFHOztBQURoRjtFQUdHLGFBQWEsRUFDZDs7QUFKRjtFQU1HLGtCQUFrQixFQUNuQjs7QUFQRjtFQVNFLFlBQVksRUFDWjs7QUFWRjtFQVlFLGVBQWUsRUFDZjs7QUFiRjtFQWVFLFdBQVcsRUFDWDs7QUNoQkY7RUFDQyxzQkFBc0I7RUFDdEIsYUFBYSxFQUNiOztBQUNEO0VBQ0MscUJBQWM7RUFBZCxzQkFBYztFQUFkLHFCQUFjO0VBQWQsY0FBYztFQUNkLHlCQUF3QjtFQUF4QixnQ0FBd0I7TUFBeEIsc0JBQXdCO1VBQXhCLHdCQUF3QjtFQUN4QixtQkFBbUIsRUFVbkI7RUFiRDs7SUFNRSxnQkFBZ0I7SUFDaEIsbUJBQW1CLEVBQ25CO0VBUkY7SUFVRSxzQkFBc0I7SUFDdEIsb0JBQW9CLEVBQ3BCOztBQ2hCRjtFQUNDLHFCQUFjO0VBQWQsc0JBQWM7RUFBZCxxQkFBYztFQUFkLGNBQWM7RUFDZCwwQkFBb0I7RUFBcEIsNEJBQW9CO01BQXBCLHVCQUFvQjtVQUFwQixvQkFBb0I7RUFDcEIsOEJBQThCO0VBQzdCLDRCQUE0QjtFQUM1Qiw2QkFBNkI7RUFDN0IsZUFBZSxFQVFoQjtFQWREO0lBUUcsMkJBQTJCLEVBQzNCO0VBVEg7SUFXSSxzQkFBc0I7SUFDdEIsa0JBQWtCLEVBQ25COztBQUlIO0VBQ0MsWUFBWSxFQUNaOztBQ25CRDtFQUNFLHVCQUF1QjtFQUN2QixjQUFjLEVBQ2Y7O0FBRUQ7RUFDRSxZQUFZO0VBQ1osc0JBQXNCO0VBQ3RCLDJCQUEyQjtFQUMzQixxQkFBcUIsRUFpQnRCO0VBckJEO0lBTUksaUJBQWlCO0lBQ2pCLFdBQVc7SUFDWCxzQkFBc0I7SUFDdEIsYUFBYSxFQUNkO0VBVkg7SUFhSSxZQUFZLEVBQ2I7RUFkSDtJQWlCSSxZQUFZO0lBQ1osdUJBQXVCO0lBQ3ZCLGlCQUFpQixFQUNsQjs7QUFHSDtFQUVJLG9CQUFvQixFQUNyQjs7QUFHSDtFQUNFLGFBQWEsRUFDZDs7QUFFRDtFQUNFLGdCQUFnQjtFQUNoQixzQkFBc0IsRUFDdkI7O0FBQ0Q7RUFDRSxzQkFBc0I7RUFDdEIsc0JBQXNCLEVBQ3ZCOztBQUNEO0VBQ0ksbUJBQW1CLEVBSXRCO0VBTEQ7SUFHTSxnQkFBZ0IsRUFDakI7O0FBR0w7RUFDRSxzQkFBc0I7RUFDdEIsYUFBYTtFQUNiLGtCQUFrQjtFQUNsQixvQkFBb0I7RUFDcEIsMEJBQTBCLEVBaUIzQjtFQXRCRDtJQVFJLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsMEJBQTBCO0lBQzFCLGdCQUFnQjtJQUNoQixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLHVCQUF1QjtJQUN2QixZQUFZLEVBQ2I7RUFoQkg7SUFtQkksZ0JBQWdCO0lBQ2hCLG1CQUFtQixFQUNwQjs7QUMxRUg7RUFDQyxzQkFBc0I7RUFDdEIsWUFBWTtFQUNaLGFBQWE7RUFDYixtQkFBbUIsRUFDbkI7O0FDTEQ7RUFDRSxtQkFBbUI7RUFDbkIsVUFBVTtFQUNWLGlCQUFpQjtFQUNqQix5Q0FBaUM7VUFBakMsaUNBQWlDO0VBQ2pDLGtDQUEwQjtVQUExQiwwQkFBMEI7RUFDMUIsZ0RBQXdDO0VBQXhDLHdDQUF3QyxFQUN6Qzs7QUFDRDtFQUVJLGtDQUFpQjtVQUFqQiwwQkFBaUIsRUFFbEI7O0FDWkg7RUFDQyxnQkFBZ0I7RUFDaEIsT0FBTztFQUNQLFFBQVE7RUFDUixZQUFZO0VBQ1osYUFBYTtFQUNiLHNDQUFzQixFQUN0Qjs7QUFDRDtFQUNDLHVCQUF1QjtFQUN2QixhQUFhO0VBQ2IscUJBQXFCO0VBQ3JCLHVCQUF1QjtFQUN2Qix3Q0FBc0I7VUFBdEIsZ0NBQXNCLEVBQ3RCOztBQUNEO0VBQ0MsY0FBYztFQUNkLDhCQUE4QixFQUM5Qjs7QUFDRDtFQUNDLGFBQWEsRUFJYjtFQUxEO0lBR0UsZUFBZSxFQUNmOztBQUVGO0VBQ0Msc0JBQXNCO0VBQ3RCLFdBQVc7RUFDWCxnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLGVBQWUsRUFJZjtFQVREO0lBT0UsNEJBQTRCLEVBQzVCOztBQ2pDRjtFQUNDLGdCQUFnQjtFQUNoQixVQUFVO0VBQ1YsUUFBUTtFQUNSLFNBQVM7RUFDVCxtQkFBbUI7RUFDbkIsb0JBQW9CLEVBVXBCO0VBaEJEO0lBUUUsc0JBQXNCLEVBQ3RCO0VBVEY7SUFXRSx3QkFBd0IsRUFJeEI7SUFmRjtNQWFHLGFBQWEsRUFDYjs7QUFJSDtFQUNJLDhCQUFzQjtVQUF0QixzQkFBc0I7RUFDdEIscUNBQTZCO1VBQTdCLDZCQUE2QjtFQUM3QiwrQ0FBdUM7VUFBdkMsdUNBQXVDO0VBQ3ZDLGdDQUF3QjtVQUF4Qix3QkFBd0IsRUFDM0I7O0FBQ0Q7RUFDSTtJQUNJLGFBQWEsRUFBQTtFQUVqQjtJQUNJLFdBQVcsRUFBQSxFQUFBOztBQUxuQjtFQUNJO0lBQ0ksYUFBYSxFQUFBO0VBRWpCO0lBQ0ksV0FBVyxFQUFBLEVBQUE7O0F6QjRibkIsc0JBQXNCO0EwQnpkdEI7RUFDQyxpQkFBaUIsRUFDakIiLCJmaWxlIjoiYXBwbGljYXRpb24uY3NzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCIvKlNNQUNTUyBjYXRlZ29yaXplcyBzdHlsZXMgYXMgZm9sbG93czpcblxuQmFzZSBzdHlsZXMgYXJlIHRoZSBkZWZhdWx0IHN0eWxlcyBmb3IgSFRNTCBlbGVtZW50cyAoaDEsIHAsIHByZSwgZXRjLikuXG5MYXlvdXQgc3R5bGVzIGFyZSBncmlkIGFuZCBvdGhlciByZXVzYWJsZSBsYXlvdXQgY2xhc3Nlcy4gQWxsIG9mIHRoZXNlIGNsYXNzZXMgYXJlIHByZWZpeGVkIHdpdGggbC0gKGUuZy4gLmwtc2lkZWJhcikuXG5BbGwgcmVtYWluaW5nIENTUyBpcyBjbGFzc2lmaWVkIGludG8gbW9kdWxlcywgd2l0aCBjbGFzc2VzIG5hbWVzcGFjZWQgYnkgbW9kdWxlLiBGb3IgZXhhbXBsZSwgYW4gYWxlcnQgbW9kdWxlIG1pZ2h0IGhhdmUgdGhlIGZvbGxvd2luZyBydWxlczogLmFsZXJ0LCAuYWxlcnQtbWVzc2FnZSwgLmFsZXJ0LWljb24uXG5UaGVzZSBwcmFjdGljZXMgYXJlIHN0cm9uZ2x5IHJlY29tbWVuZGVkOlxuXG5Bdm9pZCBJRHMgaW4gQ1NTXG5NaW5pbWl6ZSB0aGUgZGVwdGggb2YgQ1NTIHNlbGVjdG9yc1xuVXNlIGNsYXNzZXMgdG8gZGVmaW5lIHZpc3VhbCBwcmVzZW50YXRpb24gcGF0dGVybnMxKi9cbi8qIERvIG5vdCByZW1vdmUgdGhlIGNvbW1lbnRzIGJlbG93LiBJdCdzIHRoZSBtYXJrZXJzIHVzZWQgYnkgZ3VscC1pbmplY3QgdG8gaW5qZWN0XG4gICBhbGwgeW91ciBzYXNzIGZpbGVzIGF1dG9tYXRpY2FsbHkgKi9cbi8qISBub3JtYWxpemUuY3NzIHYzLjAuMyB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9cbi8qKlxuICogMS4gU2V0IGRlZmF1bHQgZm9udCBmYW1pbHkgdG8gc2Fucy1zZXJpZi5cbiAqIDIuIFByZXZlbnQgaU9TIGFuZCBJRSB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIGRldmljZSBvcmllbnRhdGlvbiBjaGFuZ2UsXG4gKiAgICB3aXRob3V0IGRpc2FibGluZyB1c2VyIHpvb20uXG4gKi9cbmh0bWwge1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgLyogMSAqL1xuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqL1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFJlbW92ZSBkZWZhdWx0IG1hcmdpbi5cbiAqL1xuYm9keSB7XG4gIG1hcmdpbjogMDsgfVxuXG4vKiBIVE1MNSBkaXNwbGF5IGRlZmluaXRpb25zXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYW55IEhUTUw1IGVsZW1lbnQgaW4gSUUgOC85LlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBkZXRhaWxzYCBvciBgc3VtbWFyeWAgaW4gSUUgMTAvMTFcbiAqIGFuZCBGaXJlZm94LlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBtYWluYCBpbiBJRSAxMS5cbiAqL1xuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tYWluLFxubWVudSxcbm5hdixcbnNlY3Rpb24sXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGBpbmxpbmUtYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOC85LlxuICogMi4gTm9ybWFsaXplIHZlcnRpY2FsIGFsaWdubWVudCBvZiBgcHJvZ3Jlc3NgIGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICovXG5hdWRpbyxcbmNhbnZhcyxcbnByb2dyZXNzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBQcmV2ZW50IG1vZGVybiBicm93c2VycyBmcm9tIGRpc3BsYXlpbmcgYGF1ZGlvYCB3aXRob3V0IGNvbnRyb2xzLlxuICogUmVtb3ZlIGV4Y2VzcyBoZWlnaHQgaW4gaU9TIDUgZGV2aWNlcy5cbiAqL1xuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwOyB9XG5cbi8qKlxuICogQWRkcmVzcyBgW2hpZGRlbl1gIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LzEwLlxuICogSGlkZSB0aGUgYHRlbXBsYXRlYCBlbGVtZW50IGluIElFIDgvOS8xMC8xMSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLlxuICovXG5baGlkZGVuXSxcbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG4vKiBMaW5rc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgY29sb3IgZnJvbSBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKi9cbmEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxuXG4vKipcbiAqIEltcHJvdmUgcmVhZGFiaWxpdHkgb2YgZm9jdXNlZCBlbGVtZW50cyB3aGVuIHRoZXkgYXJlIGFsc28gaW4gYW5cbiAqIGFjdGl2ZS9ob3ZlciBzdGF0ZS5cbiAqL1xuYTphY3RpdmUsXG5hOmhvdmVyIHtcbiAgb3V0bGluZTogMDsgfVxuXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS8xMC8xMSwgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5hYmJyW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQ7IH1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxlIHNldCB0byBgYm9sZGVyYCBpbiBGaXJlZm94IDQrLCBTYWZhcmksIGFuZCBDaHJvbWUuXG4gKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZDsgfVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBTYWZhcmkgYW5kIENocm9tZS5cbiAqL1xuZGZuIHtcbiAgZm9udC1zdHlsZTogaXRhbGljOyB9XG5cbi8qKlxuICogQWRkcmVzcyB2YXJpYWJsZSBgaDFgIGZvbnQtc2l6ZSBhbmQgbWFyZ2luIHdpdGhpbiBgc2VjdGlvbmAgYW5kIGBhcnRpY2xlYFxuICogY29udGV4dHMgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBtYXJnaW46IDAuNjdlbSAwOyB9XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbiAqL1xubWFyayB7XG4gIGJhY2tncm91bmQ6ICNmZjA7XG4gIGNvbG9yOiAjMDAwOyB9XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYW5kIHZhcmlhYmxlIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7IH1cblxuLyoqXG4gKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBhZmZlY3RpbmcgYGxpbmUtaGVpZ2h0YCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07IH1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtOyB9XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSBib3JkZXIgd2hlbiBpbnNpZGUgYGFgIGVsZW1lbnQgaW4gSUUgOC85LzEwLlxuICovXG5pbWcge1xuICBib3JkZXI6IDA7IH1cblxuLyoqXG4gKiBDb3JyZWN0IG92ZXJmbG93IG5vdCBoaWRkZW4gaW4gSUUgOS8xMC8xMS5cbiAqL1xuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuOyB9XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIEFkZHJlc3MgbWFyZ2luIG5vdCBwcmVzZW50IGluIElFIDgvOSBhbmQgU2FmYXJpLlxuICovXG5maWd1cmUge1xuICBtYXJnaW46IDFlbSA0MHB4OyB9XG5cbi8qKlxuICogQWRkcmVzcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIEZpcmVmb3ggYW5kIG90aGVyIGJyb3dzZXJzLlxuICovXG5ociB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBoZWlnaHQ6IDA7IH1cblxuLyoqXG4gKiBDb250YWluIG92ZXJmbG93IGluIGFsbCBicm93c2Vycy5cbiAqL1xucHJlIHtcbiAgb3ZlcmZsb3c6IGF1dG87IH1cblxuLyoqXG4gKiBBZGRyZXNzIG9kZCBgZW1gLXVuaXQgZm9udCBzaXplIHJlbmRlcmluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbmNvZGUsXG5rYmQsXG5wcmUsXG5zYW1wIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICBmb250LXNpemU6IDFlbTsgfVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogS25vd24gbGltaXRhdGlvbjogYnkgZGVmYXVsdCwgQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWCBhbGxvdyB2ZXJ5IGxpbWl0ZWRcbiAqIHN0eWxpbmcgb2YgYHNlbGVjdGAsIHVubGVzcyBhIGBib3JkZXJgIHByb3BlcnR5IGlzIHNldC5cbiAqL1xuLyoqXG4gKiAxLiBDb3JyZWN0IGNvbG9yIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gKiAgICBLbm93biBpc3N1ZTogYWZmZWN0cyBjb2xvciBvZiBkaXNhYmxlZCBlbGVtZW50cy5cbiAqIDIuIENvcnJlY3QgZm9udCBwcm9wZXJ0aWVzIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gKiAzLiBBZGRyZXNzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgY29sb3I6IGluaGVyaXQ7XG4gIC8qIDEgKi9cbiAgZm9udDogaW5oZXJpdDtcbiAgLyogMiAqL1xuICBtYXJnaW46IDA7XG4gIC8qIDMgKi8gfVxuXG4vKipcbiAqIEFkZHJlc3MgYG92ZXJmbG93YCBzZXQgdG8gYGhpZGRlbmAgaW4gSUUgOC85LzEwLzExLlxuICovXG5idXR0b24ge1xuICBvdmVyZmxvdzogdmlzaWJsZTsgfVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGB0ZXh0LXRyYW5zZm9ybWAgaW5oZXJpdGFuY2UgZm9yIGBidXR0b25gIGFuZCBgc2VsZWN0YC5cbiAqIEFsbCBvdGhlciBmb3JtIGNvbnRyb2wgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgYHRleHQtdHJhbnNmb3JtYCB2YWx1ZXMuXG4gKiBDb3JyZWN0IGBidXR0b25gIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3gsIElFIDgvOS8xMC8xMSwgYW5kIE9wZXJhLlxuICogQ29ycmVjdCBgc2VsZWN0YCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94LlxuICovXG5idXR0b24sXG5zZWxlY3Qge1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsgfVxuXG4vKipcbiAqIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4gKiAgICBhbmQgYHZpZGVvYCBjb250cm9scy5cbiAqIDIuIENvcnJlY3QgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSBgaW5wdXRgIHR5cGVzIGluIGlPUy5cbiAqIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4gKiAgICBgaW5wdXRgIGFuZCBvdGhlcnMuXG4gKi9cbmJ1dHRvbixcbmh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSxcbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMiAqL1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIC8qIDMgKi8gfVxuXG4vKipcbiAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXG4gKi9cbmJ1dHRvbltkaXNhYmxlZF0sXG5odG1sIGlucHV0W2Rpc2FibGVkXSB7XG4gIGN1cnNvcjogZGVmYXVsdDsgfVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCA0Ky5cbiAqL1xuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7IH1cblxuLyoqXG4gKiBBZGRyZXNzIEZpcmVmb3ggNCsgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gKiB0aGUgVUEgc3R5bGVzaGVldC5cbiAqL1xuaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsOyB9XG5cbi8qKlxuICogSXQncyByZWNvbW1lbmRlZCB0aGF0IHlvdSBkb24ndCBhdHRlbXB0IHRvIHN0eWxlIHRoZXNlIGVsZW1lbnRzLlxuICogRmlyZWZveCdzIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgcmVzcGVjdCBib3gtc2l6aW5nLCBwYWRkaW5nLCBvciB3aWR0aC5cbiAqXG4gKiAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGBjb250ZW50LWJveGAgaW4gSUUgOC85LzEwLlxuICogMi4gUmVtb3ZlIGV4Y2VzcyBwYWRkaW5nIGluIElFIDgvOS8xMC5cbiAqL1xuaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLFxuaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBGaXggdGhlIGN1cnNvciBzdHlsZSBmb3IgQ2hyb21lJ3MgaW5jcmVtZW50L2RlY3JlbWVudCBidXR0b25zLiBGb3IgY2VydGFpblxuICogYGZvbnQtc2l6ZWAgdmFsdWVzIG9mIHRoZSBgaW5wdXRgLCBpdCBjYXVzZXMgdGhlIGN1cnNvciBzdHlsZSBvZiB0aGVcbiAqIGRlY3JlbWVudCBidXR0b24gdG8gY2hhbmdlIGZyb20gYGRlZmF1bHRgIHRvIGB0ZXh0YC5cbiAqL1xuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87IH1cblxuLyoqXG4gKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgYW5kIENocm9tZS5cbiAqIDIuIEFkZHJlc3MgYGJveC1zaXppbmdgIHNldCB0byBgYm9yZGVyLWJveGAgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKi9cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbiAgLyogMSAqL1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIHNlYXJjaCBjYW5jZWwgYnV0dG9uIGluIFNhZmFyaSBhbmQgQ2hyb21lIG9uIE9TIFguXG4gKiBTYWZhcmkgKGJ1dCBub3QgQ2hyb21lKSBjbGlwcyB0aGUgY2FuY2VsIGJ1dHRvbiB3aGVuIHRoZSBzZWFyY2ggaW5wdXQgaGFzXG4gKiBwYWRkaW5nIChhbmQgYHRleHRmaWVsZGAgYXBwZWFyYW5jZSkuXG4gKi9cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5cbi8qKlxuICogRGVmaW5lIGNvbnNpc3RlbnQgYm9yZGVyLCBtYXJnaW4sIGFuZCBwYWRkaW5nLlxuICovXG5maWVsZHNldCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7XG4gIG1hcmdpbjogMCAycHg7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgYGNvbG9yYCBub3QgYmVpbmcgaW5oZXJpdGVkIGluIElFIDgvOS8xMC8xMS5cbiAqIDIuIFJlbW92ZSBwYWRkaW5nIHNvIHBlb3BsZSBhcmVuJ3QgY2F1Z2h0IG91dCBpZiB0aGV5IHplcm8gb3V0IGZpZWxkc2V0cy5cbiAqL1xubGVnZW5kIHtcbiAgYm9yZGVyOiAwO1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFJlbW92ZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSA4LzkvMTAvMTEuXG4gKi9cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87IH1cblxuLyoqXG4gKiBEb24ndCBpbmhlcml0IHRoZSBgZm9udC13ZWlnaHRgIChhcHBsaWVkIGJ5IGEgcnVsZSBhYm92ZSkuXG4gKiBOT1RFOiB0aGUgZGVmYXVsdCBjYW5ub3Qgc2FmZWx5IGJlIGNoYW5nZWQgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWC5cbiAqL1xub3B0Z3JvdXAge1xuICBmb250LXdlaWdodDogYm9sZDsgfVxuXG4vKiBUYWJsZXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSBtb3N0IHNwYWNpbmcgYmV0d2VlbiB0YWJsZSBjZWxscy5cbiAqL1xudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDsgfVxuXG50ZCxcbnRoIHtcbiAgcGFkZGluZzogMDsgfVxuXG4vKiBpbXBvcnQgYWxsIGdsb2JhbHMgKi9cbi8qIHVzZWQgZm9yIG1hdGggKi9cbi8qIHVzZXIgKi9cbi8qIGZpcnN0IGFuZCBsYXN0IGl0ZW0gb2YgbGlzdCovXG4vKiBMYXN0IGluZGV4IG9mIHZhbHVlIHggKi9cbi8qIEluc2VydGluZyB2YWx1ZSBhdCBpbmRleCBuICovXG4vKiBSZXBsYWNpbmcgdmFsdWUgeCAqL1xuLyogUmVwbGFjaW5nIHZhbHVlIGF0IGluZGV4IG4gKi9cbi8qIFJlbW92aW5nIHZhbHVlcyB4ICovXG4vKiBSZW1vdmluZyB2YWx1ZSBhdCBpbmRleCBuICovXG4vKiBTbGljaW5nIGEgbGlzdCAqL1xuLyogUmV2ZXJzZSBhIGxpc3QgKi9cbi8qIENvbnZlcnQgYSBsaXN0IGludG8gYSBzdHJpbmcgKi9cbi8qIFNoaWZ0IGluZGV4ZXMgb2YgYSBsaXN0ICovXG4uYWRkLWRhdGFyb290LWNoaWxkLCAuZGVsLWRhdGFyb290LWNoaWxkLCAubGVhZiAucmVtb3ZlLWNoaWxkLCAubGVhZiAuYWRkLWNoaWxkIHtcbiAgYm9yZGVyLXJhZGl1czogNTAlIDUwJTtcbiAgY29sb3I6ICNGRkY7XG4gIGhlaWdodDogMS4ycmVtO1xuICB3aWR0aDogMS4ycmVtO1xuICBsaW5lLWhlaWdodDogMS4ycmVtO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgY3Vyc29yOiBwb2ludGVyOyB9XG5cbi51c2VyLWluZm8tY2FyZCwgLm1pY3JvcG9zdC1mb3JtIHtcbiAgcGFkZGluZzogMXJlbTtcbiAgd2lkdGg6IDUwcmVtO1xuICBtYXJnaW46IDAgYXV0bztcbiAgYm9yZGVyOiAxcHggc29saWQgI2UxZThlZDsgfVxuXG4ubmV3LXBvc3QtdG9vbGJhciAuYnRuLXN1Ym1pdDpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XG4gIGNvbG9yOiAjZmZmOyB9XG5cbi5lbGxpcHNpcyB7XG4gIC8qKlxuICAgICAqIDEuIEhpZGUgYW55IG92ZXJmbG93XG4gICAgICogMi4gUHJldmVudCBhbnkgbGluZS1icmVha1xuICAgICAqIDMuIEFkZCBlbGxpcHNpcyBhdCBlbmQgb2YgbGluZVxuICAgICAqL1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICAvKiAxICovXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIC8qIDIgKi9cbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIC8qIDMgKi8gfVxuXG4ucmV2ZXJzZS1lbGxpcHNpcyB7XG4gIHRleHQtb3ZlcmZsb3c6IGNsaXA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7IH1cbiAgLnJldmVyc2UtZWxsaXBzaXM6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnXFwwMjAyNic7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHotaW5kZXg6IDE7XG4gICAgbGVmdDogLTFlbTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xuICAgIHBhZGRpbmctbGVmdDogMWVtO1xuICAgIG1hcmdpbi1sZWZ0OiAwLjVlbTsgfVxuICAucmV2ZXJzZS1lbGxpcHNpcyBzcGFuIHtcbiAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBmbG9hdDogcmlnaHQ7XG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgICB0ZXh0LWluZGVudDogMC41ZW07IH1cbiAgICAucmV2ZXJzZS1lbGxpcHNpcyBzcGFuOmJlZm9yZSB7XG4gICAgICBjb250ZW50OiAnJztcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIHdpZHRoOiAxZW07XG4gICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gICAgICB6LWluZGV4OiAyMDA7XG4gICAgICBsZWZ0OiAtLjVlbTsgfVxuXG4uZ3JhdmF0YXJfZWRpdCAuaW1hZ2UtdXBsb2FkIGlucHV0LCAubmV3LXBvc3QtdG9vbGJhciAubWljcm9wb3N0LWlucHV0LWZpbGUge1xuICB3aWR0aDogMC4xcHg7XG4gIGhlaWdodDogMC4xcHg7XG4gIC8qIHdpZHRoIGFuZCBoZWlnaHQgYXJlIHNldCB0byAwLjFweCBpbnN0ZWFkIG9mIGp1c3QgMHB4LiBTZXR0aW5nIHRoZSBwcm9wZXJ0eSB2YWx1ZXMgdG8gemVybyBlbmRzIHVwIHRocm93aW5nIHRoZSBlbGVtZW50IG91dCBvZiB0YWIgcGFydHkgaW4gc29tZSBicm93c2Vycy4gICovXG4gIG9wYWNpdHk6IDA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogLTE7IH1cbiAgLmdyYXZhdGFyX2VkaXQgLmltYWdlLXVwbG9hZCBpbnB1dCArIGxhYmVsLCAubmV3LXBvc3QtdG9vbGJhciAubWljcm9wb3N0LWlucHV0LWZpbGUgKyBsYWJlbCB7XG4gICAgY29sb3I6ICMwMDA7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBib3gtc2hhZG93OiBub25lO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzk5OTtcbiAgICBsaW5lLWhlaWdodDogMXJlbTtcbiAgICBoZWlnaHQ6IDI2cHg7XG4gICAgcGFkZGluZzogLjVyZW0gMXJlbTtcbiAgICBtYXgtd2lkdGg6IDIwcmVtOyB9XG4gICAgLmdyYXZhdGFyX2VkaXQgLmltYWdlLXVwbG9hZCBpbnB1dCArIGxhYmVsICosIC5uZXctcG9zdC10b29sYmFyIC5taWNyb3Bvc3QtaW5wdXQtZmlsZSArIGxhYmVsICoge1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAvKiBkZWFsIHdpdGggUG9zc2libGUgVG91Y2ggSXNzdWVzICovIH1cbiAgLmdyYXZhdGFyX2VkaXQgLmltYWdlLXVwbG9hZCBpbnB1dDpmb2N1cyArIGxhYmVsLCAubmV3LXBvc3QtdG9vbGJhciAubWljcm9wb3N0LWlucHV0LWZpbGU6Zm9jdXMgKyBsYWJlbCwgLmdyYXZhdGFyX2VkaXQgLmltYWdlLXVwbG9hZCBpbnB1dCArIGxhYmVsOmhvdmVyLCAubmV3LXBvc3QtdG9vbGJhciAubWljcm9wb3N0LWlucHV0LWZpbGUgKyBsYWJlbDpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICBjb2xvcjogI2ZmZjsgfVxuXG4vKiBQcm8gdGlwOiBVc2UgZnVuY3Rpb25zIHdoZW4geW91IG5lZWQgdG8gY2FsY3VsYXRlIGEgdmFsdWUgdGhhdCBtYXkgYmUgcmV1c2VkIHNvbWV3aGVyZSBlbHNlLiAqL1xuLyogRkFDVE9SSUFMICovXG4vKiBodHRwOi8vdGhlc2Fzc3dheS5jb20vYWR2YW5jZWQvaW52ZXJzZS10cmlnb25vbWV0cmljLWZ1bmN0aW9ucy13aXRoLXNhc3MjY29kaW5nLXRoZS1hdGFuLWZ1bmN0aW9uICovXG4vKiBpbnZlcnNlIHRyaWdvbm9tZXRyaWMgZnVuY3Rpb25zICovXG4vKiByZXR1cm4gZmlib25hY2NpIHNlcXVlbmNlcyAqL1xuLyogSnVnZ2xlciBzZXF1ZW5jZSAqL1xuLyogTG9vay1hbmQtc2F5IHNlcXVlbmNlICovXG4vKiBcblN0YXJ0IGZyb20gbGFzdCBjaGFyYWN0ZXJcbkNoZWNrIHRoZSBudW1iZXIgb2YgaWRlbnRpY2FsIGNoYXJhY3RlcnMgcHJldmlvdXMgdG8gYW5kIGluY2x1ZGluZyB0aGlzIG9uZSAoYmFzaWNhbGx5IDEsIDIgb3IgMylcblByZXBlbmQgdGhpcyBjb3VudCBhbmQgdGhlIGNoYXJhY3RlciB0byB0aGUgbmV3IGVudHJ5XG5TdGFydCBiYWNrIHRvIG5leHQgdW5jaGVja2VkIGNoYXJhY3RlciBcbiovXG5odG1sIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgZm9udC1zaXplOiAxMnB4OyB9XG4gIGh0bWwgKixcbiAgaHRtbCAqOjpiZWZvcmUsXG4gIGh0bWwgKjo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cblxuYm9keSB7XG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwnSGVsdmV0aWNhIE5ldWUnLEhlbHZldGljYSxzYW5zLXNlcmlmO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyB9XG5cbi5oaWRlIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG4uY2VudGVyIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG5cbmlucHV0Om5vdChbdHlwZT1jaGVja2JveF0pIHtcbiAgYXBwZWFyYW5jZTogbm9uZTsgfVxuXG5pbnB1dCxcbnNlbGVjdCB7XG4gIGJvcmRlcjogbm9uZTsgfVxuICBpbnB1dDpmb2N1cyxcbiAgc2VsZWN0OmZvY3VzIHtcbiAgICBvdXRsaW5lOiBub25lOyB9XG5cbmlucHV0Oi13ZWJraXQtYXV0b2ZpbGwsXG50ZXh0YXJlYTotd2Via2l0LWF1dG9maWxsLFxuc2VsZWN0Oi13ZWJraXQtYXV0b2ZpbGwge1xuICBib3gtc2hhZG93OiAwIDAgMCAxMDAwcHggd2hpdGUgaW5zZXQ7XG4gIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiAjMDAwOyB9XG4gIGlucHV0Oi13ZWJraXQtYXV0b2ZpbGw6Zm9jdXMsXG4gIHRleHRhcmVhOi13ZWJraXQtYXV0b2ZpbGw6Zm9jdXMsXG4gIHNlbGVjdDotd2Via2l0LWF1dG9maWxsOmZvY3VzIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAxMDAwcHggd2hpdGUgaW5zZXQ7XG4gICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6ICMwMDA7IH1cblxuaW5wdXRbdHlwZT1cImhpZGRlblwiXSB7XG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVxuXG50ZXh0YXJlYVt0eXBlPVwiaGlkZGVuXCJdIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG4vKiBpbXBvcnQgYWxsIG1vZHVsZXMgKi9cbi51c2VycyAucm93IHtcbiAgaGVpZ2h0OiAzcmVtO1xuICBsaW5lLWhlaWdodDogM3JlbTsgfVxuICAudXNlcnMgLnJvdyArIC5yb3cge1xuICAgIG1hcmdpbi10b3A6IC41cmVtOyB9XG5cbi51c2VycyBpbnB1dCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgaGVpZ2h0OiAzcmVtO1xuICBsaW5lLWhlaWdodDogM3JlbTtcbiAgYm9yZGVyLXRvcDogbm9uZTtcbiAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gIGJvcmRlci1yaWdodDogbm9uZTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7IH1cbiAgLnVzZXJzIGlucHV0OmZvY3VzIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzAwMDsgfVxuXG4udXNlcnMgLmJ0bi1zdWJtaXQge1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHdpZHRoOiAxMHJlbTtcbiAgcGFkZGluZzogMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgYm9yZGVyOiAxcHggc29saWQgIzk5OTtcbiAgYm9yZGVyLXJhZGl1czogNHB4OyB9XG5cbi5mb3JtLWNvbnRhaW5lciB7XG4gIG1hcmdpbjogMCBhdXRvO1xuICB3aWR0aDogNDByZW07IH1cblxuLnJvdyB7XG4gIGZvbnQtc2l6ZTogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gIC5yb3cgbGFiZWwge1xuICAgIGZvbnQtc2l6ZTogMTJweDsgfVxuXG4uZm9ybS1sYWJlbCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDEzcmVtO1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBwYWRkaW5nOiAwIDFyZW0gMCAwOyB9XG5cbi5mb3JtLWNvbnRyb2wge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgd2lkdGg6IDI3cmVtOyB9XG5cbi5mb3JtLWV4dHJhIHtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBhZGRpbmc6IDAgMCAwIDFyZW07XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogNDByZW07XG4gIHRvcDogMDtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgfVxuXG4uYnRuLXN1Ym1pdCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBmb250LXNpemU6IDEycHg7XG4gIG1hcmdpbjogMCBhdXRvOyB9XG5cbi5leHRyYSB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuXG4udXNlcnMtbGlzdCB7XG4gIG1hcmdpbjogMCBhdXRvO1xuICB3aWR0aDogNTByZW07IH1cblxuLmdyYXZhdGFyX2VkaXQge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cblxuLnMtYXZhdGFyIHtcbiAgZm9udC1zaXplOiAwOyB9XG5cbi51c2VyTmFtZSwgLmVtYWlsIHtcbiAgcGFkZGluZzogMCAuMnJlbTsgfVxuXG4uc2hvdy1saW5rIHtcbiAgbWFyZ2luLWxlZnQ6IC41cmVtOyB9XG5cbi5zaG93LWxpbmsgKyAuZWRpdC1saW5rIHtcbiAgbWFyZ2luLWxlZnQ6IC41cmVtOyB9XG5cbi5lZGl0LWxpbmsgKyAuZGVsZXRlLXVzZXIge1xuICBtYXJnaW4tbGVmdDogLjVyZW07IH1cblxuLnR3ZWV0LWJveFtjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCJdIHtcbiAgb3V0bGluZTogbm9uZTtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSg3NCwgMTQ1LCA2MCwgMC4yNSk7XG4gIHBhZGRpbmc6IDhweCAxMHB4O1xuICBjb2xvcjogIzMzMzsgfVxuICAudHdlZXQtYm94W2NvbnRlbnRlZGl0YWJsZT1cInRydWVcIl0uc2hvd1BsYWNlaG9sZGVyOmJlZm9yZSB7XG4gICAgY29udGVudDogYXR0cihkYXRhLXBsYWNlaG9sZGVyLWRlZmF1bHQpO1xuICAgIGNvbG9yOiAjY2NkNmRkO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxuXG4udXNlci1pbmZvLWNhcmQge1xuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDI1NSwgMjU1LCAyNTUsIDApIDYwJSwgI2ZmZiksIGxpbmVhci1ncmFkaWVudCg3MGRlZywgI2UwZjFmZiAzMiUsICNmZmZhZTMpOyB9XG4gIC51c2VyLWluZm8tY2FyZCAuc2VsZi1pbmZvIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cbiAgLnVzZXItaW5mby1jYXJkIC5pbmZvIHtcbiAgICBwYWRkaW5nOiAwIDFyZW07IH1cbiAgLnVzZXItaW5mby1jYXJkIC5jYXJkLWJsb2NrLWJ0biB7XG4gICAgd2lkdGg6IDEwMCU7IH1cbiAgLnVzZXItaW5mby1jYXJkIC5jYXJkLWxpbmstZm9sbG93aW5nIHtcbiAgICBwYWRkaW5nOiAwIDAuNXJlbTsgfVxuICAudXNlci1pbmZvLWNhcmQgLmNhcmQtbGluay1mb2xsb3dlcnMge1xuICAgIHBhZGRpbmc6IDAgMC41cmVtO1xuICAgIG1hcmdpbjogMCAwIDAgMXJlbTsgfVxuICAudXNlci1pbmZvLWNhcmQgLnVzZXItYXZhdGFycyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBwYWRkaW5nOiAuM3JlbSAwIDAgMDsgfVxuICAgIC51c2VyLWluZm8tY2FyZCAudXNlci1hdmF0YXJzOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGluaXRpYWw7XG4gICAgICBjb2xvcjogIzMzMzsgfVxuICAudXNlci1pbmZvLWNhcmQgLmZvbGxvdy1hdmF0YXItbmFtZSB7XG4gICAgbWFyZ2luOiAwIDJweDsgfVxuICAgIC51c2VyLWluZm8tY2FyZCAuZm9sbG93LWF2YXRhci1uYW1lIC5hdmF0YXIge1xuICAgICAgZm9udC1zaXplOiAwOyB9XG4gICAgLnVzZXItaW5mby1jYXJkIC5mb2xsb3ctYXZhdGFyLW5hbWUgLm5hbWUge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gIC51c2VyLWluZm8tY2FyZCAuZm9sbG93LXN0YXR1cyB7XG4gICAgcGFkZGluZzogMXJlbSAwIDAgMDsgfVxuICAudXNlci1pbmZvLWNhcmQgLmZvbGxvdy1hY3Rpb24ge1xuICAgIHBhZGRpbmc6IDFyZW0gMCAwIDA7IH1cblxuLm1pY3JvcG9zdC10ZXh0IHtcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICBwYWRkaW5nOiAwLjVyZW0gMDsgfVxuXG4ubmV3LXBvc3QsXG4ucHJvZmlsZS1wb3N0IHtcbiAgZm9udC1zaXplOiAxMnB4OyB9XG5cbi5uZXctcG9zdC10ZXh0IHtcbiAgb3V0bGluZTogbm9uZTtcbiAgd2lkdGg6IDEwMCU7XG4gIG1heC13aWR0aDogMTAwJTsgfVxuXG4ubmV3LXBvc3QtdG9vbGJhciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuICAubmV3LXBvc3QtdG9vbGJhcjpiZWZvcmUsIC5uZXctcG9zdC10b29sYmFyOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBkaXNwbGF5OiB0YWJsZTsgfVxuICAubmV3LXBvc3QtdG9vbGJhcjphZnRlciB7XG4gICAgY2xlYXI6IGJvdGg7IH1cbiAgLm5ldy1wb3N0LXRvb2xiYXIgLmltYWdlLXVwbG9hZCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGZsb2F0OiBsZWZ0OyB9XG4gIC5uZXctcG9zdC10b29sYmFyIC5idG4tc3VibWl0IHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgZmxvYXQ6IHJpZ2h0O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xuICAgIGxpbmUtaGVpZ2h0OiAxcmVtO1xuICAgIGhlaWdodDogMXJlbTtcbiAgICBwYWRkaW5nOiAuNXJlbSAycmVtO1xuICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyB9XG5cbi5mZWVkcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDFyZW0gMCAwIDA7IH1cblxuLm1pY3JvcG9zdHMge1xuICBwYWRkaW5nOiAwO1xuICB3aWR0aDogNTByZW07XG4gIGJvcmRlcjogMXB4IHNvbGlkICNlMWU4ZWQ7IH1cblxuLm1pY3JvcG9zdCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZTFlOGVkO1xuICBwYWRkaW5nOiAuOHJlbSAxcmVtOyB9XG4gIC5taWNyb3Bvc3Q6Zmlyc3QtY2hpbGQge1xuICAgIGJvcmRlci10b3A6IG5vbmU7IH1cbiAgLm1pY3JvcG9zdCAuYXZhdGFyLXNlY3Rpb24ge1xuICAgIGZsZXgtYmFzaXM6IDVyZW07XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICBmb250LXNpemU6IDA7IH1cbiAgLm1pY3JvcG9zdCAuY29udGVudCB7XG4gICAgZmxleDogMTsgfVxuICAubWljcm9wb3N0IC5taWNyb3Bvc3QtaW1nIHtcbiAgICBtYXgtaGVpZ2h0OiA2NjVweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuOyB9XG5cbi5wYWdpbmF0aW9uIC5kaXNhYmxlZCB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuLnNlc3Npb25zIC5yb3cge1xuICBoZWlnaHQ6IDNyZW07XG4gIGxpbmUtaGVpZ2h0OiAzcmVtOyB9XG4gIC5zZXNzaW9ucyAucm93ICsgLnJvdyB7XG4gICAgbWFyZ2luLXRvcDogLjVyZW07IH1cblxuLnNlc3Npb25zIGlucHV0IHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBsaW5lLWhlaWdodDogM3JlbTtcbiAgYm9yZGVyLXRvcDogbm9uZTtcbiAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gIGJvcmRlci1yaWdodDogbm9uZTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7IH1cbiAgLnNlc3Npb25zIGlucHV0OmZvY3VzIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzAwMDsgfVxuXG4uc2Vzc2lvbnMgLmJ0bi1zdWJtaXQge1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHdpZHRoOiAxMHJlbTtcbiAgcGFkZGluZzogMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgYm9yZGVyOiAxcHggc29saWQgIzk5OTtcbiAgYm9yZGVyLXJhZGl1czogNHB4OyB9XG5cbi5wYXNzd29yZF9yZXNldHMgLnJvdyB7XG4gIGhlaWdodDogM3JlbTtcbiAgbGluZS1oZWlnaHQ6IDNyZW07IH1cbiAgLnBhc3N3b3JkX3Jlc2V0cyAucm93ICsgLnJvdyB7XG4gICAgbWFyZ2luLXRvcDogLjVyZW07IH1cblxuLnBhc3N3b3JkX3Jlc2V0cyBpbnB1dCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbGluZS1oZWlnaHQ6IDNyZW07XG4gIGJvcmRlci10b3A6IG5vbmU7XG4gIGJvcmRlci1sZWZ0OiBub25lO1xuICBib3JkZXItcmlnaHQ6IG5vbmU7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5OyB9XG4gIC5wYXNzd29yZF9yZXNldHMgaW5wdXQ6Zm9jdXMge1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMDAwOyB9XG5cbi5wYXNzd29yZF9yZXNldHMgLmJ0bi1zdWJtaXQge1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHdpZHRoOiAxMHJlbTtcbiAgcGFkZGluZzogMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgYm9yZGVyOiAxcHggc29saWQgIzk5OTtcbiAgYm9yZGVyLXJhZGl1czogNHB4OyB9XG5cbi5hcGktdWwtd3JhcHBlciBpbnB1dCB7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5OyB9XG5cbi5hcGktdWwtd3JhcHBlciBzZWxlY3Qge1xuICBib3JkZXI6IDA7XG4gIGJveC1zaGFkb3c6IDAgMXB4IDAgIzk5OTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgfVxuXG4uYXBpLXVsLXdyYXBwZXIgLmFwaS11bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IC41cmVtOyB9XG5cbi5hcGktdWwtd3JhcHBlciAuYXBpLWxpIHtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5OTk7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICM5OTk7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICM5OTk7IH1cbiAgLmFwaS11bC13cmFwcGVyIC5hcGktbGkgKyAuYXBpLWxpIHtcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW07IH1cblxuLmFwaS11bC13cmFwcGVyIC5hcGktbGktdXJpIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMjByZW07XG4gIHBhZGRpbmc6IDAgMCAwIDFyZW07IH1cblxuLmFwaS11bC13cmFwcGVyIC5hcGktbGktZGVzY3JpcHRpb24ge1xuICBwYWRkaW5nOiAuNXJlbSAxcmVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGQUYwOyB9XG4gIC5hcGktdWwtd3JhcHBlciAuYXBpLWxpLWRlc2NyaXB0aW9uICsgLnBlci1hcGkge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNkZGQ7IH1cbiAgLmFwaS11bC13cmFwcGVyIC5hcGktbGktZGVzY3JpcHRpb24udW5mb2xkICsgLnBlci1hcGkge1xuICAgIGRpc3BsYXk6IGJsb2NrOyB9XG5cbi5hbGVydC1zdWNjZXNzIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzdGRkZENDtcbiAgY29sb3I6ICNmZmY7IH1cblxuLmFsZXJ0LWRhbmdlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNCMjIyMjI7XG4gIGNvbG9yOiAjZmZmOyB9XG5cbi5hbGVydC1pbmZvIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0U2RTZGQTsgfVxuXG4uYWRkLWFwaSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xuICBwYWRkaW5nOiA1cHggMTBweDtcbiAgbWFyZ2luOiAwIDAgMWVtIDA7IH1cblxuLnBlci1hcGkge1xuICBwYWRkaW5nOiAxcmVtIDAgMnJlbSAwO1xuICBtYXJnaW46IDAgMXJlbSAwIDFyZW07XG4gIGJveC1zaGFkb3c6IDAgNXB4IDRweCAtNXB4IHB1cnBsZTsgfVxuXG4uYXBpLWVkaXQsIC5hcGktc2F2ZSwgLmFwaS10ZXN0LCAuZGF0YS1yYXcsIC5kYXRhLWJlYXV0aWZ5LCAuZGF0YS1oaWdobGlnaHQsIC5kYXRhLXByZXZpZXcge1xuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xuICBwYWRkaW5nOiAwIDEwcHg7XG4gIG1hcmdpbjogMCAxZW0gMCAwO1xuICBjdXJzb3I6IHBvaW50ZXI7IH1cblxuLmFwaS11cmk6ZGlzYWJsZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkOyB9XG5cbi5hcGktdHJlZS13cmFwcGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW46IDFyZW0gMCAwIDA7XG4gIG92ZXJmbG93LXg6IHNjcm9sbDtcbiAgb3ZlcmZsb3cteTogaGlkZGVuOyB9XG5cbi5hcGktZGF0YSB7XG4gIHBhZGRpbmc6IC41cmVtIDAgMCAwOyB9XG5cbi5hcGktdHJlZS1mcmFtZSB7XG4gIHBhZGRpbmc6IDAgMCAwIDEuMnJlbTsgfVxuXG4uYXBpLXRyZWUge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgcGFkZGluZzogMCAwIDAgNDQuNDRweDtcbiAgaGVpZ2h0OiAwOyB9XG5cbi5hcGktc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogdmlzaWJsZTsgfVxuXG4uYXBpLXN2ZyAuYXBpLXN2Zy1wYXRoIHtcbiAgc3Ryb2tlOiBwdXJwbGU7XG4gIHN0cm9rZS13aWR0aDogMTtcbiAgZmlsbDogdHJhbnNwYXJlbnQ7IH1cblxuaSB7XG4gIGN1cnNvcjogcG9pbnRlcjsgfVxuXG4ubGF5ZXIge1xuICBtYXJnaW46IDAgMCAxZW0gMDtcbiAgd2lkdGg6IDIzZW07XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkZGQ7IH1cblxuLmFkZC1kYXRhcm9vdC1jaGlsZCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAycHg7XG4gIGxlZnQ6IDA7XG4gIGJhY2tncm91bmQtY29sb3I6IGdyZWVuOyB9XG5cbi5kZWwtZGF0YXJvb3QtY2hpbGQge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMzZweDtcbiAgbGVmdDogMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkOyB9XG5cbi5sZWFmIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBoZWlnaHQ6IDIycHg7XG4gIHdpZHRoOiA0NjlweDtcbiAgcGFkZGluZzogMCAuNWVtO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIG1hcmdpbjogMCAwIDEuM2VtIDA7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1zaXplOiAwO1xuICBmb250LXNpemU6IDA7IH1cbiAgLmxlYWYgPiBpbnB1dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7IH1cbiAgLmxlYWYgPiBpIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDsgfVxuICAubGVhZiAucmVtb3ZlLWNoaWxkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjAwO1xuICAgIG1hcmdpbjogMnB4IC4yZW0gMCAwOyB9XG4gIC5sZWFmIGlucHV0LCAubGVhZiBpIHtcbiAgICBmb250LXNpemU6IDEycHg7IH1cbiAgLmxlYWYgaW5wdXQge1xuICAgIHdpZHRoOiAxMzBweDtcbiAgICBoZWlnaHQ6IDIwcHg7IH1cbiAgLmxlYWYgaSB7XG4gICAgd2lkdGg6IDIwcHg7IH1cbiAgLmxlYWYgLmFkZC1jaGlsZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZTtcbiAgICBtYXJnaW46IDJweCAwIDAgLjJlbTsgfVxuICAubGVhZiAubGVhZi1rZXkge1xuICAgIHBhZGRpbmc6IDAgMWVtOyB9XG4gIC5sZWFmIC5hZGQtc2libGluZyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTMwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7IH1cblxuLmNhcmQge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgIzA3ZDtcbiAgYm9yZGVyLXRvcC13aWR0aDogM3B4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgbGluZS1oZWlnaHQ6IDE4cHg7IH1cblxuLmpzb24gcHJlIHtcbiAgb3V0bGluZTogMXB4IHNvbGlkICNjY2M7XG4gIHBhZGRpbmc6IDVweDtcbiAgbWFyZ2luOiA1cHg7XG4gIHdoaXRlLXNwYWNlOiBwcmU7IH1cblxuLmpzb24gLnN0cmluZyB7XG4gIGNvbG9yOiBncmVlbjsgfVxuXG4uanNvbiAubnVtYmVyIHtcbiAgY29sb3I6IGRhcmtvcmFuZ2U7IH1cblxuLmpzb24gLmJvb2xlYW4ge1xuICBjb2xvcjogYmx1ZTsgfVxuXG4uanNvbiAubnVsbCB7XG4gIGNvbG9yOiBtYWdlbnRhOyB9XG5cbi5qc29uIC5rZXkge1xuICBjb2xvcjogcmVkOyB9XG5cbi51c2VyLWxpbmsge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZvbnQtc2l6ZTogMDsgfVxuXG4ubmF2IHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuICAubmF2IC5zdGF0aWMtbGlua3MsXG4gIC5uYXYgLnVzZXItbGlua3Mge1xuICAgIHBhZGRpbmc6IDAgMnJlbTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cbiAgLm5hdiAuZmlyc3QtbGF5ZXIge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOyB9XG5cbi5wZXItcm93IHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2RkZDtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2RkZDtcbiAgcGFkZGluZzogLjVyZW07IH1cbiAgLnBlci1yb3c6Zmlyc3QtY2hpbGQge1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZGRkOyB9XG4gIC5wZXItcm93IC5mb2xsb3dfZm9ybSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvOyB9XG5cbi5uYXZiYXIge1xuICBoZWlnaHQ6IDNlbTsgfVxuXG5wcmUge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xuICBwYWRkaW5nOiAxMHB4OyB9XG5cbmEge1xuICBjb2xvcjogIzAwMDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBib3gtc2hhZG93OiAwIDFweCAwIDAgIzAwMDtcbiAgcGFkZGluZzogLjJyZW0gLjJyZW07IH1cbiAgYS5hdmF0YXIge1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgcGFkZGluZzogMDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgZm9udC1zaXplOiAwOyB9XG4gIGE6dmlzaXRlZCB7XG4gICAgY29sb3I6ICM2NjY7IH1cbiAgYTpob3ZlciB7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICBib3gtc2hhZG93OiBub25lOyB9XG5cbmRpdi5maWVsZCwgZGl2LmFjdGlvbnMge1xuICBtYXJnaW4tYm90dG9tOiAxMHB4OyB9XG5cbiNub3RpY2Uge1xuICBjb2xvcjogZ3JlZW47IH1cblxuLmFsZXJ0IHtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBwYWRkaW5nOiAuNXJlbSAxLjVyZW07IH1cblxuLmZpZWxkX3dpdGhfZXJyb3JzIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cblxuLnBhZ2luYXRpb24ge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cbiAgLnBhZ2luYXRpb24gbGkge1xuICAgIGRpc3BsYXk6IGlubGluZTsgfVxuXG4jZXJyb3JfZXhwbGFuYXRpb24ge1xuICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XG4gIHBhZGRpbmc6IDdweDtcbiAgcGFkZGluZy1ib3R0b206IDA7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7IH1cbiAgI2Vycm9yX2V4cGxhbmF0aW9uIGgyIHtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIHBhZGRpbmc6IDVweCA1cHggNXB4IDE1cHg7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIG1hcmdpbjogLTdweDtcbiAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2MwMDtcbiAgICBjb2xvcjogI2ZmZjsgfVxuICAjZXJyb3JfZXhwbGFuYXRpb24gdWwgbGkge1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBsaXN0LXN0eWxlOiBzcXVhcmU7IH1cblxuLmljb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAxcmVtO1xuICBoZWlnaHQ6IDFyZW07XG4gIGZpbGw6IGN1cnJlbnRDb2xvcjsgfVxuXG4uY29sbGFwc2luZyB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTtcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogLjM1cztcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogaGVpZ2h0LCB2aXNpYmlsaXR5OyB9XG5cbi51bmZvbGQgc3ZnIHtcbiAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTsgfVxuXG4ucG9wdXAtc2hhZG93IHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC40NSk7IH1cblxuLnBvcHVwLWNvbnRlbnQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICB3aWR0aDogMjByZW07XG4gIGJvcmRlci1yYWRpdXM6IC40cmVtO1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApOyB9XG5cbi5wb3B1cC10ZXh0IHtcbiAgcGFkZGluZzogMXJlbTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7IH1cblxuLnBvcHVwLWJ0bnMge1xuICBmb250LXNpemU6IDA7IH1cbiAgLnBvcHVwLWJ0bnMgLnBvcHVwLWJ0bjpvbmx5LWNoaWxkIHtcbiAgICBkaXNwbGF5OiBibG9jazsgfVxuXG4ucG9wdXAtYnRuIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogNTAlO1xuICBmb250LXNpemU6IDFyZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgcGFkZGluZzogLjhyZW07IH1cbiAgLnBvcHVwLWJ0biArIC5wb3B1cC1idG4ge1xuICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2RkZDsgfVxuXG4uZmxhc2gtbGF5ZXIge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogM3JlbTtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgcGFkZGluZzogLjNyZW0gMXJlbTsgfVxuICAuZmxhc2gtbGF5ZXIuZXJyb3Ige1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDsgfVxuICAuZmxhc2gtbGF5ZXIuc3VjY2VzcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47IH1cbiAgICAuZmxhc2gtbGF5ZXIuc3VjY2VzcyAubWVzc2FnZSB7XG4gICAgICBjb2xvcjogd2hpdGU7IH1cblxuLmJsaW5rIHtcbiAgYW5pbWF0aW9uLW5hbWU6IGJsaW5rO1xuICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAzO1xuICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcbiAgYW5pbWF0aW9uLWR1cmF0aW9uOiAuNHM7IH1cblxuQGtleWZyYW1lcyBibGluayB7XG4gIGZyb20ge1xuICAgIG9wYWNpdHk6IDAuMzsgfVxuICB0byB7XG4gICAgb3BhY2l0eTogMTsgfSB9XG5cbi8qIGltcG9ydCBhbGwgcGFnZXMgKi9cbi51c2VyLWluZm8tY2FyZCArIC5taWNyb3Bvc3QtZm9ybSB7XG4gIGJvcmRlci10b3A6IG5vbmU7IH1cbiIsIiRzdWNjZXNzLWNvbG9yOiAjZmZmO1xuJHN1Y2Nlc3MtYmctY29sb3I6ICM3RkZGRDQ7XG5cbiRkYW5nZXItYmctY29sb3I6ICNCMjIyMjI7XG4kZGFuZ2VyLWNvbG9yOiAjZmZmO1xuXG4kaW5mby1iZy1jb2xvcjogI0U2RTZGQTtcblxuLyogdXNlZCBmb3IgbWF0aCAqL1xuJGRlZmF1bHQtdGhyZXNob2xkOiBwaSgpLzE4MC8yMCAhZGVmYXVsdDtcblxuXG4vKiB1c2VyICovXG4kdXNlci1mb2xsb3dpbmctbGluay1wYWRkaW5nOiAwIC41cmVtO1xuJHVzZXItZm9sbG93aW5nLWxpbmstbWFyZ2luOiAwIC41cmVtO1xuJGZvbGxvdy1hY3Rpb24tcGFkZGluZzogMXJlbSAwIDAgMDtcbiRmb2xsb3ctc3RhdHVzLXBhZGRpbmc6IDFyZW0gMCAwIDA7IiwiQGZ1bmN0aW9uIHN0cmlwLXVuaXQoJHZhbHVlKSB7XG4gICAgQGlmIHR5cGUtb2YoJHZhbHVlKSAhPSBcIm51bWJlclwiIHtcbiAgICAgICAgQHdhcm4gXCJZb3UgdHJpZWQgdG8gcmVtb3ZlIHVuaXQgZnJvbSBOYU4gKCN7dHlwZS1vZigkdmFsdWUpfSlcIjtcbiAgICAgICAgQHJldHVybiAkdmFsdWU7XG4gICAgfVxuICAgIEByZXR1cm4gJHZhbHVlIC8gKCR2YWx1ZSAqIDAgKyAxKTtcbn1cblxuLyogZmlyc3QgYW5kIGxhc3QgaXRlbSBvZiBsaXN0Ki9cbkBmdW5jdGlvbiBmaXJzdCgkbGlzdCkge1xuICAgIEByZXR1cm4gbnRoKCRsaXN0LCAxKTtcbn1cblxuQGZ1bmN0aW9uIGxhc3QoJGxpc3QpIHtcbiAgICBAcmV0dXJuIG50aCgkbGlzdCwgbGVuZ3RoKCRsaXN0KSk7XG59XG5cbi8qIExhc3QgaW5kZXggb2YgdmFsdWUgeCAqL1xuQGZ1bmN0aW9uIGxhc3QtaW5kZXgoJGxpc3QsICR2YWx1ZSkge1xuICAgIEBmb3IgJGkgZnJvbSBsZW5ndGgoJGxpc3QpICogLTEgdGhyb3VnaCAtMSB7XG4gICAgICAgIEBpZiBudGgoJGxpc3QsIGFicygkaSkpID09ICR2YWx1ZSB7XG4gICAgICAgICAgICBAcmV0dXJuIGFicygkaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQHJldHVybiBudWxsO1xufVxuXG5AZnVuY3Rpb24gcHJlcGVuZCgkbGlzdCwgJHZhbHVlKSB7XG4gICAgQHJldHVybiBqb2luKCR2YWx1ZSwgJGxpc3QpO1xufVxuXG4vKiBJbnNlcnRpbmcgdmFsdWUgYXQgaW5kZXggbiAqL1xuQGZ1bmN0aW9uIGluc2VydC1udGgoJGxpc3QsICRpbmRleCwgJHZhbHVlKSB7XG4gICAgJHJlc3VsdDogbnVsbDtcbiAgICBAaWYgdHlwZS1vZigkaW5kZXgpICE9IG51bWJlciB7XG4gICAgICAgIEB3YXJuIFwiJGluZGV4OiAje3F1b3RlKCRpbmRleCl9IGlzIG5vdCBhIG51bWJlciBmb3IgYGluc2VydC1udGhgLlwiO1xuICAgIH1cbiAgICBAZWxzZSBpZiAkaW5kZXggPCAxIHtcbiAgICAgICAgQHdhcm4gXCJMaXN0IGluZGV4IDAgbXVzdCBiZSBhIG5vbi16ZXJvIGludGVnZXIgZm9yIGBpbnNlcnQtbnRoYFwiO1xuICAgIH1cbiAgICBAZWxzZSBpZiAkaW5kZXggPiBsZW5ndGgoJGxpc3QpIHtcbiAgICAgICAgQHdhcm4gXCJMaXN0IGluZGV4IGlzICN7JGluZGV4fSBidXQgbGlzdCBpcyBvbmx5ICN7bGVuZ3RoKCRsaXN0KX0gaXRlbSBsb25nIGZvciBgaW5zZXJ0LW50aCcuXCI7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICAgJHJlc3VsdDogKCk7XG4gICAgICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRsaXN0KSB7XG4gICAgICAgICAgICBAaWYgJGkgPT0gJGluZGV4IHtcbiAgICAgICAgICAgICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgJHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBudGgoJGxpc3QsICRpKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQHJldHVybiAkcmVzdWx0O1xufVxuXG4vKiBSZXBsYWNpbmcgdmFsdWUgeCAqL1xuQGZ1bmN0aW9uIHJlcGxhY2UoJGxpc3QsICRvbGQtdmFsdWUsICRuZXctdmFsdWUsICRyZWN1cnNpdmU6IGZhbHNlKSB7XG4gICAgJHJlc3VsdDogKCk7XG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJGxpc3QpIHtcbiAgICAgICAgQGlmIHR5cGUtb2YobnRoKCRsaXN0LCAkaSkpID09IGxpc3QgYW5kICRyZWN1cnNpdmUge1xuICAgICAgICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsIHJlcGxhY2UobnRoKCRsaXN0LCAkaSksICRvbGQtdmFsdWUsICRuZXctdmFsdWUsICRyZWN1cnNpdmUpKTtcbiAgICAgICAgfVxuICAgICAgICBAZWxzZSB7XG4gICAgICAgICAgICBAaWYgbnRoKCRsaXN0LCAkaSkgPT0gJG9sZC12YWx1ZSB7XG4gICAgICAgICAgICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsICRuZXctdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQGVsc2Uge1xuICAgICAgICAgICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBudGgoJGxpc3QsICRpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgQHJldHVybiAkcmVzdWx0O1xufVxuXG4vKiBSZXBsYWNpbmcgdmFsdWUgYXQgaW5kZXggbiAqL1xuQGZ1bmN0aW9uIHJlcGxhY2UtbnRoKCRsaXN0LCAkaW5kZXgsICR2YWx1ZSkge1xuICAgICRyZXN1bHQ6IG51bGw7XG4gICAgQGlmIHR5cGUtb2YoJGluZGV4KSAhPSBudW1iZXIge1xuICAgICAgICBAd2FybiBcIiRpbmRleDogI3txdW90ZSgkaW5kZXgpfSBpcyBub3QgYSBudW1iZXIgZm9yIGByZXBsYWNlLW50aGAuXCI7XG4gICAgfVxuICAgIEBlbHNlIGlmICRpbmRleCA9PSAwIHtcbiAgICAgICAgQHdhcm4gXCJMaXN0IGluZGV4IDAgbXVzdCBiZSBhIG5vbi16ZXJvIGludGVnZXIgZm9yIGByZXBsYWNlLW50aGAuXCI7XG4gICAgfVxuICAgIEBlbHNlIGlmIGFicygkaW5kZXgpID4gbGVuZ3RoKCRsaXN0KSB7XG4gICAgICAgIEB3YXJuIFwiTGlzdCBpbmRleCBpcyAjeyRpbmRleH0gYnV0IGxpc3QgaXMgb25seSAje2xlbmd0aCgkbGlzdCl9IGl0ZW0gbG9uZyBmb3IgYHJlcGxhY2UtbnRoYC5cIjtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgICAkcmVzdWx0OiAoKTtcbiAgICAgICAgJGluZGV4OiBpZigkaW5kZXggPCAwLCBsZW5ndGgoJGxpc3QpICsgJGluZGV4ICsgMSwgJGluZGV4KTtcbiAgICAgICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJGxpc3QpIHtcbiAgICAgICAgICAgIEBpZiAkaSA9PSAkaW5kZXgge1xuICAgICAgICAgICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCAkdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQGVsc2Uge1xuICAgICAgICAgICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBudGgoJGxpc3QsICRpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgQHJldHVybiAkcmVzdWx0O1xufVxuXG4vKiBSZW1vdmluZyB2YWx1ZXMgeCAqL1xuQGZ1bmN0aW9uIHJlbW92ZSgkbGlzdCwgJHZhbHVlLCAkcmVjdXJzaXZlOiBmYWxzZSkge1xuICAgICRyZXN1bHQ6ICgpO1xuICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRsaXN0KSB7XG4gICAgICAgIEBpZiB0eXBlLW9mKG50aCgkbGlzdCwgJGkpKSA9PSBsaXN0IGFuZCAkcmVjdXJzaXZlIHtcbiAgICAgICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCByZW1vdmUobnRoKCRsaXN0LCAkaSksICR2YWx1ZSwgJHJlY3Vyc2l2ZSkpO1xuICAgICAgICB9XG4gICAgICAgIEBlbHNlIGlmIG50aCgkbGlzdCwgJGkpICE9ICR2YWx1ZSB7XG4gICAgICAgICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgbnRoKCRsaXN0LCAkaSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEByZXR1cm4gJHJlc3VsdDtcbn1cblxuLyogUmVtb3ZpbmcgdmFsdWUgYXQgaW5kZXggbiAqL1xuQGZ1bmN0aW9uIHJlbW92ZS1udGgoJGxpc3QsICRpbmRleCkge1xuICAgICRyZXN1bHQ6IG51bGw7XG4gICAgQGlmIHR5cGUtb2YoJGluZGV4KSAhPSBudW1iZXIge1xuICAgICAgICBAd2FybiBcIiRpbmRleDogI3txdW90ZSgkaW5kZXgpfSBpcyBub3QgYSBudW1iZXIgZm9yIGByZW1vdmUtbnRoYC5cIjtcbiAgICB9XG4gICAgQGVsc2UgaWYgJGluZGV4ID09IDAge1xuICAgICAgICBAd2FybiBcIkxpc3QgaW5kZXggMCBtdXN0IGJlIGEgbm9uLXplcm8gaW50ZWdlciBmb3IgYHJlbW92ZS1udGhgLlwiO1xuICAgIH1cbiAgICBAZWxzZSBpZiBhYnMoJGluZGV4KSA+IGxlbmd0aCgkbGlzdCkge1xuICAgICAgICBAd2FybiBcIkxpc3QgaW5kZXggaXMgI3skaW5kZXh9IGJ1dCBsaXN0IGlzIG9ubHkgI3tsZW5ndGgoJGxpc3QpfSBpdGVtIGxvbmcgZm9yIGByZW1vdmUtbnRoYC5cIjtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgICAkcmVzdWx0OiAoKTtcbiAgICAgICAgJGluZGV4OiBpZigkaW5kZXggPCAwLCBsZW5ndGgoJGxpc3QpICsgJGluZGV4ICsgMSwgJGluZGV4KTtcbiAgICAgICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJGxpc3QpIHtcbiAgICAgICAgICAgIEBpZiAkaSAhPSAkaW5kZXgge1xuICAgICAgICAgICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBudGgoJGxpc3QsICRpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgQHJldHVybiAkcmVzdWx0O1xufVxuXG4vKiBTbGljaW5nIGEgbGlzdCAqL1xuQGZ1bmN0aW9uIHNsaWNlKCRsaXN0LCAkc3RhcnQ6IDEsICRlbmQ6IGxlbmd0aCgkbGlzdCkpIHtcbiAgICAkcmVzdWx0OiBudWxsO1xuICAgIEBpZiB0eXBlLW9mKCRzdGFydCkgIT0gbnVtYmVyIG9yIHR5cGUtb2YoJGVuZCkgIT0gbnVtYmVyIHtcbiAgICAgICAgQHdhcm4gXCJFaXRoZXIgJHN0YXJ0IG9yICRlbmQgYXJlIG5vdCBhIG51bWJlciBmb3IgYHNsaWNlYC5cIjtcbiAgICB9XG4gICAgQGVsc2UgaWYgJHN0YXJ0ID4gJGVuZCB7XG4gICAgICAgIEB3YXJuIFwiVGhlIHN0YXJ0IGluZGV4IGhhcyB0byBiZSBsZXNzZXIgdGhhbiBvciBlcXVhbHMgdG8gdGhlIGVuZCBpbmRleCBmb3IgYHNsaWNlYC5cIjtcbiAgICB9XG4gICAgQGVsc2UgaWYgJHN0YXJ0IDwgMSBvciAkZW5kIDwgMSB7XG4gICAgICAgIEB3YXJuIFwiTGlzdCBpbmRleGVzIG11c3QgYmUgbm9uLXplcm8gaW50ZWdlcnMgZm9yIGBzbGljZWAuXCI7XG4gICAgfVxuICAgIEBlbHNlIGlmICRzdGFydCA+IGxlbmd0aCgkbGlzdCkge1xuICAgICAgICBAd2FybiBcIkxpc3QgaW5kZXggaXMgI3skc3RhcnR9IGJ1dCBsaXN0IGlzIG9ubHkgI3tsZW5ndGgoJGxpc3QpfSBpdGVtIGxvbmcgZm9yIGBzbGljZWAuXCI7XG4gICAgfVxuICAgIEBlbHNlIGlmICRlbmQgPiBsZW5ndGgoJGxpc3QpIHtcbiAgICAgICAgQHdhcm4gXCJMaXN0IGluZGV4IGlzICN7JGVuZH0gYnV0IGxpc3QgaXMgb25seSAje2xlbmd0aCgkbGlzdCl9IGl0ZW0gbG9uZyBmb3IgYHNsaWNlYC5cIjtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgICAkcmVzdWx0OiAoKTtcbiAgICAgICAgQGZvciAkaSBmcm9tICRzdGFydCB0aHJvdWdoICRlbmQge1xuICAgICAgICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsIG50aCgkbGlzdCwgJGkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBAcmV0dXJuICRyZXN1bHQ7XG59XG5cbi8qIFJldmVyc2UgYSBsaXN0ICovXG5AZnVuY3Rpb24gcmV2ZXJzZSgkbGlzdCwgJHJlY3Vyc2l2ZTogZmFsc2UpIHtcbiAgICAkcmVzdWx0OiAoKTtcbiAgICBAZm9yICRpIGZyb20gbGVuZ3RoKCRsaXN0KSAqIC0xIHRocm91Z2ggLTEge1xuICAgICAgICBAaWYgdHlwZS1vZihudGgoJGxpc3QsIGFicygkaSkpKSA9PSBsaXN0IGFuZCAkcmVjdXJzaXZlIHtcbiAgICAgICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCByZXZlcnNlKG50aCgkbGlzdCwgYWJzKCRpKSksICRyZWN1cnNpdmUpKTtcbiAgICAgICAgfVxuICAgICAgICBAZWxzZSB7XG4gICAgICAgICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgbnRoKCRsaXN0LCBhYnMoJGkpKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQHJldHVybiAkcmVzdWx0O1xufVxuXG4vKiBDb252ZXJ0IGEgbGlzdCBpbnRvIGEgc3RyaW5nICovXG5AZnVuY3Rpb24gdG8tc3RyaW5nKCRsaXN0LCAkZ2x1ZTogJycsICRpcy1uZXN0ZWQ6IGZhbHNlKSB7XG4gICRyZXN1bHQ6IG51bGw7XG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRsaXN0KSB7XG4gICAgJGU6IG50aCgkbGlzdCwgJGkpO1xuICAgIEBpZiB0eXBlLW9mKCRlKSA9PSBsaXN0IHtcbiAgICAgICRyZXN1bHQ6ICRyZXN1bHQje3RvLXN0cmluZygkZSwgJGdsdWUsIHRydWUpfTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgJHJlc3VsdDogaWYoJGkgIT0gbGVuZ3RoKCRsaXN0KSBvciAkaXMtbmVzdGVkLCAkcmVzdWx0I3skZX0jeyRnbHVlfSwgJHJlc3VsdCN7JGV9KTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRyZXN1bHQ7XG59XG5cbi8qIFNoaWZ0IGluZGV4ZXMgb2YgYSBsaXN0ICovXG5AZnVuY3Rpb24gbG9vcCgkbGlzdCwgJHZhbHVlOiAxKSB7XG4gICRyZXN1bHQ6ICgpO1xuICBAZm9yICRpIGZyb20gMCB0byBsZW5ndGgoJGxpc3QpIHtcbiAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgbnRoKCRsaXN0LCAoJGkgLSAkdmFsdWUpICUgbGVuZ3RoKCRsaXN0KSArIDEpKTtcbiAgfVxuICBAcmV0dXJuICRyZXN1bHQ7XG59IiwiLmFkZC1hcGkge1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgIG1hcmdpbjogMCAwIDFlbSAwO1xufVxuLnBlci1hcGkge1xuICAgIHBhZGRpbmc6IDFyZW0gMCAycmVtIDA7XG4gICAgbWFyZ2luOiAwIDFyZW0gMCAxcmVtO1xuICAgIGJveC1zaGFkb3c6IDAgNXB4IDRweCAtNXB4IHB1cnBsZTtcbn1cbi5hcGktZWRpdCB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcbiAgICBwYWRkaW5nOiAwIDEwcHg7XG4gICAgbWFyZ2luOiAwIDFlbSAwIDA7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuLmFwaS11cmkge1xuICAgICY6ZGlzYWJsZWQge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xuICAgIH1cbn1cbi5hcGktc2F2ZSB7XG4gICAgQGV4dGVuZCAuYXBpLWVkaXQ7XG59XG4uYXBpLXRlc3Qge1xuICAgIEBleHRlbmQgLmFwaS1lZGl0O1xufVxuLmFwaS10cmVlLXdyYXBwZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IDFyZW0gMCAwIDA7XG4gICAgb3ZlcmZsb3cteDogc2Nyb2xsO1xuICAgIG92ZXJmbG93LXk6IGhpZGRlbjtcbn1cbi5hcGktZGF0YSB7XG4gICAgcGFkZGluZzogLjVyZW0gMCAwIDA7XG59XG4uYXBpLXRyZWUtZnJhbWUge1xuICAgIHBhZGRpbmc6IDAgMCAwIDEuMnJlbTtcbn1cbi5hcGktdHJlZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDowO1xuICAgIGxlZnQ6MDtcbiAgICAvLyBwYWRkaW5nOiAuM2VtIDAgMCA2MnB4O1xuICAgIC8vIHdpZHRoOiAwO1xuICAgIHBhZGRpbmc6IDAgMCAwIDQ0LjQ0cHg7XG4gICAgaGVpZ2h0OiAwO1xufVxuLmFwaS1zdmcge1xuICAgICY6bm90KDpyb290KSB7XG4gICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIH1cbiAgICAuYXBpLXN2Zy1wYXRoIHtcbiAgICAgICAgc3Ryb2tlOiBwdXJwbGU7XG4gICAgICAgIHN0cm9rZS13aWR0aDogMTtcbiAgICAgICAgZmlsbDogdHJhbnNwYXJlbnQ7XG4gICAgfVxufVxuaSB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuLmxheWVyIHtcbiAgICBtYXJnaW46IDAgMCAxZW0gMDtcbiAgICB3aWR0aDogMjNlbTtcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjZGRkO1xufVxuLmFkZC1kYXRhcm9vdC1jaGlsZCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMnB4O1xuICAgIGxlZnQ6IDA7XG4gICAgQGV4dGVuZCAlbWFyaztcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcbn1cbi5kZWwtZGF0YXJvb3QtY2hpbGQge1xuICAgIEBleHRlbmQgJW1hcms7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMzZweDtcbiAgICBsZWZ0OiAwO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cblxuLmxlYWYge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBoZWlnaHQ6IDIycHg7XG4gICAgd2lkdGg6IDQ2OXB4O1xuICAgIHBhZGRpbmc6IDAgLjVlbTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbWFyZ2luOiAwIDAgMS4zZW0gMDtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBAaW5jbHVkZSBpbmxpbmUtYmxvY2stZml4KGlucHV0KTtcbiAgICBAaW5jbHVkZSBpbmxpbmUtYmxvY2stZml4KGkpO1xuICAgIC5yZW1vdmUtY2hpbGQge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjAwO1xuICAgICAgICBtYXJnaW46IDJweCAuMmVtIDAgMDtcbiAgICAgICAgQGV4dGVuZCAlbWFyaztcbiAgICB9XG4gICAgaW5wdXQsIGkge1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuICAgIGlucHV0IHtcbiAgICAgICAgd2lkdGg6IDEzMHB4O1xuICAgICAgICBoZWlnaHQ6IDIwcHg7XG4gICAgfVxuICAgIGkge1xuICAgICAgICB3aWR0aDogMjBweDtcbiAgICB9XG4gICAgLmFkZC1jaGlsZCB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XG4gICAgICAgIG1hcmdpbjogMnB4IDAgMCAuMmVtO1xuICAgICAgICBAZXh0ZW5kICVtYXJrO1xuICAgIH1cbiAgICAuZ2FwLW1hcmsge1xuICAgIH1cbiAgICAubGVhZi1rZXkge1xuICAgICAgICBwYWRkaW5nOiAwIDFlbTtcbiAgICB9XG4gICAgLmFkZC1zaWJsaW5nIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDEzMCU7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgfVxufVxuXG4uZGF0YS1yYXcge1xuICAgIEBleHRlbmQgLmFwaS1lZGl0O1xufVxuLmRhdGEtYmVhdXRpZnkge1xuICAgIEBleHRlbmQgLmFwaS1lZGl0O1xufVxuLmRhdGEtaGlnaGxpZ2h0IHtcbiAgICBAZXh0ZW5kIC5hcGktZWRpdDtcbn1cbi5kYXRhLXByZXZpZXcge1xuICAgIEBleHRlbmQgLmFwaS1lZGl0O1xufSIsIiVtYXJrIHtcbiAgICBib3JkZXItcmFkaXVzOiA1MCUgNTAlO1xuICAgIGNvbG9yOiAjRkZGO1xuICAgIGhlaWdodDogMS4ycmVtO1xuICAgIHdpZHRoOiAxLjJyZW07XG4gICAgbGluZS1oZWlnaHQ6IDEuMnJlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cbiVjYXJkLWJveCB7XG5cdHBhZGRpbmc6IDFyZW07XG5cdHdpZHRoOiA1MHJlbTtcblx0bWFyZ2luOiAwIGF1dG87XG5cdGJvcmRlcjogMXB4IHNvbGlkICNlMWU4ZWQ7XG59XG4lYnRuLWhvdmVyLXN0YXRlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICAgIGNvbG9yOiAjZmZmO1xufVxuJWVsbGlwc2lzIHtcbiAgICAvKipcbiAgICAgKiAxLiBIaWRlIGFueSBvdmVyZmxvd1xuICAgICAqIDIuIFByZXZlbnQgYW55IGxpbmUtYnJlYWtcbiAgICAgKiAzLiBBZGQgZWxsaXBzaXMgYXQgZW5kIG9mIGxpbmVcbiAgICAgKi9cbiAgICBvdmVyZmxvdzogaGlkZGVuOyAgICAgICAgLyogMSAqL1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7ICAgICAvKiAyICovXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7IC8qIDMgKi9cbn1cbiVyZXZlcnNlLWVsbGlwc2lzIHtcbiAgdGV4dC1vdmVyZmxvdzogY2xpcDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgJjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICdcXDAyMDI2JztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgei1pbmRleDogMTtcbiAgICBsZWZ0OiAtMWVtO1xuICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gICAgcGFkZGluZy1sZWZ0OiAxZW07XG4gICAgbWFyZ2luLWxlZnQ6IDAuNWVtO1xuICB9XG4gIHNwYW4ge1xuICAgIG1pbi13aWR0aDogMTAwJTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xuICAgIHRleHQtaW5kZW50OiAwLjVlbTtcbiAgICAmOmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgd2lkdGg6IDFlbTtcbiAgICAgICAgaGVpZ2h0OiAxZW07XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gICAgICAgIHotaW5kZXg6IDIwMDtcbiAgICAgICAgbGVmdDogLS41ZW07XG4gICAgfVxuICB9XG59XG4lZmlsZXVwbG9hZC1idG4ge1xuICAgIHdpZHRoOiAwLjFweDtcbiAgICBoZWlnaHQ6IDAuMXB4OyAvKiB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBzZXQgdG8gMC4xcHggaW5zdGVhZCBvZiBqdXN0IDBweC4gU2V0dGluZyB0aGUgcHJvcGVydHkgdmFsdWVzIHRvIHplcm8gZW5kcyB1cCB0aHJvd2luZyB0aGUgZWxlbWVudCBvdXQgb2YgdGFiIHBhcnR5IGluIHNvbWUgYnJvd3NlcnMuICAqL1xuICAgIG9wYWNpdHk6IDA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgei1pbmRleDogLTE7XG4gICAgKyBsYWJlbCB7XG4gICAgICBjb2xvcjogIzAwMDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICBib3gtc2hhZG93OiBub25lO1xuICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM5OTk7XG4gICAgICBsaW5lLWhlaWdodDogMXJlbTtcbiAgICAgIGhlaWdodDogMjZweDtcbiAgICAgIHBhZGRpbmc6IC41cmVtIDFyZW07XG4gICAgICBtYXgtd2lkdGg6IDIwcmVtO1xuICAgICAgKiB7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOyAvKiBkZWFsIHdpdGggUG9zc2libGUgVG91Y2ggSXNzdWVzICovXG4gICAgICB9XG4gICAgfVxuICAgICY6Zm9jdXMgKyBsYWJlbCxcbiAgICArIGxhYmVsOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgfVxuICAgICY6Zm9jdXMgKyBsYWJlbCB7XG4gICAgICAvLyBvdXRsaW5lOiAxcHggZG90dGVkICMwMDA7XG4gICAgICAvLyBvdXRsaW5lOiAtd2Via2l0LWZvY3VzLXJpbmctY29sb3IgYXV0byA1cHg7XG4gICAgfVxufSIsIi51c2VyLWluZm8tY2FyZCB7XG5cdGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMjU1LDI1NSwyNTUsMCkgNjAlLCAjZmZmKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0bGluZWFyLWdyYWRpZW50KDcwZGVnLCAjZTBmMWZmIDMyJSwgI2ZmZmFlMyk7XG4gIEBleHRlbmQgJWNhcmQtYm94O1xuXHQuc2VsZi1pbmZvIHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdH1cblx0LmluZm8ge1xuXHRcdHBhZGRpbmc6IDAgMXJlbTtcblx0fVxuXHQuY2FyZC1ibG9jay1idG4ge1xuXHRcdHdpZHRoOiAxMDAlO1xuXHR9XG5cdC5jYXJkLWxpbmstZm9sbG93aW5nIHtcblx0XHRwYWRkaW5nOiAkdXNlci1mb2xsb3dpbmctbGluay1wYWRkaW5nO1xuXHRcdC8vIG1hcmdpbjogJHVzZXItZm9sbG93aW5nLWxpbmstbWFyZ2luO1xuXHR9XG5cdC5jYXJkLWxpbmstZm9sbG93ZXJzIHtcblx0XHRwYWRkaW5nOiAkdXNlci1mb2xsb3dpbmctbGluay1wYWRkaW5nO1xuXHRcdG1hcmdpbjogMCAwIDAgMXJlbVxuXHR9XG5cdC51c2VyLWF2YXRhcnMge1xuXHQgICAgZGlzcGxheTogZmxleDtcblx0ICAgIHBhZGRpbmc6IC4zcmVtIDAgMCAwO1xuXHQgICAgJjpob3ZlciB7XG4gIFx0XHRcdGJhY2tncm91bmQtY29sb3I6IGluaXRpYWw7XG4gIFx0XHRcdGNvbG9yOiAjMzMzO1xuICBcdFx0fSBcblx0fVxuXHQuZm9sbG93LWF2YXRhci1uYW1lIHtcblx0XHRtYXJnaW46IDAgMnB4O1xuXHRcdC5hdmF0YXIge1xuXHRcdFx0Zm9udC1zaXplOiAwO1xuXHRcdH1cblx0XHQubmFtZSB7XG5cdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0fVxuXHR9XG5cdC5mb2xsb3cge1xuXHRcdCYtc3RhdHVzIHtcblx0XHRcdHBhZGRpbmc6ICRmb2xsb3ctc3RhdHVzLXBhZGRpbmc7XG5cdFx0fVxuXHRcdCYtYWN0aW9uIHtcblx0XHRcdHBhZGRpbmc6ICRmb2xsb3ctYWN0aW9uLXBhZGRpbmc7XG5cdFx0fVxuXHR9XG59IiwiLm1pY3JvcG9zdC10ZXh0IHtcblx0d29yZC1icmVhazogYnJlYWstYWxsO1xuXHRwYWRkaW5nOiAwLjVyZW0gMDtcbn1cbi5uZXctcG9zdCxcbi5wcm9maWxlLXBvc3Qge1xuXHRmb250LXNpemU6IDEycHg7XG59XG4ubmV3LXBvc3QtdGV4dCB7XG5cdG91dGxpbmU6IG5vbmU7XG5cdHdpZHRoOiAxMDAlO1xuXHRtYXgtd2lkdGg6IDEwMCU7XG59XG4ubmV3LXBvc3QtdG9vbGJhciB7XG5cdEBpbmNsdWRlIGNsZWFyZml4KCk7XG5cdHRleHQtYWxpZ246IGNlbnRlcjtcblxuXHQuaW1hZ2UtdXBsb2FkIHtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0ZmxvYXQ6IGxlZnQ7XG5cblx0fVxuXHQubWljcm9wb3N0LWlucHV0LWZpbGUge1xuXHRcdEBleHRlbmQgJWZpbGV1cGxvYWQtYnRuO1xuXHR9XG5cdC5idG4tc3VibWl0IHtcblx0XHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdFx0ZmxvYXQ6IHJpZ2h0O1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xuICAgIGxpbmUtaGVpZ2h0OiAxcmVtO1xuICAgIGhlaWdodDogMXJlbTtcbiAgICBwYWRkaW5nOiAuNXJlbSAycmVtO1xuICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgICY6aG92ZXIge1xuICAgIFx0QGV4dGVuZCAlYnRuLWhvdmVyLXN0YXRlO1xuICAgIH1cblx0fVxufVxuLmZlZWRzIHtcblx0ZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgcGFkZGluZzogMXJlbSAwIDAgMDtcbn1cbi5taWNyb3Bvc3RzIHtcblx0cGFkZGluZzogMDtcblx0d2lkdGg6IDUwcmVtO1xuXHRib3JkZXI6IDFweCBzb2xpZCAjZTFlOGVkO1xufVxuXG4ubWljcm9wb3N0IHtcblx0ZGlzcGxheTogZmxleDtcblx0Ym9yZGVyLXRvcDogMXB4IHNvbGlkICNlMWU4ZWQ7XG5cdHBhZGRpbmc6IC44cmVtIDFyZW07XG5cdCY6Zmlyc3QtY2hpbGQge1xuXHRcdGJvcmRlci10b3A6IG5vbmU7XG5cdH1cblx0LmF2YXRhci1zZWN0aW9uIHtcblx0XHRmbGV4LWJhc2lzOiA1cmVtO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgZm9udC1zaXplOiAwOyAvLyBnZXQgcmlkIG9mIHdoaXRlc3BhY2UgZ2FwXG5cdH1cblx0LmNvbnRlbnQge1xuXHRcdGZsZXg6IDE7XG5cdH1cblx0Lm1pY3JvcG9zdC1pbWcge1xuXHRcdG1heC1oZWlnaHQ6IDY2NXB4O1xuXHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdH1cbn0iLCJodG1sIHtcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0Zm9udC1zaXplOiAxMnB4O1xuXHQqLFxuXHQqOjpiZWZvcmUsXG5cdCo6OmFmdGVyIHtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHR9XG59XG5ib2R5IHtcblx0Zm9udC1mYW1pbHk6IEFyaWFsLCdIZWx2ZXRpY2EgTmV1ZScsSGVsdmV0aWNhLHNhbnMtc2VyaWY7XG5cdGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG59XG4uaGlkZSB7XG5cdGRpc3BsYXk6IG5vbmU7XG59XG4uY2VudGVyIHtcblx0dGV4dC1hbGlnbjogY2VudGVyO1xufVxuaW5wdXQ6bm90KFt0eXBlPWNoZWNrYm94XSkge1xuXHRhcHBlYXJhbmNlOiBub25lO1xufVxuaW5wdXQsXG5zZWxlY3Qge1xuXHRib3JkZXI6IG5vbmU7XG5cdCY6Zm9jdXMgeyBcblx0XHRvdXRsaW5lOiBub25lOyBcblx0fVxufVxuaW5wdXQ6LXdlYmtpdC1hdXRvZmlsbCwgXG50ZXh0YXJlYTotd2Via2l0LWF1dG9maWxsLCBcbnNlbGVjdDotd2Via2l0LWF1dG9maWxsIHtcbiAgYm94LXNoYWRvdzogMCAwIDAgMTAwMHB4IHdoaXRlIGluc2V0O1xuICAtd2Via2l0LXRleHQtZmlsbC1jb2xvcjogIzAwMDtcbiAgJjpmb2N1cyB7XG4gIFx0Ym94LXNoYWRvdzogMCAwIDAgMTAwMHB4IHdoaXRlIGluc2V0O1xuICBcdC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiAjMDAwO1xuICB9XG59XG5pbnB1dFt0eXBlPVwiaGlkZGVuXCJdIHtcblx0ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xufVxuXG50ZXh0YXJlYVt0eXBlPVwiaGlkZGVuXCJdIHtcbiAgICBkaXNwbGF5OiBub25lO1xufVxuLmVsbGlwc2lzIHtcblx0QGV4dGVuZCAlZWxsaXBzaXM7XG59XG4ucmV2ZXJzZS1lbGxpcHNpcyB7XG5cdEBleHRlbmQgJXJldmVyc2UtZWxsaXBzaXM7XG59IiwiLy8gUGxhY2UgYWxsIHRoZSBzdHlsZXMgcmVsYXRlZCB0byB0aGUgVXNlcnMgY29udHJvbGxlciBoZXJlLlxuLy8gVGhleSB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgaW5jbHVkZWQgaW4gYXBwbGljYXRpb24uY3NzLlxuLy8gWW91IGNhbiB1c2UgU2FzcyAoU0NTUykgaGVyZTogaHR0cDovL3Nhc3MtbGFuZy5jb20vXG4udXNlcnMge1xuXHQucm93IHtcblx0XHRAaW5jbHVkZSBzYW1lSGVpZ2h0TGluZWhlaWdodCgzcmVtKTtcblx0XHQrIC5yb3cge1xuXHRcdFx0bWFyZ2luLXRvcDogLjVyZW07XG5cdFx0fVxuXHR9XG5cdGlucHV0IHtcblx0XHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdFx0QGluY2x1ZGUgc2FtZUhlaWdodExpbmVoZWlnaHQoM3JlbSk7XG5cdFx0Ym9yZGVyLXRvcDogbm9uZTtcblx0XHRib3JkZXItbGVmdDogbm9uZTtcblx0XHRib3JkZXItcmlnaHQ6IG5vbmU7XG5cdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7XG5cdFx0Jjpmb2N1cyB7XG5cdFx0XHRib3JkZXItYm90dG9tOiAxcHggc29saWQgIzAwMDtcblx0XHR9XG5cdH1cblx0LmJ0bi1zdWJtaXQge1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdG1hcmdpbjogMCBhdXRvO1xuXHRcdHdpZHRoOiAxMHJlbTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG5cdFx0Ym9yZGVyOiAxcHggc29saWQgIzk5OTtcblx0XHRib3JkZXItcmFkaXVzOiA0cHg7XG5cdH1cbn1cbi5mb3JtLWNvbnRhaW5lciB7XG5cdG1hcmdpbjogMCBhdXRvO1xuXHR3aWR0aDogNDByZW07XG59XG4ucm93IHtcblx0Zm9udC1zaXplOiAwO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdGxhYmVsIHtcblx0XHRmb250LXNpemU6IDEycHg7XG5cdH1cbn1cbi5mb3JtLWxhYmVsIHtcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHR3aWR0aDogMTNyZW07XG5cdHRleHQtYWxpZ246IHJpZ2h0O1xuXHRmb250LXNpemU6IDEycHg7XG5cdHBhZGRpbmc6IDAgMXJlbSAwIDA7XG59XG4uZm9ybS1jb250cm9sIHtcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRmb250LXNpemU6IDEycHg7XG5cdHdpZHRoOiAyN3JlbTtcbn1cbi5mb3JtLWV4dHJhIHtcblx0Zm9udC1zaXplOiAxMnB4O1xuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdHBhZGRpbmc6IDAgMCAwIDFyZW07XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0bGVmdDogNDByZW07XG5cdHRvcDogMDtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xufVxuLmJ0bi1zdWJtaXQge1xuXHRkaXNwbGF5OiBibG9jaztcblx0Zm9udC1zaXplOiAxMnB4O1xuXHRtYXJnaW46IDAgYXV0bztcbn1cbi5leHRyYSB7XG5cdHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbi51c2Vycy1saXN0IHtcblx0bWFyZ2luOiAwIGF1dG87XG4gICAgd2lkdGg6IDUwcmVtO1xufVxuLmdyYXZhdGFyX2VkaXQge1xuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdC5pbWFnZS11cGxvYWQge1xuXHRcdGlucHV0IHtcblx0XHRcdEBleHRlbmQgJWZpbGV1cGxvYWQtYnRuO1xuXHRcdH1cblx0fVxufVxuLnMtYXZhdGFyIHtcblx0Zm9udC1zaXplOiAwO1xufVxuXG4udXNlck5hbWUge1xuXHRwYWRkaW5nOiAwIC4ycmVtO1xufVxuLmVtYWlsIHtcblx0QGV4dGVuZCAudXNlck5hbWU7XG59XG4uc2hvdy1saW5rIHtcblx0bWFyZ2luLWxlZnQ6IC41cmVtO1xufVxuLnNob3ctbGluayArIC5lZGl0LWxpbmsge1xuXHRtYXJnaW4tbGVmdDogLjVyZW07XG59XG4uZWRpdC1saW5rICsgLmRlbGV0ZS11c2VyIHtcblx0bWFyZ2luLWxlZnQ6IC41cmVtO1xufVxuLnR3ZWV0LWJveFtjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCJdIHtcblx0b3V0bGluZTogbm9uZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDc0LCAxNDUsIDYwLCAwLjI1KTtcbiAgICBwYWRkaW5nOiA4cHggMTBweDtcbiAgICBjb2xvcjogIzMzMztcbiAgICAmLnNob3dQbGFjZWhvbGRlciB7XG5cdCAgICAmOmJlZm9yZSB7XG5cdFx0ICAgIGNvbnRlbnQ6IGF0dHIoZGF0YS1wbGFjZWhvbGRlci1kZWZhdWx0KTtcblx0XHQgICAgY29sb3I6ICNjY2Q2ZGQ7XG5cdFx0ICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHR9XG4gICAgfVxufSIsIi8qIFBybyB0aXA6IFVzZSBmdW5jdGlvbnMgd2hlbiB5b3UgbmVlZCB0byBjYWxjdWxhdGUgYSB2YWx1ZSB0aGF0IG1heSBiZSByZXVzZWQgc29tZXdoZXJlIGVsc2UuICovXG5AZnVuY3Rpb24gcGkoKSB7XG4gIEByZXR1cm4gMy4xNDE1OTI2NTM1OTtcbn1cbkBmdW5jdGlvbiBwb3coJG51bWJlciwgJGV4cCkge1xuICAkdmFsdWU6IDE7XG4gIEBpZiAkZXhwID4gMCB7XG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkZXhwIHtcbiAgICAgICR2YWx1ZTogJHZhbHVlICogJG51bWJlcjtcbiAgICB9XG4gIH1cbiAgQGVsc2UgaWYgJGV4cCA8IDAge1xuICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggLSRleHAge1xuICAgICAgJHZhbHVlOiAkdmFsdWUgLyAkbnVtYmVyO1xuICAgIH1cbiAgfVxuICBAcmV0dXJuICR2YWx1ZTtcbn1cbi8vIHNxdWFyZSByb290IGZ1bmN0aW9uIHVzaW5nIHRoZSBCYWJ5bG9uaWFuIG1ldGhvZFxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NZXRob2RzX29mX2NvbXB1dGluZ19zcXVhcmVfcm9vdHMjQmFieWxvbmlhbl9tZXRob2RcbkBmdW5jdGlvbiBzcXJ0KCRzcXVhcmUsICR0b2xlcmFuY2U6IC4wMDEsICRlc3RpbWF0ZTogJHNxdWFyZS8yKSB7XG4gIEBpZiBhYnMoJHNxdWFyZSAtICRlc3RpbWF0ZSokZXN0aW1hdGUpIDwgJHRvbGVyYW5jZSB7XG4gICAgQHJldHVybiAkZXN0aW1hdGU7XG4gIH1cbiAgQHJldHVybiBzcXJ0KCRzcXVhcmUsICR0b2xlcmFuY2UsICgkZXN0aW1hdGUgKyAkc3F1YXJlLyRlc3RpbWF0ZSkvMik7XG59XG4vKiBGQUNUT1JJQUwgKi9cbkBmdW5jdGlvbiBmYWN0KCRudW1iZXIpIHtcbiAgJHZhbHVlOiAxO1xuICBAaWYgJG51bWJlciA+IDAge1xuICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJG51bWJlciB7XG4gICAgICAkdmFsdWU6ICR2YWx1ZSAqICRpO1xuICAgIH1cbiAgfVxuICBAcmV0dXJuICR2YWx1ZTtcbn1cbi8vIGFic29sdXRlIHZhbHVlIGZ1bmN0aW9uXG5AZnVuY3Rpb24gYWJzKCRudW1iZXIpIHtcbiAgQGlmICRudW1iZXIgPj0gMCB7XG4gICAgQHJldHVybiAkbnVtYmVyO1xuICB9XG4gIEByZXR1cm4gLTEqJG51bWJlcjtcbn1cblxuQGZ1bmN0aW9uIHJhZCgkYW5nbGUpIHtcbiAgJHVuaXQ6IHVuaXQoJGFuZ2xlKTtcbiAgJHVuaXRsZXNzOiAkYW5nbGUgLyAoJGFuZ2xlICogMCArIDEpO1xuICAvLyBJZiB0aGUgYW5nbGUgaGFzICdkZWcnIGFzIHVuaXQsIGNvbnZlcnQgdG8gcmFkaWFucy5cbiAgQGlmICR1bml0ID09IGRlZyB7XG4gICAgJHVuaXRsZXNzOiAkdW5pdGxlc3MgLyAxODAgKiBwaSgpO1xuICB9XG4gIEByZXR1cm4gJHVuaXRsZXNzO1xufVxuXG5AZnVuY3Rpb24gc2luKCRhbmdsZSkge1xuICAkc2luOiAwO1xuICAkYW5nbGU6IHJhZCgkYW5nbGUpO1xuICAvLyBJdGVyYXRlIGEgYnVuY2ggb2YgdGltZXMuXG4gIEBmb3IgJGkgZnJvbSAwIHRocm91Z2ggMTAge1xuICAgICRzaW46ICRzaW4gKyBwb3coLTEsICRpKSAqIHBvdygkYW5nbGUsICgyICogJGkgKyAxKSkgLyBmYWN0KDIgKiAkaSArIDEpO1xuICB9XG4gIEByZXR1cm4gJHNpbjtcbn1cblxuQGZ1bmN0aW9uIGNvcygkYW5nbGUpIHtcbiAgJGNvczogMDtcbiAgJGFuZ2xlOiByYWQoJGFuZ2xlKTtcbiAgLy8gSXRlcmF0ZSBhIGJ1bmNoIG9mIHRpbWVzLlxuICBAZm9yICRpIGZyb20gMCB0aHJvdWdoIDEwIHtcbiAgICAkY29zOiAkY29zICsgcG93KC0xLCAkaSkgKiBwb3coJGFuZ2xlLCAyICogJGkpIC8gZmFjdCgyICogJGkpO1xuICB9XG4gIEByZXR1cm4gJGNvcztcbn1cblxuQGZ1bmN0aW9uIHRhbigkYW5nbGUpIHtcbiAgQHJldHVybiBzaW4oJGFuZ2xlKSAvIGNvcygkYW5nbGUpO1xufVxuXG4vKiBodHRwOi8vdGhlc2Fzc3dheS5jb20vYWR2YW5jZWQvaW52ZXJzZS10cmlnb25vbWV0cmljLWZ1bmN0aW9ucy13aXRoLXNhc3MjY29kaW5nLXRoZS1hdGFuLWZ1bmN0aW9uICovXG5cbiRkZWZhdWx0LXRocmVzaG9sZDogcGkoKS8xODAvMjA7XG5cbkBmdW5jdGlvbiBjb252ZXJ0LWFuZ2xlKCR2YWx1ZSwgJHVuaXQtbmFtZSkge1xuICAkZmFjdG9yczogKFxuICAgIHJhZDogMXJhZCxcbiAgICBkZWc6IDE4MGRlZy9waSgpLFxuICAgIGdyYWQ6IDIwMGdyYWQvcGkoKSxcbiAgICB0dXJuOiAuNXR1cm4vcGkoKVxuICApO1xuXG4gIEBpZiBub3QgdW5pdGxlc3MoJHZhbHVlKSB7XG4gICAgQHdhcm4gJ2AjeyR2YWx1ZX1gIHNob3VsZCBiZSB1bml0bGVzcyc7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIEBpZiBub3QgbWFwLWhhcy1rZXkoJGZhY3RvcnMsICR1bml0LW5hbWUpIHtcbiAgICBAd2FybiAndW5pdCBgI3skdW5pdC1uYW1lfWAgaXMgbm90IGEgdmFsaWQgdW5pdCAtIHBsZWFzZSBtYWtlIHN1cmUgaXQgaXMgZWl0aGVyIGBkZWdgLCBgcmFkYCwgYGdyYWRgIG9yIGB0dXJuYCc7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIEByZXR1cm4gJHZhbHVlKm1hcC1nZXQoJGZhY3RvcnMsICR1bml0LW5hbWUpO1xufVxuXG4vKiBpbnZlcnNlIHRyaWdvbm9tZXRyaWMgZnVuY3Rpb25zICovXG5AZnVuY3Rpb24gYXNpbigkeiwgJHVuaXQtbmFtZTogZGVnLCAkdGhyZXNob2xkOiAkZGVmYXVsdC10aHJlc2hvbGQpIHtcbiAgJHN1bTogMDtcbiAgJGNvbXBsZW1lbnQ6IGZhbHNlO1xuICAkc2lnbjogaWYoJHogIT0gMCwgJHovYWJzKCR6KSwgMSk7XG4gICR6OiBhYnMoJHopO1xuICBcbiAgLyogY2hlY2sgd2hldGhlciBhYnMoJHopIDw9IDEgYW5kIHRocm93IGFuIGVycm9yIGlmIGl0IHJldHVybnMgZmFsc2UgYmVjYXVzZSwgaW4gc3VjaCBhIGNhc2UsIG91ciAkdGVybSB3b24ndCBnZXQgdW5kZXIgdGhlICR0aHJlc2hvbGQgdmFsdWUgYW5kLCB3ZSdsbCBoYXZlIGFuIGluZmluaXRlIGxvb3AuICovXG4gIEBpZiAkeiA+IDEge1xuICAgIEB3YXJuICdpbGxlZ2FsIGAjeyR6fWAgdmFsdWUgZm9yIGZ1bmN0aW9uJztcbiAgICBAcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgQGlmICR6ID4gc2luKHBpKCkvNCkge1xuICAgICRjb21wbGVtZW50OiB0cnVlO1xuICAgICR6OiBzcXJ0KDEgLSBwb3coJHosIDIpKTtcbiAgfVxuXG4gICR0ZXJtOiAkejtcbiAgJGk6IDA7XG4gICRrOiAxO1xuXG4gIEB3aGlsZSAkdGVybSA+ICR0aHJlc2hvbGQge1xuICAgICRzdW06ICRzdW0gKyAkdGVybTtcblxuICAgICRpOiAkaSArIDE7XG4gICAgJGs6ICRrKigyKiRpIC0gMSkvKDIqJGkpO1xuICAgICRqOiAyKiRpICsgMTtcblxuICAgICR0ZXJtOiAkaypwb3coJHosICRqKS8kajtcbiAgfVxuXG4gIEByZXR1cm4gY29udmVydC1hbmdsZSgkc2lnbiooaWYoJGNvbXBsZW1lbnQsIHBpKCkvMiAtICRzdW0sICRzdW0pKSwgJHVuaXQtbmFtZSk7XG59XG5cbkBmdW5jdGlvbiBhY29zKCR6LCAkdW5pdC1uYW1lOiBkZWcsICR0aHJlc2hvbGQ6ICRkZWZhdWx0LXRocmVzaG9sZCkge1xuICBAcmV0dXJuIGNvbnZlcnQtYW5nbGUocGkoKS8yLCAkdW5pdC1uYW1lKSAtIGFzaW4oJHosICR1bml0LW5hbWUsICR0aHJlc2hvbGQpO1xufVxuXG5AZnVuY3Rpb24gYXRhbigkeiwgJHVuaXQtbmFtZTogZGVnLCAkdGhyZXNob2xkOiAkZGVmYXVsdC10aHJlc2hvbGQpIHsgIFxuICBAcmV0dXJuIGFzaW4oJHovc3FydCgxICsgcG93KCR6LCAyKSksICR1bml0LW5hbWUsICR0aHJlc2hvbGQpO1xufVxuXG4vKiByZXR1cm4gZmlib25hY2NpIHNlcXVlbmNlcyAqL1xuQGZ1bmN0aW9uIGZpYm9uYWNjaSgkbikge1xuICAkZmliOiAwIDE7XG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJG4ge1xuICAgICRuZXc6IG50aCgkZmliLCBsZW5ndGgoJGZpYikpICsgbnRoKCRmaWIsIGxlbmd0aCgkZmliKSAtIDEpO1xuICAgICRmaWI6IGFwcGVuZCgkZmliLCAkbmV3KTtcbiAgfVxuICBAcmV0dXJuICRmaWI7XG59XG5cbi8qIEp1Z2dsZXIgc2VxdWVuY2UgKi8gXG5AZnVuY3Rpb24ganVnZ2xlcigkbikge1xuICAkanVnZ2xlcjogKCRuKTtcbiAgQHdoaWxlIG50aCgkanVnZ2xlciwgbGVuZ3RoKCRqdWdnbGVyKSkgIT0gMSB7XG4gICAgJGxhc3QgICAgOiBudGgoJGp1Z2dsZXIsIGxlbmd0aCgkanVnZ2xlcikpO1xuICAgICR4ICAgICAgIDogaWYoJGxhc3QgJSAyID09IDAsIDEvMiwgMy8yKTtcbiAgICAkbmV3ICAgICA6IHBvdygkbGFzdCwgJHgpO1xuICAgICRqdWdnbGVyIDogYXBwZW5kKCRqdWdnbGVyLCAkbmV3KTtcbiAgfVxuICBAcmV0dXJuICRqdWdnbGVyO1xufVxuXG4vKiBMb29rLWFuZC1zYXkgc2VxdWVuY2UgKi9cbi8qIFxuU3RhcnQgZnJvbSBsYXN0IGNoYXJhY3RlclxuQ2hlY2sgdGhlIG51bWJlciBvZiBpZGVudGljYWwgY2hhcmFjdGVycyBwcmV2aW91cyB0byBhbmQgaW5jbHVkaW5nIHRoaXMgb25lIChiYXNpY2FsbHkgMSwgMiBvciAzKVxuUHJlcGVuZCB0aGlzIGNvdW50IGFuZCB0aGUgY2hhcmFjdGVyIHRvIHRoZSBuZXcgZW50cnlcblN0YXJ0IGJhY2sgdG8gbmV4dCB1bmNoZWNrZWQgY2hhcmFjdGVyIFxuKi9cbkBmdW5jdGlvbiBsb29rLWFuZC1zYXkoJG4pIHtcbiAgJHNlcXVlbmNlOiAoMSk7XG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJG4ge1xuICAgICRsYXN0LWVudHJ5IDogbnRoKCRzZXF1ZW5jZSwgbGVuZ3RoKCRzZXF1ZW5jZSkpO1xuICAgICRuZXctZW50cnkgIDogKCk7XG4gICAgJGNvdW50ICAgICA6IDA7XG4gICAgQGZvciAkaiBmcm9tIGxlbmd0aCgkbGFzdC1lbnRyeSkgKiAtMSB0aHJvdWdoIC0xIHsgXG4gICAgICAkaiAgICAgIDogYWJzKCRqKTtcbiAgICAgICRsYXN0ICAgOiBudGgoJGxhc3QtZW50cnksICRqKTtcblxuICAgICAgJGxhc3QtMSA6IG51bGw7XG4gICAgICAkbGFzdC0yIDogbnVsbDtcbiAgICAgIEBpZiAkaiA+IDEgeyAkbGFzdC0xOiBudGgoJGxhc3QtZW50cnksICRqIC0gMSk7IH1cbiAgICAgIEBpZiAkaiA+IDIgeyAkbGFzdC0yOiBudGgoJGxhc3QtZW50cnksICRqIC0gMik7IH1cblxuICAgICAgQGlmICRjb3VudCA9PSAwIHtcbiAgICAgICAgQGlmICRsYXN0ID09ICRsYXN0LTEgYW5kICRsYXN0ID09ICRsYXN0LTIgeyBcbiAgICAgICAgICAkY291bnQ6IDM7IFxuICAgICAgICB9XG4gICAgICAgIEBlbHNlIGlmICRsYXN0ID09ICRsYXN0LTEgeyBcbiAgICAgICAgICAkY291bnQ6IDI7IFxuICAgICAgICB9XG4gICAgICAgIEBlbHNlIHsgXG4gICAgICAgICAgJGNvdW50OiAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXBlbmQgbmV3IG51bWJlcnMgdG8gbmV3IGxpbmVcbiAgICAgICAgJG5ldy1saW5lOiBqb2luKCRjb3VudCAkbGFzdCwgJG5ldy1lbnRyeSk7ICBcbiAgICAgIH0gIFxuICAgICAgJGNvdW50OiAkY291bnQgLSAxO1xuICAgIH1cbiAgICAvLyBBcHBlbmRpbmcgbmV3IGxpbmUgdG8gcmVzdWx0XG4gICAgJHNlcXVlbmNlOiBhcHBlbmQoJHNlcXVlbmNlLCAkbmV3LWVudHJ5KTtcbiAgfSAgXG4gIC8vIFJldHVybmluZyB0aGUgd2hvbGUgc2VxdWVuY2VcbiAgQHJldHVybiAkc2VxdWVuY2U7XG59IiwiQG1peGluIGNsZWFyZml4KCkge1xuICAgICY6YmVmb3JlLCAmOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogXCIgXCI7XG4gICAgICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgIH1cbiAgICAmOmFmdGVyIHtcbiAgICAgICAgY2xlYXI6IGJvdGg7XG4gICAgfVxufVxuXG5AbWl4aW4gaW5saW5lLWJsb2NrLWZpeCgkZWxlbWVudCkge1xuICAgIGZvbnQtc2l6ZTogMDtcbiAgICA+ICN7JGVsZW1lbnR9IHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgIH1cbn1cblxuQG1peGluIHNhbWVIZWlnaHRMaW5laGVpZ2h0KCRoZWlnaHQpIHtcbiAgICBoZWlnaHQ6ICRoZWlnaHQ7XG4gICAgbGluZS1oZWlnaHQ6ICRoZWlnaHQ7XG59XG5cbkBtaXhpbiBzcXVhcmUoJHZhbCkge1xuICAgIGhlaWdodDogJHZhbDtcbiAgICB3aWR0aDogJHZhbDtcbn0iLCIucGFnaW5hdGlvbiB7XG5cdC5kaXNhYmxlZCB7XG5cdFx0ZGlzcGxheTogbm9uZTtcblx0fVxufSIsIi5zZXNzaW9ucyB7XG5cdC5yb3cge1xuXHRcdEBpbmNsdWRlIHNhbWVIZWlnaHRMaW5laGVpZ2h0KDNyZW0pO1xuXHRcdCsgLnJvdyB7XG5cdFx0XHRtYXJnaW4tdG9wOiAuNXJlbTtcblx0XHR9XG5cdH1cblx0aW5wdXQge1xuXHRcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0XHRsaW5lLWhlaWdodDogM3JlbTtcblx0XHRib3JkZXItdG9wOiBub25lO1xuXHRcdGJvcmRlci1sZWZ0OiBub25lO1xuXHRcdGJvcmRlci1yaWdodDogbm9uZTtcblx0XHRib3JkZXItYm90dG9tOiAxcHggc29saWQgIzk5OTtcblx0XHQmOmZvY3VzIHtcblx0XHRcdGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMDAwO1xuXHRcdH1cblx0fVxuXHQuYnRuLXN1Ym1pdCB7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0bWFyZ2luOiAwIGF1dG87XG5cdFx0d2lkdGg6IDEwcmVtO1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcblx0XHRib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xuXHRcdGJvcmRlci1yYWRpdXM6IDRweDtcblx0fVxufSIsIi5wYXNzd29yZF9yZXNldHMge1xuXHQucm93IHtcblx0XHRAaW5jbHVkZSBzYW1lSGVpZ2h0TGluZWhlaWdodCgzcmVtKTtcblx0XHQrIC5yb3cge1xuXHRcdFx0bWFyZ2luLXRvcDogLjVyZW07XG5cdFx0fVxuXHR9XG5cdGlucHV0IHtcblx0XHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdFx0bGluZS1oZWlnaHQ6IDNyZW07XG5cdFx0Ym9yZGVyLXRvcDogbm9uZTtcblx0XHRib3JkZXItbGVmdDogbm9uZTtcblx0XHRib3JkZXItcmlnaHQ6IG5vbmU7XG5cdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7XG5cdFx0Jjpmb2N1cyB7XG5cdFx0XHRib3JkZXItYm90dG9tOiAxcHggc29saWQgIzAwMDtcblx0XHR9XG5cdH1cblx0LmJ0bi1zdWJtaXQge1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdG1hcmdpbjogMCBhdXRvO1xuXHRcdHdpZHRoOiAxMHJlbTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG5cdFx0Ym9yZGVyOiAxcHggc29saWQgIzk5OTtcblx0XHRib3JkZXItcmFkaXVzOiA0cHg7XG5cdH1cbn0iLCIuYXBpLXVsLXdyYXBwZXIge1xuXHRpbnB1dCB7XG5cdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7XG5cdH1cblx0c2VsZWN0IHtcblx0XHRib3JkZXI6IDA7XG5cblx0XHRib3gtc2hhZG93OiAwIDFweCAwICM5OTk7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcblxuXHR9XG5cdC5hcGktdWwge1xuXHRcdGxpc3Qtc3R5bGU6IG5vbmU7XG5cdFx0cGFkZGluZzogLjVyZW07XG5cdH1cblx0LmFwaS1saSB7XG5cdFx0Ym9yZGVyLXRvcDogMXB4IHNvbGlkICM5OTk7XG5cdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7XG5cdFx0Ym9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjOTk5O1xuXHRcdGJvcmRlci1yaWdodDogMXB4IHNvbGlkICM5OTk7XG5cdFx0JiArIC5hcGktbGkge1xuXHRcdFx0bWFyZ2luLXRvcDogMS41cmVtO1xuXHRcdH1cblx0fVxuXHQuYXBpLWxpLXVyaSB7XG5cdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRcdHdpZHRoOiAyMHJlbTtcblx0XHRwYWRkaW5nOiAwIDAgMCAxcmVtO1xuXHR9XG5cdC5hcGktbGktZGVzY3JpcHRpb24ge1xuXHRcdHBhZGRpbmc6IC41cmVtIDFyZW07XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogI0ZGRkFGMDtcblx0XHQmICsgLnBlci1hcGkge1xuXHRcdFx0ZGlzcGxheTogbm9uZTtcblx0XHRcdGJvcmRlci10b3A6IDFweCBzb2xpZCAjZGRkO1xuXHRcdH1cblx0XHQmLnVuZm9sZCArIC5wZXItYXBpIHtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdH1cblx0fVxufSIsIi5hbGVydCB7XG5cdCYtc3VjY2VzcyB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogJHN1Y2Nlc3MtYmctY29sb3I7XG5cdFx0Y29sb3I6ICRzdWNjZXNzLWNvbG9yO1xuXHR9XG5cdCYtZGFuZ2VyIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkZGFuZ2VyLWJnLWNvbG9yO1xuXHRcdGNvbG9yOiAkZGFuZ2VyLWNvbG9yOyBcblx0fVxuXHQmLWluZm8ge1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICRpbmZvLWJnLWNvbG9yO1xuXHR9XG59XG4iLCIuY2FyZCB7XG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICMwN2Q7XG4gICAgYm9yZGVyLXRvcC13aWR0aDogM3B4O1xuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBsaW5lLWhlaWdodDogMThweDtcbn1cbiIsIi5qc29uIHtcblx0cHJlIHtvdXRsaW5lOiAxcHggc29saWQgI2NjYzsgcGFkZGluZzogNXB4OyBtYXJnaW46IDVweDsgd2hpdGUtc3BhY2U6cHJlO31cblx0LnN0cmluZyB7IFxuXHQgIGNvbG9yOiBncmVlbjtcblx0fVxuXHQubnVtYmVyIHtcblx0ICBjb2xvcjogZGFya29yYW5nZTtcblx0fVxuXHQuYm9vbGVhbiB7XG5cdFx0Y29sb3I6IGJsdWU7XG5cdH1cblx0Lm51bGwge1xuXHRcdGNvbG9yOiBtYWdlbnRhO1xuXHR9XG5cdC5rZXkge1xuXHRcdGNvbG9yOiByZWQ7XG5cdH1cbn0iLCIudXNlci1saW5rIHtcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRmb250LXNpemU6IDA7XG59XG4ubmF2IHtcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0LnN0YXRpYy1saW5rcyxcblx0LnVzZXItbGlua3Mge1xuXHRcdHBhZGRpbmc6IDAgMnJlbTtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdH1cblx0LmZpcnN0LWxheWVyIHtcblx0XHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdFx0dmVydGljYWwtYWxpZ246IHRvcDtcblx0fVxufSIsIi5wZXItcm93IHtcblx0ZGlzcGxheTogZmxleDtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2RkZDtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2RkZDtcbiAgcGFkZGluZzogLjVyZW07XG4gICY6Zmlyc3QtY2hpbGQge1xuICBcdGJvcmRlci10b3A6IDFweCBzb2xpZCAjZGRkO1xuICB9XG4gIC5mb2xsb3dfZm9ybSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICB9XG59XG5cblxuLm5hdmJhciB7XG5cdGhlaWdodDogM2VtO1xufSIsInByZSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG5cbmEge1xuICBjb2xvcjogIzAwMDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBib3gtc2hhZG93OiAwIDFweCAwIDAgIzAwMDtcbiAgcGFkZGluZzogLjJyZW0gLjJyZW07XG4gICYuYXZhdGFyIHtcbiAgICBib3gtc2hhZG93OiBub25lO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGZvbnQtc2l6ZTogMDtcbiAgfVxuXG4gICY6dmlzaXRlZCB7XG4gICAgY29sb3I6ICM2NjY7XG4gIH1cblxuICAmOmhvdmVyIHtcbiAgICBjb2xvcjogI2ZmZjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gIH1cbn1cblxuZGl2IHtcbiAgJi5maWVsZCwgJi5hY3Rpb25zIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICB9XG59XG5cbiNub3RpY2Uge1xuICBjb2xvcjogZ3JlZW47XG59XG5cbi5hbGVydCB7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgcGFkZGluZzogLjVyZW0gMS41cmVtO1xufVxuLmZpZWxkX3dpdGhfZXJyb3JzIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG4ucGFnaW5hdGlvbiB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGxpIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICB9XG59XG5cbiNlcnJvcl9leHBsYW5hdGlvbiB7XG4gIGJvcmRlcjogMnB4IHNvbGlkIHJlZDtcbiAgcGFkZGluZzogN3B4O1xuICBwYWRkaW5nLWJvdHRvbTogMDtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcblxuICBoMiB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBwYWRkaW5nOiA1cHggNXB4IDVweCAxNXB4O1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBtYXJnaW46IC03cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNjMDA7XG4gICAgY29sb3I6ICNmZmY7XG4gIH1cblxuICB1bCBsaSB7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIGxpc3Qtc3R5bGU6IHNxdWFyZTtcbiAgfVxufVxuIiwiLmljb24ge1xuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdHdpZHRoOiAxcmVtO1xuXHRoZWlnaHQ6IDFyZW07XG5cdGZpbGw6IGN1cnJlbnRDb2xvcjtcbn0iLCIuY29sbGFwc2luZyB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTtcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogLjM1cztcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogaGVpZ2h0LCB2aXNpYmlsaXR5O1xufVxuLnVuZm9sZCB7XG4gIHN2ZyB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcbiAgICBcbiAgfVxufSIsIi5wb3B1cC1zaGFkb3cge1xuXHRwb3NpdGlvbjogZml4ZWQ7XG5cdHRvcDogMDtcblx0bGVmdDogMDtcblx0d2lkdGg6IDEwMCU7XG5cdGhlaWdodDogMTAwJTtcblx0YmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAuNDUpO1xufVxuLnBvcHVwLWNvbnRlbnQge1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuXHR3aWR0aDogMjByZW07XG5cdGJvcmRlci1yYWRpdXM6IC40cmVtO1xuXHR3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xuXHR0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xufVxuLnBvcHVwLXRleHQge1xuXHRwYWRkaW5nOiAxcmVtO1xuXHRib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDtcbn1cbi5wb3B1cC1idG5zIHtcblx0Zm9udC1zaXplOiAwO1xuXHQucG9wdXAtYnRuOm9ubHktY2hpbGQge1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHR9XG59XG4ucG9wdXAtYnRuIHtcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHR3aWR0aDogNTAlO1xuXHRmb250LXNpemU6IDFyZW07XG5cdHRleHQtYWxpZ246IGNlbnRlcjtcblx0cGFkZGluZzogLjhyZW07XG5cdCYgKyAmIHtcblx0XHRib3JkZXItbGVmdDogMXB4IHNvbGlkICNkZGQ7XG5cdH1cbn0iLCIuZmxhc2gtbGF5ZXIge1xuXHRwb3NpdGlvbjogZml4ZWQ7XG5cdHRvcDogM3JlbTtcblx0bGVmdDogMDtcblx0cmlnaHQ6IDA7XG5cdHRleHQtYWxpZ246IGNlbnRlcjtcblx0cGFkZGluZzogLjNyZW0gMXJlbTtcblx0Ji5lcnJvciB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogcmVkO1xuXHR9XG5cdCYuc3VjY2VzcyB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XG5cdFx0Lm1lc3NhZ2Uge1xuXHRcdFx0Y29sb3I6IHdoaXRlO1xuXHRcdH1cblx0fVxufVxuXG4uYmxpbmsge1xuICAgIGFuaW1hdGlvbi1uYW1lOiBibGluaztcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAzO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogLjRzO1xufVxuQGtleWZyYW1lcyBibGluayB7XG4gICAgZnJvbSB7XG4gICAgICAgIG9wYWNpdHk6IDAuMztcbiAgICB9XG4gICAgdG8ge1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbn0iLCIudXNlci1pbmZvLWNhcmQgKyAubWljcm9wb3N0LWZvcm0ge1xuXHRib3JkZXItdG9wOiBub25lO1xufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */
