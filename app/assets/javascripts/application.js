!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([/*!**********************************************!*\
  !*** ./front-end/javascripts/application.js ***!
  \**********************************************/
function(e,t,n){"use strict";var r=(n(/*! ./common/ActionCable */15),n(/*! ./modules/dataLinks */25)),i=n(/*! ./modules/homepage */27),o=n(/*! ./modules/apiOperation */24),a=n(/*! ./modules/fisCiPlugins */26),s=n(/*! ./modules/newCiPlugins */28);(0,r.dataLinks)(),function(){var e={"/":i.home,"/dev":[o.initXhr],"/ci_plugins/new":s.newCiPlugins,"/ci_plugins":a.fcp},t=window.location.pathname;if(e.hasOwnProperty(t))if("[object Array]"===Object.prototype.toString.call(e[t])&&e[t].length)for(var n=0;n<e[t].length;n++)e[t][n].apply(null);else e[t].apply(null)}()},/*!***************************************************!*\
  !*** ./front-end/javascripts/common/utilities.js ***!
  \***************************************************/
function(e,t){"use strict";function n(e){return 0===Object.keys(e).length}function r(e){return JSON.parse(JSON.stringify(e))}function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1],n=JSON.parse(JSON.stringify(e));for(var r in t)t.hasOwnProperty(r)&&(n[r]=t[r]);return n}function o(e,t){if(!t)return e;var n={};for(var r in e)e.hasOwnProperty(r)&&(n[""+t+"["+r+"]"]=e[r]);return n}function a(e,t){if(!t)return e;var n={};n[t]={};for(var r in e)e.hasOwnProperty(r)&&(n[t][r]=e[r]);return n}function s(e){var t=document.createElement("div");t.innerHTML=e;var n=t.children[0];return n}function l(e,t){t.parentNode.insertBefore(e,t.nextSibling)}function c(e,t,n){var r;return function(){var i=this,o=arguments,a=function(){r=null,n||e.apply(i,o)},s=n&&!r;clearTimeout(r),r=setTimeout(a,t),s&&e.apply(i,o)}}function u(){var e=function(){return!this}();return e}function d(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0,n="x"==e?t:3&t|8;return n.toString(16)})}Object.defineProperty(t,"__esModule",{value:!0}),t.isEmpty=n,t.cloneObj=r,t.mergeObj=i,t.addPrefixToObj=o,t.wrapObj=a,t.strToDom=s,t.insertAfter=l,t.debounce=c,t.isStrictMode=u,t.generateUUID=d},/*!**********************************************!*\
  !*** ./front-end/javascripts/common/ajax.js ***!
  \**********************************************/
function(e,t,n){"use strict";function r(e){var t={ajax:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments[3],s=new Promise(function(s,l){var c=new XMLHttpRequest;if("POST"===e||"PUT"===e||"PATCH"===e||"DELETE"===e){var u=JSON.stringify(i((0,a.wrapObj)(n,r)));c.open(e,t),c.setRequestHeader("Content-type","application/json"),c.send(u)}else if("GET"===e){var d=(0,o.serialize)(i((0,a.addPrefixToObj)(n,r)));c.open(e,t+"?"+d),c.setRequestHeader("Content-type","application/json"),c.send()}c.onload=function(){this.status>=200&&this.status<300?s(this.response):l(this.responseText)},c.onerror=function(e){l(this.responseText)}});return s}};return{get:function(n,r){return t.ajax("GET",e,n,r)},post:function(n,r){return t.ajax("POST",e,n,r)},put:function(n,r){return t.ajax("PUT",e,n,r)},patch:function(n,r){return t.ajax("PATCH",e,n,r)},delete:function(n,r){return t.ajax("DELETE",e,n,r)}}}function i(e){var t=s.rorParams.csrfParam(),n=s.rorParams.csrfToken(),r={};return r.utf8="✓",r.format="json",r[t]=n,(0,a.mergeObj)(e,r)}Object.defineProperty(t,"__esModule",{value:!0}),t.$http=r;var o=n(/*! ./serialize */20),a=n(/*! ./utilities */1),s=n(/*! ./csrf */6)},/*!***********************************************!*\
  !*** ./front-end/javascripts/common/flash.js ***!
  \***********************************************/
function(e,t,n){"use strict";function r(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n=(0,s.strToDom)(i(e));document.body.appendChild(n),setTimeout(o.bind(null,n,t),2e3)}function i(e){var t='\n\t\t<div class="flash-layer '+(e.error?"error":"success")+'">\n\t\t\t<div class="message">'+(e.error||e.message)+"</div>\n\t\t</div>\n\t";return t}function o(e,t){e.addEventListener("animationend",function(){document.body.removeChild(e)}),e.classList.add("blink"),t()}function a(e,t){var n=JSON.parse(e);return r(n,t),n}Object.defineProperty(t,"__esModule",{value:!0}),t.flash=r,t.parseAndFlash=a;var s=n(/*! ./utilities */1)},/*!***********************************************!*\
  !*** ./front-end/javascripts/common/popup.js ***!
  \***********************************************/
function(e,t,n){"use strict";function r(e,t,n){var r=document.createElement("div");r.classList.add("popup-layer"),r.innerHTML=i(),s(r,e),o(r,e,t,n),document.body.appendChild(r),(0,c.disableScroll)()}function i(e){var t='\n    <div class="popup-shadow">\n      <div class="popup-content">\n\t\t\t\t<div class="popup-text">Are you sure to delete this API?</div>\n\t\t\t\t<div class="popup-btns">\n\t\t\t\t\t<span class="popup-btn popup-cancel-btn">cancel</span>\n\t\t\t\t\t<span class="popup-btn popup-confirm-btn">confirm</span>\n\t\t\t\t</div>\n      </div>\n    </div>\n\t';return t}function o(e,t,n,r){e.getElementsByClassName("popup-cancel-btn")[0].addEventListener("click",l),e.getElementsByClassName("popup-shadow")[0].addEventListener("click",l),e.getElementsByClassName("popup-confirm-btn")[0].addEventListener("click",a.bind(this,t,e,n,r))}function a(e,t,n,r){r(),document.body.removeChild(t)}function s(e,t){e.getElementsByClassName("popup-content")[0].style.transform="translate3d("+t.clientX+"px, "+t.clientY+"px, 0)"}function l(e){if(e.target===e.currentTarget){var t=e.target.closest(".popup-layer");t&&(document.body.removeChild(t),(0,c.enableScroll)())}}Object.defineProperty(t,"__esModule",{value:!0}),t.popup=r;var c=n(/*! ./toggleScroll */23)},/*!************************************************!*\
  !*** ./front-end/javascripts/api-tree/tree.js ***!
  \************************************************/
function(e,t,n){"use strict";function r(e){var t=new i(e);this._root=t}function i(e){this.nodeId=e.nodeId,this.parent=null,this.children=[],this.childrenlevel=1,this.column=0,this.totaloffsetylevel=0,this.data=e.data||{}}function o(e){for(var t=0,n=0;n<e.children.length;n++)t+=e.children[n].childrenlevel;return t}function a(e,t){for(var n=s(e,t),r=0,i=0;i<n;i++)r+=e[i].childrenlevel;return r}function s(e,t){for(var n,r=0;r<e.length;r++)e[r].nodeId===t&&(n=r);return n}Object.defineProperty(t,"__esModule",{value:!0}),t.Tree=r;var l=n(/*! ./queue */11);r.prototype.traverseDF=function(e){!function t(n){for(var r=0,i=n.children.length;r<i;r++)t(n.children[r]);e(n)}(this._root)},r.prototype.calcChildrenLevel=function(){var e=function(e){e.childrenlevel=e.children.length>0?o(e):1,e.column=e.parent?e.parent.column+1:0};this.traverseDF(e)},r.prototype.calcTotalOffsetYLevel=function(){var e=function(e){e.parent?e.totaloffsetylevel=e.parent.totaloffsetylevel+a(e.parent.children,e.nodeId):null===e.parent};this.traverseBF(e)},r.prototype.traverseBF=function(e){var t=new l.Queue;t.enqueue(this._root);for(var n=t.dequeue();n;){for(var r=0,i=n.children.length;r<i;r++)t.enqueue(n.children[r]);e(n),n=t.dequeue()}},r.prototype.contains=function(e,t){t.call(this,e)},r.prototype.add=function(e,t,n){var r=new i(e),o=null,a=function(e){e.nodeId===t&&(o=e)};if(this.contains(a,n),!o)throw new Error("Cannot add node to a non-existent parent.");return o.children.push(r),r.parent=o,this.calcChildrenLevel(),this.calcTotalOffsetYLevel(),this.checkDataHasChild(),r},r.prototype.remove=function(e,t,n){var r,i=null,o=null,a=function(e){e.nodeId===t&&(i=e)};if(this.contains(a,n),!i)throw new Error("Parent does not exist.");if(r=s(i.children,e),void 0===r)throw new Error("Node to remove does not exist.");return o=i.children.splice(r,1),this.calcChildrenLevel(),this.calcTotalOffsetYLevel(),this.checkDataHasChild(),o},r.prototype.traverseDirectChild=function(e){var t=new l.Queue,n=null,r=function(t){t.nodeId===e&&(n=t)};for(this.contains(r,this.traverseBF);n;){for(var i=0,o=n.children.length;i<o;i++)t.enqueue(n.children[i]);r(n),n=null}return t},r.prototype.applyStyle=function(){var e={},t=function(t){e[t.nodeId]=t.totaloffsetylevel};return this.traverseBF(t),e},r.prototype.traverseDescendants=function(e){var t=new l.Queue,n=null,r=function(t){t.nodeId===e&&(n=t)};this.contains(r,this.traverseBF),t.enqueue(n);for(var i=t.dequeue(),o=[];i;){o.push(i);for(var a=0,s=i.children.length;a<s;a++)t.enqueue(i.children[a]);i=t.dequeue()}return o},r.prototype.checkDataHasChild=function(){var e=function(e){e.data.hasChild=e.children.length>0};this.traverseBF(e)},r.prototype.maxId=function(){var e=0,t=function(t){t.nodeId>e&&(e=t.nodeId)};return this.traverseBF(t),e},r.prototype.depth=function(){var e=[],t=function(t){var n=0;if(0===t.children.length){for(;null!==t.parent;)n+=1,t=t.parent;e.push(n)}};return this.traverseDF(t),e},r.prototype.dimensions=function(){var e=void 0,t=void 0,n=[];return n=this.depth(),e=Math.max.apply(null,n),t=this._root.childrenlevel,[e,t]}},/*!**********************************************!*\
  !*** ./front-end/javascripts/common/csrf.js ***!
  \**********************************************/
function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.rorParams={csrfToken:function(){return document.querySelector("meta[name=csrf-token]").getAttribute("content")},csrfParam:function(){return document.querySelector("meta[name=csrf-param]").getAttribute("content")},isCrossDomain:function(e){var t=document.createElement("a");t.href=location.href;var n=document.createElement("a");try{return n.href=e,n.href=n.href,!((!n.protocol||":"===n.protocol)&&!n.host||t.protocol+"//"+t.host==n.protocol+"//"+n.host)}catch(e){return!0}}}},/*!***********************************************************!*\
  !*** ./front-end/javascripts/common/twoWayDataBinding.js ***!
  \***********************************************************/
function(e,t){"use strict";function n(e,t){var n={};return Object.keys(e).forEach(function(a){var s=e[a];Object.defineProperty(n,a,{enumerable:!0,get:function(){return s},set:function(e){s=e,r("[bind="+a+"]",t).concat(r("[model="+a+"]",t)).forEach(function(e){e.getAttribute("bind")&&!e.hasAttribute("bind-toggle-class")&&(e.textContent=s),e.hasAttribute("bind-toggle-class")&&(s===!0||"true"===s?e.classList.add("toggle-true"):s===!1||"false"===s?e.classList.remove("toggle-true"):s&&(""+s).length>0&&!o(i(e))&&e.classList.add("toggle-true")),e.hasAttribute("bind-attr-href")&&e.setAttribute("href",s),e.getAttribute("model")&&e!==document.activeElement&&(e.value=s)})}}),n[a]=s,r("[model="+a+"]",t).forEach(function(e){function t(){n[a]=e.value}e.addEventListener("input",t)})}),n}function r(e,t){var n=Array.prototype.slice.call(t.querySelectorAll(e));return t.matches(e)&&n.push(t),n}function i(e){var t=[];return function e(n){var r=n.children;if(n.childElementCount)for(var i=r.length-1;i>=0;i--)e(r[i]);t.push(n)}(e),t}function o(e){var t=!1;if(0!==e.length){for(var n=e.length-1;n>=0&&t!==!0;n--)t=e[n]===document.activeElement;return t}}Object.defineProperty(t,"__esModule",{value:!0}),t.twoWayDataBinding=n},/*!**************************************************!*\
  !*** ./front-end/javascripts/global/constant.js ***!
  \**************************************************/
function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.rootAPI=window.location.origin+"/apis"},/*!**********************************!*\
  !*** ./~/vue/dist/vue.common.js ***!
  \**********************************/
function(e,t,n){(function(t){/*!
	 * Vue.js v2.1.8
	 * (c) 2014-2016 Evan You
	 * Released under the MIT License.
	 */
"use strict";function n(e){return null==e?"":"object"===("undefined"==typeof e?"undefined":ri(e))?JSON.stringify(e,null,2):String(e)}function r(e){var t=parseFloat(e,10);return t||0===t?t:e}function i(e,t){for(var n=Object.create(null),r=e.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}function o(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}function a(e,t){return oi.call(e,t)}function s(e){return"string"==typeof e||"number"==typeof e}function l(e){var t=Object.create(null);return function(n){var r=t[n];return r||(t[n]=e(n))}}function c(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n}function u(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function d(e,t){for(var n in t)e[n]=t[n];return e}function p(e){return null!==e&&"object"===("undefined"==typeof e?"undefined":ri(e))}function f(e){return di.call(e)===pi}function v(e){for(var t={},n=0;n<e.length;n++)e[n]&&d(t,e[n]);return t}function h(){}function m(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}function g(e,t){var n=p(e),r=p(t);return n&&r?JSON.stringify(e)===JSON.stringify(t):!n&&!r&&String(e)===String(t)}function y(e,t){for(var n=0;n<e.length;n++)if(g(e[n],t))return n;return-1}function b(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function _(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}function w(e){if(!mi.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}function C(e){return/native code/.test(e.toString())}function k(e){Pi.target&&Li.push(Pi.target),Pi.target=e}function x(){Pi.target=Li.pop()}function A(e,t){e.__proto__=t}function E(e,t,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];_(e,o,t[o])}}function S(e,t){if(p(e)){var n;return a(e,"__ob__")&&e.__ob__ instanceof Mi?n=e.__ob__:Di.shouldConvert&&!Ai()&&(Array.isArray(e)||f(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Mi(e)),t&&n&&n.vmCount++,n}}function O(e,t,n,r){var i=new Pi,o=Object.getOwnPropertyDescriptor(e,t);if(!o||o.configurable!==!1){var a=o&&o.get,s=o&&o.set,l=S(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=a?a.call(e):n;return Pi.target&&(i.depend(),l&&l.dep.depend(),Array.isArray(t)&&P(t)),t},set:function(t){var r=a?a.call(e):n;t===r||t!==t&&r!==r||(s?s.call(e,t):n=t,l=S(t),i.notify())}})}}function T(e,t,n){if(Array.isArray(e))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(a(e,t))return void(e[t]=n);var r=e.__ob__;if(!(e._isVue||r&&r.vmCount))return r?(O(r.value,t,n),r.dep.notify(),n):void(e[t]=n)}function $(e,t){var n=e.__ob__;e._isVue||n&&n.vmCount||a(e,t)&&(delete e[t],n&&n.dep.notify())}function P(e){for(var t=void 0,n=0,r=e.length;n<r;n++)t=e[n],t&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&P(t)}function L(e,t){if(!t)return e;for(var n,r,i,o=Object.keys(t),s=0;s<o.length;s++)n=o[s],r=e[n],i=t[n],a(e,n)?f(r)&&f(i)&&L(r,i):T(e,n,i);return e}function N(e,t){return t?e?e.concat(t):Array.isArray(t)?t:[t]:e}function I(e,t){var n=Object.create(e||null);return t?d(n,t):n}function j(e){var t=e.props;if(t){var n,r,i,o={};if(Array.isArray(t))for(n=t.length;n--;)r=t[n],"string"==typeof r&&(i=si(r),o[i]={type:null});else if(f(t))for(var a in t)r=t[a],i=si(a),o[i]=f(r)?r:{type:r};e.props=o}}function D(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}function M(e,t,n){function r(r){var i=Bi[r]||Fi;u[r]=i(e[r],t[r],n,r)}j(t),D(t);var i=t.extends;if(i&&(e="function"==typeof i?M(e,i.options,n):M(e,i,n)),t.mixins)for(var o=0,s=t.mixins.length;o<s;o++){var l=t.mixins[o];l.prototype instanceof Ue&&(l=l.options),e=M(e,l,n)}var c,u={};for(c in e)r(c);for(c in t)a(e,c)||r(c);return u}function B(e,t,n,r){if("string"==typeof n){var i=e[t];if(a(i,n))return i[n];var o=si(n);if(a(i,o))return i[o];var s=li(o);if(a(i,s))return i[s];var l=i[n]||i[o]||i[s];return l}}function F(e,t,n,r){var i=t[e],o=!a(n,e),s=n[e];if(H(Boolean,i.type)&&(o&&!a(i,"default")?s=!1:H(String,i.type)||""!==s&&s!==ui(e)||(s=!0)),void 0===s){s=R(r,i,e);var l=Di.shouldConvert;Di.shouldConvert=!0,S(s),Di.shouldConvert=l}return s}function R(e,t,n){if(a(t,"default")){var r=t.default;return p(r),e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e[n]?e[n]:"function"==typeof r&&t.type!==Function?r.call(e):r}}function V(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t&&t[1]}function H(e,t){if(!Array.isArray(t))return V(t)===V(e);for(var n=0,r=t.length;n<r;n++)if(V(t[n])===V(e))return!0;return!1}function J(){Vi.length=0,Hi={},Ji=Ui=!1}function U(){for(Ui=!0,Vi.sort(function(e,t){return e.id-t.id}),qi=0;qi<Vi.length;qi++){var e=Vi[qi],t=e.id;Hi[t]=null,e.run()}Ei&&hi.devtools&&Ei.emit("flush"),J()}function q(e){var t=e.id;if(null==Hi[t]){if(Hi[t]=!0,Ui){for(var n=Vi.length-1;n>=0&&Vi[n].id>e.id;)n--;Vi.splice(Math.max(n,qi)+1,0,e)}else Vi.push(e);Ji||(Ji=!0,Si(U))}}function W(e){Gi.clear(),z(e,Gi)}function z(e,t){var n,r,i=Array.isArray(e);if((i||p(e))&&Object.isExtensible(e)){if(e.__ob__){var o=e.__ob__.dep.id;if(t.has(o))return;t.add(o)}if(i)for(n=e.length;n--;)z(e[n],t);else for(r=Object.keys(e),n=r.length;n--;)z(e[r[n]],t)}}function K(e){e._watchers=[];var t=e.$options;t.props&&G(e,t.props),t.methods&&Y(e,t.methods),t.data?X(e):S(e._data={},!0),t.computed&&Q(e,t.computed),t.watch&&ee(e,t.watch)}function G(e,t){var n=e.$options.propsData||{},r=e.$options._propKeys=Object.keys(t),i=!e.$parent;Di.shouldConvert=i;for(var o=function(i){var o=r[i];O(e,o,F(o,t,n,e))},a=0;a<r.length;a++)o(a);Di.shouldConvert=!0}function X(e){var t=e.$options.data;t=e._data="function"==typeof t?t.call(e):t||{},f(t)||(t={});for(var n=Object.keys(t),r=e.$options.props,i=n.length;i--;)r&&a(r,n[i])||re(e,n[i]);S(t,!0)}function Q(e,t){for(var n in t){var r=t[n];"function"==typeof r?(Xi.get=Z(r,e),Xi.set=h):(Xi.get=r.get?r.cache!==!1?Z(r.get,e):c(r.get,e):h,Xi.set=r.set?c(r.set,e):h),Object.defineProperty(e,n,Xi)}}function Z(e,t){var n=new zi(t,e,h,{lazy:!0});return function(){return n.dirty&&n.evaluate(),Pi.target&&n.depend(),n.value}}function Y(e,t){for(var n in t)e[n]=null==t[n]?h:c(t[n],e)}function ee(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)te(e,n,r[i]);else te(e,n,r)}}function te(e,t,n){var r;f(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}function ne(e){var t={};t.get=function(){return this._data},Object.defineProperty(e.prototype,"$data",t),e.prototype.$set=T,e.prototype.$delete=$,e.prototype.$watch=function(e,t,n){var r=this;n=n||{},n.user=!0;var i=new zi(r,e,t,n);return n.immediate&&t.call(r,i.value),function(){i.teardown()}}}function re(e,t){b(t)||Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){return e._data[t]},set:function(n){e._data[t]=n}})}function ie(e){return new Qi(void 0,void 0,void 0,String(e))}function oe(e){var t=new Qi(e.tag,e.data,e.children,e.text,e.elm,e.context,e.componentOptions);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isCloned=!0,t}function ae(e){for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=oe(e[n]);return t}function se(e,t,n,r){r+=t;var i=e.__injected||(e.__injected={});if(!i[r]){i[r]=!0;var o=e[t];o?e[t]=function(){o.apply(this,arguments),n.apply(this,arguments)}:e[t]=n}}function le(e,t,n,r,i){var o,a,s,l,c,u,d;for(o in e)if(a=e[o],s=t[o],a)if(s){if(a!==s)if(Array.isArray(s)){s.length=a.length;for(var p=0;p<s.length;p++)s[p]=a[p];e[o]=s}else s.fn=a,e[o]=s}else d="~"===o.charAt(0),c=d?o.slice(1):o,u="!"===c.charAt(0),c=u?c.slice(1):c,Array.isArray(a)?n(c,a.invoker=ce(a),d,u):(a.invoker||(l=a,a=e[o]={},a.fn=l,a.invoker=ue(a)),n(c,a.invoker,d,u));else;for(o in t)e[o]||(d="~"===o.charAt(0),c=d?o.slice(1):o,u="!"===c.charAt(0),c=u?c.slice(1):c,r(c,t[o].invoker,u))}function ce(e){return function(t){for(var n=arguments,r=1===arguments.length,i=0;i<e.length;i++)r?e[i](t):e[i].apply(null,n)}}function ue(e){return function(t){var n=1===arguments.length;n?e.fn(t):e.fn.apply(null,arguments)}}function de(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function pe(e){return s(e)?[ie(e)]:Array.isArray(e)?fe(e):void 0}function fe(e,t){var n,r,i,o=[];for(n=0;n<e.length;n++)r=e[n],null!=r&&"boolean"!=typeof r&&(i=o[o.length-1],Array.isArray(r)?o.push.apply(o,fe(r,(t||"")+"_"+n)):s(r)?i&&i.text?i.text+=String(r):""!==r&&o.push(ie(r)):r.text&&i&&i.text?o[o.length-1]=ie(i.text+r.text):(r.tag&&null==r.key&&null!=t&&(r.key="__vlist"+t+"_"+n+"__"),o.push(r)));return o}function ve(e){return e&&e.filter(function(e){return e&&e.componentOptions})[0]}function he(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&ye(e,t)}function me(e,t,n){n?Ki.$once(e,t):Ki.$on(e,t)}function ge(e,t){Ki.$off(e,t)}function ye(e,t,n){Ki=e,le(t,n||{},me,ge,e)}function be(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;return(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0),r},e.prototype.$once=function(e,t){function n(){r.$off(e,n),t.apply(r,arguments)}var r=this;return n.fn=t,r.$on(e,n),r},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;var r=n._events[e];if(!r)return n;if(1===arguments.length)return n._events[e]=null,n;for(var i,o=r.length;o--;)if(i=r[o],i===t||i.fn===t){r.splice(o,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?u(n):n;for(var r=u(arguments,1),i=0,o=n.length;i<o;i++)n[i].apply(t,r)}return t}}function _e(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function we(e){e.prototype._mount=function(e,t){var n=this;return n.$el=e,n.$options.render||(n.$options.render=Zi),Ce(n,"beforeMount"),n._watcher=new zi(n,function(){n._update(n._render(),t)},h),t=!1,null==n.$vnode&&(n._isMounted=!0,Ce(n,"mounted")),n},e.prototype._update=function(e,t){var n=this;n._isMounted&&Ce(n,"beforeUpdate");var r=n.$el,i=n._vnode,o=Yi;Yi=n,n._vnode=e,i?n.$el=n.__patch__(i,e):n.$el=n.__patch__(n.$el,e,t,!1,n.$options._parentElm,n.$options._refElm),Yi=o,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el),n._isMounted&&Ce(n,"updated")},e.prototype._updateFromParent=function(e,t,n,r){var i=this,o=!(!i.$options._renderChildren&&!r);if(i.$options._parentVnode=n,i.$vnode=n,i._vnode&&(i._vnode.parent=n),i.$options._renderChildren=r,e&&i.$options.props){Di.shouldConvert=!1;for(var a=i.$options._propKeys||[],s=0;s<a.length;s++){var l=a[s];i[l]=F(l,i.$options.props,e,i)}Di.shouldConvert=!0,i.$options.propsData=e}if(t){var c=i.$options._parentListeners;i.$options._parentListeners=t,ye(i,t,c)}o&&(i.$slots=Re(r,n.context),i.$forceUpdate())},e.prototype.$forceUpdate=function(){var e=this;e._watcher&&e._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Ce(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||o(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,Ce(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.__patch__(e._vnode,null)}}}function Ce(e,t){var n=e.$options[t];if(n)for(var r=0,i=n.length;r<i;r++)n[r].call(e);e._hasHookEvent&&e.$emit("hook:"+t)}function ke(e,t,n,r,i){if(e){var o=n.$options._base;if(p(e)&&(e=o.extend(e)),"function"==typeof e){if(!e.cid)if(e.resolved)e=e.resolved;else if(e=$e(e,o,function(){n.$forceUpdate()}),!e)return;Je(e),t=t||{};var a=Pe(t,e);if(e.options.functional)return xe(e,a,t,n,r);var s=t.on;t.on=t.nativeOn,e.options.abstract&&(t={}),Ne(t);var l=e.options.name||i,c=new Qi("vue-component-"+e.cid+(l?"-"+l:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:a,listeners:s,tag:i,children:r});return c}}}function xe(e,t,n,r,i){var o={},a=e.options.props;if(a)for(var s in a)o[s]=F(s,a,t);var l=Object.create(r),c=function(e,t,n,r){return je(l,e,t,n,r,!0)},u=e.options.render.call(null,c,{props:o,data:n,parent:r,children:i,slots:function(){return Re(i,r)}});return u instanceof Qi&&(u.functionalContext=r,n.slot&&((u.data||(u.data={})).slot=n.slot)),u}function Ae(e,t,n,r){var i=e.componentOptions,o={_isComponent:!0,parent:t,propsData:i.propsData,_componentTag:i.tag,_parentVnode:e,_parentListeners:i.listeners,_renderChildren:i.children,_parentElm:n||null,_refElm:r||null},a=e.data.inlineTemplate;return a&&(o.render=a.render,o.staticRenderFns=a.staticRenderFns),new i.Ctor(o)}function Ee(e,t,n,r){if(!e.child||e.child._isDestroyed){var i=e.child=Ae(e,Yi,n,r);i.$mount(t?e.elm:void 0,t)}else if(e.data.keepAlive){var o=e;Se(o,o)}}function Se(e,t){var n=t.componentOptions,r=t.child=e.child;r._updateFromParent(n.propsData,n.listeners,t,n.children)}function Oe(e){e.child._isMounted||(e.child._isMounted=!0,Ce(e.child,"mounted")),e.data.keepAlive&&(e.child._inactive=!1,Ce(e.child,"activated"))}function Te(e){e.child._isDestroyed||(e.data.keepAlive?(e.child._inactive=!0,Ce(e.child,"deactivated")):e.child.$destroy())}function $e(e,t,n){if(!e.requested){e.requested=!0;var r=e.pendingCallbacks=[n],i=!0,o=function(n){if(p(n)&&(n=t.extend(n)),e.resolved=n,!i)for(var o=0,a=r.length;o<a;o++)r[o](n)},a=function(e){},s=e(o,a);return s&&"function"==typeof s.then&&!e.resolved&&s.then(o,a),i=!1,e.resolved}e.pendingCallbacks.push(n)}function Pe(e,t){var n=t.options.props;if(n){var r={},i=e.attrs,o=e.props,a=e.domProps;if(i||o||a)for(var s in n){var l=ui(s);Le(r,o,s,l,!0)||Le(r,i,s,l)||Le(r,a,s,l)}return r}}function Le(e,t,n,r,i){if(t){if(a(t,n))return e[n]=t[n],i||delete t[n],!0;if(a(t,r))return e[n]=t[r],i||delete t[r],!0}return!1}function Ne(e){e.hook||(e.hook={});for(var t=0;t<to.length;t++){var n=to[t],r=e.hook[n],i=eo[n];e.hook[n]=r?Ie(i,r):i}}function Ie(e,t){return function(n,r,i,o){e(n,r,i,o),t(n,r,i,o)}}function je(e,t,n,r,i,o){return(Array.isArray(n)||s(n))&&(i=r,r=n,n=void 0),o&&(i=ro),De(e,t,n,r,i)}function De(e,t,n,r,i){if(n&&n.__ob__)return Zi();if(!t)return Zi();Array.isArray(r)&&"function"==typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===ro?r=pe(r):i===no&&(r=de(r));var o,a;if("string"==typeof t){var s;a=hi.getTagNamespace(t),o=hi.isReservedTag(t)?new Qi(hi.parsePlatformTagName(t),n,r,void 0,void 0,e):(s=B(e.$options,"components",t))?ke(s,n,e,r,t):new Qi(t,n,r,void 0,void 0,e)}else o=ke(t,n,e,r);return o?(a&&Me(o,a),o):Zi()}function Me(e,t){if(e.ns=t,"foreignObject"!==e.tag&&e.children)for(var n=0,r=e.children.length;n<r;n++){var i=e.children[n];i.tag&&!i.ns&&Me(i,t)}}function Be(e){e.$vnode=null,e._vnode=null,e._staticTrees=null;var t=e.$options._parentVnode,n=t&&t.context;e.$slots=Re(e.$options._renderChildren,n),e.$scopedSlots={},e._c=function(t,n,r,i){return je(e,t,n,r,i,!1)},e.$createElement=function(t,n,r,i){return je(e,t,n,r,i,!0)},e.$options.el&&e.$mount(e.$options.el)}function Fe(e){function t(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&i(e[r],t+"_"+r,n);else i(e,t,n)}function i(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}e.prototype.$nextTick=function(e){return Si(e,this)},e.prototype._render=function(){var e=this,t=e.$options,n=t.render,r=t.staticRenderFns,i=t._parentVnode;if(e._isMounted)for(var o in e.$slots)e.$slots[o]=ae(e.$slots[o]);i&&i.data.scopedSlots&&(e.$scopedSlots=i.data.scopedSlots),r&&!e._staticTrees&&(e._staticTrees=[]),e.$vnode=i;var a;try{a=n.call(e._renderProxy,e.$createElement)}catch(t){if(!hi.errorHandler)throw t;hi.errorHandler.call(null,t,e),a=e._vnode}return a instanceof Qi||(a=Zi()),a.parent=i,a},e.prototype._s=n,e.prototype._v=ie,e.prototype._n=r,e.prototype._e=Zi,e.prototype._q=g,e.prototype._i=y,e.prototype._m=function(e,n){var r=this._staticTrees[e];return r&&!n?Array.isArray(r)?ae(r):oe(r):(r=this._staticTrees[e]=this.$options.staticRenderFns[e].call(this._renderProxy),t(r,"__static__"+e,!1),r)},e.prototype._o=function(e,n,r){return t(e,"__once__"+n+(r?"_"+r:""),!0),e},e.prototype._f=function(e){return B(this.$options,"filters",e,!0)||vi},e.prototype._l=function(e,t){var n,r,i,o,a;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(p(e))for(o=Object.keys(e),n=new Array(o.length),r=0,i=o.length;r<i;r++)a=o[r],n[r]=t(e[a],a,r);return n},e.prototype._t=function(e,t,n,r){var i=this.$scopedSlots[e];if(i)return n=n||{},r&&d(n,r),i(n)||t;var o=this.$slots[e];return o||t},e.prototype._b=function(e,t,n,r){if(n)if(p(n)){Array.isArray(n)&&(n=v(n));for(var i in n)if("class"===i||"style"===i)e[i]=n[i];else{var o=r||hi.mustUseProp(t,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={});o[i]=n[i]}}else;return e},e.prototype._k=function(e,t,n){var r=hi.keyCodes[t]||n;return Array.isArray(r)?r.indexOf(e)===-1:r!==e}}function Re(e,t){var n={};if(!e)return n;for(var r,i,o=[],a=0,s=e.length;a<s;a++)if(i=e[a],(i.context===t||i.functionalContext===t)&&i.data&&(r=i.data.slot)){var l=n[r]||(n[r]=[]);"template"===i.tag?l.push.apply(l,i.children):l.push(i)}else o.push(i);return o.length&&(1!==o.length||" "!==o[0].text&&!o[0].isComment)&&(n.default=o),n}function Ve(e){e.prototype._init=function(e){var t=this;t._uid=io++,t._isVue=!0,e&&e._isComponent?He(t,e):t.$options=M(Je(t.constructor),e||{},t),t._renderProxy=t,t._self=t,_e(t),he(t),Ce(t,"beforeCreate"),K(t),Ce(t,"created"),Be(t)}}function He(e,t){var n=e.$options=Object.create(e.constructor.options);n.parent=t.parent,n.propsData=t.propsData,n._parentVnode=t._parentVnode,n._parentListeners=t._parentListeners,n._renderChildren=t._renderChildren,n._componentTag=t._componentTag,n._parentElm=t._parentElm,n._refElm=t._refElm,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}function Je(e){var t=e.options;if(e.super){var n=e.super.options,r=e.superOptions,i=e.extendOptions;n!==r&&(e.superOptions=n,i.render=t.render,i.staticRenderFns=t.staticRenderFns,i._scopeId=t._scopeId,t=e.options=M(n,i),t.name&&(t.components[t.name]=e))}return t}function Ue(e){this._init(e)}function qe(e){e.use=function(e){if(!e.installed){var t=u(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):e.apply(null,t),e.installed=!0,this}}}function We(e){e.mixin=function(e){this.options=M(this.options,e)}}function ze(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,i=e._Ctor||(e._Ctor={});if(i[r])return i[r];var o=e.name||n.options.name,a=function(e){this._init(e)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=t++,a.options=M(n.options,e),a.super=n,a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,hi._assetTypes.forEach(function(e){a[e]=n[e]}),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=e,i[r]=a,a}}function Ke(e){hi._assetTypes.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&f(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}function Ge(e,t){return"string"==typeof e?e.split(",").indexOf(t)>-1:e.test(t)}function Xe(e){var t={};t.get=function(){return hi},Object.defineProperty(e,"config",t),e.util=Ri,e.set=T,e.delete=$,e.nextTick=Si,e.options=Object.create(null),hi._assetTypes.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,d(e.options.components,so),qe(e),We(e),ze(e),Ke(e)}function Qe(e){for(var t=e.data,n=e,r=e;r.child;)r=r.child._vnode,r.data&&(t=Ze(r.data,t));for(;n=n.parent;)n.data&&(t=Ze(t,n.data));return Ye(t)}function Ze(e,t){return{staticClass:et(e.staticClass,t.staticClass),class:e.class?[e.class,t.class]:t.class}}function Ye(e){var t=e.class,n=e.staticClass;return n||t?et(n,tt(t)):""}function et(e,t){return e?t?e+" "+t:e:t||""}function tt(e){var t="";if(!e)return t;if("string"==typeof e)return e;if(Array.isArray(e)){for(var n,r=0,i=e.length;r<i;r++)e[r]&&(n=tt(e[r]))&&(t+=n+" ");return t.slice(0,-1)}if(p(e)){for(var o in e)e[o]&&(t+=o+" ");return t.slice(0,-1)}return t}function nt(e){return wo(e)?"svg":"math"===e?"math":void 0}function rt(e){if(!yi)return!0;if(ko(e))return!1;if(e=e.toLowerCase(),null!=xo[e])return xo[e];var t=document.createElement(e);return e.indexOf("-")>-1?xo[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:xo[e]=/HTMLUnknownElement/.test(t.toString())}function it(e){if("string"==typeof e){if(e=document.querySelector(e),!e)return document.createElement("div")}return e}function ot(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&"multiple"in t.data.attrs&&n.setAttribute("multiple","multiple"),n)}function at(e,t){return document.createElementNS(bo[e],t)}function st(e){return document.createTextNode(e)}function lt(e){return document.createComment(e)}function ct(e,t,n){e.insertBefore(t,n)}function ut(e,t){e.removeChild(t)}function dt(e,t){e.appendChild(t)}function pt(e){return e.parentNode}function ft(e){return e.nextSibling}function vt(e){return e.tagName}function ht(e,t){e.textContent=t}function mt(e,t,n){e.setAttribute(t,n)}function gt(e,t){var n=e.data.ref;if(n){var r=e.context,i=e.child||e.elm,a=r.$refs;t?Array.isArray(a[n])?o(a[n],i):a[n]===i&&(a[n]=void 0):e.data.refInFor?Array.isArray(a[n])&&a[n].indexOf(i)<0?a[n].push(i):a[n]=[i]:a[n]=i}}function yt(e){return null==e}function bt(e){return null!=e}function _t(e,t){return e.key===t.key&&e.tag===t.tag&&e.isComment===t.isComment&&!e.data==!t.data}function wt(e,t,n){var r,i,o={};for(r=t;r<=n;++r)i=e[r].key,bt(i)&&(o[i]=r);return o}function Ct(e){function t(e){return new Qi(S.tagName(e).toLowerCase(),{},[],void 0,e)}function n(e,t){function n(){0===--n.listeners&&r(e)}return n.listeners=t,n}function r(e){var t=S.parentNode(e);t&&S.removeChild(t,e)}function o(e,t,n,r,i){if(e.isRootInsert=!i,!a(e,t,n,r)){var o=e.data,s=e.children,l=e.tag;bt(l)?(e.elm=e.ns?S.createElementNS(e.ns,l):S.createElement(l,e),v(e),u(e,s,t),bt(o)&&p(e,t),c(n,e.elm,r)):e.isComment?(e.elm=S.createComment(e.text),c(n,e.elm,r)):(e.elm=S.createTextNode(e.text),c(n,e.elm,r))}}function a(e,t,n,r){var i=e.data;if(bt(i)){var o=bt(e.child)&&i.keepAlive;if(bt(i=i.hook)&&bt(i=i.init)&&i(e,!1,n,r),bt(e.child))return f(e,t),o&&l(e,t,n,r),!0}}function l(e,t,n,r){for(var i,o=e;o.child;)if(o=o.child._vnode,bt(i=o.data)&&bt(i=i.transition)){for(i=0;i<A.activate.length;++i)A.activate[i](So,o);t.push(o);break}c(n,e.elm,r)}function c(e,t,n){e&&(n?S.insertBefore(e,t,n):S.appendChild(e,t))}function u(e,t,n){if(Array.isArray(t))for(var r=0;r<t.length;++r)o(t[r],n,e.elm,null,!0);else s(e.text)&&S.appendChild(e.elm,S.createTextNode(e.text))}function d(e){for(;e.child;)e=e.child._vnode;return bt(e.tag)}function p(e,t){for(var n=0;n<A.create.length;++n)A.create[n](So,e);k=e.data.hook,bt(k)&&(k.create&&k.create(So,e),k.insert&&t.push(e))}function f(e,t){e.data.pendingInsert&&t.push.apply(t,e.data.pendingInsert),e.elm=e.child.$el,d(e)?(p(e,t),v(e)):(gt(e),t.push(e))}function v(e){var t;bt(t=e.context)&&bt(t=t.$options._scopeId)&&S.setAttribute(e.elm,t,""),bt(t=Yi)&&t!==e.context&&bt(t=t.$options._scopeId)&&S.setAttribute(e.elm,t,"")}function h(e,t,n,r,i,a){for(;r<=i;++r)o(n[r],a,e,t)}function m(e){var t,n,r=e.data;if(bt(r))for(bt(t=r.hook)&&bt(t=t.destroy)&&t(e),t=0;t<A.destroy.length;++t)A.destroy[t](e);if(bt(t=e.children))for(n=0;n<e.children.length;++n)m(e.children[n])}function g(e,t,n,i){for(;n<=i;++n){var o=t[n];bt(o)&&(bt(o.tag)?(y(o),m(o)):r(o.elm))}}function y(e,t){if(t||bt(e.data)){var i=A.remove.length+1;for(t?t.listeners+=i:t=n(e.elm,i),bt(k=e.child)&&bt(k=k._vnode)&&bt(k.data)&&y(k,t),k=0;k<A.remove.length;++k)A.remove[k](e,t);bt(k=e.data.hook)&&bt(k=k.remove)?k(e,t):t()}else r(e.elm)}function b(e,t,n,r,i){for(var a,s,l,c,u=0,d=0,p=t.length-1,f=t[0],v=t[p],m=n.length-1,y=n[0],b=n[m],w=!i;u<=p&&d<=m;)yt(f)?f=t[++u]:yt(v)?v=t[--p]:_t(f,y)?(_(f,y,r),f=t[++u],y=n[++d]):_t(v,b)?(_(v,b,r),v=t[--p],b=n[--m]):_t(f,b)?(_(f,b,r),w&&S.insertBefore(e,f.elm,S.nextSibling(v.elm)),f=t[++u],b=n[--m]):_t(v,y)?(_(v,y,r),w&&S.insertBefore(e,v.elm,f.elm),v=t[--p],y=n[++d]):(yt(a)&&(a=wt(t,u,p)),s=bt(y.key)?a[y.key]:null,yt(s)?(o(y,r,e,f.elm),y=n[++d]):(l=t[s],_t(l,y)?(_(l,y,r),t[s]=void 0,w&&S.insertBefore(e,y.elm,f.elm),y=n[++d]):(o(y,r,e,f.elm),y=n[++d])));u>p?(c=yt(n[m+1])?null:n[m+1].elm,h(e,c,n,d,m,r)):d>m&&g(e,t,u,p)}function _(e,t,n,r){if(e!==t){if(t.isStatic&&e.isStatic&&t.key===e.key&&(t.isCloned||t.isOnce))return t.elm=e.elm,void(t.child=e.child);var i,o=t.data,a=bt(o);a&&bt(i=o.hook)&&bt(i=i.prepatch)&&i(e,t);var s=t.elm=e.elm,l=e.children,c=t.children;if(a&&d(t)){for(i=0;i<A.update.length;++i)A.update[i](e,t);bt(i=o.hook)&&bt(i=i.update)&&i(e,t)}yt(t.text)?bt(l)&&bt(c)?l!==c&&b(s,l,c,n,r):bt(c)?(bt(e.text)&&S.setTextContent(s,""),h(s,null,c,0,c.length-1,n)):bt(l)?g(s,l,0,l.length-1):bt(e.text)&&S.setTextContent(s,""):e.text!==t.text&&S.setTextContent(s,t.text),a&&bt(i=o.hook)&&bt(i=i.postpatch)&&i(e,t)}}function w(e,t,n){if(n&&e.parent)e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}function C(e,t,n){t.elm=e;var r=t.tag,i=t.data,o=t.children;if(bt(i)&&(bt(k=i.hook)&&bt(k=k.init)&&k(t,!0),bt(k=t.child)))return f(t,n),!0;if(bt(r)){if(bt(o))if(e.hasChildNodes()){for(var a=!0,s=e.firstChild,l=0;l<o.length;l++){if(!s||!C(s,o[l],n)){a=!1;break}s=s.nextSibling}if(!a||s)return!1}else u(t,o,n);if(bt(i))for(var c in i)if(!O(c)){p(t,n);break}}else e.data!==t.text&&(e.data=t.text);return!0}var k,x,A={},E=e.modules,S=e.nodeOps;for(k=0;k<Oo.length;++k)for(A[Oo[k]]=[],x=0;x<E.length;++x)void 0!==E[x][Oo[k]]&&A[Oo[k]].push(E[x][Oo[k]]);var O=i("attrs,style,class,staticClass,staticStyle,key");return function(e,n,r,i,a,s){if(!n)return void(e&&m(e));var l,c,u=!1,p=[];if(e){var f=bt(e.nodeType);if(!f&&_t(e,n))_(e,n,p,i);else{if(f){if(1===e.nodeType&&e.hasAttribute("server-rendered")&&(e.removeAttribute("server-rendered"),r=!0),r&&C(e,n,p))return w(n,p,!0),e;e=t(e)}if(l=e.elm,c=S.parentNode(l),o(n,p,c,S.nextSibling(l)),n.parent){for(var v=n.parent;v;)v.elm=n.elm,v=v.parent;if(d(n))for(var h=0;h<A.create.length;++h)A.create[h](So,n.parent)}null!==c?g(c,[e],0,0):bt(e.tag)&&m(e)}}else u=!0,o(n,p,a,s);return w(n,p,u),n.elm}}function kt(e,t){(e.data.directives||t.data.directives)&&xt(e,t)}function xt(e,t){var n,r,i,o=e===So,a=t===So,s=At(e.data.directives,e.context),l=At(t.data.directives,t.context),c=[],u=[];for(n in l)r=s[n],i=l[n],r?(i.oldValue=r.value,St(i,"update",t,e),i.def&&i.def.componentUpdated&&u.push(i)):(St(i,"bind",t,e),i.def&&i.def.inserted&&c.push(i));if(c.length){var d=function(){for(var n=0;n<c.length;n++)St(c[n],"inserted",t,e)};o?se(t.data.hook||(t.data.hook={}),"insert",d,"dir-insert"):d()}if(u.length&&se(t.data.hook||(t.data.hook={}),"postpatch",function(){for(var n=0;n<u.length;n++)St(u[n],"componentUpdated",t,e)},"dir-postpatch"),!o)for(n in s)l[n]||St(s[n],"unbind",e,e,a)}function At(e,t){var n=Object.create(null);if(!e)return n;var r,i;for(r=0;r<e.length;r++)i=e[r],i.modifiers||(i.modifiers=$o),n[Et(i)]=i,i.def=B(t.$options,"directives",i.name,!0);return n}function Et(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function St(e,t,n,r,i){var o=e.def&&e.def[t];o&&o(n.elm,e,n,r,i)}function Ot(e,t){if(e.data.attrs||t.data.attrs){var n,r,i,o=t.elm,a=e.data.attrs||{},s=t.data.attrs||{};s.__ob__&&(s=t.data.attrs=d({},s));for(n in s)r=s[n],i=a[n],i!==r&&Tt(o,n,r);wi&&s.value!==a.value&&Tt(o,"value",s.value);for(n in a)null==s[n]&&(mo(n)?o.removeAttributeNS(ho,go(n)):fo(n)||o.removeAttribute(n))}}function Tt(e,t,n){vo(t)?yo(n)?e.removeAttribute(t):e.setAttribute(t,t):fo(t)?e.setAttribute(t,yo(n)||"false"===n?"false":"true"):mo(t)?yo(n)?e.removeAttributeNS(ho,go(t)):e.setAttributeNS(ho,t,n):yo(n)?e.removeAttribute(t):e.setAttribute(t,n)}function $t(e,t){var n=t.elm,r=t.data,i=e.data;if(r.staticClass||r.class||i&&(i.staticClass||i.class)){var o=Qe(t),a=n._transitionClasses;a&&(o=et(o,tt(a))),o!==n._prevClass&&(n.setAttribute("class",o),n._prevClass=o)}}function Pt(e,t,n,r){if(n){var i=t;t=function(n){Lt(e,t,r),1===arguments.length?i(n):i.apply(null,arguments)}}lo.addEventListener(e,t,r)}function Lt(e,t,n){lo.removeEventListener(e,t,n)}function Nt(e,t){if(e.data.on||t.data.on){var n=t.data.on||{},r=e.data.on||{};lo=t.elm,le(n,r,Pt,Lt,t.context)}}function It(e,t){if(e.data.domProps||t.data.domProps){var n,r,i=t.elm,o=e.data.domProps||{},a=t.data.domProps||{};a.__ob__&&(a=t.data.domProps=d({},a));for(n in o)null==a[n]&&(i[n]="");for(n in a)if(r=a[n],("textContent"!==n&&"innerHTML"!==n||(t.children&&(t.children.length=0),r!==o[n]))&&("checked"!==n||Dt(i,r)))if("value"===n){i._value=r;var s=null==r?"":String(r);jt(i,t,s)&&(i.value=s)}else i[n]=r}}function jt(e,t,n){return!(e.composing||"option"!==t.tag&&!Dt(e,n)&&!Mt(t,n))}function Dt(e,t){return document.activeElement!==e&&e.value!==t}function Mt(e,t){var n=e.elm.value,i=e.elm._vModifiers;return i&&i.number||"number"===e.elm.type?r(n)!==r(t):i&&i.trim?n.trim()!==t.trim():n!==t}function Bt(e){var t=Ft(e.style);return e.staticStyle?d(e.staticStyle,t):t}function Ft(e){return Array.isArray(e)?v(e):"string"==typeof e?Do(e):e}function Rt(e,t){var n,r={};if(t)for(var i=e;i.child;)i=i.child._vnode,i.data&&(n=Bt(i.data))&&d(r,n);(n=Bt(e.data))&&d(r,n);for(var o=e;o=o.parent;)o.data&&(n=Bt(o.data))&&d(r,n);return r}function Vt(e,t){var n=t.data,r=e.data;if(n.staticStyle||n.style||r.staticStyle||r.style){var i,o,a=t.elm,s=e.data.staticStyle,l=e.data.style||{},c=s||l,u=Ft(t.data.style)||{};t.data.style=u.__ob__?d({},u):u;var p=Rt(t,!0);for(o in c)null==p[o]&&Fo(a,o,"");for(o in p)i=p[o],i!==c[o]&&Fo(a,o,null==i?"":i)}}function Ht(e,t){if(t&&t.trim())if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+e.getAttribute("class")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Jt(e,t){if(t&&t.trim())if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t);else{for(var n=" "+e.getAttribute("class")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");e.setAttribute("class",n.trim())}}function Ut(e){Xo(function(){Xo(e)})}function qt(e,t){(e._transitionClasses||(e._transitionClasses=[])).push(t),Ht(e,t)}function Wt(e,t){e._transitionClasses&&o(e._transitionClasses,t),Jt(e,t)}function zt(e,t,n){var r=Kt(e,t),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===Uo?zo:Go,l=0,c=function(){e.removeEventListener(s,u),n()},u=function(t){t.target===e&&++l>=a&&c()};setTimeout(function(){l<a&&c()},o+1),e.addEventListener(s,u)}function Kt(e,t){var n,r=window.getComputedStyle(e),i=r[Wo+"Delay"].split(", "),o=r[Wo+"Duration"].split(", "),a=Gt(i,o),s=r[Ko+"Delay"].split(", "),l=r[Ko+"Duration"].split(", "),c=Gt(s,l),u=0,d=0;t===Uo?a>0&&(n=Uo,u=a,d=o.length):t===qo?c>0&&(n=qo,u=c,d=l.length):(u=Math.max(a,c),n=u>0?a>c?Uo:qo:null,d=n?n===Uo?o.length:l.length:0);var p=n===Uo&&Qo.test(r[Wo+"Property"]);return{type:n,timeout:u,propCount:d,hasTransform:p}}function Gt(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return Xt(t)+Xt(e[n])}))}function Xt(e){return 1e3*Number(e.slice(0,-1))}function Qt(e,t){var n=e.elm;n._leaveCb&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=Yt(e.data.transition);if(r&&!n._enterCb&&1===n.nodeType){for(var i=r.css,o=r.type,a=r.enterClass,s=r.enterToClass,l=r.enterActiveClass,c=r.appearClass,u=r.appearToClass,d=r.appearActiveClass,p=r.beforeEnter,f=r.enter,v=r.afterEnter,h=r.enterCancelled,m=r.beforeAppear,g=r.appear,y=r.afterAppear,b=r.appearCancelled,_=Yi,w=Yi.$vnode;w&&w.parent;)w=w.parent,
_=w.context;var C=!_._isMounted||!e.isRootInsert;if(!C||g||""===g){var k=C?c:a,x=C?d:l,A=C?u:s,E=C?m||p:p,S=C&&"function"==typeof g?g:f,O=C?y||v:v,T=C?b||h:h,$=i!==!1&&!wi,P=S&&(S._length||S.length)>1,L=n._enterCb=en(function(){$&&(Wt(n,A),Wt(n,x)),L.cancelled?($&&Wt(n,k),T&&T(n)):O&&O(n),n._enterCb=null});e.data.show||se(e.data.hook||(e.data.hook={}),"insert",function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.context===e.context&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),S&&S(n,L)},"transition-insert"),E&&E(n),$&&(qt(n,k),qt(n,x),Ut(function(){qt(n,A),Wt(n,k),L.cancelled||P||zt(n,o,L)})),e.data.show&&(t&&t(),S&&S(n,L)),$||P||L()}}}function Zt(e,t){function n(){g.cancelled||(e.data.show||((r.parentNode._pending||(r.parentNode._pending={}))[e.key]=e),u&&u(r),h&&(qt(r,s),qt(r,c),Ut(function(){qt(r,l),Wt(r,s),g.cancelled||m||zt(r,a,g)})),d&&d(r,g),h||m||g())}var r=e.elm;r._enterCb&&(r._enterCb.cancelled=!0,r._enterCb());var i=Yt(e.data.transition);if(!i)return t();if(!r._leaveCb&&1===r.nodeType){var o=i.css,a=i.type,s=i.leaveClass,l=i.leaveToClass,c=i.leaveActiveClass,u=i.beforeLeave,d=i.leave,p=i.afterLeave,f=i.leaveCancelled,v=i.delayLeave,h=o!==!1&&!wi,m=d&&(d._length||d.length)>1,g=r._leaveCb=en(function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[e.key]=null),h&&(Wt(r,l),Wt(r,c)),g.cancelled?(h&&Wt(r,s),f&&f(r)):(t(),p&&p(r)),r._leaveCb=null});v?v(n):n()}}function Yt(e){if(e){if("object"===("undefined"==typeof e?"undefined":ri(e))){var t={};return e.css!==!1&&d(t,Zo(e.name||"v")),d(t,e),t}return"string"==typeof e?Zo(e):void 0}}function en(e){var t=!1;return function(){t||(t=!0,e())}}function tn(e,t){t.data.show||Qt(t)}function nn(e,t,n){var r=t.value,i=e.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,l=e.options.length;s<l;s++)if(a=e.options[s],i)o=y(r,on(a))>-1,a.selected!==o&&(a.selected=o);else if(g(on(a),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function rn(e,t){for(var n=0,r=t.length;n<r;n++)if(g(on(t[n]),e))return!1;return!0}function on(e){return"_value"in e?e._value:e.value}function an(e){e.target.composing=!0}function sn(e){e.target.composing=!1,ln(e.target,"input")}function ln(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function cn(e){return!e.child||e.data&&e.data.transition?e:cn(e.child._vnode)}function un(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?un(ve(t.children)):e}function dn(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var i=n._parentListeners;for(var o in i)t[si(o)]=i[o].fn;return t}function pn(e,t){return/\d-keep-alive$/.test(t.tag)?e("keep-alive"):null}function fn(e){for(;e=e.parent;)if(e.data.transition)return!0}function vn(e,t){return t.key===e.key&&t.tag===e.tag}function hn(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function mn(e){e.data.newPos=e.elm.getBoundingClientRect()}function gn(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,i=t.top-n.top;if(r||i){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}function yn(e,t){var n=document.createElement("div");return n.innerHTML='<div a="'+e+'">',n.innerHTML.indexOf(t)>0}function bn(e){return da=da||document.createElement("div"),da.innerHTML=e,da.textContent}function _n(e,t){return t&&(e=e.replace(as,"\n")),e.replace(is,"<").replace(os,">").replace(ss,"&").replace(ls,'"')}function wn(e,t){function n(t){d+=t,e=e.substring(t)}function r(){var t=e.match(Ca);if(t){var r={tagName:t[1],attrs:[],start:d};n(t[0].length);for(var i,o;!(i=e.match(ka))&&(o=e.match(ba));)n(o[0].length),r.attrs.push(o);if(i)return r.unarySlash=i[1],n(i[0].length),r.end=d,r}}function i(e){var n=e.tagName,r=e.unarySlash;c&&("p"===s&&ha(n)&&o("",s),va(n)&&s===n&&o("",n));for(var i=u(n)||"html"===n&&"head"===s||!!r,a=e.attrs.length,d=new Array(a),p=0;p<a;p++){var f=e.attrs[p];Oa&&f[0].indexOf('""')===-1&&(""===f[3]&&delete f[3],""===f[4]&&delete f[4],""===f[5]&&delete f[5]);var v=f[3]||f[4]||f[5]||"";d[p]={name:f[1],value:_n(v,t.shouldDecodeNewlines)}}i||(l.push({tag:n,attrs:d}),s=n,r=""),t.start&&t.start(n,d,i,e.start,e.end)}function o(e,n,r,i){var o;if(null==r&&(r=d),null==i&&(i=d),n){var a=n.toLowerCase();for(o=l.length-1;o>=0&&l[o].tag.toLowerCase()!==a;o--);}else o=0;if(o>=0){for(var c=l.length-1;c>=o;c--)t.end&&t.end(l[c].tag,r,i);l.length=o,s=o&&l[o-1].tag}else"br"===n.toLowerCase()?t.start&&t.start(n,[],!0,r,i):"p"===n.toLowerCase()&&(t.start&&t.start(n,[],!1,r,i),t.end&&t.end(n,r,i))}for(var a,s,l=[],c=t.expectHTML,u=t.isUnaryTag||fi,d=0;e;){if(a=e,s&&ns(s,t.sfc,l)){var p=s.toLowerCase(),f=rs[p]||(rs[p]=new RegExp("([\\s\\S]*?)(</"+p+"[^>]*>)","i")),v=0,h=e.replace(f,function(e,n,r){return v=r.length,"script"!==p&&"style"!==p&&"noscript"!==p&&(n=n.replace(/<!--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),t.chars&&t.chars(n),""});d+=e.length-h.length,e=h,o("</"+p+">",p,d-v,d)}else{var m=e.indexOf("<");if(0===m){if(Ea.test(e)){var g=e.indexOf("-->");if(g>=0){n(g+3);continue}}if(Sa.test(e)){var y=e.indexOf("]>");if(y>=0){n(y+2);continue}}var b=e.match(Aa);if(b){n(b[0].length);continue}var _=e.match(xa);if(_){var w=d;n(_[0].length),o(_[0],_[1],w,d);continue}var C=r();if(C){i(C);continue}}var k=void 0,x=void 0,A=void 0;if(m>0){for(x=e.slice(m);!(xa.test(x)||Ca.test(x)||Ea.test(x)||Sa.test(x)||(A=x.indexOf("<",1),A<0));)m+=A,x=e.slice(m);k=e.substring(0,m),n(m)}m<0&&(k=e,e=""),t.chars&&k&&t.chars(k)}if(e===a&&t.chars){t.chars(e);break}}o()}function Cn(e){function t(){(a||(a=[])).push(e.slice(v,i).trim()),v=i+1}var n,r,i,o,a,s=!1,l=!1,c=!1,u=!1,d=0,p=0,f=0,v=0;for(i=0;i<e.length;i++)if(r=n,n=e.charCodeAt(i),s)39===n&&92!==r&&(s=!1);else if(l)34===n&&92!==r&&(l=!1);else if(c)96===n&&92!==r&&(c=!1);else if(u)47===n&&92!==r&&(u=!1);else if(124!==n||124===e.charCodeAt(i+1)||124===e.charCodeAt(i-1)||d||p||f){switch(n){case 34:l=!0;break;case 39:s=!0;break;case 96:c=!0;break;case 40:f++;break;case 41:f--;break;case 91:p++;break;case 93:p--;break;case 123:d++;break;case 125:d--}if(47===n){for(var h=i-1,m=void 0;h>=0&&(m=e.charAt(h)," "===m);h--);m&&/[\w$]/.test(m)||(u=!0)}}else void 0===o?(v=i+1,o=e.slice(0,i).trim()):t();if(void 0===o?o=e.slice(0,i).trim():0!==v&&t(),a)for(i=0;i<a.length;i++)o=kn(o,a[i]);return o}function kn(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var r=t.slice(0,n),i=t.slice(n+1);return'_f("'+r+'")('+e+","+i}function xn(e,t){var n=t?ds(t):cs;if(n.test(e)){for(var r,i,o=[],a=n.lastIndex=0;r=n.exec(e);){i=r.index,i>a&&o.push(JSON.stringify(e.slice(a,i)));var s=Cn(r[1].trim());o.push("_s("+s+")"),a=i+r[0].length}return a<e.length&&o.push(JSON.stringify(e.slice(a))),o.join("+")}}function An(e){console.error("[Vue parser]: "+e)}function En(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function Sn(e,t,n){(e.props||(e.props=[])).push({name:t,value:n})}function On(e,t,n){(e.attrs||(e.attrs=[])).push({name:t,value:n})}function Tn(e,t,n,r,i,o){(e.directives||(e.directives=[])).push({name:t,rawName:n,value:r,arg:i,modifiers:o})}function $n(e,t,n,r,i){r&&r.capture&&(delete r.capture,t="!"+t),r&&r.once&&(delete r.once,t="~"+t);var o;r&&r.native?(delete r.native,o=e.nativeEvents||(e.nativeEvents={})):o=e.events||(e.events={});var a={value:n,modifiers:r},s=o[t];Array.isArray(s)?i?s.unshift(a):s.push(a):s?o[t]=i?[a,s]:[s,a]:o[t]=a}function Pn(e,t,n){var r=Ln(e,":"+t)||Ln(e,"v-bind:"+t);if(null!=r)return Cn(r);if(n!==!1){var i=Ln(e,t);if(null!=i)return JSON.stringify(i)}}function Ln(e,t){var n;if(null!=(n=e.attrsMap[t]))for(var r=e.attrsList,i=0,o=r.length;i<o;i++)if(r[i].name===t){r.splice(i,1);break}return n}function Nn(e){if($a=e,Ta=$a.length,La=Na=Ia=0,e.indexOf("[")<0||e.lastIndexOf("]")<Ta-1)return{exp:e,idx:null};for(;!jn();)Pa=In(),Dn(Pa)?Bn(Pa):91===Pa&&Mn(Pa);return{exp:e.substring(0,Na),idx:e.substring(Na+1,Ia)}}function In(){return $a.charCodeAt(++La)}function jn(){return La>=Ta}function Dn(e){return 34===e||39===e}function Mn(e){var t=1;for(Na=La;!jn();)if(e=In(),Dn(e))Bn(e);else if(91===e&&t++,93===e&&t--,0===t){Ia=La;break}}function Bn(e){for(var t=e;!jn()&&(e=In(),e!==t););}function Fn(e,t){ja=t.warn||An,Da=t.getTagNamespace||fi,Ma=t.mustUseProp||fi,Ba=t.isPreTag||fi,Fa=En(t.modules,"preTransformNode"),Ra=En(t.modules,"transformNode"),Va=En(t.modules,"postTransformNode"),Ha=t.delimiters;var n,r,i=[],o=t.preserveWhitespace!==!1,a=!1,s=!1;return wn(e,{expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,shouldDecodeNewlines:t.shouldDecodeNewlines,start:function(e,o,l){function c(e){}var u=r&&r.ns||Da(e);_i&&"svg"===u&&(o=rr(o));var d={type:1,tag:e,attrsList:o,attrsMap:tr(o),parent:r,children:[]};u&&(d.ns=u),nr(d)&&!Ai()&&(d.forbidden=!0);for(var p=0;p<Fa.length;p++)Fa[p](d,t);if(a||(Rn(d),d.pre&&(a=!0)),Ba(d.tag)&&(s=!0),a)Vn(d);else{Un(d),qn(d),Gn(d),Hn(d),d.plain=!d.key&&!o.length,Jn(d),Xn(d),Qn(d);for(var f=0;f<Ra.length;f++)Ra[f](d,t);Zn(d)}if(n?i.length||n.if&&(d.elseif||d.else)&&(c(d),Kn(n,{exp:d.elseif,block:d})):(n=d,c(n)),r&&!d.forbidden)if(d.elseif||d.else)Wn(d,r);else if(d.slotScope){r.plain=!1;var v=d.slotTarget||"default";(r.scopedSlots||(r.scopedSlots={}))[v]=d}else r.children.push(d),d.parent=r;l||(r=d,i.push(d));for(var h=0;h<Va.length;h++)Va[h](d,t)},end:function(){var e=i[i.length-1],t=e.children[e.children.length-1];t&&3===t.type&&" "===t.text&&e.children.pop(),i.length-=1,r=i[i.length-1],e.pre&&(a=!1),Ba(e.tag)&&(s=!1)},chars:function(e){if(r&&(!_i||"textarea"!==r.tag||r.attrsMap.placeholder!==e)){var t=r.children;if(e=s||e.trim()?bs(e):o&&t.length?" ":""){var n;!a&&" "!==e&&(n=xn(e,Ha))?t.push({type:2,expression:n,text:e}):" "===e&&" "===t[t.length-1].text||r.children.push({type:3,text:e})}}}}),n}function Rn(e){null!=Ln(e,"v-pre")&&(e.pre=!0)}function Vn(e){var t=e.attrsList.length;if(t)for(var n=e.attrs=new Array(t),r=0;r<t;r++)n[r]={name:e.attrsList[r].name,value:JSON.stringify(e.attrsList[r].value)};else e.pre||(e.plain=!0)}function Hn(e){var t=Pn(e,"key");t&&(e.key=t)}function Jn(e){var t=Pn(e,"ref");t&&(e.ref=t,e.refInFor=Yn(e))}function Un(e){var t;if(t=Ln(e,"v-for")){var n=t.match(fs);if(!n)return;e.for=n[2].trim();var r=n[1].trim(),i=r.match(vs);i?(e.alias=i[1].trim(),e.iterator1=i[2].trim(),i[3]&&(e.iterator2=i[3].trim())):e.alias=r}}function qn(e){var t=Ln(e,"v-if");if(t)e.if=t,Kn(e,{exp:t,block:e});else{null!=Ln(e,"v-else")&&(e.else=!0);var n=Ln(e,"v-else-if");n&&(e.elseif=n)}}function Wn(e,t){var n=zn(t.children);n&&n.if&&Kn(n,{exp:e.elseif,block:e})}function zn(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];e.pop()}}function Kn(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function Gn(e){var t=Ln(e,"v-once");null!=t&&(e.once=!0)}function Xn(e){if("slot"===e.tag)e.slotName=Pn(e,"name");else{var t=Pn(e,"slot");t&&(e.slotTarget='""'===t?'"default"':t),"template"===e.tag&&(e.slotScope=Ln(e,"scope"))}}function Qn(e){var t;(t=Pn(e,"is"))&&(e.component=t),null!=Ln(e,"inline-template")&&(e.inlineTemplate=!0)}function Zn(e){var t,n,r,i,o,a,s,l,c=e.attrsList;for(t=0,n=c.length;t<n;t++)if(r=i=c[t].name,o=c[t].value,ps.test(r))if(e.hasBindings=!0,s=er(r),s&&(r=r.replace(ys,"")),hs.test(r))r=r.replace(hs,""),o=Cn(o),l=!1,s&&(s.prop&&(l=!0,r=si(r),"innerHtml"===r&&(r="innerHTML")),s.camel&&(r=si(r))),l||Ma(e.tag,r)?Sn(e,r,o):On(e,r,o);else if(ms.test(r))r=r.replace(ms,""),$n(e,r,o,s);else{r=r.replace(ps,"");var u=r.match(gs);u&&(a=u[1])&&(r=r.slice(0,-(a.length+1))),Tn(e,r,i,o,a,s)}else{On(e,r,JSON.stringify(o)),Ma(e.tag,r)&&("value"===r?Sn(e,r,JSON.stringify(o)):Sn(e,r,"true"))}}function Yn(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}function er(e){var t=e.match(ys);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function tr(e){for(var t={},n=0,r=e.length;n<r;n++)t[e[n].name]=e[n].value;return t}function nr(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}function rr(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];_s.test(r.name)||(r.name=r.name.replace(ws,""),t.push(r))}return t}function ir(e,t){e&&(Ja=Cs(t.staticKeys||""),Ua=t.isReservedTag||fi,ar(e),sr(e,!1))}function or(e){return i("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(e?","+e:""))}function ar(e){if(e.static=cr(e),1===e.type){if(!Ua(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var r=e.children[t];ar(r),r.static||(e.static=!1)}}}function sr(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,r=e.children.length;n<r;n++)sr(e.children[n],t||!!e.for);e.ifConditions&&lr(e.ifConditions,t)}}function lr(e,t){for(var n=1,r=e.length;n<r;n++)sr(e[n].block,t)}function cr(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||ii(e.tag)||!Ua(e.tag)||ur(e)||!Object.keys(e).every(Ja))))}function ur(e){for(;e.parent;){if(e=e.parent,"template"!==e.tag)return!1;if(e.for)return!0}return!1}function dr(e,t){var n=t?"nativeOn:{":"on:{";for(var r in e)n+='"'+r+'":'+pr(r,e[r])+",";return n.slice(0,-1)+"}"}function pr(e,t){if(t){if(Array.isArray(t))return"["+t.map(function(t){return pr(e,t)}).join(",")+"]";if(t.modifiers){var n="",r=[];for(var i in t.modifiers)Es[i]?n+=Es[i]:r.push(i);r.length&&(n=fr(r)+n);var o=xs.test(t.value)?t.value+"($event)":t.value;return"function($event){"+n+o+"}"}return ks.test(t.value)||xs.test(t.value)?t.value:"function($event){"+t.value+"}"}return"function(){}"}function fr(e){return"if("+e.map(vr).join("&&")+")return;"}function vr(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=As[e];return"_k($event.keyCode,"+JSON.stringify(e)+(n?","+JSON.stringify(n):"")+")"}function hr(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+(t.modifiers&&t.modifiers.prop?",true":"")+")"}}function mr(e,t){var n=Xa,r=Xa=[],i=Qa;Qa=0,Za=t,qa=t.warn||An,Wa=En(t.modules,"transformCode"),za=En(t.modules,"genData"),Ka=t.directives||{},Ga=t.isReservedTag||fi;var o=e?gr(e):'_c("div")';return Xa=n,Qa=i,{render:"with(this){return "+o+"}",staticRenderFns:r}}function gr(e){if(e.staticRoot&&!e.staticProcessed)return yr(e);if(e.once&&!e.onceProcessed)return br(e);if(e.for&&!e.forProcessed)return Cr(e);if(e.if&&!e.ifProcessed)return _r(e);if("template"!==e.tag||e.slotTarget){if("slot"===e.tag)return Ir(e);var t;if(e.component)t=jr(e.component,e);else{var n=e.plain?void 0:kr(e),r=e.inlineTemplate?null:Or(e,!0);t="_c('"+e.tag+"'"+(n?","+n:"")+(r?","+r:"")+")"}for(var i=0;i<Wa.length;i++)t=Wa[i](e,t);return t}return Or(e)||"void 0"}function yr(e){return e.staticProcessed=!0,Xa.push("with(this){return "+gr(e)+"}"),"_m("+(Xa.length-1)+(e.staticInFor?",true":"")+")"}function br(e){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return _r(e);if(e.staticInFor){for(var t="",n=e.parent;n;){if(n.for){t=n.key;break}n=n.parent}return t?"_o("+gr(e)+","+Qa++ +(t?","+t:"")+")":gr(e)}return yr(e)}function _r(e){return e.ifProcessed=!0,wr(e.ifConditions.slice())}function wr(e){function t(e){return e.once?br(e):gr(e)}if(!e.length)return"_e()";var n=e.shift();return n.exp?"("+n.exp+")?"+t(n.block)+":"+wr(e):""+t(n.block)}function Cr(e){var t=e.for,n=e.alias,r=e.iterator1?","+e.iterator1:"",i=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,"_l(("+t+"),function("+n+r+i+"){return "+gr(e)+"})"}function kr(e){var t="{",n=xr(e);n&&(t+=n+","),e.key&&(t+="key:"+e.key+","),e.ref&&(t+="ref:"+e.ref+","),e.refInFor&&(t+="refInFor:true,"),e.pre&&(t+="pre:true,"),e.component&&(t+='tag:"'+e.tag+'",');for(var r=0;r<za.length;r++)t+=za[r](e);if(e.attrs&&(t+="attrs:{"+Dr(e.attrs)+"},"),e.props&&(t+="domProps:{"+Dr(e.props)+"},"),e.events&&(t+=dr(e.events)+","),e.nativeEvents&&(t+=dr(e.nativeEvents,!0)+","),e.slotTarget&&(t+="slot:"+e.slotTarget+","),e.scopedSlots&&(t+=Er(e.scopedSlots)+","),e.inlineTemplate){var i=Ar(e);i&&(t+=i+",")}return t=t.replace(/,$/,"")+"}",e.wrapData&&(t=e.wrapData(t)),t}function xr(e){var t=e.directives;if(t){var n,r,i,o,a="directives:[",s=!1;for(n=0,r=t.length;n<r;n++){i=t[n],o=!0;var l=Ka[i.name]||Ss[i.name];l&&(o=!!l(e,i,qa)),o&&(s=!0,a+='{name:"'+i.name+'",rawName:"'+i.rawName+'"'+(i.value?",value:("+i.value+"),expression:"+JSON.stringify(i.value):"")+(i.arg?',arg:"'+i.arg+'"':"")+(i.modifiers?",modifiers:"+JSON.stringify(i.modifiers):"")+"},")}return s?a.slice(0,-1)+"]":void 0}}function Ar(e){var t=e.children[0];if(1===t.type){var n=mr(t,Za);return"inlineTemplate:{render:function(){"+n.render+"},staticRenderFns:["+n.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}function Er(e){return"scopedSlots:{"+Object.keys(e).map(function(t){return Sr(t,e[t])}).join(",")+"}"}function Sr(e,t){return e+":function("+String(t.attrsMap.scope)+"){return "+("template"===t.tag?Or(t)||"void 0":gr(t))+"}"}function Or(e,t){var n=e.children;if(n.length){var r=n[0];if(1===n.length&&r.for&&"template"!==r.tag&&"slot"!==r.tag)return gr(r);var i=Tr(n);return"["+n.map(Lr).join(",")+"]"+(t&&i?","+i:"")}}function Tr(e){for(var t=0,n=0;n<e.length;n++){var r=e[n];if($r(r)||r.if&&r.ifConditions.some(function(e){return $r(e.block)})){t=2;break}(Pr(r)||r.if&&r.ifConditions.some(function(e){return Pr(e.block)}))&&(t=1)}return t}function $r(e){return e.for||"template"===e.tag||"slot"===e.tag}function Pr(e){return 1===e.type&&!Ga(e.tag)}function Lr(e){return 1===e.type?gr(e):Nr(e)}function Nr(e){return"_v("+(2===e.type?e.expression:Mr(JSON.stringify(e.text)))+")"}function Ir(e){var t=e.slotName||'"default"',n=Or(e),r="_t("+t+(n?","+n:""),i=e.attrs&&"{"+e.attrs.map(function(e){return si(e.name)+":"+e.value}).join(",")+"}",o=e.attrsMap["v-bind"];return!i&&!o||n||(r+=",null"),i&&(r+=","+i),o&&(r+=(i?"":",null")+","+o),r+")"}function jr(e,t){var n=t.inlineTemplate?null:Or(t,!0);return"_c("+e+","+kr(t)+(n?","+n:"")+")"}function Dr(e){for(var t="",n=0;n<e.length;n++){var r=e[n];t+='"'+r.name+'":'+Mr(r.value)+","}return t.slice(0,-1)}function Mr(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function Br(e,t){var n=Fn(e.trim(),t);ir(n,t);var r=mr(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}}function Fr(e,t){var n=(t.warn||An,Ln(e,"class"));n&&(e.staticClass=JSON.stringify(n));var r=Pn(e,"class",!1);r&&(e.classBinding=r)}function Rr(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}function Vr(e,t){var n=(t.warn||An,Ln(e,"style"));if(n){e.staticStyle=JSON.stringify(Do(n))}var r=Pn(e,"style",!1);r&&(e.styleBinding=r)}function Hr(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}function Jr(e,t,n){Ya=n;var r=t.value,i=t.modifiers,o=e.tag,a=e.attrsMap.type;return"select"===o?zr(e,r,i):"input"===o&&"checkbox"===a?Ur(e,r,i):"input"===o&&"radio"===a?qr(e,r,i):Wr(e,r,i),!0}function Ur(e,t,n){var r=n&&n.number,i=Pn(e,"value")||"null",o=Pn(e,"true-value")||"true",a=Pn(e,"false-value")||"false";Sn(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===o?":("+t+")":":_q("+t+","+o+")")),$n(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$c){$$i<0&&("+t+"=$$a.concat($$v))}else{$$i>-1&&("+t+"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{"+t+"=$$c}",null,!0)}function qr(e,t,n){var r=n&&n.number,i=Pn(e,"value")||"null";i=r?"_n("+i+")":i,Sn(e,"checked","_q("+t+","+i+")"),$n(e,"change",Kr(t,i),null,!0)}function Wr(e,t,n){var r=e.attrsMap.type,i=n||{},o=i.lazy,a=i.number,s=i.trim,l=o||_i&&"range"===r?"change":"input",c=!o&&"range"!==r,u="input"===e.tag||"textarea"===e.tag,d=u?"$event.target.value"+(s?".trim()":""):s?"(typeof $event === 'string' ? $event.trim() : $event)":"$event";d=a||"number"===r?"_n("+d+")":d;var p=Kr(t,d);u&&c&&(p="if($event.target.composing)return;"+p),Sn(e,"value",u?"_s("+t+")":"("+t+")"),$n(e,l,p,null,!0),(s||a||"number"===r)&&$n(e,"blur","$forceUpdate()")}function zr(e,t,n){var r=n&&n.number,i='Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(r?"_n(val)":"val")+"})"+(null==e.attrsMap.multiple?"[0]":""),o=Kr(t,i);$n(e,"change",o,null,!0)}function Kr(e,t){var n=Nn(e);return null===n.idx?e+"="+t:"var $$exp = "+n.exp+", $$idx = "+n.idx+";if (!Array.isArray($$exp)){"+e+"="+t+"}else{$$exp.splice($$idx, 1, "+t+")}"}function Gr(e,t){t.value&&Sn(e,"textContent","_s("+t.value+")")}function Xr(e,t){t.value&&Sn(e,"innerHTML","_s("+t.value+")")}function Qr(e,t){return t=t?d(d({},Ns),t):Ns,Br(e,t)}function Zr(e,t,n){var r=(t&&t.warn||Ti,t&&t.delimiters?String(t.delimiters)+e:e);if(Ls[r])return Ls[r];var i={},o=Qr(e,t);i.render=Yr(o.render);var a=o.staticRenderFns.length;i.staticRenderFns=new Array(a);for(var s=0;s<a;s++)i.staticRenderFns[s]=Yr(o.staticRenderFns[s]);return Ls[r]=i}function Yr(e){try{return new Function(e)}catch(e){return h}}function ei(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}var ti,ni,ri="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ii=i("slot,component",!0),oi=Object.prototype.hasOwnProperty,ai=/-(\w)/g,si=l(function(e){return e.replace(ai,function(e,t){return t?t.toUpperCase():""})}),li=l(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),ci=/([^-])([A-Z])/g,ui=l(function(e){return e.replace(ci,"$1-$2").replace(ci,"$1-$2").toLowerCase()}),di=Object.prototype.toString,pi="[object Object]",fi=function(){return!1},vi=function(e){return e},hi={optionMergeStrategies:Object.create(null),silent:!1,devtools:!1,errorHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:fi,isUnknownElement:fi,getTagNamespace:h,parsePlatformTagName:vi,mustUseProp:fi,_assetTypes:["component","directive","filter"],_lifecycleHooks:["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated"],_maxUpdateCount:100},mi=/[^\w.$]/,gi="__proto__"in{},yi="undefined"!=typeof window,bi=yi&&window.navigator.userAgent.toLowerCase(),_i=bi&&/msie|trident/.test(bi),wi=bi&&bi.indexOf("msie 9.0")>0,Ci=bi&&bi.indexOf("edge/")>0,ki=bi&&bi.indexOf("android")>0,xi=bi&&/iphone|ipad|ipod|ios/.test(bi),Ai=function(){return void 0===ti&&(ti=!yi&&"undefined"!=typeof t&&"server"===t.process.env.VUE_ENV),ti},Ei=yi&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,Si=function(){function e(){r=!1;var e=n.slice(0);n.length=0;for(var t=0;t<e.length;t++)e[t]()}var t,n=[],r=!1;if("undefined"!=typeof Promise&&C(Promise)){var i=Promise.resolve(),o=function(e){console.error(e)};t=function(){i.then(e).catch(o),xi&&setTimeout(h)}}else if("undefined"==typeof MutationObserver||!C(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())t=function(){setTimeout(e,0)};else{var a=1,s=new MutationObserver(e),l=document.createTextNode(String(a));s.observe(l,{characterData:!0}),t=function(){a=(a+1)%2,l.data=String(a)}}return function(e,i){var o;if(n.push(function(){e&&e.call(i),o&&o(i)}),r||(r=!0,t()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){o=e})}}();ni="undefined"!=typeof Set&&C(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return this.set[e]===!0},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var Oi,Ti=h,$i=0,Pi=function(){this.id=$i++,this.subs=[]};Pi.prototype.addSub=function(e){this.subs.push(e)},Pi.prototype.removeSub=function(e){o(this.subs,e)},Pi.prototype.depend=function(){Pi.target&&Pi.target.addDep(this)},Pi.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},Pi.target=null;var Li=[],Ni=Array.prototype,Ii=Object.create(Ni);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=Ni[e];_(Ii,e,function(){for(var n=arguments,r=arguments.length,i=new Array(r);r--;)i[r]=n[r];var o,a=t.apply(this,i),s=this.__ob__;switch(e){case"push":o=i;break;case"unshift":o=i;break;case"splice":o=i.slice(2)}return o&&s.observeArray(o),s.dep.notify(),a})});var ji=Object.getOwnPropertyNames(Ii),Di={shouldConvert:!0,isSettingProps:!1},Mi=function(e){if(this.value=e,this.dep=new Pi,this.vmCount=0,_(e,"__ob__",this),Array.isArray(e)){var t=gi?A:E;t(e,Ii,ji),this.observeArray(e)}else this.walk(e)};Mi.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)O(e,t[n],e[t[n]])},Mi.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)S(e[t])};var Bi=hi.optionMergeStrategies;Bi.data=function(e,t,n){return n?e||t?function(){var r="function"==typeof t?t.call(n):t,i="function"==typeof e?e.call(n):void 0;return r?L(r,i):i}:void 0:t?"function"!=typeof t?e:e?function(){return L(t.call(this),e.call(this))}:t:e},hi._lifecycleHooks.forEach(function(e){Bi[e]=N}),hi._assetTypes.forEach(function(e){Bi[e+"s"]=I}),Bi.watch=function(e,t){if(!t)return e;if(!e)return t;var n={};d(n,e);for(var r in t){var i=n[r],o=t[r];i&&!Array.isArray(i)&&(i=[i]),n[r]=i?i.concat(o):[o]}return n},Bi.props=Bi.methods=Bi.computed=function(e,t){if(!t)return e;if(!e)return t;var n=Object.create(null);return d(n,e),d(n,t),n};var Fi=function(e,t){return void 0===t?e:t},Ri=Object.freeze({defineReactive:O,_toString:n,toNumber:r,makeMap:i,isBuiltInTag:ii,remove:o,hasOwn:a,isPrimitive:s,cached:l,camelize:si,capitalize:li,hyphenate:ui,bind:c,toArray:u,extend:d,isObject:p,isPlainObject:f,toObject:v,noop:h,no:fi,identity:vi,genStaticKeys:m,looseEqual:g,looseIndexOf:y,isReserved:b,def:_,parsePath:w,hasProto:gi,inBrowser:yi,UA:bi,isIE:_i,isIE9:wi,isEdge:Ci,isAndroid:ki,isIOS:xi,isServerRendering:Ai,devtools:Ei,nextTick:Si,get _Set(){return ni},mergeOptions:M,resolveAsset:B,get warn(){return Ti},get formatComponentName(){return Oi},validateProp:F}),Vi=[],Hi={},Ji=!1,Ui=!1,qi=0,Wi=0,zi=function(e,t,n,r){this.vm=e,e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Wi,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ni,this.newDepIds=new ni,this.expression="","function"==typeof t?this.getter=t:(this.getter=w(t),this.getter||(this.getter=function(){})),this.value=this.lazy?void 0:this.get()};zi.prototype.get=function(){k(this);var e=this.getter.call(this.vm,this.vm);return this.deep&&W(e),x(),this.cleanupDeps(),e},zi.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},zi.prototype.cleanupDeps=function(){for(var e=this,t=this.deps.length;t--;){var n=e.deps[t];e.newDepIds.has(n.id)||n.removeSub(e)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},zi.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():q(this)},zi.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||p(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){if(!hi.errorHandler)throw e;hi.errorHandler.call(null,e,this.vm)}else this.cb.call(this.vm,e,t)}}},zi.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},zi.prototype.depend=function(){for(var e=this,t=this.deps.length;t--;)e.deps[t].depend()},zi.prototype.teardown=function(){var e=this;if(this.active){this.vm._isBeingDestroyed||o(this.vm._watchers,this);for(var t=this.deps.length;t--;)e.deps[t].removeSub(e);this.active=!1}};var Ki,Gi=new ni,Xi={enumerable:!0,configurable:!0,get:h,set:h},Qi=function(e,t,n,r,i,o,a){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.functionalContext=void 0,this.key=t&&t.key,this.componentOptions=a,this.child=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1},Zi=function(){var e=new Qi;return e.text="",e.isComment=!0,e},Yi=null,eo={init:Ee,prepatch:Se,insert:Oe,destroy:Te},to=Object.keys(eo),no=1,ro=2,io=0;Ve(Ue),ne(Ue),be(Ue),we(Ue),Fe(Ue);var oo=[String,RegExp],ao={name:"keep-alive",abstract:!0,props:{include:oo,exclude:oo},created:function(){this.cache=Object.create(null)},render:function(){var e=ve(this.$slots.default);if(e&&e.componentOptions){var t=e.componentOptions,n=t.Ctor.options.name||t.tag;if(n&&(this.include&&!Ge(this.include,n)||this.exclude&&Ge(this.exclude,n)))return e;var r=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;this.cache[r]?e.child=this.cache[r].child:this.cache[r]=e,e.data.keepAlive=!0}return e},destroyed:function(){var e=this;for(var t in this.cache){var n=e.cache[t];Ce(n.child,"deactivated"),n.child.$destroy()}}},so={KeepAlive:ao};Xe(Ue),Object.defineProperty(Ue.prototype,"$isServer",{get:Ai}),Ue.version="2.1.8";var lo,co,uo=i("input,textarea,option,select"),po=function(e,t){return"value"===t&&uo(e)||"selected"===t&&"option"===e||"checked"===t&&"input"===e||"muted"===t&&"video"===e},fo=i("contenteditable,draggable,spellcheck"),vo=i("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),ho="http://www.w3.org/1999/xlink",mo=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},go=function(e){return mo(e)?e.slice(6,e.length):""},yo=function(e){return null==e||e===!1},bo={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},_o=i("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template"),wo=i("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Co=function(e){return"pre"===e},ko=function(e){return _o(e)||wo(e)},xo=Object.create(null),Ao=Object.freeze({createElement:ot,createElementNS:at,createTextNode:st,createComment:lt,insertBefore:ct,removeChild:ut,appendChild:dt,parentNode:pt,nextSibling:ft,tagName:vt,setTextContent:ht,setAttribute:mt}),Eo={create:function(e,t){gt(t)},update:function(e,t){e.data.ref!==t.data.ref&&(gt(e,!0),gt(t))},destroy:function(e){gt(e,!0)}},So=new Qi("",{},[]),Oo=["create","activate","update","remove","destroy"],To={create:kt,update:kt,destroy:function(e){kt(e,So)}},$o=Object.create(null),Po=[Eo,To],Lo={create:Ot,update:Ot},No={create:$t,update:$t},Io={create:Nt,update:Nt},jo={create:It,update:It},Do=l(function(e){var t={},n=/;(?![^(]*\))/g,r=/:(.+)/;return e.split(n).forEach(function(e){if(e){var n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}),Mo=/^--/,Bo=/\s*!important$/,Fo=function(e,t,n){Mo.test(t)?e.style.setProperty(t,n):Bo.test(n)?e.style.setProperty(t,n.replace(Bo,""),"important"):e.style[Vo(t)]=n},Ro=["Webkit","Moz","ms"],Vo=l(function(e){
if(co=co||document.createElement("div"),e=si(e),"filter"!==e&&e in co.style)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Ro.length;n++){var r=Ro[n]+t;if(r in co.style)return r}}),Ho={create:Vt,update:Vt},Jo=yi&&!wi,Uo="transition",qo="animation",Wo="transition",zo="transitionend",Ko="animation",Go="animationend";Jo&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Wo="WebkitTransition",zo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ko="WebkitAnimation",Go="webkitAnimationEnd"));var Xo=yi&&window.requestAnimationFrame||setTimeout,Qo=/\b(transform|all)(,|$)/,Zo=l(function(e){return{enterClass:e+"-enter",leaveClass:e+"-leave",appearClass:e+"-enter",enterToClass:e+"-enter-to",leaveToClass:e+"-leave-to",appearToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveActiveClass:e+"-leave-active",appearActiveClass:e+"-enter-active"}}),Yo=yi?{create:tn,activate:tn,remove:function(e,t){e.data.show?t():Zt(e,t)}}:{},ea=[Lo,No,Io,jo,Ho,Yo],ta=ea.concat(Po),na=Ct({nodeOps:Ao,modules:ta});wi&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&ln(e,"input")});var ra={inserted:function(e,t,n){if("select"===n.tag){var r=function(){nn(e,t,n.context)};r(),(_i||Ci)&&setTimeout(r,0)}else"textarea"!==n.tag&&"text"!==e.type||(e._vModifiers=t.modifiers,t.modifiers.lazy||(ki||(e.addEventListener("compositionstart",an),e.addEventListener("compositionend",sn)),wi&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){nn(e,t,n.context);var r=e.multiple?t.value.some(function(t){return rn(t,e.options)}):t.value!==t.oldValue&&rn(t.value,e.options);r&&ln(e,"change")}}},ia={bind:function(e,t,n){var r=t.value;n=cn(n);var i=n.data&&n.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&i&&!wi?(n.data.show=!0,Qt(n,function(){e.style.display=o})):e.style.display=r?o:"none"},update:function(e,t,n){var r=t.value,i=t.oldValue;if(r!==i){n=cn(n);var o=n.data&&n.data.transition;o&&!wi?(n.data.show=!0,r?Qt(n,function(){e.style.display=e.__vOriginalDisplay}):Zt(n,function(){e.style.display="none"})):e.style.display=r?e.__vOriginalDisplay:"none"}},unbind:function(e,t,n,r,i){i||(e.style.display=e.__vOriginalDisplay)}},oa={model:ra,show:ia},aa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String},sa={name:"transition",props:aa,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(function(e){return e.tag}),n.length)){var r=this.mode,i=n[0];if(fn(this.$vnode))return i;var o=un(i);if(!o)return i;if(this._leaving)return pn(e,i);var a=o.key=null==o.key||o.isStatic?"__v"+(o.tag+this._uid)+"__":o.key,s=(o.data||(o.data={})).transition=dn(this),l=this._vnode,c=un(l);if(o.data.directives&&o.data.directives.some(function(e){return"show"===e.name})&&(o.data.show=!0),c&&c.data&&!vn(o,c)){var u=c&&(c.data.transition=d({},s));if("out-in"===r)return this._leaving=!0,se(u,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()},a),pn(e,i);if("in-out"===r){var p,f=function(){p()};se(s,"afterEnter",f,a),se(s,"enterCancelled",f,a),se(u,"delayLeave",function(e){p=e},a)}}return i}}},la=d({tag:String,moveClass:String},aa);delete la.mode;var ca={props:la,render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=dn(this),s=0;s<i.length;s++){var l=i[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))o.push(l),n[l.key]=l,(l.data||(l.data={})).transition=a;else;}if(r){for(var c=[],u=[],d=0;d<r.length;d++){var p=r[d];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?c.push(p):u.push(p)}this.kept=e(t,null,c),this.removed=u}return e(t,null,o)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";if(e.length&&this.hasMove(e[0].elm,t)){e.forEach(hn),e.forEach(mn),e.forEach(gn);document.body.offsetHeight;e.forEach(function(e){if(e.data.moved){var n=e.elm,r=n.style;qt(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(zo,n._moveCb=function e(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(zo,e),n._moveCb=null,Wt(n,t))})}})}},methods:{hasMove:function(e,t){if(!Jo)return!1;if(null!=this._hasMove)return this._hasMove;qt(e,t);var n=Kt(e);return Wt(e,t),this._hasMove=n.hasTransform}}},ua={Transition:sa,TransitionGroup:ca};Ue.config.isUnknownElement=rt,Ue.config.isReservedTag=ko,Ue.config.getTagNamespace=nt,Ue.config.mustUseProp=po,d(Ue.options.directives,oa),d(Ue.options.components,ua),Ue.prototype.__patch__=yi?na:h,Ue.prototype.$mount=function(e,t){return e=e&&yi?it(e):void 0,this._mount(e,t)},setTimeout(function(){hi.devtools&&Ei&&Ei.emit("init",Ue)},0);var da,pa=!!yi&&yn("\n","&#10;"),fa=i("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr",!0),va=i("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source",!0),ha=i("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track",!0),ma=/([^\s"'<>\/=]+)/,ga=/(?:=)/,ya=[/"([^"]*)"+/.source,/'([^']*)'+/.source,/([^\s"'=<>`]+)/.source],ba=new RegExp("^\\s*"+ma.source+"(?:\\s*("+ga.source+")\\s*(?:"+ya.join("|")+"))?"),_a="[a-zA-Z_][\\w\\-\\.]*",wa="((?:"+_a+"\\:)?"+_a+")",Ca=new RegExp("^<"+wa),ka=/^\s*(\/?)>/,xa=new RegExp("^<\\/"+wa+"[^>]*>"),Aa=/^<!DOCTYPE [^>]+>/i,Ea=/^<!--/,Sa=/^<!\[/,Oa=!1;"x".replace(/x(.)?/g,function(e,t){Oa=""===t});var Ta,$a,Pa,La,Na,Ia,ja,Da,Ma,Ba,Fa,Ra,Va,Ha,Ja,Ua,qa,Wa,za,Ka,Ga,Xa,Qa,Za,Ya,es=i("script,style",!0),ts=function(e){return"lang"===e.name&&"html"!==e.value},ns=function(e,t,n){return!!es(e)||!(!t||1!==n.length)&&!("template"===e&&!n[0].attrs.some(ts))},rs={},is=/&lt;/g,os=/&gt;/g,as=/&#10;/g,ss=/&amp;/g,ls=/&quot;/g,cs=/\{\{((?:.|\n)+?)\}\}/g,us=/[-.*+?^${}()|[\]\/\\]/g,ds=l(function(e){var t=e[0].replace(us,"\\$&"),n=e[1].replace(us,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")}),ps=/^v-|^@|^:/,fs=/(.*?)\s+(?:in|of)\s+(.*)/,vs=/\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/,hs=/^:|^v-bind:/,ms=/^@|^v-on:/,gs=/:(.*)$/,ys=/\.[^.]+/g,bs=l(bn),_s=/^xmlns:NS\d+/,ws=/^NS\d+:/,Cs=l(or),ks=/^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,xs=/^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/,As={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Es={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:"if($event.target !== $event.currentTarget)return;",ctrl:"if(!$event.ctrlKey)return;",shift:"if(!$event.shiftKey)return;",alt:"if(!$event.altKey)return;",meta:"if(!$event.metaKey)return;"},Ss={bind:hr,cloak:h},Os=(new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),{staticKeys:["staticClass"],transformNode:Fr,genData:Rr}),Ts={staticKeys:["staticStyle"],transformNode:Vr,genData:Hr},$s=[Os,Ts],Ps={model:Jr,text:Gr,html:Xr},Ls=Object.create(null),Ns={expectHTML:!0,modules:$s,staticKeys:m($s),directives:Ps,isReservedTag:ko,isUnaryTag:fa,mustUseProp:po,getTagNamespace:nt,isPreTag:Co},Is=l(function(e){var t=it(e);return t&&t.innerHTML}),js=Ue.prototype.$mount;Ue.prototype.$mount=function(e,t){if(e=e&&it(e),e===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(r=Is(r));else{if(!r.nodeType)return this;r=r.innerHTML}else e&&(r=ei(e));if(r){var i=Zr(r,{warn:Ti,shouldDecodeNewlines:pa,delimiters:n.delimiters},this),o=i.render,a=i.staticRenderFns;n.render=o,n.staticRenderFns=a}}return js.call(this,e,t)},Ue.compile=Zr,e.exports=Ue}).call(t,function(){return this}())},/*!*************************************************************!*\
  !*** ./front-end/javascripts/api-tree/jsonTreeConverter.js ***!
  \*************************************************************/
function(e,t,n){"use strict";function r(e){for(var t={},n=void 0,r=0,a=e.length;r<a;r++)t[e[r].parentId]?t[e[r].parentId].push(e[r]):t[e[r].parentId]=[e[r]];var l=i(Object.keys(t),"null").map(Number).sort(o),c=t.null[0];n=new s.Tree(c);for(var u=0,d=l.length;u<d;u++)if(t.hasOwnProperty(l[u]))for(var p=0,f=t[l[u]].length;p<f;p++)n.add(t[l[u]][p],+l[u],n.traverseBF);return n}function i(e,t){var n=e.indexOf(t);return n>-1&&e.splice(n,1),e}function o(e,t){return e-t}function a(e){}Object.defineProperty(t,"__esModule",{value:!0}),t.jsonToTree=r,t.treeToJson=a;var s=n(/*! ./tree */5)},/*!*************************************************!*\
  !*** ./front-end/javascripts/api-tree/queue.js ***!
  \*************************************************/
function(e,t){"use strict";function n(){this._oldestIndex=1,this._newestIndex=1,this._storage={}}Object.defineProperty(t,"__esModule",{value:!0}),t.Queue=n,n.prototype.size=function(){return this._newestIndex-this._oldestIndex},n.prototype.enqueue=function(e){this._storage[this._newestIndex]=e,this._newestIndex++},n.prototype.dequeue=function(){var e,t=this._oldestIndex,n=this._newestIndex;if(t!==n)return e=this._storage[t],delete this._storage[t],this._oldestIndex++,e}},/*!***********************************************************!*\
  !*** ./front-end/javascripts/api-tree/treeDataCollect.js ***!
  \***********************************************************/
function(e,t,n){"use strict";function r(e,t){var n=t.closest(".per-api");return(0,l.mergeObj)(i(n),s(e))}function i(e){var t=e.getElementsByClassName("api-info")[0],n=e.getElementsByClassName("api-modes-row")[0],r={};return r={section:t.getElementsByClassName("api-section")[0].value,uri:t.getElementsByClassName("api-uri")[0].value,method:t.getElementsByClassName("api-method")[0].value,description:t.getElementsByClassName("api-description")[0].value,wikiLink:t.getElementsByClassName("api-wiki-input")[0].value,mode:o(n),debugAddr:a(n)}}function o(e){for(var t,n=e.getElementsByClassName("api-mode"),r=0,i=n.length;r<i;r++)if(n[r].checked){t=n[r].value;break}return t}function a(e){return e.getElementsByClassName("mode-debugging-addr")[0].value}function s(e){var t=e,n=[],r={},i=[],o=function(e){if(null!==e){var t={};t.nodeId=e.nodeId,t.column=e.column,t.parentId=null===e.parent?null:e.parent.nodeId,t.childrenlevel=e.childrenlevel,t.totaloffsetylevel=e.totaloffsetylevel,t.data=e.data,t.data.hasChild=e.children.length>0,n.push(t)}};return t.traverseDF(o),i=t.dimensions(),r.dimensions={},r.dimensions.hUnit=i[0],r.dimensions.vUnit=i[1],r.nodes=n,r}Object.defineProperty(t,"__esModule",{value:!0}),t.collectApiData=r;var l=n(/*! ../common/utilities */1)},/*!***************************************************!*\
  !*** ./front-end/javascripts/api-tree/treeDom.js ***!
  \***************************************************/
function(e,t,n){"use strict";function r(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=(0,P.generateUUID)(),r='<div class="api-info">\n          <label class="api-label">API:</label>\n          <input class="api-uri" placeholder="" value="" model="uri" /> \n          <label class="api-label">method:</label>\n          <select class="api-method" model="method">\n              <option value="GET">GET</option>\n              <option value="POST">POST</option>\n              <option value="PATCH">PATCH</option>\n              <option value="DELETE">DELETE</option>\n          </select>\n          <label>section:</label>\n          <input class="api-section" type="text" model="section" />\n          <label for="">description:</label>\n          <input class="api-description" type="text" model="description" />\n          <span class="api-save" data-method="'+o(t)+'" data-action="/apis'+a(e,t)+'" >'+(t?"create":"save")+'</span>\n          <span class="api-respond-preview-btn">preview</span>\n          <span class="api-wiki" bind-toggle-class bind="wikiLink">\n            <label class="api-wiki-label">Wiki: </label>\n            <input class="api-wiki-input" type="text" model="wikiLink" />\n          </span>\n      </div>\n      <div class="api-modes-row">\n        <label class="api-mode-label"><input class="api-mode" type="radio" name="'+n+'-mode" value="0">开发</label>\n        <label class="api-mode-label api-mode-debug"><input class="api-mode" type="radio" name="'+n+'-mode" value="1">联调<input class="mode-debugging-addr" type="text" /></label>\n        <label class="api-mode-label"><input class="api-mode" type="radio" name="'+n+'-mode" value="2">线上</label>\n      </div>\n      <div class="api-tree-wrapper">\n        <div class="api-tree-content-wrapper">\n          <div class="api-tree-content">\n            <div class="api-tree-frame">\n              <svg class="api-svg" width="100%" height="100%"></svg>\n            </div>\n            <div class="api-tree"></div>\n          </div>\n        </div>\n      </div>\n      <div class="api-respond-preview">\n          <div class="preview-control-wrapper">\n            <div class="preview-control">\n                <span class="per-preview-type preview-raw">raw</span>\n                <span class="per-preview-type preview-beautify">beautify</span>\n                <span class="per-preview-type preview-highlight">syntaxHighlight</span>\n            </div>\n          </div>\n          <div class="data-view json">\n          </div>\n      </div>';return r}function i(){var e='\n    <i class="remove-child">-</i>\n    <input type="text" class="leaf-key" placeholder="key" model="dataName" />\n    <i class="gap-mark">---</i>\n    <input type="text" class="leaf-value" placeholder="value" model="dataValue" />\n    <select class="leaf-value-type" model="dataType">\n        <option value="String">String</option>\n        <option value="Integer">Integer</option>\n        <option value="Float">Float</option>\n        <option value="Boolean">Boolean</option>\n        <option value="Array">Array</option>\n        <option value="Hash">Hash</option>\n        <option value="Regex">Regex(string)</option>\n        <option value="Fixed">Fixed(string)</option>\n        <option value="Null">Null</option>\n    </select>\n    <i class="gap-mark">---</i>\n    <i class="add-child">+</i>\n    <input type="text" class="leaf-quantity" placeholder="quantity" model="dataQuantity" />\n    <span class="leaf-hide-quantity"></span>\n  ';return e}function o(e){return e?"POST":"PATCH"}function a(e,t){return t?"":"/"+e.id}function s(e,t){var n=document.createElement("div");return n.setAttribute("class","per-api"),n.dataset.id=t?"":e.id,n.innerHTML=r(e,t),n.getElementsByClassName("api-uri")[0].value=t?"":e.uri,n}function l(){var e={nodeId:0,parentId:null,data:L},t={nodeId:1,parentId:0,data:L};return{mode:"0",debugAddr:"",nodes:[e,t]}}function c(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];n&&(e=l()),this.apiDataObj=e,this.apiContainer=t;var r=s(e,n);this.apiContainer.appendChild(r);var i=(0,O.twoWayDataBinding)(e,this.apiContainer);e=i,this.apiEle=this.apiContainer.getElementsByClassName("per-api")[0],this.leafIndex=1,this.$apiTree=this.apiEle.getElementsByClassName("api-tree")[0],this.$apiTreeFrame=this.apiEle.getElementsByClassName("api-tree-frame")[0],this.$apiTreeContent=this.apiEle.getElementsByClassName("api-tree-content")[0],this.renderExistTree(e),this.apiReturnData="",this.apiEle.addEventListener("click",d.bind(this)),this.setModeVal(e.mode),this.setDebugAddr(e.debugAddr),this.scrollBar=(0,$.scrollBarH)({wrapper:this.apiContainer.getElementsByClassName("api-tree-wrapper")[0],content:this.apiContainer.getElementsByClassName("api-tree-content-wrapper")[0],overflowEle:this.apiContainer.getElementsByClassName("api-tree-content")[0]})}function u(e){var t=document.createElement("span");return t.setAttribute("class","leaf"),t.setAttribute("bind","hasChild"),t.setAttribute("bind-toggle-class",""),t.dataset.parentId=e.parentId,t.dataset.nodeId=e.nodeId,t.innerHTML=i(),t.style.transform="translate3d("+Math.round((N+D)*(e.column-1))+"px, "+Math.round(e.totaloffsetylevel*(I+j))+"px, 0)",t}function d(e){var t=this,n=e.target.classList,r={_ev:e,domContainer:e.target.closest(".api-li")};if(this.eventContext=r,n.contains("api-save")){var i=(0,A.collectApiData)(t.apiTree,t.$apiTree);return this.apiDataObj.id?(0,w.$http)(k.rootAPI+"/"+this.apiDataObj.id).patch(i,"api").then(M.patchSuccess.bind(this)).catch(M.error):this.apiDataObj.id||(0,w.$http)(k.rootAPI).post(i,"api").then(M.postSuccess.bind(this)).catch(M.error),null}if(n.contains("add-child"))return t.addChild(e),null;if(n.contains("remove-child"))return e.target.parentElement.classList.contains("root-leaf")?(0,C.popup)(e,{},h.bind(t,e)):t.delNode(e),null;if(n.contains("api-respond-preview-btn")){if(!this.apiDataObj.id)return(0,x.flash)({error:"Save first."}),null;var o={dawn_uri:this.apiDataObj.uri};return(0,w.$http)(window.location.origin+"/apiresponse").get(o).then(M.apiRespondSuccess.bind(this)).catch(M.error),null}return n.contains("api-wiki-label")&&e.target.closest(".api-wiki").classList.toggle("toggle-true"),n.contains("preview-raw")?p(this.previewDataObj,JSON.stringify,this.eventContext,"raw"):n.contains("preview-beautify")?p(this.previewDataObj,E.beautifyJSON,this.eventContext,"beautify"):n.contains("preview-highlight")?p(this.previewDataObj,E.hightlightJSON,this.eventContext,"highlight"):void 0}function p(e,t,n,r){var i=t.call(null,e);return v.call(n.domContainer,i),f(n,r),null}function f(e,t){var n=["raw","beautify","highlight"],r=e.domContainer.getElementsByClassName("api-respond-preview")[0],i=r.className.trim().split(" ");i.forEach(function(e,t,r){var i=n.indexOf(e);i>-1&&r.splice(r.indexOf(e),1)});var o=[].slice.call(e.domContainer.getElementsByClassName("per-preview-type"));o.forEach(function(e,t){e.classList.remove("active")}),e.domContainer.getElementsByClassName("preview-"+t)[0].classList.add("active"),r.className=i.join(" "),r.classList.add(t)}function v(e){var t=document.createElement("pre");t.innerHTML=e;var n=this.getElementsByClassName("data-view")[0];n.innerHTML="",n.appendChild(t)}function h(e){if(!this.apiDataObj.id)return e.target.closest(".api-ul").removeChild(e.target.closest(".api-li")),null;var t={};console.log(k.rootAPI),(0,w.$http)(k.rootAPI+"/"+this.apiDataObj.id).delete(t).then(T.callbacks.deleteSuccess.bind(e)).catch(T.callbacks.error)}function m(e){for(var t=e.length,n=[],r=0;r<t;r++)n.push(e[r].nodeId);return n}function g(e,t){var n=document.createElement("span");return n.setAttribute("class","leaf"),n.setAttribute("bind","hasChild"),n.setAttribute("bind-toggle-class",""),n.dataset.parentId=e,n.dataset.nodeId=t,n.innerHTML=i(),n}function y(e,t){return g(e,t)}function b(e){return{top:e.top,bottom:e.bottom,left:e.left,right:e.right,width:e.width,height:e.height}}Object.defineProperty(t,"__esModule",{value:!0}),t.ApiDom=c;var _=n(/*! ./tree */5),w=n(/*! ../common/ajax */2),C=n(/*! ../common/popup */4),k=n(/*! ../global/constant */8),x=n(/*! ../common/flash */3),A=n(/*! ./treeDataCollect */12),E=n(/*! ./utilities */14),S=n(/*! ./jsonTreeConverter */10),O=n(/*! ../common/twoWayDataBinding */7),T=n(/*! ../common/callbacks */16),$=n(/*! ../common/scroll */19),P=n(/*! ../common/utilities */1),L={dataName:"",dataType:"String",dataValue:"",dataQuantity:"1",hasChild:!1},N=460,I=22,j=30,D=30,M={patchSuccess:function(e){this.apiRawData=e,this.apiDataObj=JSON.parse(e).data,(0,x.parseAndFlash)(e)},postSuccess:function(e){this.apiRawData=e,this.apiDataObj=JSON.parse(e).data,(0,x.parseAndFlash)(e),this.apiContainer.getElementsByClassName("api-save")[0].textContent="save",this.apiContainer.getElementsByClassName("api-save")[0].dataset.method="PATCH"},deleteSuccess:function(e){function t(){this.target.closest(".api-ul").removeChild(this.target.closest(".api-li"))}(0,x.parseAndFlash)(e,t.bind(this))},success:function(e){},error:function(e){(0,x.parseAndFlash)(e)},apiRespondSuccess:function(e){var t=JSON.parse(e);this.previewData=e,this.previewDataObj=t,p(this.previewDataObj,E.hightlightJSON,this.eventContext,"highlight")}};c.prototype.renderExistTree=function(e){var t=document.createDocumentFragment(),n=[];if(e.nodes&&e.nodes.length){for(var r=e.nodes,i=void 0,o=void 0,a=0,s=r.length;a<s;a++)i=void 0,i=u(e.nodes[a]),void 0!==e.nodes[a].data&&""!==e.nodes[a].data||(e.nodes[a].data=L),null!==e.nodes[a].parentId&&"null"!==e.nodes[a].parentId||i.classList.add("root-leaf"),o=(0,O.twoWayDataBinding)(e.nodes[a].data,i),e.nodes[a].data=o,n.push(o),t.appendChild(i);this.leafIndex+=s-2}this.apiTree=(0,S.jsonToTree)(e.nodes),this.$apiTree.appendChild(t),this.calcDimensions(),this.drawSVG()},c.prototype.setDebugAddr=function(e){this.apiContainer.getElementsByClassName("mode-debugging-addr")[0].value=e},c.prototype.setModeVal=function(e){for(var t=this.apiContainer.getElementsByClassName("api-mode"),n=0,r=t.length;n<r;n++){if(e===t[n].value){t[n].setAttribute("checked",!0);break}t[n].setAttribute("checked",!1)}},c.prototype.storeApiReturnData=function(e){this.apiReturnData=e,this.$dataBeautify.click()},c.prototype.initApiTree=function(){var e={nodeId:0,data:L},t={nodeId:1,data:L};this.apiTree=new _.Tree(e),this.apiTree.add(t,0,this.apiTree.traverseBF);var n=document.createDocumentFragment(),r=function(e){var t=void 0,r=void 0;e.parentId=e.parent?e.parent.nodeId:null,t=u(e),r=(0,O.twoWayDataBinding)(L,t),e.data=r,null!==e.parentId&&"null"!==e.parentId||t.classList.add("root-leaf"),n.appendChild(t)};return this.apiTree.traverseBF(r),this.$apiTree.appendChild(n),this.apiTree},c.prototype.delNode=function(e){var t=(e.target.closest(".leaf"),+e.target.parentNode.dataset.nodeId),n=0===+e.target.parentNode.dataset.parentId?0:+e.target.parentNode.dataset.parentId,r=this.apiTree.traverseDescendants(t),i=m(r);this.apiTree.remove(t,n,this.apiTree.traverseBF),this.removeNodesFromDom(i);var o=this.apiTree.applyStyle();this.styleNodes(o),this.setParentNodeVal(n),this.scrollBar.render()},c.prototype.removeNodesFromDom=function(e){for(var t=Array.prototype.slice.call(this.$apiTree.getElementsByClassName("leaf")),n=t.length,r=0;r<n;r++)e.indexOf(+t[r].dataset.nodeId)!==-1&&this.$apiTree.removeChild(t[r])},c.prototype.setParentNodeVal=function(e){for(var t=Array.prototype.slice.call(this.$apiTree.getElementsByClassName("leaf")),n=this.apiTree.traverseDirectChild(e),r=(n._newestIndex-n._oldestIndex,0),i=t.length;r<i&&+t[r].dataset.nodeId!==e;r++);},c.prototype.addChild=function(e){this.leafIndex=this.apiTree.maxId()+1;var t=+e.target.parentNode.dataset.nodeId,n=y(t,this.leafIndex),r=(0,O.twoWayDataBinding)(L,n),i={nodeId:this.leafIndex,data:r};this.apiTree.add(i,t,this.apiTree.traverseBF),this.$apiTree.appendChild(n);var o=this.apiTree.applyStyle();this.styleNodes(o),this.setParentNodeVal(t),this.scrollBar.render()},c.prototype.styleNodes=function(){for(var e=Array.prototype.slice.call(this.$apiTree.getElementsByClassName("leaf")),t={},n=0,r=e.length;n<r;n++)t[e[n].dataset.nodeId]=e[n];var i=function(e){e.nodeId<=0||(t[e.nodeId].style.transform="translate3d("+Math.round((N+D)*(e.column-1))+"px, "+Math.round(e.totaloffsetylevel*(I+j))+"px, 0)")};this.apiTree.traverseBF(i),this.dimensionArr=this.calcDimensions(),this.drawSVG()},c.prototype.clearSVG=function(){for(var e=this.$apiTreeFrame.getElementsByClassName("api-svg")[0];e.lastChild;)e.removeChild(e.lastChild)},c.prototype.drawSVG=function(){this.clearSVG();var e=this,t=[],n=function(n){null!==n.parent&&t.push(e.createSingleSVG(n.nodeId,n.column,n.parent.totaloffsetylevel,n.totaloffsetylevel-n.parent.totaloffsetylevel))};this.apiTree.traverseDF(n);for(var r=document.createDocumentFragment(),i=0;i<t.length;i++)r.appendChild(t[i]);this.$apiTreeFrame.getElementsByClassName("api-svg")[0].appendChild(r)},c.prototype.createSingleSVG=function(e,t,n,r){var i,o,a,s,l,c,u,d,p="http://www.w3.org/2000/svg",f=document.createElementNS(p,"path");return t-=1,r=r,n=n,i=490*t,o=52*n+8,a=i+10,s=o,l=i+15,c=o+r/2*52,u=i+30,d=o+52*r,f.setAttributeNS(null,"d","M "+i+" "+o+" Q "+a+" "+s+", "+l+" "+c+" T "+u+" "+d),f.setAttribute("class","api-svg-path"),f.setAttribute("data-idx",e),f},c.prototype.calcDimensions=function(){var e,t,n=[];return n=this.apiTree.depth(),e=Math.max.apply(null,n),t=this.apiTree._root.childrenlevel,this.$apiTreeFrame.style.width=520*e+"px",this.$apiTreeContent.style.width=520*e+"px",this.$apiTreeFrame.style.height=52*t-(t>1?10:0)+"px",this.$apiTreeContent.style.height=52*t-(t>1?10:0)+"px",[e,t]},c.prototype.nodeLeftOffset=function(e){var t=e.getBoundingClientRect(),n=this.$apiTree.getBoundingClientRect(),r=b(n),i=b(t);return i.top+=Math.abs(r.top),i.bottom+=Math.abs(r.top),i.left+=Math.abs(r.left),i.right+=Math.abs(r.left),i}},/*!*****************************************************!*\
  !*** ./front-end/javascripts/api-tree/utilities.js ***!
  \*****************************************************/
function(e,t){"use strict";function n(e){return Math.max.apply(null,e)}function r(e,t){return e.className.split(" ").indexOf(t)>-1}function i(){var e=navigator.userAgent.toLowerCase(),t="";return t=e.indexOf("chrome")>=0||window.openDatabase?"-webkit-":e.indexOf("firefox")>=0?"-moz-":window.opera?"-o-":document.all&&navigator.userAgent.indexOf("Opera")===-1?"-ms-":""}function o(e){var t=window.getComputedStyle(e,null).getPropertyValue("-webkit-transform"),n=t.match(/matrix(?:(3d)\(-{0,1}\d+(?:, -{0,1}\d+)*(?:, (-{0,1}\d+))(?:, (-{0,1}\d+))(?:, (-{0,1}\d+)), -{0,1}\d+\)|\(-{0,1}\d+(?:, -{0,1}\d+)*(?:, (-{0,1}\d+))(?:, (-{0,1}\d+))\))/);return n?"3d"==n[1]?n.slice(2,5):(n.push(0),n.slice(5,8)):[0,0,0]}function a(e){return e.getAttribute("style").split("translate3d")[1].split(", ")[0].slice(1).split("px")[0]}function s(e){if(window.getComputedStyle){var t=getComputedStyle(e),n=t.transform||t.webkitTransform||t.mozTransform,r=n.match(/^matrix3d\((.+)\)$/);return r?parseFloat(r[1].split(", ")[13]):(r=n.match(/^matrix\((.+)\)$/),r?parseFloat(r[1].split(", ")[5]):0)}}function l(e){return JSON.stringify(e,null,4)}function c(e){return e=JSON.stringify(e,void 0,4),e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),e.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g,function(e){var t="number";return/^"/.test(e)?t=/:$/.test(e)?"key":"string":/true|false/.test(e)?t="boolean":/null/.test(e)&&(t="null"),'<span class="'+t+'">'+e+"</span>"})}Object.defineProperty(t,"__esModule",{value:!0});"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.getMaxOfArray=n,t.hasClass=r,t.browserPrefix=i,t.getTransform=o,t.getTranslateX=a,t.getTranslateY=s,t.beautifyJSON=l,t.hightlightJSON=c},/*!*****************************************************!*\
  !*** ./front-end/javascripts/common/ActionCable.js ***!
  \*****************************************************/
function(e,t,n){(function(e){"use strict";var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};(function(){var t=[].slice;this.ActionCable={INTERNAL:{message_types:{welcome:"welcome",ping:"ping",confirmation:"confirm_subscription",rejection:"reject_subscription"},default_mount_path:"/cable",protocols:["actioncable-v1-json","actioncable-unsupported"]},createConsumer:function(e){var t;return null==e&&(e=null!=(t=this.getConfig("url"))?t:this.INTERNAL.default_mount_path),new ActionCable.Consumer(this.createWebSocketURL(e))},getConfig:function(e){var t;return t=document.head.querySelector("meta[name='action-cable-"+e+"']"),null!=t?t.getAttribute("content"):void 0},createWebSocketURL:function(e){var t;return e&&!/^wss?:/i.test(e)?(t=document.createElement("a"),t.href=e,t.href=t.href,t.protocol=t.protocol.replace("http","ws"),t.href):e},startDebugging:function(){return this.debugging=!0},stopDebugging:function(){return this.debugging=null},log:function(){var e;if(e=1<=arguments.length?t.call(arguments,0):[],this.debugging)return e.push(Date.now()),console.log.apply(console,["[ActionCable]"].concat(t.call(e)))}},"undefined"!=typeof window&&null!==window&&(window.ActionCable=this.ActionCable),"undefined"!=typeof e&&null!==e&&(e.exports=this.ActionCable)}).call(window),function(){var e=function(e,t){return function(){return e.apply(t,arguments)}};ActionCable.ConnectionMonitor=function(){function t(t){this.connection=t,this.visibilityDidChange=e(this.visibilityDidChange,this),this.reconnectAttempts=0}var n,r,i;return t.pollInterval={min:3,max:30},t.staleThreshold=6,t.prototype.start=function(){if(!this.isRunning())return this.startedAt=r(),delete this.stoppedAt,this.startPolling(),document.addEventListener("visibilitychange",this.visibilityDidChange),ActionCable.log("ConnectionMonitor started. pollInterval = "+this.getPollInterval()+" ms")},t.prototype.stop=function(){if(this.isRunning())return this.stoppedAt=r(),this.stopPolling(),document.removeEventListener("visibilitychange",this.visibilityDidChange),ActionCable.log("ConnectionMonitor stopped")},t.prototype.isRunning=function(){return null!=this.startedAt&&null==this.stoppedAt},t.prototype.recordPing=function(){return this.pingedAt=r()},t.prototype.recordConnect=function(){return this.reconnectAttempts=0,this.recordPing(),delete this.disconnectedAt,ActionCable.log("ConnectionMonitor recorded connect")},t.prototype.recordDisconnect=function(){return this.disconnectedAt=r(),ActionCable.log("ConnectionMonitor recorded disconnect")},t.prototype.startPolling=function(){return this.stopPolling(),this.poll()},t.prototype.stopPolling=function(){return clearTimeout(this.pollTimeout)},t.prototype.poll=function(){return this.pollTimeout=setTimeout(function(e){return function(){return e.reconnectIfStale(),e.poll()}}(this),this.getPollInterval())},t.prototype.getPollInterval=function(){var e,t,r,i;return i=this.constructor.pollInterval,r=i.min,t=i.max,e=5*Math.log(this.reconnectAttempts+1),Math.round(1e3*n(e,r,t))},t.prototype.reconnectIfStale=function(){if(this.connectionIsStale())return ActionCable.log("ConnectionMonitor detected stale connection. reconnectAttempts = "+this.reconnectAttempts+", pollInterval = "+this.getPollInterval()+" ms, time disconnected = "+i(this.disconnectedAt)+" s, stale threshold = "+this.constructor.staleThreshold+" s"),this.reconnectAttempts++,this.disconnectedRecently()?ActionCable.log("ConnectionMonitor skipping reopening recent disconnect"):(ActionCable.log("ConnectionMonitor reopening"),this.connection.reopen())},t.prototype.connectionIsStale=function(){var e;return i(null!=(e=this.pingedAt)?e:this.startedAt)>this.constructor.staleThreshold},t.prototype.disconnectedRecently=function(){return this.disconnectedAt&&i(this.disconnectedAt)<this.constructor.staleThreshold},t.prototype.visibilityDidChange=function(){if("visible"===document.visibilityState)return setTimeout(function(e){return function(){if(e.connectionIsStale()||!e.connection.isOpen())return ActionCable.log("ConnectionMonitor reopening stale connection on visibilitychange. visbilityState = "+document.visibilityState),e.connection.reopen()}}(this),200)},r=function(){return(new Date).getTime()},i=function(e){return(r()-e)/1e3},n=function(e,t,n){return Math.max(t,Math.min(n,e))},t}()}.call(window),function(){var e,t,n,r,i,o,a=[].slice,s=function(e,t){return function(){return e.apply(t,arguments)}},l=[].indexOf||function(e){for(var t=0,n=this.length;t<n;t++)if(t in this&&this[t]===e)return t;return-1};r=ActionCable.INTERNAL,t=r.message_types,n=r.protocols,i=2<=n.length?a.call(n,0,e=n.length-1):(e=0,[]),o=n[e++],ActionCable.Connection=function(){function e(e){this.consumer=e,this.open=s(this.open,this),this.subscriptions=this.consumer.subscriptions,this.monitor=new ActionCable.ConnectionMonitor(this),this.disconnected=!0}return e.reopenDelay=500,e.prototype.send=function(e){return!!this.isOpen()&&(this.webSocket.send(JSON.stringify(e)),!0)},e.prototype.open=function(){if(this.isActive())throw ActionCable.log("Attempted to open WebSocket, but existing socket is "+this.getState()),new Error("Existing connection must be closed before opening");return ActionCable.log("Opening WebSocket, current state is "+this.getState()+", subprotocols: "+n),null!=this.webSocket&&this.uninstallEventHandlers(),this.webSocket=new WebSocket(this.consumer.url,n),this.installEventHandlers(),this.monitor.start(),!0},e.prototype.close=function(e){var t,n;if(t=(null!=e?e:{allowReconnect:!0}).allowReconnect,t||this.monitor.stop(),this.isActive())return null!=(n=this.webSocket)?n.close():void 0},e.prototype.reopen=function(){var e;if(ActionCable.log("Reopening WebSocket, current state is "+this.getState()),!this.isActive())return this.open();try{return this.close()}catch(t){return e=t,ActionCable.log("Failed to reopen WebSocket",e)}finally{ActionCable.log("Reopening WebSocket in "+this.constructor.reopenDelay+"ms"),setTimeout(this.open,this.constructor.reopenDelay)}},e.prototype.getProtocol=function(){var e;return null!=(e=this.webSocket)?e.protocol:void 0},e.prototype.isOpen=function(){return this.isState("open")},e.prototype.isActive=function(){return this.isState("open","connecting")},e.prototype.isProtocolSupported=function(){var e;return e=this.getProtocol(),l.call(i,e)>=0},e.prototype.isState=function(){var e,t;return t=1<=arguments.length?a.call(arguments,0):[],e=this.getState(),l.call(t,e)>=0},e.prototype.getState=function(){var e,t,n;for(t in WebSocket)if(n=WebSocket[t],n===(null!=(e=this.webSocket)?e.readyState:void 0))return t.toLowerCase();return null},e.prototype.installEventHandlers=function(){var e,t;for(e in this.events)t=this.events[e].bind(this),this.webSocket["on"+e]=t},e.prototype.uninstallEventHandlers=function(){var e;for(e in this.events)this.webSocket["on"+e]=function(){}},e.prototype.events={message:function e(n){var r,e,i,o;if(this.isProtocolSupported())switch(i=JSON.parse(n.data),r=i.identifier,e=i.message,o=i.type,o){case t.welcome:return this.monitor.recordConnect(),this.subscriptions.reload();case t.ping:return this.monitor.recordPing();case t.confirmation:return this.subscriptions.notify(r,"connected");case t.rejection:return this.subscriptions.reject(r);default:return this.subscriptions.notify(r,"received",e)}},open:function(){if(ActionCable.log("WebSocket onopen event, using '"+this.getProtocol()+"' subprotocol"),this.disconnected=!1,!this.isProtocolSupported())return ActionCable.log("Protocol is unsupported. Stopping monitor and disconnecting."),this.close({allowReconnect:!1})},close:function(e){if(ActionCable.log("WebSocket onclose event"),!this.disconnected)return this.disconnected=!0,this.monitor.recordDisconnect(),this.subscriptions.notifyAll("disconnected",{willAttemptReconnect:this.monitor.isRunning()})},error:function(){return ActionCable.log("WebSocket onerror event")}},e}()}.call(window),function(){var e=[].slice;ActionCable.Subscriptions=function(){function n(e){this.consumer=e,this.subscriptions=[]}return n.prototype.create=function(e,n){var r,i,o;return r=e,i="object"===("undefined"==typeof r?"undefined":t(r))?r:{channel:r},o=new ActionCable.Subscription(this.consumer,i,n),this.add(o)},n.prototype.add=function(e){return this.subscriptions.push(e),this.consumer.ensureActiveConnection(),this.notify(e,"initialized"),this.sendCommand(e,"subscribe"),e},n.prototype.remove=function(e){return this.forget(e),this.findAll(e.identifier).length||this.sendCommand(e,"unsubscribe"),e},n.prototype.reject=function(e){var t,n,r,i,o;for(r=this.findAll(e),i=[],t=0,n=r.length;t<n;t++)o=r[t],this.forget(o),this.notify(o,"rejected"),i.push(o);return i},n.prototype.forget=function(e){var t;return this.subscriptions=function(){var n,r,i,o;for(i=this.subscriptions,o=[],n=0,r=i.length;n<r;n++)t=i[n],t!==e&&o.push(t);return o}.call(this),e},n.prototype.findAll=function(e){var t,n,r,i,o;for(r=this.subscriptions,i=[],t=0,n=r.length;t<n;t++)o=r[t],o.identifier===e&&i.push(o);return i},n.prototype.reload=function(){var e,t,n,r,i;for(n=this.subscriptions,r=[],e=0,t=n.length;e<t;e++)i=n[e],r.push(this.sendCommand(i,"subscribe"));return r},n.prototype.notifyAll=function(){var t,n,r,i,o,a,s;for(n=arguments[0],t=2<=arguments.length?e.call(arguments,1):[],o=this.subscriptions,a=[],r=0,i=o.length;r<i;r++)s=o[r],a.push(this.notify.apply(this,[s,n].concat(e.call(t))));return a},n.prototype.notify=function(){var t,n,r,i,o,a,s;for(a=arguments[0],n=arguments[1],t=3<=arguments.length?e.call(arguments,2):[],s="string"==typeof a?this.findAll(a):[a],o=[],r=0,i=s.length;r<i;r++)a=s[r],o.push("function"==typeof a[n]?a[n].apply(a,t):void 0);return o},n.prototype.sendCommand=function(e,t){var n;return n=e.identifier,this.consumer.send({command:t,identifier:n})},n}()}.call(window),function(){ActionCable.Subscription=function(){function e(e,n,r){this.consumer=e,null==n&&(n={}),this.identifier=JSON.stringify(n),t(this,r)}var t;return e.prototype.perform=function(e,t){return null==t&&(t={}),t.action=e,this.send(t)},e.prototype.send=function(e){return this.consumer.send({command:"message",identifier:this.identifier,data:JSON.stringify(e)})},e.prototype.unsubscribe=function(){return this.consumer.subscriptions.remove(this)},t=function(e,t){var n,r;if(null!=t)for(n in t)r=t[n],e[n]=r;return e},e}()}.call(window),function(){ActionCable.Consumer=function(){function e(e){this.url=e,this.subscriptions=new ActionCable.Subscriptions(this),this.connection=new ActionCable.Connection(this)}return e.prototype.send=function(e){return this.connection.send(e)},e.prototype.connect=function(){return this.connection.open()},e.prototype.disconnect=function(){return this.connection.close({allowReconnect:!1})},e.prototype.ensureActiveConnection=function(){if(!this.connection.isActive())return this.connection.open()},e}()}.call(window)}).call(t,n(/*! ./../../../~/webpack/buildin/module.js */30)(e))},/*!***************************************************!*\
  !*** ./front-end/javascripts/common/callbacks.js ***!
  \***************************************************/
function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.callbacks=void 0;var r=n(/*! ./flash */3);t.callbacks={deleteSuccess:function(e){function t(){this.target.closest(".api-ul").removeChild(this.target.closest(".api-li"))}(0,r.parseAndFlash)(e,t.bind(this))},success:function(e){},error:function(e){(0,r.parseAndFlash)(e)}}},/*!******************************************************!*\
  !*** ./front-end/javascripts/common/handleMethod.js ***!
  \******************************************************/
function(e,t,n){"use strict";function r(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.getAttribute("href"),r=e.dataset.method,l=e.getAttribute("target"),c=s.rorParams.csrfToken(),u=s.rorParams.csrfParam(),d={href:n,method:r,target:l,csrfToken:c,csrfParam:u},p=i(d,t);o(p),a(p)}function i(e,t){var n=document.createElement("form");n.style.display="none",n.setAttribute("method","post"),n.setAttribute("action",e.href),e.target&&n.setAttribute("target",e.target);var r=document.createElement("input");r.setAttribute("type","hidden"),r.setAttribute("name","_method"),r.setAttribute("value",e.method);var i;return void 0===e.csrfParam||void 0===e.csrfToken||s.rorParams.isCrossDomain(e.href)||(i=document.createElement("input"),i.setAttribute("type","hidden"),i.setAttribute("name",e.csrfParam),i.setAttribute("value",e.csrfToken)),n.appendChild(r),i&&n.appendChild(i),n}function o(e){document.body.appendChild(e)}function a(e){e.submit()}Object.defineProperty(t,"__esModule",{value:!0}),t.handleMethod=r;var s=n(/*! ../common/csrf */6)},/*!****************************************************!*\
  !*** ./front-end/javascripts/common/htmlEscape.js ***!
  \****************************************************/
function(e,t){"use strict";function n(e){return e=""+e,e.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/`/g,"&#96;")}Object.defineProperty(t,"__esModule",{value:!0}),t.htmlEscape=n},/*!************************************************!*\
  !*** ./front-end/javascripts/common/scroll.js ***!
  \************************************************/
function(e,t,n){"use strict";function r(){var e='\n    <div class="opui-scroll-ctrl-scroll">\n        <div class="opui-scroll-axis"></div>\n        <div class="opui-scroll-slider">\n            <div class="opui-scroll-s-top"></div>\n            <div class="opui-scroll-s-bottom"></div>\n            <div class="opui-scroll-s-block"></div>\n        </div>\n    </div>\n    ';return e}function i(e){return new o(e)}function o(e){function t(e,t,n){return n&&(e=e>n?n:e),e>=t?e:t}function n(){L.call(window,{value:R,scale:S})}function i(e){e=window.event||e;var n=t(e.clientX-V,B,F);return R=(n-B)/(F-B),I.style.left=n+"px",f.memOffsetX=n,!1}function o(){return b.classList.remove("opui-scroll-ctrl-scroll-hover"),b.classList.remove("opui-scroll-ctrl-scroll-touch"),I.classList.remove("opui-scroll-slider-hover"),I.classList.remove("opui-scroll-slider-touch"),w.style["-moz-user-select"]="",w.style["-webkit-user-select"]="",U&&window.clearInterval(U),J?document.onselectstart=J:document.onselectstart=function(){return!0},document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",o),I.classList.add("opui-scroll-slider"),H=0,!1}function s(e){l((e.offsetX||e.layerX)/j)}function l(e,t){e=e<0?0:e,e=e>1?1:e,R=e;var r=(F-B)*R+B;I.style.left=r+"px",f.memOffsetX=r,t||n()}function u(e){}function d(e){if(S=e>10?10:e,S<=1)return void(I.style.display="none");I.style.display="block";var t=j-2*D;M=parseInt(t/S),M=M<15?15:M,F=j-D-M,I.style.width=M+"px"}function p(){f.render()}var f=this;this.options=e;var v,h,m,g=r(),y=(0,a.strToDom)(g),b=e.scrollbar||y,_=e.content,w=e.overflowEle,C=e.initPos||0,k=e.initDom||null,x=e.mousewheel||!0,A=(e.mousewheellock||!1,e.wheeldelta||1,e.ctrlblock||0),E=(e.step||.1,e.length),S=e.scale||0,O=(e.theme||"",e.refresh||!1),T=0,$=0,P=0,L=function(e){var t=parseInt(T-$);if(t>0){var e=e.value;_.scrollLeft=t*e}},N=y.getElementsByClassName("opui-scroll-axis")[0],I=y.getElementsByClassName("opui-scroll-slider")[0],j=(y.getElementsByClassName("opui-scroll-s-top")[0],y.getElementsByClassName("opui-scroll-s-bottom")[0],y.getElementsByClassName("opui-scroll-s-block")[0],0),D=A||0,M=0,B=D,F=0,R=0,V=0,H=0,J=null,U=null,q=function(){X=!1,c=!1};e.scrollbar||e.wrapper.appendChild(y),_.classList.add("opui-scroll-ctrl-content"),b.classList.add("opui-scroll-ctrl-scroll"),this.render=function(e){O||clearInterval(m);try{$=_.offsetWidth,P=b.offsetWidth,T=w.offsetWidth}catch(e){}if(j=e||E||$-2,b.style.width=j+"px",N.style.width=j+"px",j>=0&&T>=0){T<=j+2?b.style.display="none":b.style.display="block",S!=T/j&&(S=T/j,d(S),l(f.memOffsetX));var t=0;k&&(t=k.offsetLeft+k.scrollWidth>=T?1:k.offsetLeft+k.scrollWidth<=$?0:k.offsetLeft/T,console.log(t),l(t)),C&&(console.log(C),l(C))}},m=setInterval(this.render,50),I.onDragstart=function(){return!1},I.addEventListener("mouseover",function(){I.classList.add("opui-scroll-slider-hover"),b.classList.add("opui-scroll-ctrl-scroll-hover")}),I.addEventListener("mousedown",function(){I.classList.add("opui-scroll-slider-touch"),b.classList.add("opui-scroll-ctrl-scroll-touch")}),I.addEventListener("mouseout",function(){I.classList.remove("opui-scroll-slider-hover")}),I.addEventListener("mouseup",function(){I.classList.remove("opui-scroll-slider-touch")}),b.addEventListener("mouseover",function(){b.classList.add("opui-scroll-ctrl-scroll-hover")}),b.addEventListener("mousedown",function(){b.classList.add("opui-scroll-ctrl-scroll-touch")}),b.addEventListener("mouseout",function(){b.classList.remove("opui-scroll-ctrl-scroll-hover")}),b.addEventListener("mouseup",function(){b.classList.remove("opui-scroll-ctrl-scroll-touch")}),N.addEventListener("click",s),x&&!this.onwheel&&(_.classList.contains("opui-scroll-onwheel")||(_.addEventListener("DOMMouseScroll",u),_.addEventListener("mousewheel",u),_.classList.add("opui-scroll-onwheel"))),_&&_.addEventListener("scroll",function(){H||l(_.scrollLeft/(_.scrollWidth-_.offsetWidth),1)}),I.addEventListener("mousedown",function(e){return J=document.onselectstart,document.onselectstart=function(){return!1},U=window.setInterval(n,40),w.style["-moz-user-select"]="none",w.style["-webkit-user-select"]="none",V=e.clientX-I.offsetLeft,document.addEventListener("mousemove",i),document.addEventListener("mouseup",o),H=1,e.preventDefault(),!1}),S>1&&d(S);var W=(0,a.debounce)(p,200,!1);window.addEventListener("resize",W),this.dispose=function(){J?document.onselectstart=J:document.onselectstart=function(){return!0},document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",o),document.removeEventListener("mouseup",q),U&&clearInterval(U),v&&clearInterval(v),h&&clearInterval(h),m&&clearInterval(m)}}Object.defineProperty(t,"__esModule",{value:!0}),t.scrollBarH=i;var a=n(/*! ./utilities */1)},/*!***************************************************!*\
  !*** ./front-end/javascripts/common/serialize.js ***!
  \***************************************************/
function(e,t){"use strict";function n(e,t){var i=[];for(var o in e)if(e.hasOwnProperty(o)){var a=t?t+"["+o+"]":o,s=e[o];i.push("object"==("undefined"==typeof s?"undefined":r(s))?n(s,a):encodeURIComponent(a)+"="+encodeURIComponent(s))}return i.join("&")}Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.serialize=n},/*!***********************************************!*\
  !*** ./front-end/javascripts/common/slide.js ***!
  \***********************************************/
function(e,t,n){"use strict";function r(e,t,n){var r=document.createElement("div");r.classList.add("slide-layer"),r.innerHTML=i(t.content),s(r,e),o(r,e,t,n),document.body.appendChild(r)}function i(e){var t='\n    <div class="slide-shadow">\n      <div class="slide-content">\n\t\t\t\t<div class="slide-text">'+e+'</div>\n\t\t\t\t<div class="slide-btns">\n\t\t\t\t\t<span class="slide-btn slide-cancel-btn">cancel</span>\n\t\t\t\t\t<span class="slide-btn slide-confirm-btn">confirm</span>\n\t\t\t\t</div>\n      </div>\n    </div>\n\t';return t}function o(e,t,n,r){e.getElementsByClassName("slide-cancel-btn")[0].addEventListener("click",c),e.getElementsByClassName("slide-shadow")[0].addEventListener("click",l),e.getElementsByClassName("slide-confirm-btn")[0].addEventListener("click",a.bind(this,t,e,n,r))}function a(e,t,n,r){r(),document.body.removeChild(t)}function s(e,t){}function l(e){e.target===e.currentTarget&&(0,u.popup)(e,void 0,c.bind(this,e))}function c(e){var t=e.target.closest(".slide-layer");t&&document.body.removeChild(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.slide=r;var u=n(/*! ../common/popup */4)},/*!**************************************************!*\
  !*** ./front-end/javascripts/common/template.js ***!
  \**************************************************/
function(e,t,n){"use strict";function r(e){for(var t=e.raw,n="",r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return o.forEach(function(e,r){var o=t[r];Array.isArray(e)&&(e=e.join("")),o.endsWith("$")&&(e=(0,i.htmlEscape)(e),o=o.slice(0,-1)),n+=o,n+=e}),n+=t[t.length-1]}Object.defineProperty(t,"__esModule",{value:!0}),t.html=r;var i=n(/*! ./htmlEscape */18)},/*!******************************************************!*\
  !*** ./front-end/javascripts/common/toggleScroll.js ***!
  \******************************************************/
function(e,t){"use strict";function n(e){e=e||window.event,e.preventDefault&&e.preventDefault(),e.returnValue=!1}function r(e){if(a[e.keyCode])return n(e),!1}function i(){window.addEventListener&&window.addEventListener("DOMMouseScroll",n,!1),window.onwheel=n,window.onmousewheel=document.onmousewheel=n,window.ontouchmove=n,document.onkeydown=r}function o(){window.removeEventListener&&window.removeEventListener("DOMMouseScroll",n,!1),window.onmousewheel=document.onmousewheel=null,window.onwheel=null,window.ontouchmove=null,document.onkeydown=null}Object.defineProperty(t,"__esModule",{value:!0}),t.disableScroll=i,t.enableScroll=o;var a={37:1,38:1,39:1,40:1}},/*!*******************************************************!*\
  !*** ./front-end/javascripts/modules/apiOperation.js ***!
  \*******************************************************/
function(e,t,n){"use strict";function r(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function i(){_()}function o(){var e=document.getElementsByClassName("api-query")[0],t=!1;e.addEventListener("keyup",N),e.parentElement.addEventListener("mouseleave",function(n){a.apply(e,n)||l(),t=!1}),e.parentElement.addEventListener("mouseenter",function(e){t=!0}),e.addEventListener("blur",function(e){t||l()}),e.addEventListener("focus",s)}function a(e){return this===document.activeElement}function s(e){return e.target.value.length<=0?void l():($={q:e.target.value},void(0,k.$http)(window.location.origin+"/instantsearch").get($).then(L.apiQuerySuccess.bind(e)).catch(L.error))}function l(){var e=document.getElementsByClassName("api-search-result")[0];e.innerHTML="",e.classList.add("hide")}function c(e,t){return t?void(t.target.classList.contains("api-li-wiki")||e.classList.toggle("unfold")):void e.classList.toggle("unfold")}function u(e){c(this,e),this.nextElementSibling||(0,k.$http)(x.rootAPI+"/"+this.parentNode.dataset.apiId).get($).then(L.getApiSuccess.bind(this.parentNode)).catch(L.error)}function d(){var e=document.getElementsByClassName("api-li-summary");[].slice.call(e).forEach(function(e,t){e.addEventListener("click",function(e){u.call(this,e)})})}function p(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1],n=arguments[2],r=new T.ApiDom(e,t,n);P.push(r)}function f(e,t){var n={content:v()};(0,E.slide)(e,n)}function v(){var e='\n    <ul>\n      <li>\n        <label>host:</label>\n        <input class="c-input" type="text" />\n        <label>account:</label>\n        <input class="c-input" type="text" />\n        <label>label:</label>\n        <input class="c-input" type="text" />\n        <input class="" type="button" value="check availability" />\n      </li>\n    </ul>\n  ';return e}function h(){var e=document.getElementsByClassName("api-ul")[0];e||(m(),e=document.getElementsByClassName("api-ul")[0]);var t=(0,S.strToDom)(y());e.insertBefore(t,e.firstChild),p({},t,!0),c(t.children[0]),t.children[0].addEventListener("click",function(e){u.call(this,e)})}function m(){var e=document.createElement("div"),t=document.createElement("ul"),n=document.getElementsByClassName("api-add-query")[0];e.classList.add("api-ul-wrapper"),t.classList.add("api-ul"),e.appendChild(t),(0,S.insertAfter)(e,n)}function g(){var e=void 0,t=document.getElementsByTagName("header")[0],n='\n    <div class="api-add-query">\n      <span class="add-api-btn">new API</span>\n      <div class="api-search-wrapper">\n        <input class="api-query" type="search" placeholder="search">\n        <div class="api-search-result hide"></div>\n      </div>\n      <a class="c-hide icon-text-link c-float-right dev-env-settings" href="javascript:;"><span class="icon-text-icon"><svg class="icon icon-settings icon-fit"><use xlink:href="#icon-settings"></use></svg></span><span class="icon-text-text">环境同步数据配置</span></a>\n    </div>\n  ';return e=(0,S.strToDom)(n),e.getElementsByClassName("add-api-btn")[0].addEventListener("click",I),e.getElementsByClassName("dev-env-settings")[0].addEventListener("click",j),(0,S.insertAfter)(e,t),e}function y(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t='\n    <li class="api-li" data-api-id="'+(e.id||null)+'">\n      <div class="api-li-summary">\n        <span class="api-li-collapse"><svg class="icon icon-down"><use xlink:href="#icon-down"></use></svg></span>\n        <span class="api-li-uri" bind="uri">'+(e.uri||"(No uri)")+'</span>\n        <span class="api-li-des" bind="description">'+(e.description?e.description:"(No description)")+'</span>\n        <a href="'+e.wikiLink+'" class="api-li-wiki" bind-attr-href="wikiLink" bind="wikiLink" target="_blank">'+(e.wikiLink?e.wikiLink:"(No wikiLink)")+"</a>\n      </div>\n    </li>\n  ";return t}function b(e){e=JSON.parse(e);var t=function(e){return(0,A.html)(w,e.map(function(e){return(0,A.html)(C,y(e))}))},n=document.createElement("div");n.classList.add("api-ul-wrapper"),n.innerHTML=t(e),(0,S.insertAfter)(n,g())}function _(){(0,k.$http)(x.rootAPI).get($).then(L.getAllApisSuccess).catch(L.error)}Object.defineProperty(t,"__esModule",{value:!0});var w=r(['\n      <ul class="api-ul">\n      ',"\n      </ul>\n  "],['\n      <ul class="api-ul">\n      ',"\n      </ul>\n  "]),C=r(["\n        ","\n      "],["\n        ","\n      "]);t.initXhr=i;var k=n(/*! ../common/ajax */2),x=n(/*! ../global/constant */8),A=n(/*! ../common/template */22),E=(n(/*! ../common/popup */4),n(/*! ../common/slide */21)),S=n(/*! ../common/utilities */1),O=n(/*! ../common/flash */3),T=n(/*! ../api-tree/treeDom */13),$=(n(/*! ../common/twoWayDataBinding */7),{}),P=[],L={getApiSuccess:function(e){p(JSON.parse(e),this,!1)},getAllApisSuccess:function(e){var t=e,n=JSON.parse(t);return 0===n.length?void g():(b(e),d(),void o())},patchSuccess:function(e){(0,O.parseAndFlash)(e)},postSuccess:function(e){(0,O.parseAndFlash)(e)},deleteSuccess:function(e){function t(){this.target.closest(".api-ul").removeChild(this.target.closest(".api-li"))}(0,O.parseAndFlash)(e,t.bind(this))},apiQuerySuccess:function(e){for(var t=document.getElementsByClassName("api-search-result")[0],n=JSON.parse(e),r="",i=0,o=n.length;i<o;i++)r+="<div class='per-search-result'>\n        <span class=\"per-result-column per-result-uri\">"+n[i].uri+'</span>\n        <span class="per-result-column per-result-section">'+n[i].section+'</span>\n        <span class="per-result-column per-result-method">'+n[i].method+'</span>\n        <span class="per-result-column per-result-description">'+n[i].description+"</span>\n      </div>";t.innerHTML=r,n.length>0?t.classList.remove("hide"):t.classList.add("hide")},success:function(e){console.log(e)},error:function(e){return e.data?void(0,O.parseAndFlash)(e):void g()}},N=(0,S.debounce)(s,100,!1),I=(0,S.debounce)(h,500,!0),j=(0,S.debounce)(f,500,!0)},/*!****************************************************!*\
  !*** ./front-end/javascripts/modules/dataLinks.js ***!
  \****************************************************/
function(e,t,n){"use strict";function r(){document.addEventListener("click",i,!1)}function i(e){var e=window.e||e;"A"===e.target.tagName&&("delete"===e.target.dataset.method&&(e.preventDefault(),(0,o.handleMethod)(e.target)),"PATCH"===e.target.dataset.method&&(e.preventDefault(),(0,o.handleMethod)(e.target)))}Object.defineProperty(t,"__esModule",{value:!0}),t.dataLinks=r;var o=n(/*! ../common/handleMethod */17)},/*!*******************************************************!*\
  !*** ./front-end/javascripts/modules/fisCiPlugins.js ***!
  \*******************************************************/
function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(){var e=document.getElementsByClassName("search-input")[0],t=!1;e.addEventListener("keyup",h),e.parentElement.addEventListener("mouseleave",function(n){o.apply(e,n)||s(),t=!1}),e.parentElement.addEventListener("mouseenter",function(e){t=!0}),e.addEventListener("blur",function(e){t||s()}),e.addEventListener("focus",a)}function o(e){return this===document.activeElement}function a(e){return e.target.value.length<=0?void s():(f={q:e.target.value},void(0,c.$http)(window.location.origin+"/plugins_instantsearch").get(f).then(v.apiQuerySuccess.bind(e)).catch(v.error))}function s(){var e=document.getElementsByClassName("api-search-result")[0];e.innerHTML="",e.classList.add("hide")}function l(){var e={};e.cable=ActionCable.createConsumer(),d.default.component("plugin-item",{props:["plugins"],data:function(){return{pluginsInput:gc,showLogs:!1}},template:'\n        <div class="plugins-wrap">\n          <div class="plugin-wrap" v-for="(perplugin,index) in pluginsInput">\n\n            <div class="per-row-plugin c-grid-row c-gap-top c-pad-left">\n              <span class="c-grid-span10 package-name">{{ perplugin.packageName }}</span>\n              <span class="c-grid-span6 package-version">{{ perplugin.packageVersion }}</span>\n              <span class="c-grid-span10 package-ci-package-name">{{ perplugin.ciPackageName }}</span>\n              <div class="c-grid-span6">{{ perplugin.ciPackageVersion }}</div>\n              <div class="c-grid-span8">{{ perplugin.ciPackageVersionPatch }}</div>\n              <span class="c-grid-span5 package-status">{{ perplugin.status }}</span>\n              <span class="c-grid-span3 package-log c-center"><svg class="icon icon-more" @click="toggleLog(perplugin)"><use xlink:href="#icon-more"></use></svg></span>\n            </div>\n\n            <div class="package-log" v-if="perplugin.showLogs">\n              <div class="loading-placeholder c-center c-pad-top" v-if="!perplugin.log">processing</div>\n              <div class="per-phase-log" v-for="(val, key) in perplugin.log">\n                <p class="package-log-head">{{ key }}</p>\n                <pre class="package-log-pre" v-html=\'val.detail\'></pre>\n              </div>\n            </div>\n\n          </div>\n        </div>',methods:{toggleLog:function(t){t.showLogs?"failed"===t.status||"success"===t.status||t.gc.unsubscribe():t.gc=e.cable.subscriptions.create({channel:"CiPluginLogsChannel",plugin_id:t.id},{connected:function(){this.perform("send_current_log",{plugin_id:t.id})},received:function(e){t.log=e,"failed"!==t.status&&"success"!==t.status||t.gc.unsubscribe()}}),t.showLogs=!t.showLogs},subscribe:function(e){}}});new d.default({el:"#app",computed:{}});if(gc.length>0)for(var t=function(t,n){"failed"!==gc[t].status&&"success"!==gc[t].status&&(gc[t].gcp=e.cable.subscriptions.create({channel:"CiPluginStatusChannel",plugin_id:gc[t].id},{connected:function(){this.perform("send_current_status",{plugin_id:gc[t].id})},received:function(e){gc[t].status=e.plugin_status,"failed"!==e.plugin_status&&"success"!==e.plugin_status||gc[t].gcp.unsubscribe()}}))},n=0,r=gc.length;n<r;n++)t(n,r);i()}Object.defineProperty(t,"__esModule",{value:!0}),t.fcp=l;var c=n(/*! ../common/ajax */2),u=n(/*! vue */9),d=r(u),p=n(/*! ../common/utilities */1),f={},v={apiQuerySuccess:function(e){var t=document.getElementsByClassName("api-search-result")[0],n=JSON.parse(e),r="",i='\n    <div class="result-head">\n      <span class="per-result-column per-result-input">input</span>\n      <span class="per-result-column per-result-packageVersion">packageVersion</span>\n      <span class="per-result-column per-result-ciPackageName">ciPackageName</span>\n      <span class="per-result-column per-result-ciPackageVersion">ciPackageVersion</span>\n      <span class="per-result-column per-result-status">status</span>\n    </div>\n    ';r+=i;for(var o=0,a=n.length;o<a;o++)r+="<div class='per-search-result'>\n        <span class=\"per-result-column per-result-input\">"+n[o].input+'</span>\n        <span class="per-result-column per-result-packageVersion">'+n[o].packageVersion+'</span>\n        <span class="per-result-column per-result-ciPackageName">'+n[o].ciPackageName+'</span>\n        <span class="per-result-column per-result-ciPackageVersion">'+n[o].ciPackageVersion+'</span>\n        <span class="per-result-column per-result-status">'+n[o].status+"</span>\n      </div>";t.innerHTML=r,n.length>0?t.classList.remove("hide"):t.classList.add("hide")}},h=(0,p.debounce)(a,100,!1)},/*!***************************************************!*\
  !*** ./front-end/javascripts/modules/homepage.js ***!
  \***************************************************/
function(e,t,n){"use strict";function r(){(0,i.tweetBox)()}Object.defineProperty(t,"__esModule",{value:!0}),t.home=r;var i=n(/*! ./tweetBox */29)},/*!*******************************************************!*\
  !*** ./front-end/javascripts/modules/newCiPlugins.js ***!
  \*******************************************************/
function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(){a.default.component("new-plugins",{props:["textareaInput"],data:function(){return{pluginsInput:void 0,canSubmit:!0,processed:0,initPatchCiPackageVersion:0,processedPluginsInputData:null}},template:'\n      <div class="new-plugins-wrap">\n        <div class="c-grid-row">\n\n          <div class="pluginsInput c-grid-span10">\n            <div class="hint">format: packageName@version</div>\n            <textarea class="plugins-input-area" name="textarea" rows="16" placeholder="添加plugins" v-model="pluginsInput"></textarea>\n          </div>\n\n          <div class="plugins c-grid-span38">\n            <div class="plugins-wrap">\n              <div class="plugins-hread c-grid-row">\n                <div class="c-grid-span10">packageName</div>\n                <div class="c-grid-span6">version</div>\n                <div class="c-grid-span14">CI-packageName</div>\n                <div class="c-grid-span8">CI-packageVersion</div>\n                <div class="c-grid-span10">CI-packageVersionPatch</div>\n              </div>\n\n              <div class="per-row-plugin c-grid-row c-gap-top" v-for="(item, idx) in processedPluginsInputData">\n                <span class="c-grid-span10 package-name">{{ item.packageName }}</span>\n                <span class="c-grid-span6 package-version">{{ item.packageVersion }}</span>\n                <span class="c-grid-span14 package-ci-package-name">{{ item.ciPackageName }}</span>\n                <span class="c-grid-span8 package-ci-package-version">{{ item.ciPackageVersion }}</span>\n                <span class="c-grid-span10 package-ci-package-version-patch" v-if="item.ciPackageVersion">\n                  <span class="minus-patch" @click="minusPatchVersion(item, idx)">-</span>\n                  <span class="patch-version">{{ item.ciPackageVersionPatch }}</span>\n                  <span class="plus-patch" @click="plusPatchVersion(item, idx)">+</span>\n                </span>\n              </div>\n\n              <div class="c-hide" v-if="processedPluginsInput">{{ processedPluginsInput }}</div>\n\n            </div>\n          </div>\n\n        </div>\n\n        <div class="submit-row c-center c-gap-top c-gap-bottom">\n          <div class="c-btn" @click="submit">Install on BuildCloud compile machines</div>\n        </div>\n      </div>',computed:{processedPluginsInput:{get:function(){var e,t=[],n=[];if(this.processed+=1,!this.pluginsInput)return t;for(var r=this.pluginsInput.split("\n"),i=0;i<r.length;i++)r[i].trim().length>0&&(e=r[i].trim().replace(/^\"|^\'|\'$|\"$/g,""),n=e.split("@"),t.push({input:e,packageName:n[0],packageVersion:n[1]||"",ciPackageName:n[1]?""+n[0]+"_"+n[1].split(".").join("_"):"",ciPackageVersion:n[1]||"",ciPackageVersionPatch:0,ciPackageNamePrefix:"fis-msprd-"}));return this.processedPluginsInputData=t,t},set:function(){}}},methods:{submit:function(){this.canSubmit=!0;var e,t=this,n=document.getElementsByClassName("fis-ci-plgins-form")[0],r=document.getElementsByClassName("fis-ci-plgins-form-submit-btn")[0];document.getElementsByClassName("plugin-input")[0];return 0===t.processedPluginsInput.length?void alert("0"):t.checkValidation(t.processedPluginsInput)?(t.processedPluginsInput.forEach(function(r,i){for(var o in r)r.hasOwnProperty(o)&&(e=t.createFormEle("ci_plugins[]["+o+"]",r[o]),n.appendChild(e))}),void(t.canSubmit&&r.click())):void alert("包名不能以fis开头\n必须带正确的版本号\n版本号不能带有‘＝’,‘～’,‘<’,'<=','>','>=','^'等标记。")},checkValidation:function(e){var t,n=this,r=JSON.stringify(e),i=JSON.parse(r),o=/[^A-Za-z0-9@\.\-_]/g;console.log(i);for(var a=0,s=i.length;a<s;a++)t=i[a],t.hasOwnProperty("input")&&(0!==t.input.indexOf("fis")&&1!==t.input.split("@").length&&t.input.indexOf("@")!==t.input.length-1||(n.canSubmit=!1),console.log(t.input),o.exec(t.input)&&(n.canSubmit=!1));return n.canSubmit},createFormEle:function(e,t){var n=document.createElement("input");return n.setAttribute("name",e),n.value=t,n},getPatchCiPackageVersion:function(e){var t=e.packageVersion,n=t.split("-"),r=void 0,i=void 0,o=void 0;return 1===n.length?(o=t.split("."),r=o.length,2===r&&(o[2]=0),1===r&&(o[1]=0,o[2]=0),r=o.length,o[r-1]=+o[r-1]+e.ciPackageVersionPatch,void(e.ciPackageVersion=o.join("."))):2===n.length?(i=n[1].split("."),1===i.length?(n[1]=n[1]+"."+e.ciPackageVersionPatch,void(e.ciPackageVersion=n.join("-"))):(i[1]=+i[1]+e.ciPackageVersionPatch,n[1]=i.join("."),void(e.ciPackageVersion=n.join("-")))):void 0},minusPatchVersion:function(e,t){e.ciPackageVersionPatch=0===e.ciPackageVersionPatch?0:e.ciPackageVersionPatch-1,this.getPatchCiPackageVersion(e)},plusPatchVersion:function(e,t){e.ciPackageVersionPatch=5===e.ciPackageVersionPatch?5:e.ciPackageVersionPatch+1,this.getPatchCiPackageVersion(e)}}});new a.default({el:"#app"})}Object.defineProperty(t,"__esModule",{value:!0}),t.newCiPlugins=i;var o=n(/*! vue */9),a=r(o)},/*!***************************************************!*\
  !*** ./front-end/javascripts/modules/tweetBox.js ***!
  \***************************************************/
function(e,t){"use strict";function n(e){var t=document.createRange(),n=window.getSelection();t.setStart(e,0),t.collapse(!0),n.removeAllRanges(),n.addRange(t)}function r(){var e=document,t=e.getElementsByClassName("tweet-box")[0];if(!t)return null;var r=t.getElementsByTagName("div")[0],i="<div><br></div>";t.addEventListener("focus",function(e){t.classList.remove("condensed"),t.getElementsByTagName("div")&&t.getElementsByTagName("div")[0].innerText.trim().length?t.classList.remove("showPlaceholder"):t.classList.add("showPlaceholder"),"What's happening?"===r.innerHTML&&(r.innerHTML="<br>")}),t.addEventListener("keyup",function(e){t.innerHTML?t.getElementsByTagName("div")[0]&&t.getElementsByTagName("div")[0].textContent&&t.classList.remove("showPlaceholder"):(t.innerHTML=i,setTimeout(function(){n(t.getElementsByTagName("div")[0])},0))}),t.addEventListener("keydown",function(e){t.getElementsByTagName("div")[0]&&t.getElementsByTagName("div")[0].textContent&&t.classList.remove("showPlaceholder"),"<br>"===t.innerHTML&&(t.innerHTML=i,n(t.getElementsByTagName("div")[0]))})}Object.defineProperty(t,"__esModule",{value:!0}),t.tweetBox=r},/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
function(e,t){"use strict";e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYXBwbGljYXRpb24uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIGIwNzkxYjNlNTgzYWY3OGY3YTk5Iiwid2VicGFjazovLy8uL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9hcHBsaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL3V0aWxpdGllcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL2FqYXguanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi9mbGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL3BvcHVwLmpzIiwid2VicGFjazovLy8uL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9hcGktdHJlZS90cmVlLmpzIiwid2VicGFjazovLy8uL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vY3NyZi5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL3R3b1dheURhdGFCaW5kaW5nLmpzIiwid2VicGFjazovLy8uL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9nbG9iYWwvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi92dWUvZGlzdC92dWUuY29tbW9uLmpzIiwid2VicGFjazovLy8uL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9hcGktdHJlZS9qc29uVHJlZUNvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBpLXRyZWUvcXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2FwaS10cmVlL3RyZWVEYXRhQ29sbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBpLXRyZWUvdHJlZURvbS5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBpLXRyZWUvdXRpbGl0aWVzLmpzIiwid2VicGFjazovLy8uL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vQWN0aW9uQ2FibGUuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi9jYWxsYmFja3MuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi9oYW5kbGVNZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi9odG1sRXNjYXBlLmpzIiwid2VicGFjazovLy8uL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vc2Nyb2xsLmpzIiwid2VicGFjazovLy8uL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vc2VyaWFsaXplLmpzIiwid2VicGFjazovLy8uL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vc2xpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi90ZW1wbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL3RvZ2dsZVNjcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvbW9kdWxlcy9hcGlPcGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL21vZHVsZXMvZGF0YUxpbmtzLmpzIiwid2VicGFjazovLy8uL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9tb2R1bGVzL2Zpc0NpUGx1Z2lucy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvbW9kdWxlcy9ob21lcGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvbW9kdWxlcy9uZXdDaVBsdWdpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL21vZHVsZXMvdHdlZXRCb3guanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJfZGF0YUxpbmtzIiwiX2hvbWVwYWdlIiwiX2FwaU9wZXJhdGlvbiIsIl9maXNDaVBsdWdpbnMiLCJfbmV3Q2lQbHVnaW5zIiwiZGF0YUxpbmtzIiwicm91dGVzIiwiLyIsImhvbWUiLCIvZGV2IiwiaW5pdFhociIsIi9jaV9wbHVnaW5zL25ldyIsIm5ld0NpUGx1Z2lucyIsIi9jaV9wbHVnaW5zIiwiZmNwIiwicGF0aE5hbWUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImxlbmd0aCIsImkiLCJhcHBseSIsImlzRW1wdHkiLCJvYmoiLCJrZXlzIiwiY2xvbmVPYmoiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJtZXJnZU9iaiIsIm9iajEiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJvYmoyIiwibmV3T2JqIiwia2V5IiwiYWRkUHJlZml4VG9PYmoiLCJwcmVmaXgiLCJ3cmFwT2JqIiwid3JhcHBlciIsInN0clRvRG9tIiwic3RyIiwidG1wRWxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwicmV0dXJuRG9tIiwiY2hpbGRyZW4iLCJpbnNlcnRBZnRlciIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJjb250ZXh0IiwidGhpcyIsImFyZ3MiLCJsYXRlciIsImNhbGxOb3ciLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiaXNTdHJpY3RNb2RlIiwiaXNTdHJpY3QiLCJnZW5lcmF0ZVVVSUQiLCJyZXBsYWNlIiwiciIsIk1hdGgiLCJyYW5kb20iLCJ2IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIiRodHRwIiwidXJsIiwiY29yZSIsImFqYXgiLCJtZXRob2QiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjbGllbnQiLCJYTUxIdHRwUmVxdWVzdCIsInVyaSIsImV4dGVuZEdlbmVyYWxQYXJhbXMiLCJfdXRpbGl0aWVzIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiX3NlcmlhbGl6ZSIsInNlcmlhbGl6ZSIsIm9ubG9hZCIsInN0YXR1cyIsInJlc3BvbnNlIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsImVyciIsImdldCIsInBvc3QiLCJwdXQiLCJwYXRjaCIsImRlbGV0ZSIsImNzcmZQYXJhbSIsIl9jc3JmIiwicm9yUGFyYW1zIiwiY3NyZlRva2VuIiwiZ2VuZXJhbE9iaiIsInV0ZjgiLCJmb3JtYXQiLCJmbGFzaCIsImRhdGEiLCJjYWxsYmFjayIsImZsYXNoRWxlIiwiZmxhc2hUcGwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJkZXN0b3J5IiwiYmluZCIsImVycm9yIiwibWVzc2FnZSIsImVsZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsImNsYXNzTGlzdCIsImFkZCIsInBhcnNlQW5kRmxhc2giLCJqc29uRGF0YSIsInBvcHVwIiwiZXYiLCJwYXJhbXMiLCJwb3B1cEVsZSIsImdlbmVyYXRlUG9wdXBUcGwiLCJwb3NpdGlvblBvcHVwRWxlIiwiYmluZFBvcHVwRXZlbnRzIiwiX3RvZ2dsZVNjcm9sbCIsImRpc2FibGVTY3JvbGwiLCJ0cGwiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY2xvc2VQb3B1cCIsImNvbmZpcm0iLCJjb29yZGluYXRlcyIsInN0eWxlIiwidHJhbnNmb3JtIiwiY2xpZW50WCIsImNsaWVudFkiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwicG9wTGF5ZXIiLCJjbG9zZXN0IiwiZW5hYmxlU2Nyb2xsIiwiVHJlZSIsIm5vZGUiLCJOb2RlIiwiX3Jvb3QiLCJub2RlSWQiLCJwYXJlbnQiLCJjaGlsZHJlbmxldmVsIiwiY29sdW1uIiwidG90YWxvZmZzZXR5bGV2ZWwiLCJjYWxjQ2hpbGRyZW5MZXZlbHMiLCJ0b3RhbENoaWxkcmVuTGV2ZWxzIiwiY2FsY09mZlkiLCJhcnIiLCJub2RlSWR4IiwiZmluZEluZGV4IiwidG90YWxZIiwiaW5kZXgiLCJfcXVldWUiLCJ0cmF2ZXJzZURGIiwicmVjdXJzZSIsImN1cnJlbnROb2RlIiwiY2FsY0NoaWxkcmVuTGV2ZWwiLCJjYWxjVG90YWxPZmZzZXRZTGV2ZWwiLCJ0cmF2ZXJzZUJGIiwicXVldWUiLCJRdWV1ZSIsImVucXVldWUiLCJjdXJyZW50VHJlZSIsImRlcXVldWUiLCJjb250YWlucyIsInRyYXZlcnNhbCIsInRvRGF0YSIsImNoaWxkIiwiRXJyb3IiLCJwdXNoIiwiY2hlY2tEYXRhSGFzQ2hpbGQiLCJyZW1vdmUiLCJmcm9tRGF0YSIsImNoaWxkVG9SZW1vdmUiLCJzcGxpY2UiLCJ0cmF2ZXJzZURpcmVjdENoaWxkIiwibm9kZWRhdGEiLCJhcHBseVN0eWxlIiwic3R5bGVPYmoiLCJ0cmF2ZXJzZURlc2NlbmRhbnRzIiwibm9kZURhdGEiLCJkZXNjZW5kYW50c0FyciIsImhhc0NoaWxkIiwibWF4SWQiLCJtYXhOb2RlSWQiLCJkZXB0aCIsImRlcHRoQXJyIiwiZGltZW5zaW9ucyIsImhvcmlNYXgiLCJ2ZXJ0aWNhbE1heCIsImhvcmlBcnIiLCJtYXgiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwiaXNDcm9zc0RvbWFpbiIsIm9yaWdpbkFuY2hvciIsImhyZWYiLCJ1cmxBbmNob3IiLCJwcm90b2NvbCIsImhvc3QiLCJlIiwidHdvV2F5RGF0YUJpbmRpbmciLCJkb21Db250ZXh0IiwibW9kZWwiLCJmb3JFYWNoIiwiZW51bWVyYWJsZSIsInNldCIsInZhbCIsInNlbGVjdG9yVG9BcnJheSIsImNvbmNhdCIsImVsIiwiaGFzQXR0cmlidXRlIiwidGV4dENvbnRlbnQiLCJoYXNBY3RpdmVFbGUiLCJlbEFuZERlc2NlbmRhbnRzIiwic2V0QXR0cmlidXRlIiwiYWN0aXZlRWxlbWVudCIsImhhbmRsZXIiLCJzZWxlY3RvciIsIkFycmF5Iiwic2xpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWF0Y2hlcyIsInJlc3VsdEFyciIsImxvb3AiLCJjaGlsZHJlbkVsZXMiLCJjaGlsZEVsZW1lbnRDb3VudCIsImJvbCIsInJvb3RBUEkiLCJvcmlnaW4iLCJnbG9iYWwiLCJfdG9TdHJpbmciLCJfdHlwZW9mIiwiU3RyaW5nIiwidG9OdW1iZXIiLCJuIiwicGFyc2VGbG9hdCIsIm1ha2VNYXAiLCJleHBlY3RzTG93ZXJDYXNlIiwibWFwIiwiY3JlYXRlIiwibGlzdCIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJyZW1vdmUkMSIsIml0ZW0iLCJpbmRleE9mIiwiaGFzT3duIiwiaXNQcmltaXRpdmUiLCJjYWNoZWQiLCJmbiIsImNhY2hlIiwiaGl0IiwiYmluZCQxIiwiY3R4IiwiYm91bmRGbiIsImEiLCJsIiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJpc09iamVjdCIsImlzUGxhaW5PYmplY3QiLCJPQkpFQ1RfU1RSSU5HIiwidG9PYmplY3QiLCJyZXMiLCJub29wIiwiZ2VuU3RhdGljS2V5cyIsInJlZHVjZSIsInN0YXRpY0tleXMiLCJqb2luIiwibG9vc2VFcXVhbCIsImIiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJsb29zZUluZGV4T2YiLCJpc1Jlc2VydmVkIiwiY2hhckNvZGVBdCIsImRlZiIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwicGFyc2VQYXRoIiwicGF0aCIsImJhaWxSRSIsInRlc3QiLCJzZWdtZW50cyIsImlzTmF0aXZlIiwiQ3RvciIsInB1c2hUYXJnZXQiLCJfdGFyZ2V0IiwiRGVwIiwidGFyZ2V0U3RhY2siLCJwb3BUYXJnZXQiLCJwb3AiLCJwcm90b0F1Z21lbnQiLCJzcmMiLCJfX3Byb3RvX18iLCJjb3B5QXVnbWVudCIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwib2IiLCJfX29iX18iLCJPYnNlcnZlciIsIm9ic2VydmVyU3RhdGUiLCJzaG91bGRDb252ZXJ0IiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJpc0FycmF5IiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwidm1Db3VudCIsImRlZmluZVJlYWN0aXZlJCQxIiwiY3VzdG9tU2V0dGVyIiwiZGVwIiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJub3RpZnkiLCJzZXQkMSIsImRlbCIsIm1lcmdlRGF0YSIsImZyb20iLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZUhvb2siLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsIm1lcmdlQXNzZXRzIiwibm9ybWFsaXplUHJvcHMiLCJvcHRpb25zIiwicHJvcHMiLCJuYW1lIiwiY2FtZWxpemUiLCJ0eXBlIiwibm9ybWFsaXplRGlyZWN0aXZlcyIsImRpcnMiLCJkaXJlY3RpdmVzIiwidXBkYXRlIiwibWVyZ2VPcHRpb25zIiwidm0iLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJzdHJhdHMiLCJkZWZhdWx0U3RyYXQiLCJleHRlbmRzRnJvbSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtaXhpbiIsIlZ1ZSQzIiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsImNhcGl0YWxpemUiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsInByb3BzRGF0YSIsInByb3AiLCJhYnNlbnQiLCJpc1R5cGUiLCJCb29sZWFuIiwiaHlwaGVuYXRlIiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRDb252ZXJ0IiwiZGVmYXVsdCIsIiRvcHRpb25zIiwiRnVuY3Rpb24iLCJnZXRUeXBlIiwibWF0Y2giLCJsZW4iLCJyZXNldFNjaGVkdWxlclN0YXRlIiwiaGFzJDEiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwic29ydCIsIndhdGNoZXIiLCJydW4iLCJkZXZ0b29scyIsImNvbmZpZyIsImVtaXQiLCJxdWV1ZVdhdGNoZXIiLCJuZXh0VGljayIsInRyYXZlcnNlIiwic2Vlbk9iamVjdHMiLCJjbGVhciIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJkZXBJZCIsImhhcyIsImluaXRTdGF0ZSIsIl93YXRjaGVycyIsIm9wdHMiLCJpbml0UHJvcHMiLCJtZXRob2RzIiwiaW5pdE1ldGhvZHMiLCJpbml0RGF0YSIsIl9kYXRhIiwiY29tcHV0ZWQiLCJpbml0Q29tcHV0ZWQiLCJ3YXRjaCIsImluaXRXYXRjaCIsIl9wcm9wS2V5cyIsImlzUm9vdCIsIiRwYXJlbnQiLCJwcm94eSIsInVzZXJEZWYiLCJjb21wdXRlZFNoYXJlZERlZmluaXRpb24iLCJtYWtlQ29tcHV0ZWRHZXR0ZXIiLCJvd25lciIsIldhdGNoZXIiLCJsYXp5IiwiZGlydHkiLCJldmFsdWF0ZSIsImNyZWF0ZVdhdGNoZXIiLCIkd2F0Y2giLCJzdGF0ZU1peGluIiwiVnVlIiwiZGF0YURlZiIsIiRzZXQiLCIkZGVsZXRlIiwiZXhwT3JGbiIsImNiIiwidXNlciIsInRlYXJkb3duIiwiY3JlYXRlVGV4dFZOb2RlIiwiVk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJ0YWciLCJ0ZXh0IiwiZWxtIiwiY29tcG9uZW50T3B0aW9ucyIsIm5zIiwiaXNTdGF0aWMiLCJpc0Nsb25lZCIsImNsb25lVk5vZGVzIiwidm5vZGVzIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5IiwiaG9vayIsImluamVjdGVkSGFzaCIsIl9faW5qZWN0ZWQiLCJvbGRIb29rIiwidXBkYXRlTGlzdGVuZXJzIiwib24iLCJvbGRPbiIsInJlbW92ZSQkMSIsImN1ciIsIm9sZCIsImV2ZW50IiwiY2FwdHVyZSIsIm9uY2UiLCJjaGFyQXQiLCJpbnZva2VyIiwiYXJySW52b2tlciIsImZuSW52b2tlciIsImFyZ3VtZW50cyQxIiwic2luZ2xlIiwibyIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwibmVzdGVkSW5kZXgiLCJsYXN0IiwiZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCIsImZpbHRlciIsImluaXRFdmVudHMiLCJfZXZlbnRzIiwiX2hhc0hvb2tFdmVudCIsImxpc3RlbmVycyIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJhZGQkMSIsIiRvbmNlIiwiJG9uIiwicmVtb3ZlJDIiLCIkb2ZmIiwib2xkTGlzdGVuZXJzIiwiZXZlbnRzTWl4aW4iLCJob29rUkUiLCJjYnMiLCIkZW1pdCIsImluaXRMaWZlY3ljbGUiLCJhYnN0cmFjdCIsIiRjaGlsZHJlbiIsIiRyb290IiwiJHJlZnMiLCJfd2F0Y2hlciIsIl9pbmFjdGl2ZSIsIl9pc01vdW50ZWQiLCJfaXNEZXN0cm95ZWQiLCJfaXNCZWluZ0Rlc3Ryb3llZCIsImxpZmVjeWNsZU1peGluIiwiX21vdW50IiwiaHlkcmF0aW5nIiwiJGVsIiwicmVuZGVyIiwiY3JlYXRlRW1wdHlWTm9kZSIsImNhbGxIb29rIiwiX3VwZGF0ZSIsIl9yZW5kZXIiLCIkdm5vZGUiLCJwcmV2RWwiLCJwcmV2Vm5vZGUiLCJfdm5vZGUiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJhY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9wYXJlbnRFbG0iLCJfcmVmRWxtIiwiX192dWVfXyIsIl91cGRhdGVGcm9tUGFyZW50IiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsImhhc0NoaWxkcmVuIiwiX3JlbmRlckNoaWxkcmVuIiwiX3BhcmVudFZub2RlIiwicHJvcEtleXMiLCIkc2xvdHMiLCJyZXNvbHZlU2xvdHMiLCIkZm9yY2VVcGRhdGUiLCIkZGVzdHJveSIsImhhbmRsZXJzIiwiaiIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiX2Jhc2UiLCJjaWQiLCJyZXNvbHZlZCIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJleHRyYWN0UHJvcHMiLCJmdW5jdGlvbmFsIiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm5hdGl2ZU9uIiwibWVyZ2VIb29rcyIsIl9jb250ZXh0IiwiaCIsImQiLCJzbG90cyIsImZ1bmN0aW9uYWxDb250ZXh0Iiwic2xvdCIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfaXNDb21wb25lbnQiLCJfY29tcG9uZW50VGFnIiwiaW5saW5lVGVtcGxhdGUiLCJzdGF0aWNSZW5kZXJGbnMiLCJpbml0IiwiJG1vdW50Iiwia2VlcEFsaXZlIiwibW91bnRlZE5vZGUiLCJwcmVwYXRjaCIsIm9sZFZub2RlIiwiaW5zZXJ0IiwiZGVzdHJveSQxIiwiZmFjdG9yeSIsInJlcXVlc3RlZCIsInBlbmRpbmdDYWxsYmFja3MiLCJzeW5jIiwicmVhc29uIiwidGhlbiIsImF0dHJzIiwiZG9tUHJvcHMiLCJhbHRLZXkiLCJjaGVja1Byb3AiLCJoYXNoIiwicHJlc2VydmUiLCJob29rc1RvTWVyZ2UiLCJmcm9tUGFyZW50Iiwib3VycyIsImhvb2tzIiwibWVyZ2VIb29rJDEiLCJvbmUiLCJ0d28iLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsIkFMV0FZU19OT1JNQUxJWkUiLCJfY3JlYXRlRWxlbWVudCIsInNjb3BlZFNsb3RzIiwiU0lNUExFX05PUk1BTElaRSIsImdldFRhZ05hbWVzcGFjZSIsImlzUmVzZXJ2ZWRUYWciLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsImFwcGx5TlMiLCJpbml0UmVuZGVyIiwiX3N0YXRpY1RyZWVzIiwicmVuZGVyQ29udGV4dCIsIiRzY29wZWRTbG90cyIsIl9jIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZW5kZXJNaXhpbiIsIm1hcmtTdGF0aWMiLCJ0cmVlIiwiaXNPbmNlIiwibWFya1N0YXRpY05vZGUiLCIkbmV4dFRpY2siLCJyZWYiLCJfcmVuZGVyUHJveHkiLCJlcnJvckhhbmRsZXIiLCJfcyIsIl92IiwiX24iLCJfZSIsIl9xIiwiX2kiLCJfbSIsImlzSW5Gb3IiLCJfbyIsIl9mIiwiaWRlbnRpdHkiLCJfbCIsIl90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwic2NvcGVkU2xvdEZuIiwic2xvdE5vZGVzIiwiX2IiLCJhc1Byb3AiLCJtdXN0VXNlUHJvcCIsIl9rIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbkFsaWFzIiwia2V5Q29kZXMiLCJkZWZhdWx0U2xvdCIsImlzQ29tbWVudCIsImluaXRNaXhpbiIsIl9pbml0IiwiX3VpZCIsInVpZCIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiX3NlbGYiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsImNhY2hlZFN1cGVyT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJfc2NvcGVJZCIsImNvbXBvbmVudHMiLCJpbml0VXNlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0TWl4aW4kMSIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiX2Fzc2V0VHlwZXMiLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJkZWZpbml0aW9uIiwicGF0dGVybiIsImluaXRHbG9iYWxBUEkiLCJjb25maWdEZWYiLCJ1dGlsIiwiYnVpbHRJbkNvbXBvbmVudHMiLCJnZW5DbGFzc0ZvclZub2RlIiwiY2hpbGROb2RlIiwibWVyZ2VDbGFzc0RhdGEiLCJnZW5DbGFzc0Zyb21EYXRhIiwic3RhdGljQ2xhc3MiLCJjbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZpZWQiLCJpc1NWRyIsImlzVW5rbm93bkVsZW1lbnQiLCJpbkJyb3dzZXIiLCJ1bmtub3duRWxlbWVudENhY2hlIiwiSFRNTFVua25vd25FbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJxdWVyeSIsImNyZWF0ZUVsZW1lbnQkMSIsInRhZ05hbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VNYXAiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUNvbW1lbnQiLCJzZXRUZXh0Q29udGVudCIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmcyIsInJlZkluRm9yIiwiaXNVbmRlZiIsInMiLCJpc0RlZiIsInNhbWVWbm9kZSIsInZub2RlMSIsInZub2RlMiIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwiYmFja2VuZCIsImVtcHR5Tm9kZUF0Iiwibm9kZU9wcyIsImNyZWF0ZVJtQ2IiLCJjaGlsZEVsbSIsInJlbW92ZU5vZGUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJuZXN0ZWQiLCJpc1Jvb3RJbnNlcnQiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJpc1JlYWN0aXZhdGVkIiwiaW5pdENvbXBvbmVudCIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJpbm5lck5vZGUiLCJ0cmFuc2l0aW9uIiwiYWN0aXZhdGUiLCJlbXB0eU5vZGUiLCJpc1BhdGNoYWJsZSIsImkkMSIsInBlbmRpbmdJbnNlcnQiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwiZGVzdHJveSIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsInJtIiwidXBkYXRlQ2hpbGRyZW4iLCJvbGRDaCIsIm5ld0NoIiwicmVtb3ZlT25seSIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJlbG1Ub01vdmUiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwiY2FuTW92ZSIsInBhdGNoVm5vZGUiLCJoYXNEYXRhIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJoeWRyYXRlIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkcmVuTWF0Y2giLCJmaXJzdENoaWxkIiwiaXNSZW5kZXJlZE1vZHVsZSIsImhvb2tzJDEiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJub2RlVHlwZSIsInJlbW92ZUF0dHJpYnV0ZSIsImFuY2VzdG9yIiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImRpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwib2xkVmFsdWUiLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImluc2VydGVkIiwiY2FsbEluc2VydCIsIm1vZGlmaWVycyIsImVtcHR5TW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJ1cGRhdGVBdHRycyIsIm9sZEF0dHJzIiwic2V0QXR0ciIsImlzSUU5IiwiaXNYbGluayIsInJlbW92ZUF0dHJpYnV0ZU5TIiwieGxpbmtOUyIsImdldFhsaW5rUHJvcCIsImlzRW51bWVyYXRlZEF0dHIiLCJpc0Jvb2xlYW5BdHRyIiwiaXNGYWxzeUF0dHJWYWx1ZSIsInNldEF0dHJpYnV0ZU5TIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsImFkZCQyIiwib2xkSGFuZGxlciIsInJlbW92ZSQzIiwidGFyZ2V0JDEiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXBkYXRlRE9NTGlzdGVuZXJzIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsImlzRGlydHkiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImNoZWNrVmFsIiwiY29tcG9zaW5nIiwiaXNJbnB1dENoYW5nZWQiLCJfdk1vZGlmaWVycyIsIm51bWJlciIsInRyaW0iLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsInBhcnNlU3R5bGVUZXh0IiwiZ2V0U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJzZXRQcm9wIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRhciIsIm5leHRGcmFtZSIsInJhZiIsImFkZFRyYW5zaXRpb25DbGFzcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImV4cGVjdGVkVHlwZSIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiVFJBTlNJVElPTiIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvbkVuZEV2ZW50IiwiZW5kZWQiLCJlbmQiLCJvbkVuZCIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uZURlbGF5cyIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiQU5JTUFUSU9OIiwiaGFzVHJhbnNmb3JtIiwidHJhbnNmb3JtUkUiLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwiTnVtYmVyIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiX2xlYXZlQ2IiLCJjYW5jZWxsZWQiLCJyZXNvbHZlVHJhbnNpdGlvbiIsIl9lbnRlckNiIiwiY3NzIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImJlZm9yZUVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImxlYXZlIiwicGVyZm9ybUxlYXZlIiwiYmVmb3JlTGVhdmUiLCJsZWF2ZUNsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImFmdGVyTGVhdmUiLCJsZWF2ZUNhbmNlbGxlZCIsImRlbGF5TGVhdmUiLCJkZWYkJDEiLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImNhbGxlZCIsIl9lbnRlciIsIl8iLCJzZXRTZWxlY3RlZCIsImJpbmRpbmciLCJpc011bHRpcGxlIiwibXVsdGlwbGUiLCJzZWxlY3RlZCIsIm9wdGlvbiIsImdldFZhbHVlIiwic2VsZWN0ZWRJbmRleCIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uRW5kIiwidHJpZ2dlciIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImxvY2F0ZU5vZGUiLCJnZXRSZWFsQ2hpbGQiLCJjb21wT3B0aW9ucyIsImV4dHJhY3RUcmFuc2l0aW9uRGF0YSIsImNvbXAiLCJrZXkkMSIsInBsYWNlaG9sZGVyIiwicmF3Q2hpbGQiLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiaXNTYW1lQ2hpbGQiLCJvbGRDaGlsZCIsImNhbGxQZW5kaW5nQ2JzIiwiX21vdmVDYiIsInJlY29yZFBvc2l0aW9uIiwibmV3UG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYXBwbHlUcmFuc2xhdGlvbiIsIm9sZFBvcyIsInBvcyIsImR4IiwibGVmdCIsImR5IiwidG9wIiwibW92ZWQiLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJzaG91bGREZWNvZGUiLCJjb250ZW50IiwiZW5jb2RlZCIsImRpdiIsImRlY29kZSIsImh0bWwiLCJkZWNvZGVyIiwiZGVjb2RlQXR0ciIsInNob3VsZERlY29kZU5ld2xpbmVzIiwibmxSRSIsImx0UkUiLCJndFJFIiwiYW1wUkUiLCJxdW90ZVJFIiwicGFyc2VIVE1MIiwiYWR2YW5jZSIsInN1YnN0cmluZyIsInBhcnNlU3RhcnRUYWciLCJzdGFydFRhZ09wZW4iLCJhdHRyIiwic3RhcnRUYWdDbG9zZSIsImF0dHJpYnV0ZSIsInVuYXJ5U2xhc2giLCJoYW5kbGVTdGFydFRhZyIsImV4cGVjdEhUTUwiLCJsYXN0VGFnIiwiaXNOb25QaHJhc2luZ1RhZyIsInBhcnNlRW5kVGFnIiwiY2FuQmVMZWZ0T3BlblRhZyIsInVuYXJ5IiwiaXNVbmFyeVRhZyQkMSIsIklTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4iLCJzdGFjayIsIm5lZWRsZSIsImlzVW5hcnlUYWciLCJubyIsImlzU3BlY2lhbFRhZyIsInNmYyIsInN0YWNrZWRUYWciLCJyZVN0YWNrZWRUYWciLCJyZUNhY2hlIiwiUmVnRXhwIiwiZW5kVGFnTGVuZ3RoIiwicmVzdCIsImFsbCIsImVuZFRhZyIsImNoYXJzIiwidGV4dEVuZCIsImNvbW1lbnQiLCJjb21tZW50RW5kIiwiY29uZGl0aW9uYWxDb21tZW50IiwiY29uZGl0aW9uYWxFbmQiLCJkb2N0eXBlTWF0Y2giLCJkb2N0eXBlIiwiZW5kVGFnTWF0Y2giLCJjdXJJbmRleCIsInN0YXJ0VGFnTWF0Y2giLCJyZXN0JDEiLCJuZXh0IiwicGFyc2VGaWx0ZXJzIiwiZXhwIiwicHVzaEZpbHRlciIsImZpbHRlcnMiLCJsYXN0RmlsdGVySW5kZXgiLCJwcmV2IiwiZXhwcmVzc2lvbiIsImluU2luZ2xlIiwiaW5Eb3VibGUiLCJpblRlbXBsYXRlU3RyaW5nIiwiaW5SZWdleCIsImN1cmx5Iiwic3F1YXJlIiwicGFyZW4iLCJ3cmFwRmlsdGVyIiwicGFyc2VUZXh0IiwiZGVsaW1pdGVycyIsInRhZ1JFIiwiYnVpbGRSZWdleCIsImRlZmF1bHRUYWdSRSIsInRva2VucyIsImxhc3RJbmRleCIsImV4ZWMiLCJiYXNlV2FybiIsIm1zZyIsImNvbnNvbGUiLCJwbHVja01vZHVsZUZ1bmN0aW9uIiwiYWRkUHJvcCIsImFkZEF0dHIiLCJhZGREaXJlY3RpdmUiLCJhcmciLCJhZGRIYW5kbGVyIiwiaW1wb3J0YW50IiwiZXZlbnRzIiwibmF0aXZlIiwibmF0aXZlRXZlbnRzIiwibmV3SGFuZGxlciIsImdldEJpbmRpbmdBdHRyIiwiZ2V0U3RhdGljIiwiZHluYW1pY1ZhbHVlIiwiZ2V0QW5kUmVtb3ZlQXR0ciIsInN0YXRpY1ZhbHVlIiwiYXR0cnNNYXAiLCJhdHRyc0xpc3QiLCJwYXJzZU1vZGVsIiwiaW5kZXgkMSIsImV4cHJlc3Npb25Qb3MiLCJleHByZXNzaW9uRW5kUG9zIiwibGFzdEluZGV4T2YiLCJpZHgiLCJlb2YiLCJjaHIiLCJpc1N0cmluZ1N0YXJ0IiwicGFyc2VTdHJpbmciLCJwYXJzZUJyYWNrZXQiLCJpbkJyYWNrZXQiLCJzdHJpbmdRdW90ZSIsInRlbXBsYXRlIiwid2FybiQxIiwid2FybiIsInBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlIiwicGxhdGZvcm1NdXN0VXNlUHJvcCIsInBsYXRmb3JtSXNQcmVUYWciLCJpc1ByZVRhZyIsInByZVRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm1zIiwicG9zdFRyYW5zZm9ybXMiLCJyb290IiwiY3VycmVudFBhcmVudCIsInByZXNlcnZlV2hpdGVzcGFjZSIsImluVlByZSIsImluUHJlIiwiY2hlY2tSb290Q29uc3RyYWludHMiLCJpc0lFIiwiZ3VhcmRJRVNWR0J1ZyIsImVsZW1lbnQiLCJtYWtlQXR0cnNNYXAiLCJpc0ZvcmJpZGRlblRhZyIsImZvcmJpZGRlbiIsInByb2Nlc3NQcmUiLCJwcmUiLCJwcm9jZXNzUmF3QXR0cnMiLCJwcm9jZXNzRm9yIiwicHJvY2Vzc0lmIiwicHJvY2Vzc09uY2UiLCJwcm9jZXNzS2V5IiwicGxhaW4iLCJwcm9jZXNzUmVmIiwicHJvY2Vzc1Nsb3QiLCJwcm9jZXNzQ29tcG9uZW50IiwicHJvY2Vzc0F0dHJzIiwiaWYiLCJlbHNlaWYiLCJlbHNlIiwiYWRkSWZDb25kaXRpb24iLCJibG9jayIsInByb2Nlc3NJZkNvbmRpdGlvbnMiLCJzbG90U2NvcGUiLCJzbG90VGFyZ2V0IiwiaSQyIiwibGFzdE5vZGUiLCJkZWNvZGVIVE1MQ2FjaGVkIiwiY2hlY2tJbkZvciIsImluTWF0Y2giLCJmb3JBbGlhc1JFIiwiZm9yIiwiYWxpYXMiLCJpdGVyYXRvck1hdGNoIiwiZm9ySXRlcmF0b3JSRSIsIml0ZXJhdG9yMSIsIml0ZXJhdG9yMiIsImZpbmRQcmV2RWxlbWVudCIsImNvbmRpdGlvbiIsImlmQ29uZGl0aW9ucyIsInNsb3ROYW1lIiwiY29tcG9uZW50IiwiaXNQcm9wIiwiZGlyUkUiLCJoYXNCaW5kaW5ncyIsInBhcnNlTW9kaWZpZXJzIiwibW9kaWZpZXJSRSIsImJpbmRSRSIsImNhbWVsIiwib25SRSIsImFyZ01hdGNoIiwiYXJnUkUiLCJpZU5TQnVnIiwiaWVOU1ByZWZpeCIsIm9wdGltaXplIiwiaXNTdGF0aWNLZXkiLCJnZW5TdGF0aWNLZXlzQ2FjaGVkIiwiaXNQbGF0Zm9ybVJlc2VydmVkVGFnIiwibWFya1N0YXRpY1Jvb3RzIiwiZ2VuU3RhdGljS2V5cyQxIiwic3RhdGljIiwic3RhdGljSW5Gb3IiLCJzdGF0aWNSb290Iiwid2Fsa1Rocm91Z2hDb25kaXRpb25zQmxvY2tzIiwiY29uZGl0aW9uQmxvY2tzIiwiaXNCdWlsdEluVGFnIiwiaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IiLCJldmVyeSIsImdlbkhhbmRsZXJzIiwiZ2VuSGFuZGxlciIsImNvZGUiLCJtb2RpZmllckNvZGUiLCJnZW5LZXlGaWx0ZXIiLCJoYW5kbGVyQ29kZSIsInNpbXBsZVBhdGhSRSIsImZuRXhwUkUiLCJnZW5GaWx0ZXJDb2RlIiwia2V5VmFsIiwicGFyc2VJbnQiLCJiaW5kJDIiLCJ3cmFwRGF0YSIsImdlbmVyYXRlIiwiYXN0IiwicHJldlN0YXRpY1JlbmRlckZucyIsImN1cnJlbnRTdGF0aWNSZW5kZXJGbnMiLCJwcmV2T25jZUNvdW50Iiwib25jZUNvdW50IiwiY3VycmVudE9wdGlvbnMiLCJ3YXJuJDIiLCJ0cmFuc2Zvcm1zJDEiLCJkYXRhR2VuRm5zIiwicGxhdGZvcm1EaXJlY3RpdmVzJDEiLCJpc1BsYXRmb3JtUmVzZXJ2ZWRUYWckMSIsImdlbkVsZW1lbnQiLCJzdGF0aWNQcm9jZXNzZWQiLCJnZW5TdGF0aWMiLCJvbmNlUHJvY2Vzc2VkIiwiZ2VuT25jZSIsImZvclByb2Nlc3NlZCIsImdlbkZvciIsImlmUHJvY2Vzc2VkIiwiZ2VuSWYiLCJnZW5TbG90IiwiZ2VuQ29tcG9uZW50IiwiZ2VuRGF0YSIsImdlbkNoaWxkcmVuIiwiZ2VuSWZDb25kaXRpb25zIiwiY29uZGl0aW9ucyIsImdlblRlcm5hcnlFeHAiLCJzaGlmdCIsImdlbkRpcmVjdGl2ZXMiLCJnZW5Qcm9wcyIsImdlblNjb3BlZFNsb3RzIiwiZ2VuSW5saW5lVGVtcGxhdGUiLCJuZWVkUnVudGltZSIsImhhc1J1bnRpbWUiLCJnZW4iLCJiYXNlRGlyZWN0aXZlcyIsImlubGluZVJlbmRlckZucyIsImdlblNjb3BlZFNsb3QiLCJzY29wZSIsImNoZWNrU2tpcCIsImVsJDEiLCJnZXROb3JtYWxpemF0aW9uVHlwZSIsImdlbk5vZGUiLCJuZWVkc05vcm1hbGl6YXRpb24iLCJzb21lIiwibWF5YmVDb21wb25lbnQiLCJnZW5UZXh0IiwidHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzIiwiYmluZCQkMSIsImNvbXBvbmVudE5hbWUiLCJjb21waWxlJDEiLCJ0cmFuc2Zvcm1Ob2RlIiwiY2xhc3NCaW5kaW5nIiwiZ2VuRGF0YSQxIiwidHJhbnNmb3JtTm9kZSQxIiwic3R5bGVCaW5kaW5nIiwiZ2VuRGF0YSQyIiwibW9kZWwkMSIsIl93YXJuIiwid2FybiQzIiwiZ2VuU2VsZWN0IiwiZ2VuQ2hlY2tib3hNb2RlbCIsImdlblJhZGlvTW9kZWwiLCJnZW5EZWZhdWx0TW9kZWwiLCJ2YWx1ZUJpbmRpbmciLCJ0cnVlVmFsdWVCaW5kaW5nIiwiZmFsc2VWYWx1ZUJpbmRpbmciLCJnZW5Bc3NpZ25tZW50Q29kZSIsIm5lZWRDb21wb3NpdGlvbkd1YXJkIiwidmFsdWVFeHByZXNzaW9uIiwiYXNzaWdubWVudCIsIm1vZGVsUnMiLCJjb21waWxlJCQxIiwiYmFzZU9wdGlvbnMiLCJjb21waWxlVG9GdW5jdGlvbnMiLCJjb21waWxlZCIsIm1ha2VGdW5jdGlvbiIsImdldE91dGVySFRNTCIsIm91dGVySFRNTCIsImNvbnRhaW5lciIsImNsb25lTm9kZSIsIl9pc1NlcnZlciIsIl9TZXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNhbWVsaXplUkUiLCJ0b1VwcGVyQ2FzZSIsImh5cGhlbmF0ZVJFIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwiaWdub3JlZEVsZW1lbnRzIiwiX2xpZmVjeWNsZUhvb2tzIiwiX21heFVwZGF0ZUNvdW50IiwiaGFzUHJvdG8iLCJVQSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzRWRnZSIsImlzQW5kcm9pZCIsImlzSU9TIiwiZW52IiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJuZXh0VGlja0hhbmRsZXIiLCJwZW5kaW5nIiwiY29waWVzIiwiY2FsbGJhY2tzIiwidGltZXJGdW5jIiwibG9nRXJyb3IiLCJjYXRjaCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImNoYXJhY3RlckRhdGEiLCJfcmVzb2x2ZSIsIlNldCIsImZvcm1hdENvbXBvbmVudE5hbWUiLCJ1aWQkMSIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJhZGREZXAiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwib3JpZ2luYWwiLCJyZXN1bHQiLCJvYnNlcnZlQXJyYXkiLCJhcnJheUtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaXNTZXR0aW5nUHJvcHMiLCJhdWdtZW50Iiwid2FsayIsIml0ZW1zIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJmcmVlemUiLCJkZWZpbmVSZWFjdGl2ZSIsInVpZCQyIiwiZGVlcCIsImFjdGl2ZSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiY2xlYW51cERlcHMiLCJ0aGlzJDEiLCJ0bXAiLCJyYXciLCJwYXR0ZXJuVHlwZXMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsImNyZWF0ZWQiLCJkZXN0cm95ZWQiLCJ2ZXJzaW9uIiwidGVzdEVsIiwiYWNjZXB0VmFsdWUiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiYmFzZU1vZHVsZXMiLCJrbGFzcyIsImNzc1RleHQiLCJsaXN0RGVsaW1pdGVyIiwicHJvcGVydHlEZWxpbWl0ZXIiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcGVydHkiLCJub3JtYWxpemUiLCJwcmVmaXhlcyIsInVwcGVyIiwicHJlZml4ZWQiLCJoYXNUcmFuc2l0aW9uIiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBsYXRmb3JtTW9kdWxlcyIsInBhdGNoJDEiLCJ2bW9kZWwiLCJuZWVkUmVzZXQiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJkaXNwbGF5IiwidW5iaW5kIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvblByb3BzIiwibW9kZSIsIlRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiVHJhbnNpdGlvbkdyb3VwIiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsImtlcHQiLCJyZW1vdmVkIiwiYyQxIiwiYmVmb3JlVXBkYXRlIiwidXBkYXRlZCIsImhhc01vdmUiLCJvZmZzZXRIZWlnaHQiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImluZm8iLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJzaW5nbGVBdHRySWRlbnRpZmllciIsInNpbmdsZUF0dHJBc3NpZ24iLCJzaW5nbGVBdHRyVmFsdWVzIiwic291cmNlIiwibmNuYW1lIiwicW5hbWVDYXB0dXJlIiwiZyIsImlzU2NyaXB0T3JTdHlsZSIsImhhc0xhbmciLCJpc1NGQyIsInJlZ2V4RXNjYXBlUkUiLCJjbG9zZSIsImVzYyIsInRhYiIsInNwYWNlIiwidXAiLCJyaWdodCIsImRvd24iLCJzdG9wIiwicHJldmVudCIsInNlbGYiLCJjdHJsIiwiYWx0IiwibWV0YSIsImNsb2FrIiwia2xhc3MkMSIsInN0eWxlJDEiLCJtb2R1bGVzJDEiLCJkaXJlY3RpdmVzJDEiLCJpZFRvVGVtcGxhdGUiLCJtb3VudCIsImRvY3VtZW50RWxlbWVudCIsImNvbXBpbGUiLCJqc29uVG9UcmVlIiwibm9kZXNBcnIiLCJoYXNoVGFibGUiLCJub2Rlc0xlbiIsIm1vZEtleXNBcnIiLCJyZW1vdmVFbGVGcm9tQXJyIiwic29ydE51bWJlciIsInJvb3ROb2RlRGF0YSIsIl90cmVlIiwia2V5c0xlbiIsImsiLCJrZXlBcnJMZW4iLCJ0cmVlVG9Kc29uIiwiX29sZGVzdEluZGV4IiwiX25ld2VzdEluZGV4IiwiX3N0b3JhZ2UiLCJzaXplIiwiZGVsZXRlZERhdGEiLCJvbGRlc3RJbmRleCIsIm5ld2VzdEluZGV4IiwiY29sbGVjdEFwaURhdGEiLCJvcEVsZSIsInBlckFwaUVsZSIsImNvbGxlY3RJbmZvIiwiY29sbGVjdERhdGFGcm9tVHJlZSIsImluZm9FbGUiLCJNb2Rlc1Jvd0VsZSIsImluZm9EYXRhIiwic2VjdGlvbiIsImRlc2NyaXB0aW9uIiwid2lraUxpbmsiLCJnZXRNb2RlVmFsIiwiZGVidWdBZGRyIiwiZ2V0RGVidWdBZGRyIiwibW9kZVZhbCIsInJhZGlvcyIsImNoZWNrZWQiLCJhcGlUcmVlIiwidHJlZURhdGFPYmoiLCJkaW1lbnNpb25zQXJyIiwicGFyZW50SWQiLCJoVW5pdCIsInZVbml0Iiwibm9kZXMiLCJwZXJBcGlUcGwiLCJpc05ld0FwaSIsImFwaVVVSUQiLCJfdXRpbGl0aWVzMiIsInBhdGNoT3JQb3N0Iiwic2F2ZU9yQ3JlYXRlIiwibGVhZlRwbCIsImxlYWZDb250ZW50VHBsIiwiY3JlYXRlUGVyQXBpIiwiZGF0YXNldCIsImNyZWF0ZU5ld0FwaUluaXREYXRhIiwibGVhZkRhdGFQbGFjZUhvbGRlciIsImZpcnN0Q2hpbGREYXRhIiwiQXBpRG9tIiwiY29udGFpbmVyTm9kZSIsImFwaURhdGFPYmoiLCJhcGlDb250YWluZXIiLCJhcGlCaW5kRGF0YSIsIl90d29XYXlEYXRhQmluZGluZyIsImFwaUVsZSIsImxlYWZJbmRleCIsIiRhcGlUcmVlIiwiJGFwaVRyZWVGcmFtZSIsIiRhcGlUcmVlQ29udGVudCIsInJlbmRlckV4aXN0VHJlZSIsImFwaVJldHVybkRhdGEiLCJiaW5kRXZlbnQiLCJzZXRNb2RlVmFsIiwic2V0RGVidWdBZGRyIiwic2Nyb2xsQmFyIiwiX3Njcm9sbCIsInNjcm9sbEJhckgiLCJvdmVyZmxvd0VsZSIsImdlbmVyYXRlTGVhZiIsIm5ld0xlYWZTcGFuIiwicm91bmQiLCJwZXJMZWFmV2lkdGgiLCJwZXJTVkdQYXRoV2lkdGgiLCJwZXJMZWFmSGVpZ2h0IiwibGVhdmVzVmVydGljYWxHYXAiLCJfdGhpcyIsImV2VGFyZ2V0Q2xhc3NMaXN0IiwiZXZlbnRDb250ZXh0IiwiX2V2IiwiZG9tQ29udGFpbmVyIiwiX3RyZWVEYXRhQ29sbGVjdCIsIl9hamF4IiwiX2NvbnN0YW50IiwicGF0Y2hTdWNjZXNzIiwicG9zdFN1Y2Nlc3MiLCJhZGRDaGlsZCIsInBhcmVudEVsZW1lbnQiLCJfcG9wdXAiLCJkZWxldGVBcGkiLCJkZWxOb2RlIiwiX2ZsYXNoIiwiZGF3bl91cmkiLCJhcGlSZXNwb25kU3VjY2VzcyIsInRvZ2dsZSIsInN3aXRjaFByZXZpZXciLCJwcmV2aWV3RGF0YU9iaiIsImJlYXV0aWZ5SlNPTiIsImhpZ2h0bGlnaHRKU09OIiwiZGF0YU9iaiIsInByZXZpZXdDb250ZXh0IiwicHJldmlld1R5cGUiLCJwcmV2aWV3U3RyIiwianNvblZpZXciLCJzd2l0Y2hQcmV2aWV3U3RhdHVzIiwiYXBwbHlUeXBlIiwicHJldmlld1R5cGVzIiwiYXBpUmVzcG9uZFByZXZpZXdFbGUiLCJhcGlSZXNwb25kUHJldmlld0VsZUNsYXNzQXJyIiwiY2xhc3NOYW1lIiwiYXJyYXkiLCJwcmV2aWV3VHlwZUVsZXNBcnIiLCIkcHJlIiwiJGRhdGFWaWV3RWxlIiwibG9nIiwiX2NhbGxiYWNrcyIsImRlbGV0ZVN1Y2Nlc3MiLCJub2Rlc0FyclRvSWR4QXJyIiwibm9kZXNBcnJMZW4iLCJpZHhBcnIiLCJnZW5lcmF0ZUxlYWZTcGFuIiwibm9kZUluZGV4IiwiY3JlYXRlTGVhZiIsInBhcmVudElkeCIsImNsb25lUmVjdE9iaiIsImJvdHRvbSIsIndpZHRoIiwiaGVpZ2h0IiwiX2pzb25UcmVlQ29udmVydGVyIiwiZGF0YU5hbWUiLCJkYXRhVHlwZSIsImRhdGFWYWx1ZSIsImRhdGFRdWFudGl0eSIsImFwaVJhd0RhdGEiLCJkZXN0b3J5QXBpTGkiLCJzdWNjZXNzIiwianNvbk9iaiIsInByZXZpZXdEYXRhIiwiZG9jRnJhZyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJwZXJUV0RCQXJyIiwibGVhZiIsInBlclRXREIiLCJjYWxjRGltZW5zaW9ucyIsImRyYXdTVkciLCJzdG9yZUFwaVJldHVybkRhdGEiLCIkZGF0YUJlYXV0aWZ5IiwiY2xpY2siLCJpbml0QXBpVHJlZSIsInRyZWVEb2NGcmFnIiwibGVhZkVsZSIsImxlYWZCaW5kRGF0YSIsImN1cnJlbnRJZHgiLCJyZW1vdmVOb2Rlc0Zyb21Eb20iLCJzdHlsZU5vZGVzIiwic2V0UGFyZW50Tm9kZVZhbCIsImFsbExlYXZlcyIsImFsbExlYXZlc0xlbiIsImxlYXZlcyIsIngiLCJwYXJlbnRJZGV4IiwibGVhZkNoaWxkIiwiY2hpbGRNb2RlbCIsImxlYWZEYXRhIiwibGVhdmVzSGFzaCIsImxlYXZlc0xlbiIsImRpbWVuc2lvbkFyciIsImNsZWFyU1ZHIiwibGFzdENoaWxkIiwidGhhdCIsInN2Z1BhcnRpYWxzIiwiY3JlYXRlU2luZ2xlU1ZHIiwiaG9yaSIsInBhcmVudFZlcnQiLCJkdmVydCIsIm14IiwibXkiLCJxeCIsInF5IiwicXh4IiwicXl5IiwidHgiLCJ0eSIsInN2Z25zIiwibmV3UGF0aCIsIm5vZGVMZWZ0T2Zmc2V0IiwiZWxSZWN0T2JqZWN0IiwiYm9keVJlY3RPYmoiLCJjbG9uZUJvZHlSZWN0T2JqIiwiY2xvbmVFbFJlY3RPYmplY3QiLCJhYnMiLCJnZXRNYXhPZkFycmF5IiwibnVtQXJyYXkiLCJoYXNDbGFzcyIsImVsZW0iLCJicm93c2VyUHJlZml4IiwidWEiLCJvcGVuRGF0YWJhc2UiLCJvcGVyYSIsImdldFRyYW5zZm9ybSIsImdldFByb3BlcnR5VmFsdWUiLCJyZXN1bHRzIiwiZ2V0VHJhbnNsYXRlWCIsImdldFRyYW5zbGF0ZVkiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJtb3pUcmFuc2Zvcm0iLCJtYXQiLCJqc09iaiIsImpzb24iLCJBY3Rpb25DYWJsZSIsIklOVEVSTkFMIiwibWVzc2FnZV90eXBlcyIsIndlbGNvbWUiLCJwaW5nIiwiY29uZmlybWF0aW9uIiwicmVqZWN0aW9uIiwiZGVmYXVsdF9tb3VudF9wYXRoIiwicHJvdG9jb2xzIiwiY3JlYXRlQ29uc3VtZXIiLCJnZXRDb25maWciLCJDb25zdW1lciIsImNyZWF0ZVdlYlNvY2tldFVSTCIsImhlYWQiLCJzdGFydERlYnVnZ2luZyIsImRlYnVnZ2luZyIsInN0b3BEZWJ1Z2dpbmciLCJtZXNzYWdlcyIsIkRhdGUiLCJub3ciLCJtZSIsIkNvbm5lY3Rpb25Nb25pdG9yIiwiY29ubmVjdGlvbiIsInZpc2liaWxpdHlEaWRDaGFuZ2UiLCJyZWNvbm5lY3RBdHRlbXB0cyIsImNsYW1wIiwic2Vjb25kc1NpbmNlIiwicG9sbEludGVydmFsIiwibWluIiwic3RhbGVUaHJlc2hvbGQiLCJpc1J1bm5pbmciLCJzdGFydGVkQXQiLCJzdG9wcGVkQXQiLCJzdGFydFBvbGxpbmciLCJnZXRQb2xsSW50ZXJ2YWwiLCJzdG9wUG9sbGluZyIsInJlY29yZFBpbmciLCJwaW5nZWRBdCIsInJlY29yZENvbm5lY3QiLCJkaXNjb25uZWN0ZWRBdCIsInJlY29yZERpc2Nvbm5lY3QiLCJwb2xsIiwicG9sbFRpbWVvdXQiLCJyZWNvbm5lY3RJZlN0YWxlIiwiaW50ZXJ2YWwiLCJjb25uZWN0aW9uSXNTdGFsZSIsImRpc2Nvbm5lY3RlZFJlY2VudGx5IiwicmVvcGVuIiwidmlzaWJpbGl0eVN0YXRlIiwiaXNPcGVuIiwiZ2V0VGltZSIsInRpbWUiLCJzdXBwb3J0ZWRQcm90b2NvbHMiLCJ1bnN1cHBvcnRlZFByb3RvY29sIiwiQ29ubmVjdGlvbiIsImNvbnN1bWVyIiwic3Vic2NyaXB0aW9ucyIsIm1vbml0b3IiLCJkaXNjb25uZWN0ZWQiLCJyZW9wZW5EZWxheSIsIndlYlNvY2tldCIsImlzQWN0aXZlIiwiZ2V0U3RhdGUiLCJ1bmluc3RhbGxFdmVudEhhbmRsZXJzIiwiV2ViU29ja2V0IiwiaW5zdGFsbEV2ZW50SGFuZGxlcnMiLCJhbGxvd1JlY29ubmVjdCIsInJlZjEiLCJlcnJvcjEiLCJnZXRQcm90b2NvbCIsImlzU3RhdGUiLCJpc1Byb3RvY29sU3VwcG9ydGVkIiwic3RhdGVzIiwic3RhdGUiLCJyZWFkeVN0YXRlIiwiZXZlbnROYW1lIiwiaWRlbnRpZmllciIsInJlbG9hZCIsIm5vdGlmeUFsbCIsIndpbGxBdHRlbXB0UmVjb25uZWN0IiwiU3Vic2NyaXB0aW9ucyIsImNoYW5uZWxOYW1lIiwiY2hhbm5lbCIsInN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbiIsImVuc3VyZUFjdGl2ZUNvbm5lY3Rpb24iLCJzZW5kQ29tbWFuZCIsImZvcmdldCIsImZpbmRBbGwiLCJjYWxsYmFja05hbWUiLCJjb21tYW5kIiwicGVyZm9ybSIsImFjdGlvbiIsInVuc3Vic2NyaWJlIiwib2JqZWN0IiwicHJvcGVydGllcyIsImNvbm5lY3QiLCJkaXNjb25uZWN0IiwiaGFuZGxlTWV0aG9kIiwibGluayIsInBhcmFtc09iaiIsImZvcm1FbGUiLCJjcmVhdGVGb3JtIiwiYXBwZW5kRm9ybVRvRG9tIiwic3VibWl0Rm9ybSIsImYiLCJmb3JtIiwic3VibWl0IiwiaHRtbEVzY2FwZSIsImdlbmVyYXRlU2Nyb2xsU3RyIiwic2Nyb2xsU3RyIiwiSyIsImFnIiwiYWgiLCJhZiIsIlYiLCJDIiwic2NhbGUiLCJJIiwiTCIsIlIiLCJxIiwibWVtT2Zmc2V0WCIsImFhIiwiWSIsIk4iLCJjbGVhckludGVydmFsIiwidCIsIm9uc2VsZWN0c3RhcnQiLCJaIiwib2Zmc2V0WCIsImxheWVyWCIsIlciLCJRIiwicmVSZW5kZXIiLCJhYiIsIlAiLCJEIiwibmV3U2Nyb2xsU3RyIiwibmV3U2Nyb2xsRWxlIiwic2Nyb2xsYmFyIiwiaW5pdFBvcyIsIk0iLCJpbml0RG9tIiwiVSIsIm1vdXNld2hlZWwiLCJ6IiwibW91c2V3aGVlbGxvY2siLCJ3aGVlbGRlbHRhIiwiY3RybGJsb2NrIiwic3RlcCIsImFkIiwidGhlbWUiLCJyZWZyZXNoIiwiUyIsIlQiLCJzY3JvbGxMZWZ0IiwieSIsIlgiLCJvZmZzZXRXaWR0aCIsIm9mZnNldExlZnQiLCJzY3JvbGxXaWR0aCIsInNldEludGVydmFsIiwib25EcmFnc3RhcnQiLCJvbndoZWVsIiwicHJldmVudERlZmF1bHQiLCJkZWJvdW5jZWRXaW5kb3dSZXNpemUiLCJkaXNwb3NlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2xpZGUiLCJzbGlkZUVsZSIsImdlbmVyYXRlU2xpZGVUcGwiLCJwb3NpdGlvblNsaWRlRWxlIiwiYmluZFNsaWRlRXZlbnRzIiwiY2xvc2VTbGlkZSIsImNsaWNrU2hhZG93IiwibGl0ZXJhbFNlY3Rpb25zIiwiX2xlbiIsInN1YnN0cyIsIl9rZXkiLCJzdWJzdCIsImxpdCIsImVuZHNXaXRoIiwiX2h0bWxFc2NhcGUiLCJyZXR1cm5WYWx1ZSIsInByZXZlbnREZWZhdWx0Rm9yU2Nyb2xsS2V5cyIsImtleUNvZGUiLCJvbm1vdXNld2hlZWwiLCJvbnRvdWNobW92ZSIsIm9ua2V5ZG93biIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbCIsInN0cmluZ3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZ2V0QWxsQXBpcyIsImxpc3RlbkFwaVF1ZXJ5IiwiYXBpUXVlcnlJbnB1dCIsImluV3JhcHBlciIsImRlYm91bmNlZEFwaVF1ZXJ5SW5wdXQiLCJjaGVja0lmRm9jdXMiLCJjbGVhclNlYXJjaFJlc3VsdCIsImFwaVF1ZXJ5IiwicGF5bG9hZCIsImFwaVF1ZXJ5U3VjY2VzcyIsImFwaVNlYXJjaFJlc3VsdEVsZSIsInRvZ2dsZUZvbGRMaSIsImJpbmRFdmVudFRvQXBpTGlEZXNjcmlwdGlvbiIsIm5leHRFbGVtZW50U2libGluZyIsImFwaUlkIiwiZ2V0QXBpU3VjY2VzcyIsImJpbmRldmVudHMiLCJhcGlMaXMiLCJhZGRBcGlUcmVlIiwibmV3QXBpIiwiX3RyZWVEb20iLCJhcGlzQXJyIiwicHJvY2Vzc09wZW5FbnZTZXR0aW5ncyIsInNsaWRlQ29udGVudCIsIl9zbGlkZSIsInRwbFN0ciIsInByb2Nlc3NOZXdBcGlDbGljayIsImFwaVVsIiwiY3JlYXRlQXBpVWwiLCJiYXNlQXBpTGkiLCJuZXdBcGlMaVRwbCIsImFwaUxpc3RFbGUiLCJhcGlVbEVsZSIsIm5ld0FwaURpdiIsIm5ld0FwaUJ0biIsImhlYWRlciIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibmV3QXBpU3RyIiwiZGVib3VuY2VkTmV3QXBpQnRuIiwiZGVib3VuY2VkRW52QnRuIiwicmVuZGVyQWxsQXBpcyIsInRtcGwiLCJfdGVtcGxhdGUiLCJfdGVtcGxhdGVPYmplY3QiLCJfdGVtcGxhdGVPYmplY3QyIiwiZ2V0QWxsQXBpc1N1Y2Nlc3MiLCJkYXRhQmFrIiwiSlNPTkJhayIsInNlYXJjaExpc3QiLCJjb250ZW50U3RyIiwiTGVuIiwicHJvY2Vzc0RhdGFMaW5rIiwiX2hhbmRsZU1ldGhvZCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfX2VzTW9kdWxlIiwiQXBwIiwiY2FibGUiLCJfdnVlMiIsInBsdWdpbnNJbnB1dCIsImdjIiwic2hvd0xvZ3MiLCJ0b2dnbGVMb2ciLCJwbHVnaW5faWQiLCJjb25uZWN0ZWQiLCJyZWNlaXZlZCIsInN1YnNjcmliZSIsIl9sb29wIiwibGVuZ3RoMSIsInBsdWdpbl9zdGF0dXMiLCJfdnVlIiwiaGVhZFN0ciIsImlucHV0IiwicGFja2FnZVZlcnNpb24iLCJjaVBhY2thZ2VOYW1lIiwiY2lQYWNrYWdlVmVyc2lvbiIsIl90d2VldEJveCIsInR3ZWV0Qm94IiwiY2FuU3VibWl0IiwicHJvY2Vzc2VkIiwiaW5pdFBhdGNoQ2lQYWNrYWdlVmVyc2lvbiIsInByb2Nlc3NlZFBsdWdpbnNJbnB1dERhdGEiLCJwcm9jZXNzZWRQbHVnaW5zSW5wdXQiLCJzcGxpdEFyciIsImxpbmVzIiwicGFja2FnZU5hbWUiLCJjaVBhY2thZ2VWZXJzaW9uUGF0Y2giLCJjaVBhY2thZ2VOYW1lUHJlZml4IiwidG1wRm9ybUVsZSIsInN1Ym1pdEVsZSIsImFsZXJ0IiwiY2hlY2tWYWxpZGF0aW9uIiwiY3JlYXRlRm9ybUVsZSIsIm9iakFyciIsInJlIiwiaW5wdXRFbGUiLCJnZXRQYXRjaENpUGFja2FnZVZlcnNpb24iLCJ2ZXJBcnIiLCJ2ZXJBcnJMZW4iLCJzZWNQYXJ0QXJyIiwiZmlyc3RQYXJ0QXJyIiwibWludXNQYXRjaFZlcnNpb24iLCJwbHVzUGF0Y2hWZXJzaW9uIiwic2V0Rm9jdXMiLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2VsIiwiZ2V0U2VsZWN0aW9uIiwic2V0U3RhcnQiLCJjb2xsYXBzZSIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiZG9jIiwidGIiLCJ0YmQiLCJ0YmRTdHJpbmciLCJpbm5lclRleHQiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NJbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUUsV0FDQUUsR0FBQUosRUFDQUssUUFBQSxFQVVBLE9BTkFQLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLFFBQUEsRUFHQUYsRUFBQUQsUUF2QkEsR0FBQUQsS0FxQ0EsT0FUQUYsR0FBQVEsRUFBQVQsRUFHQUMsRUFBQVMsRUFBQVAsRUFHQUYsRUFBQVUsRUFBQSxHQUdBVixFQUFBOzs7QURTTSxTQUFTSSxFQUFRRCxFQUFTSCxHQUUvQixZRWpERCxJQUNBVyxJQURBWCw2QkFBQSxJQUNBQSw0QkFBQSxLQUNBWSxFQUFBWiwyQkFBQSxJQUVBYSxFQUFBYiwrQkFBQSxJQUVBYyxFQUFBZCwrQkFBQSxJQUNBZSxFQUFBZiwrQkFBQSxLQUZBLEVBQUFXLEVBQUFLLGFBUUEsV0FDRSxHQUFJQyxJQUNGQyxJQUFBTixFQUFBTyxLQUNBQyxRQUFRUCxFQUFBUSxTQUNSQyxrQkFBQVAsRUFBQVEsYUFDQUMsY0FBQVYsRUFB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RUFBU1UsRUFBRzVFLHFCQUFxQixPQUFPLEtBRXZDLE1BSVA0RSxFQUFHdnpELGlCQUFpQixVQUFXLFNBQVNPLEdBQ2xDZ3pELEVBQUc1RSxxQkFBcUIsT0FBTyxJQUFNNEUsRUFBRzVFLHFCQUFxQixPQUFPLEdBQUdqb0QsYUFDekU2c0QsRUFBR3J6RCxVQUFVK0QsT0FBTyxtQkFFRCxTQUFqQnN2RCxFQUFHdjRELFlBQ0x1NEQsRUFBR3Y0RCxVQUFZeTRELEVBQ2ZaLEVBQVNVLEVBQUc1RSxxQkFBcUIsT0FBTyxPL0JxOUk3Q3gxRCxPQUFPMEQsZUFBZXRGLEVBQVMsY0FDN0J1RixPQUFPLElBRVR2RixFK0JqZ0plNDVEOzs7QS9CNGpKVixTQUFTMzVELEVBQVFELEdBRXRCLFlnQ3RrSkRDLEdBQU9ELFFBQVUsU0FBU0MsR0FRekIsTUFQSUEsR0FBT204RCxrQkFDVm44RCxFQUFPbzhELFVBQVksYUFDbkJwOEQsRUFBT3E4RCxTQUVQcjhELEVBQU8wRCxZQUNQMUQsRUFBT204RCxnQkFBa0IsR0FFbkJuOEQiLCJmaWxlIjoiYXBwbGljYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBwbGljYXRpb24uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX0FjdGlvbkNhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jb21tb24vQWN0aW9uQ2FibGUgKi8gMTUpO1xuXHRcblx0dmFyIF9kYXRhTGlua3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21vZHVsZXMvZGF0YUxpbmtzICovIDI1KTtcblx0XG5cdHZhciBfaG9tZXBhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21vZHVsZXMvaG9tZXBhZ2UgKi8gMjcpO1xuXHRcblx0dmFyIF9hcGlPcGVyYXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21vZHVsZXMvYXBpT3BlcmF0aW9uICovIDI0KTtcblx0XG5cdHZhciBfZmlzQ2lQbHVnaW5zID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9tb2R1bGVzL2Zpc0NpUGx1Z2lucyAqLyAyNik7XG5cdFxuXHR2YXIgX25ld0NpUGx1Z2lucyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbW9kdWxlcy9uZXdDaVBsdWdpbnMgKi8gMjgpO1xuXHRcblx0KDAsIF9kYXRhTGlua3MuZGF0YUxpbmtzKSgpO1xuXHRcblx0Ly8gYXBpVHJlZSgpO1xuXHQvLyB2YXIgcCA9IG5ldyBkYXduU1ZHKCk7XG5cdC8vIHAuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFpbnRlci10YXJnZXQnKSk7XG5cdC8vIHAuc3RhcnQoKTtcblx0XG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIHJvdXRlcyA9IHtcblx0ICAgICcvJzogX2hvbWVwYWdlLmhvbWUsXG5cdCAgICAnL2Rldic6IFtfYXBpT3BlcmF0aW9uLmluaXRYaHJdLFxuXHQgICAgJy9jaV9wbHVnaW5zL25ldyc6IF9uZXdDaVBsdWdpbnMubmV3Q2lQbHVnaW5zLFxuXHQgICAgJy9jaV9wbHVnaW5zJzogX2Zpc0NpUGx1Z2lucy5mY3Bcblx0ICB9O1xuXHQgIHZhciBwYXRoTmFtZSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcblx0ICBpZiAocm91dGVzLmhhc093blByb3BlcnR5KHBhdGhOYW1lKSkge1xuXHQgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyb3V0ZXNbcGF0aE5hbWVdKSA9PT0gJ1tvYmplY3QgQXJyYXldJyAmJiByb3V0ZXNbcGF0aE5hbWVdLmxlbmd0aCkge1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvdXRlc1twYXRoTmFtZV0ubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICByb3V0ZXNbcGF0aE5hbWVdW2ldLmFwcGx5KG51bGwpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByb3V0ZXNbcGF0aE5hbWVdLmFwcGx5KG51bGwpO1xuXHQgICAgfVxuXHQgIH1cblx0fSkoKTtcblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vdXRpbGl0aWVzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcblx0ZXhwb3J0cy5jbG9uZU9iaiA9IGNsb25lT2JqO1xuXHRleHBvcnRzLm1lcmdlT2JqID0gbWVyZ2VPYmo7XG5cdGV4cG9ydHMuYWRkUHJlZml4VG9PYmogPSBhZGRQcmVmaXhUb09iajtcblx0ZXhwb3J0cy53cmFwT2JqID0gd3JhcE9iajtcblx0ZXhwb3J0cy5zdHJUb0RvbSA9IHN0clRvRG9tO1xuXHRleHBvcnRzLmluc2VydEFmdGVyID0gaW5zZXJ0QWZ0ZXI7XG5cdGV4cG9ydHMuZGVib3VuY2UgPSBkZWJvdW5jZTtcblx0ZXhwb3J0cy5pc1N0cmljdE1vZGUgPSBpc1N0cmljdE1vZGU7XG5cdGV4cG9ydHMuZ2VuZXJhdGVVVUlEID0gZ2VuZXJhdGVVVUlEO1xuXHRmdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuXHQgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcblx0fVxuXHRmdW5jdGlvbiBjbG9uZU9iaihvYmopIHtcblx0ICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcblx0fVxuXHQvKiBjb25zaWRlciBPYmplY3QuYXNzaWduKHRhcmdldCwgLi4uc291cmNlcykgKi9cblx0ZnVuY3Rpb24gbWVyZ2VPYmooKSB7XG5cdCAgdmFyIG9iajEgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXHQgIHZhciBvYmoyID0gYXJndW1lbnRzWzFdO1xuXHRcblx0ICB2YXIgbmV3T2JqID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmoxKSk7XG5cdCAgZm9yICh2YXIga2V5IGluIG9iajIpIHtcblx0ICAgIGlmIChvYmoyLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0ICAgICAgbmV3T2JqW2tleV0gPSBvYmoyW2tleV07XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBuZXdPYmo7XG5cdH1cblx0ZnVuY3Rpb24gYWRkUHJlZml4VG9PYmoob2JqLCBwcmVmaXgpIHtcblx0ICBpZiAoIXByZWZpeCkgcmV0dXJuIG9iajtcblx0ICB2YXIgbmV3T2JqID0ge307XG5cdCAgZm9yICh2YXIga2V5IGluIG9iaikge1xuXHQgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgICAgIG5ld09ialsnJyArIHByZWZpeCArICdbJyArIGtleSArICddJ10gPSBvYmpba2V5XTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIG5ld09iajtcblx0fVxuXHRmdW5jdGlvbiB3cmFwT2JqKG9iaiwgd3JhcHBlcikge1xuXHQgIGlmICghd3JhcHBlcikgcmV0dXJuIG9iajtcblx0ICB2YXIgbmV3T2JqID0ge307XG5cdCAgbmV3T2JqW3dyYXBwZXJdID0ge307XG5cdCAgZm9yICh2YXIga2V5IGluIG9iaikge1xuXHQgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgICAgIG5ld09ialt3cmFwcGVyXVtrZXldID0gb2JqW2tleV07XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBuZXdPYmo7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHN0clRvRG9tKHN0cikge1xuXHQgIHZhciB0bXBFbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICB0bXBFbGUuaW5uZXJIVE1MID0gc3RyO1xuXHQgIHZhciByZXR1cm5Eb20gPSB0bXBFbGUuY2hpbGRyZW5bMF07XG5cdCAgcmV0dXJuIHJldHVybkRvbTtcblx0fVxuXHQvKipcblx0ICogW2luc2VydEFmdGVyIGRlc2NyaXB0aW9uOiBBY2NvcmRpbmcgdG8gTUROIGlmIHRoZSBlbGVtZW50IGlzIGxhc3QgKGFuZCBzbyBuZXh0U2libGluZyBpcyBudWxsKSB0aGUgbmV3Tm9kZSB3aWxsIGJlIGFwcGVuZGVkIGFzIGV4cGVjdGVkXVxuXHQgKiBAcGFyYW0gIHtbdHlwZV19IG5ld05vZGUgICAgICAgW2Rlc2NyaXB0aW9uXVxuXHQgKiBAcGFyYW0gIHtbdHlwZV19IHJlZmVyZW5jZU5vZGUgW2Rlc2NyaXB0aW9uXVxuXHQgKiBAcmV0dXJuIHt1bmRlZmluZWR9ICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuXHQgKi9cblx0ZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuXHQgIHJlZmVyZW5jZU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZS5uZXh0U2libGluZyk7XG5cdH1cblx0XG5cdC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3Rcblx0Ly8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuXHQvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcblx0Ly8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cblx0Lypcblx0dmFyIG15RWZmaWNpZW50Rm4gPSBkZWJvdW5jZShmdW5jdGlvbigpIHtcblx0ICAvLyBBbGwgdGhlIHRheGluZyBzdHVmZiB5b3UgZG9cblx0fSwgMjUwKTtcblx0XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBteUVmZmljaWVudEZuKTtcblx0ICovXG5cdGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuXHQgIHZhciB0aW1lb3V0O1xuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgY29udGV4dCA9IHRoaXMsXG5cdCAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcblx0ICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uIGxhdGVyKCkge1xuXHQgICAgICB0aW1lb3V0ID0gbnVsbDtcblx0ICAgICAgaWYgKCFpbW1lZGlhdGUpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG5cdCAgICB9O1xuXHQgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG5cdCAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdCAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG5cdCAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcblx0ICB9O1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gaXNTdHJpY3RNb2RlKCkge1xuXHQgIHZhciBpc1N0cmljdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiAhdGhpcztcblx0ICB9KCk7XG5cdCAgcmV0dXJuIGlzU3RyaWN0O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKSB7XG5cdCAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcblx0ICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMCxcblx0ICAgICAgICB2ID0gYyA9PSAneCcgPyByIDogciAmIDB4MyB8IDB4ODtcblx0ICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcblx0ICB9KTtcblx0fVxuXG4vKioqLyB9LFxuLyogMiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vYWpheC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLiRodHRwID0gJGh0dHA7XG5cdFxuXHR2YXIgX3NlcmlhbGl6ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc2VyaWFsaXplICovIDIwKTtcblx0XG5cdHZhciBfdXRpbGl0aWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlsaXRpZXMgKi8gMSk7XG5cdFxuXHR2YXIgX2NzcmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NzcmYgKi8gNik7XG5cdFxuXHRmdW5jdGlvbiAkaHR0cCh1cmwpIHtcblx0ICAvLyBBIHNtYWxsIGV4YW1wbGUgb2Ygb2JqZWN0XG5cdCAgdmFyIGNvcmUgPSB7XG5cdFxuXHQgICAgLy8gTWV0aG9kIHRoYXQgcGVyZm9ybXMgdGhlIGFqYXggcmVxdWVzdFxuXHQgICAgYWpheDogZnVuY3Rpb24gYWpheChtZXRob2QsIHVybCkge1xuXHQgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cdCAgICAgIHZhciBwcmVmaXggPSBhcmd1bWVudHNbM107XG5cdFxuXHQgICAgICAvLyBmb3IgUmFpbHNcblx0ICAgICAgLy8gdXJsID0gdXJsICsgJy5qc29uJztcblx0ICAgICAgLy8gQ3JlYXRpbmcgYSBwcm9taXNlXG5cdCAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHRcblx0ICAgICAgICAvLyBJbnN0YW50aWF0ZXMgdGhlIFhNTEh0dHBSZXF1ZXN0XG5cdCAgICAgICAgdmFyIGNsaWVudCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHRcblx0ICAgICAgICBpZiAobWV0aG9kID09PSAnUE9TVCcgfHwgbWV0aG9kID09PSAnUFVUJyB8fCBtZXRob2QgPT09ICdQQVRDSCcgfHwgbWV0aG9kID09PSAnREVMRVRFJykge1xuXHQgICAgICAgICAgdmFyIHVyaSA9IEpTT04uc3RyaW5naWZ5KGV4dGVuZEdlbmVyYWxQYXJhbXMoKDAsIF91dGlsaXRpZXMud3JhcE9iaikoYXJncywgcHJlZml4KSkpO1xuXHQgICAgICAgICAgY2xpZW50Lm9wZW4obWV0aG9kLCB1cmwpO1xuXHQgICAgICAgICAgLy8gY2xpZW50LnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcblx0ICAgICAgICAgIGNsaWVudC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuXHQgICAgICAgICAgY2xpZW50LnNlbmQodXJpKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ0dFVCcpIHtcblx0ICAgICAgICAgIHZhciBfdXJpID0gKDAsIF9zZXJpYWxpemUuc2VyaWFsaXplKShleHRlbmRHZW5lcmFsUGFyYW1zKCgwLCBfdXRpbGl0aWVzLmFkZFByZWZpeFRvT2JqKShhcmdzLCBwcmVmaXgpKSk7XG5cdCAgICAgICAgICBjbGllbnQub3BlbihtZXRob2QsIHVybCArICc/JyArIF91cmkpO1xuXHQgICAgICAgICAgY2xpZW50LnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cdCAgICAgICAgICBjbGllbnQuc2VuZCgpO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIGNsaWVudC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwKSB7XG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm1zIHRoZSBmdW5jdGlvbiBcInJlc29sdmVcIiB3aGVuIHRoaXMuc3RhdHVzIGlzIGVxdWFsIHRvIDJ4eFxuXHQgICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzcG9uc2UpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgLy8gUGVyZm9ybXMgdGhlIGZ1bmN0aW9uIFwicmVqZWN0XCIgd2hlbiB0aGlzLnN0YXR1cyBpcyBkaWZmZXJlbnQgdGhhbiAyeHhcblx0ICAgICAgICAgICAgcmVqZWN0KHRoaXMucmVzcG9uc2VUZXh0KTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9O1xuXHQgICAgICAgIGNsaWVudC5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgICAgcmVqZWN0KHRoaXMucmVzcG9uc2VUZXh0KTtcblx0ICAgICAgICB9O1xuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIC8vIFJldHVybiB0aGUgcHJvbWlzZVxuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIC8vIEFkYXB0ZXIgcGF0dGVyblxuXHQgIHJldHVybiB7XG5cdCAgICAnZ2V0JzogZnVuY3Rpb24gZ2V0KGFyZ3MsIHByZWZpeCkge1xuXHQgICAgICByZXR1cm4gY29yZS5hamF4KCdHRVQnLCB1cmwsIGFyZ3MsIHByZWZpeCk7XG5cdCAgICB9LFxuXHQgICAgJ3Bvc3QnOiBmdW5jdGlvbiBwb3N0KGFyZ3MsIHByZWZpeCkge1xuXHQgICAgICByZXR1cm4gY29yZS5hamF4KCdQT1NUJywgdXJsLCBhcmdzLCBwcmVmaXgpO1xuXHQgICAgfSxcblx0ICAgICdwdXQnOiBmdW5jdGlvbiBwdXQoYXJncywgcHJlZml4KSB7XG5cdCAgICAgIHJldHVybiBjb3JlLmFqYXgoJ1BVVCcsIHVybCwgYXJncywgcHJlZml4KTtcblx0ICAgIH0sXG5cdCAgICAncGF0Y2gnOiBmdW5jdGlvbiBwYXRjaChhcmdzLCBwcmVmaXgpIHtcblx0ICAgICAgcmV0dXJuIGNvcmUuYWpheCgnUEFUQ0gnLCB1cmwsIGFyZ3MsIHByZWZpeCk7XG5cdCAgICB9LFxuXHQgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIF9kZWxldGUoYXJncywgcHJlZml4KSB7XG5cdCAgICAgIHJldHVybiBjb3JlLmFqYXgoJ0RFTEVURScsIHVybCwgYXJncywgcHJlZml4KTtcblx0ICAgIH1cblx0ICB9O1xuXHR9IC8qKlxuXHQgIC8vIEItPiBIZXJlIHlvdSBkZWZpbmUgaXRzIGZ1bmN0aW9ucyBhbmQgaXRzIHBheWxvYWRcblx0ICB2YXIgbWRuQVBJID0gJ2h0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL3NlYXJjaC5qc29uJztcblx0ICB2YXIgcGF5bG9hZCA9IHtcblx0ICAgICd0b3BpYycgOiAnanMnLFxuXHQgICAgJ3EnICAgICA6ICdQcm9taXNlJ1xuXHQgIH07XG5cdCAgdmFyIGNhbGxiYWNrID0ge1xuXHQgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuXHQgICAgICAgY29uc29sZS5sb2coMSwgJ3N1Y2Nlc3MnLCBKU09OLnBhcnNlKGRhdGEpKTtcblx0ICAgIH0sXG5cdCAgICBlcnJvciA6IGZ1bmN0aW9uKGRhdGEpe1xuXHQgICAgICAgY29uc29sZS5sb2coMiwgJ2Vycm9yJywgSlNPTi5wYXJzZShkYXRhKSk7XG5cdCAgICB9XG5cdCAgfTtcblx0ICAvLyBFbmQgQlxuXHQgIC8vIEV4ZWN1dGVzIHRoZSBtZXRob2QgY2FsbFxuXHQgICRodHRwKG1kbkFQSSlcblx0ICAgIC5nZXQocGF5bG9hZClcblx0ICAgIC50aGVuKGNhbGxiYWNrLnN1Y2Nlc3MpXG5cdCAgICAuY2F0Y2goY2FsbGJhY2suZXJyb3IpO1xuXHQgIC8vIEV4ZWN1dGVzIHRoZSBtZXRob2QgY2FsbCBidXQgYW4gYWx0ZXJuYXRpdmUgd2F5ICgxKSB0byBoYW5kbGUgUHJvbWlzZSBSZWplY3QgY2FzZVxuXHQgICRodHRwKG1kbkFQSSlcblx0ICAgIC5nZXQocGF5bG9hZClcblx0ICAgIC50aGVuKGNhbGxiYWNrLnN1Y2Nlc3MsIGNhbGxiYWNrLmVycm9yKTtcblx0ICAvLyBFeGVjdXRlcyB0aGUgbWV0aG9kIGNhbGwgYnV0IGFuIGFsdGVybmF0aXZlIHdheSAoMikgdG8gaGFuZGxlIFByb21pc2UgUmVqZWN0IGNhc2Vcblx0ICAkaHR0cChtZG5BUEkpXG5cdCAgICAuZ2V0KHBheWxvYWQpXG5cdCAgICAudGhlbihjYWxsYmFjay5zdWNjZXNzKVxuXHQgICAgLnRoZW4odW5kZWZpbmVkLCBjYWxsYmFjay5lcnJvcik7XG5cdCAgICovXG5cdC8vIEEtPiAkaHR0cCBmdW5jdGlvbiBpcyBpbXBsZW1lbnRlZCBpbiBvcmRlciB0byBmb2xsb3cgdGhlIHN0YW5kYXJkIEFkYXB0ZXIgcGF0dGVyblxuXHRcblx0XG5cdGZ1bmN0aW9uIGV4dGVuZEdlbmVyYWxQYXJhbXMob2JqKSB7XG5cdCAgdmFyIGNzcmZQYXJhbSA9IF9jc3JmLnJvclBhcmFtcy5jc3JmUGFyYW0oKTtcblx0ICB2YXIgY3NyZlRva2VuID0gX2NzcmYucm9yUGFyYW1zLmNzcmZUb2tlbigpO1xuXHQgIHZhciBnZW5lcmFsT2JqID0ge307XG5cdCAgZ2VuZXJhbE9iai51dGY4ID0gJ+Kckyc7XG5cdCAgZ2VuZXJhbE9iai5mb3JtYXQgPSAnanNvbic7XG5cdCAgZ2VuZXJhbE9ialtjc3JmUGFyYW1dID0gY3NyZlRva2VuO1xuXHQgIHJldHVybiAoMCwgX3V0aWxpdGllcy5tZXJnZU9iaikob2JqLCBnZW5lcmFsT2JqKTtcblx0fVxuXHQvLyBFbmQgQVxuXG4vKioqLyB9LFxuLyogMyAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL2ZsYXNoLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmZsYXNoID0gZmxhc2g7XG5cdGV4cG9ydHMucGFyc2VBbmRGbGFzaCA9IHBhcnNlQW5kRmxhc2g7XG5cdFxuXHR2YXIgX3V0aWxpdGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbGl0aWVzICovIDEpO1xuXHRcblx0ZnVuY3Rpb24gZmxhc2goZGF0YSkge1xuXHQgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZnVuY3Rpb24gKCkge307XG5cdFxuXHQgIHZhciBmbGFzaEVsZSA9ICgwLCBfdXRpbGl0aWVzLnN0clRvRG9tKShmbGFzaFRwbChkYXRhKSk7XG5cdCAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmbGFzaEVsZSk7XG5cdCAgc2V0VGltZW91dChkZXN0b3J5LmJpbmQobnVsbCwgZmxhc2hFbGUsIGNhbGxiYWNrKSwgMjAwMCk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGZsYXNoVHBsKGRhdGEpIHtcblx0ICB2YXIgc3RyID0gJ1xcblxcdFxcdDxkaXYgY2xhc3M9XCJmbGFzaC1sYXllciAnICsgKGRhdGEuZXJyb3IgPyAnZXJyb3InIDogJ3N1Y2Nlc3MnKSArICdcIj5cXG5cXHRcXHRcXHQ8ZGl2IGNsYXNzPVwibWVzc2FnZVwiPicgKyAoZGF0YS5lcnJvciB8fCBkYXRhLm1lc3NhZ2UpICsgJzwvZGl2PlxcblxcdFxcdDwvZGl2PlxcblxcdCc7XG5cdCAgcmV0dXJuIHN0cjtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZGVzdG9yeShlbGUsIGNhbGxiYWNrKSB7XG5cdCAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlKTtcblx0ICB9KTtcblx0ICBlbGUuY2xhc3NMaXN0LmFkZCgnYmxpbmsnKTtcblx0ICBjYWxsYmFjaygpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBwYXJzZUFuZEZsYXNoKGRhdGEsIGNhbGxiYWNrKSB7XG5cdCAgdmFyIGpzb25EYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0ICBmbGFzaChqc29uRGF0YSwgY2FsbGJhY2spO1xuXHQgIHJldHVybiBqc29uRGF0YTtcblx0fVxuXG4vKioqLyB9LFxuLyogNCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL3BvcHVwLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLnBvcHVwID0gcG9wdXA7XG5cdFxuXHR2YXIgX3RvZ2dsZVNjcm9sbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdG9nZ2xlU2Nyb2xsICovIDIzKTtcblx0XG5cdGZ1bmN0aW9uIHBvcHVwKGV2LCBwYXJhbXMsIGNhbGxiYWNrKSB7XG5cdCAgdmFyIHBvcHVwRWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdCAgcG9wdXBFbGUuY2xhc3NMaXN0LmFkZCgncG9wdXAtbGF5ZXInKTtcblx0ICBwb3B1cEVsZS5pbm5lckhUTUwgPSBnZW5lcmF0ZVBvcHVwVHBsKCk7XG5cdCAgcG9zaXRpb25Qb3B1cEVsZShwb3B1cEVsZSwgZXYpO1xuXHQgIGJpbmRQb3B1cEV2ZW50cyhwb3B1cEVsZSwgZXYsIHBhcmFtcywgY2FsbGJhY2spO1xuXHQgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocG9wdXBFbGUpO1xuXHQgICgwLCBfdG9nZ2xlU2Nyb2xsLmRpc2FibGVTY3JvbGwpKCk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlbmVyYXRlUG9wdXBUcGwoZGF0YSkge1xuXHQgIHZhciB0cGwgPSAnXFxuICAgIDxkaXYgY2xhc3M9XCJwb3B1cC1zaGFkb3dcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVwicG9wdXAtY29udGVudFwiPlxcblxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XCJwb3B1cC10ZXh0XCI+QXJlIHlvdSBzdXJlIHRvIGRlbGV0ZSB0aGlzIEFQST88L2Rpdj5cXG5cXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVwicG9wdXAtYnRuc1wiPlxcblxcdFxcdFxcdFxcdFxcdDxzcGFuIGNsYXNzPVwicG9wdXAtYnRuIHBvcHVwLWNhbmNlbC1idG5cIj5jYW5jZWw8L3NwYW4+XFxuXFx0XFx0XFx0XFx0XFx0PHNwYW4gY2xhc3M9XCJwb3B1cC1idG4gcG9wdXAtY29uZmlybS1idG5cIj5jb25maXJtPC9zcGFuPlxcblxcdFxcdFxcdFxcdDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG5cXHQnO1xuXHQgIHJldHVybiB0cGw7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGJpbmRQb3B1cEV2ZW50cyhlbGUsIGV2LCBwYXJhbXMsIGNhbGxiYWNrKSB7XG5cdCAgZWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3BvcHVwLWNhbmNlbC1idG4nKVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlUG9wdXApO1xuXHQgIGVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwb3B1cC1zaGFkb3cnKVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlUG9wdXApO1xuXHQgIGVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwb3B1cC1jb25maXJtLWJ0bicpWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY29uZmlybS5iaW5kKHRoaXMsIGV2LCBlbGUsIHBhcmFtcywgY2FsbGJhY2spKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gY29uZmlybShldiwgZWxlLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG5cdCAgY2FsbGJhY2soKTtcblx0ICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHBvc2l0aW9uUG9wdXBFbGUoZWxlLCBjb29yZGluYXRlcykge1xuXHQgIGVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwb3B1cC1jb250ZW50JylbMF0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKCcgKyBjb29yZGluYXRlcy5jbGllbnRYICsgJ3B4LCAnICsgY29vcmRpbmF0ZXMuY2xpZW50WSArICdweCwgMCknO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjbG9zZVBvcHVwKGV2KSB7XG5cdCAgaWYgKGV2LnRhcmdldCAhPT0gZXYuY3VycmVudFRhcmdldCkgcmV0dXJuO1xuXHQgIHZhciBwb3BMYXllciA9IGV2LnRhcmdldC5jbG9zZXN0KCcucG9wdXAtbGF5ZXInKTtcblx0ICBpZiAocG9wTGF5ZXIpIHtcblx0ICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQocG9wTGF5ZXIpO1xuXHQgICAgKDAsIF90b2dnbGVTY3JvbGwuZW5hYmxlU2Nyb2xsKSgpO1xuXHQgIH1cblx0fVxuXG4vKioqLyB9LFxuLyogNSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2FwaS10cmVlL3RyZWUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLlRyZWUgPSBUcmVlO1xuXHRcblx0dmFyIF9xdWV1ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcXVldWUgKi8gMTEpO1xuXHRcblx0ZnVuY3Rpb24gVHJlZShkYXRhKSB7XG5cdCAgdmFyIG5vZGUgPSBuZXcgTm9kZShkYXRhKTtcblx0ICB0aGlzLl9yb290ID0gbm9kZTtcblx0fSAvKipcblx0ICAgKiBbVHJlZSBkZXNjcmlwdGlvbl1cblx0ICAgKiBAcGFyYW0ge1t0eXBlXX0gZGF0YSBbZGVzY3JpcHRpb25dXG5cdCAgICpcblx0ICAgKiBfcm9vdCBwb2ludHMgdG8gdGhlIHJvb3Qgbm9kZSBvZiBhIHRyZWUuXG5cdCAgICogdHJhdmVyc2VERihjYWxsYmFjaykgdHJhdmVyc2VzIG5vZGVzIG9mIGEgdHJlZSB3aXRoIERGUy5cblx0ICAgKiB0cmF2ZXJzZUJGKGNhbGxiYWNrKSB0cmF2ZXJzZXMgbm9kZXMgb2YgYSB0cmVlIHdpdGggQkZTLlxuXHQgICAqIGNvbnRhaW5zKGRhdGEsIHRyYXZlcnNhbCkgc2VhcmNoZXMgZm9yIGEgbm9kZSBpbiBhIHRyZWUuXG5cdCAgICogYWRkKGRhdGEsIHRvRGF0YSwgdHJhdmVyc2UpIGFkZHMgYSBub2RlIHRvIGEgdHJlZS5cblx0ICAgKiByZW1vdmUoY2hpbGQsIHBhcmVudCkgcmVtb3ZlcyBhIG5vZGUgaW4gYSB0cmVlLlxuXHQgICAqXG5cdCAgICovXG5cdFxuXHRcblx0ZnVuY3Rpb24gTm9kZShkYXRhKSB7XG5cdCAgdGhpcy5ub2RlSWQgPSBkYXRhLm5vZGVJZDsgLy8gbGVhZiBpbmRleCwgc3RhcnRzIGZyb20gMChyb290IG5vZGUpXG5cdCAgdGhpcy5wYXJlbnQgPSBudWxsO1xuXHQgIHRoaXMuY2hpbGRyZW4gPSBbXTtcblx0ICAvLyBhZGRlZCBsYXRlclxuXHQgIHRoaXMuY2hpbGRyZW5sZXZlbCA9IDE7IC8vIHJvd3Mgb2YgZGVzY2VuZGFudHMgb2YgY3VycmVudCBub2RlXG5cdCAgdGhpcy5jb2x1bW4gPSAwOyAvLyB3aGljaCBjb2x1bW4gdGhlIGN1cnJlbnQgbm9kZSBzaXRzIGluLCBzdGFydHMgZnJvbSAwKCByb290IG5vZGUgc2l0cyBpbilcblx0ICB0aGlzLnRvdGFsb2Zmc2V0eWxldmVsID0gMDsgLy8gdG90YWwgdmVydGljYWwgb2Zmc2V0IHRvIHRoZSBjdXJyZW50IHRyZWUgXG5cdCAgdGhpcy5kYXRhID0gZGF0YS5kYXRhIHx8IHt9O1xuXHR9XG5cdFxuXHRUcmVlLnByb3RvdHlwZS50cmF2ZXJzZURGID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFxuXHQgIC8vIHRoaXMgaXMgYSByZWN1cnNlIGFuZCBpbW1lZGlhdGVseS1pbnZva2luZyBmdW5jdGlvblxuXHQgIChmdW5jdGlvbiByZWN1cnNlKGN1cnJlbnROb2RlKSB7XG5cdCAgICAvLyBzdGVwIDJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjdXJyZW50Tm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHQgICAgICAvLyBzdGVwIDNcblx0ICAgICAgcmVjdXJzZShjdXJyZW50Tm9kZS5jaGlsZHJlbltpXSk7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gc3RlcCA0XG5cdCAgICBjYWxsYmFjayhjdXJyZW50Tm9kZSk7XG5cdFxuXHQgICAgLy8gc3RlcCAxXG5cdCAgfSkodGhpcy5fcm9vdCk7XG5cdH07XG5cdFxuXHQvLyBmb3IgdGhvc2Ugbm9kZXMgd2hvIGhhdmUgY2hpbGRyZW5cblx0ZnVuY3Rpb24gY2FsY0NoaWxkcmVuTGV2ZWxzKG5vZGUpIHtcblx0ICB2YXIgdG90YWxDaGlsZHJlbkxldmVscyA9IDA7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdCAgICB0b3RhbENoaWxkcmVuTGV2ZWxzICs9IG5vZGUuY2hpbGRyZW5baV0uY2hpbGRyZW5sZXZlbDtcblx0ICB9O1xuXHQgIHJldHVybiB0b3RhbENoaWxkcmVuTGV2ZWxzO1xuXHR9XG5cdFRyZWUucHJvdG90eXBlLmNhbGNDaGlsZHJlbkxldmVsID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKG5vZGUpIHtcblx0ICAgIG5vZGUuY2hpbGRyZW5sZXZlbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IGNhbGNDaGlsZHJlbkxldmVscyhub2RlKSA6IDE7XG5cdCAgICBub2RlLmNvbHVtbiA9IG5vZGUucGFyZW50ID8gbm9kZS5wYXJlbnQuY29sdW1uICsgMSA6IDA7XG5cdCAgfTtcblx0XG5cdCAgdGhpcy50cmF2ZXJzZURGKGNhbGxiYWNrKTtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGNhbGNPZmZZKGFyciwgZGF0YSkge1xuXHQgIHZhciBub2RlSWR4ID0gZmluZEluZGV4KGFyciwgZGF0YSk7XG5cdCAgdmFyIHRvdGFsWSA9IDA7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlSWR4OyBpKyspIHtcblx0ICAgIHRvdGFsWSArPSBhcnJbaV0uY2hpbGRyZW5sZXZlbDtcblx0ICB9O1xuXHQgIHJldHVybiB0b3RhbFk7XG5cdH1cblx0XG5cdFRyZWUucHJvdG90eXBlLmNhbGNUb3RhbE9mZnNldFlMZXZlbCA9IGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgbGV2ZWxnYXAgPSAwO1xuXHQgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKG5vZGUpIHtcblx0ICAgIGlmIChub2RlLnBhcmVudCkge1xuXHQgICAgICBub2RlLnRvdGFsb2Zmc2V0eWxldmVsID0gbm9kZS5wYXJlbnQudG90YWxvZmZzZXR5bGV2ZWwgKyBjYWxjT2ZmWShub2RlLnBhcmVudC5jaGlsZHJlbiwgbm9kZS5ub2RlSWQpO1xuXHQgICAgfSBlbHNlIGlmIChub2RlLnBhcmVudCA9PT0gbnVsbCkge307XG5cdCAgfTtcblx0XG5cdCAgdGhpcy50cmF2ZXJzZUJGKGNhbGxiYWNrKTtcblx0fTtcblx0XG5cdFRyZWUucHJvdG90eXBlLnRyYXZlcnNlQkYgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0ICB2YXIgcXVldWUgPSBuZXcgX3F1ZXVlLlF1ZXVlKCk7XG5cdFxuXHQgIHF1ZXVlLmVucXVldWUodGhpcy5fcm9vdCk7XG5cdFxuXHQgIHZhciBjdXJyZW50VHJlZSA9IHF1ZXVlLmRlcXVldWUoKTtcblx0XG5cdCAgd2hpbGUgKGN1cnJlbnRUcmVlKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gY3VycmVudFRyZWUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgICAgcXVldWUuZW5xdWV1ZShjdXJyZW50VHJlZS5jaGlsZHJlbltpXSk7XG5cdCAgICB9XG5cdFxuXHQgICAgY2FsbGJhY2soY3VycmVudFRyZWUpO1xuXHQgICAgY3VycmVudFRyZWUgPSBxdWV1ZS5kZXF1ZXVlKCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0VHJlZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHRyYXZlcnNhbCkge1xuXHQgIHRyYXZlcnNhbC5jYWxsKHRoaXMsIGNhbGxiYWNrKTtcblx0fTtcblx0XG5cdFRyZWUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhLCB0b0RhdGEsIHRyYXZlcnNhbCkge1xuXHQgIHZhciBjaGlsZCA9IG5ldyBOb2RlKGRhdGEpLFxuXHQgICAgICBwYXJlbnQgPSBudWxsLFxuXHQgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKG5vZGUpIHtcblx0ICAgIGlmIChub2RlLm5vZGVJZCA9PT0gdG9EYXRhKSB7XG5cdCAgICAgIHBhcmVudCA9IG5vZGU7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdGhpcy5jb250YWlucyhjYWxsYmFjaywgdHJhdmVyc2FsKTtcblx0XG5cdCAgaWYgKHBhcmVudCkge1xuXHQgICAgcGFyZW50LmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuXHQgICAgY2hpbGQucGFyZW50ID0gcGFyZW50O1xuXHQgIH0gZWxzZSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBhZGQgbm9kZSB0byBhIG5vbi1leGlzdGVudCBwYXJlbnQuJyk7XG5cdCAgfVxuXHRcblx0ICB0aGlzLmNhbGNDaGlsZHJlbkxldmVsKCk7XG5cdCAgdGhpcy5jYWxjVG90YWxPZmZzZXRZTGV2ZWwoKTtcblx0ICB0aGlzLmNoZWNrRGF0YUhhc0NoaWxkKCk7XG5cdCAgcmV0dXJuIGNoaWxkO1xuXHR9O1xuXHRcblx0VHJlZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGRhdGEsIGZyb21EYXRhLCB0cmF2ZXJzYWwpIHtcblx0ICB2YXIgdHJlZSA9IHRoaXMsXG5cdCAgICAgIHBhcmVudCA9IG51bGwsXG5cdCAgICAgIGNoaWxkVG9SZW1vdmUgPSBudWxsLFxuXHQgICAgICBpbmRleDtcblx0XG5cdCAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2sobm9kZSkge1xuXHQgICAgaWYgKG5vZGUubm9kZUlkID09PSBmcm9tRGF0YSkge1xuXHQgICAgICBwYXJlbnQgPSBub2RlO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHRoaXMuY29udGFpbnMoY2FsbGJhY2ssIHRyYXZlcnNhbCk7XG5cdFxuXHQgIGlmIChwYXJlbnQpIHtcblx0ICAgIGluZGV4ID0gZmluZEluZGV4KHBhcmVudC5jaGlsZHJlbiwgZGF0YSk7XG5cdFxuXHQgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb2RlIHRvIHJlbW92ZSBkb2VzIG5vdCBleGlzdC4nKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGNoaWxkVG9SZW1vdmUgPSBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdQYXJlbnQgZG9lcyBub3QgZXhpc3QuJyk7XG5cdCAgfVxuXHRcblx0ICB0aGlzLmNhbGNDaGlsZHJlbkxldmVsKCk7XG5cdCAgdGhpcy5jYWxjVG90YWxPZmZzZXRZTGV2ZWwoKTtcblx0ICB0aGlzLmNoZWNrRGF0YUhhc0NoaWxkKCk7XG5cdCAgcmV0dXJuIGNoaWxkVG9SZW1vdmU7XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBkYXRhKSB7XG5cdCAgdmFyIGluZGV4O1xuXHRcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHQgICAgaWYgKGFycltpXS5ub2RlSWQgPT09IGRhdGEpIHtcblx0ICAgICAgaW5kZXggPSBpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGluZGV4O1xuXHR9XG5cdFxuXHQvKiB0cmVlIGFkZG9uKi9cblx0XG5cdFRyZWUucHJvdG90eXBlLnRyYXZlcnNlRGlyZWN0Q2hpbGQgPSBmdW5jdGlvbiAobm9kZWRhdGEpIHtcblx0ICB2YXIgcXVldWUgPSBuZXcgX3F1ZXVlLlF1ZXVlKCksXG5cdCAgICAgIHBhcmVudCA9IG51bGwsXG5cdCAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2sobm9kZSkge1xuXHQgICAgaWYgKG5vZGUubm9kZUlkID09PSBub2RlZGF0YSkge1xuXHQgICAgICBwYXJlbnQgPSBub2RlO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHRoaXMuY29udGFpbnMoY2FsbGJhY2ssIHRoaXMudHJhdmVyc2VCRik7XG5cdFxuXHQgIHdoaWxlIChwYXJlbnQpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgICAgcXVldWUuZW5xdWV1ZShwYXJlbnQuY2hpbGRyZW5baV0pO1xuXHQgICAgfVxuXHQgICAgY2FsbGJhY2socGFyZW50KTtcblx0ICAgIHBhcmVudCA9IG51bGw7XG5cdCAgfVxuXHQgIHJldHVybiBxdWV1ZTtcblx0fTtcblx0VHJlZS5wcm90b3R5cGUuYXBwbHlTdHlsZSA9IGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgc3R5bGVPYmogPSB7fTtcblx0ICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhub2RlKSB7XG5cdCAgICBzdHlsZU9ialtub2RlLm5vZGVJZF0gPSBub2RlLnRvdGFsb2Zmc2V0eWxldmVsO1xuXHQgIH07XG5cdCAgdGhpcy50cmF2ZXJzZUJGKGNhbGxiYWNrKTtcblx0XG5cdCAgcmV0dXJuIHN0eWxlT2JqO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFt0cmF2ZXJzZURlc2NlbmRhbnRzIGRlc2NyaXB0aW9uXVxuXHQgKiBAcGFyYW0gIHtbaW50ZWdlcl19IG5vZGVEYXRhIFtkZXNjcmlwdGlvbl1cblx0ICogQHJldHVybiB7W2FycmF5XX0gICAgICAgICBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRUcmVlLnByb3RvdHlwZS50cmF2ZXJzZURlc2NlbmRhbnRzID0gZnVuY3Rpb24gKG5vZGVEYXRhKSB7XG5cdCAgdmFyIHF1ZXVlID0gbmV3IF9xdWV1ZS5RdWV1ZSgpLFxuXHQgICAgICBwYXJlbnQgPSBudWxsLFxuXHQgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKG5vZGUpIHtcblx0ICAgIGlmIChub2RlLm5vZGVJZCA9PT0gbm9kZURhdGEpIHtcblx0ICAgICAgcGFyZW50ID0gbm9kZTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB0aGlzLmNvbnRhaW5zKGNhbGxiYWNrLCB0aGlzLnRyYXZlcnNlQkYpO1xuXHRcblx0ICBxdWV1ZS5lbnF1ZXVlKHBhcmVudCk7XG5cdFxuXHQgIHZhciBjdXJyZW50VHJlZSA9IHF1ZXVlLmRlcXVldWUoKTtcblx0ICB2YXIgZGVzY2VuZGFudHNBcnIgPSBbXTtcblx0XG5cdCAgd2hpbGUgKGN1cnJlbnRUcmVlKSB7XG5cdCAgICBkZXNjZW5kYW50c0Fyci5wdXNoKGN1cnJlbnRUcmVlKTtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjdXJyZW50VHJlZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHQgICAgICBxdWV1ZS5lbnF1ZXVlKGN1cnJlbnRUcmVlLmNoaWxkcmVuW2ldKTtcblx0ICAgIH1cblx0XG5cdCAgICBjdXJyZW50VHJlZSA9IHF1ZXVlLmRlcXVldWUoKTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBkZXNjZW5kYW50c0Fycjtcblx0fTtcblx0XG5cdFRyZWUucHJvdG90eXBlLmNoZWNrRGF0YUhhc0NoaWxkID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKG5vZGUpIHtcblx0ICAgIG5vZGUuZGF0YS5oYXNDaGlsZCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcblx0ICB9O1xuXHQgIHRoaXMudHJhdmVyc2VCRihjYWxsYmFjayk7XG5cdH07XG5cdFxuXHQvKiBnZXQgTWF4IG5vZGVJZCBmcm9tIHRyZWUgKi9cblx0VHJlZS5wcm90b3R5cGUubWF4SWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIG1heE5vZGVJZCA9IDA7XG5cdCAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2sobm9kZSkge1xuXHQgICAgaWYgKG5vZGUubm9kZUlkID4gbWF4Tm9kZUlkKSBtYXhOb2RlSWQgPSBub2RlLm5vZGVJZDtcblx0ICB9O1xuXHQgIHRoaXMudHJhdmVyc2VCRihjYWxsYmFjayk7XG5cdCAgcmV0dXJuIG1heE5vZGVJZDtcblx0fTtcblx0XG5cdC8qIHRyZWUgZGVwdGggKi9cblx0VHJlZS5wcm90b3R5cGUuZGVwdGggPSBmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIGRlcHRoQXJyID0gW107XG5cdCAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2sobm9kZSkge1xuXHQgICAgdmFyIGRlcHRoID0gMDtcblx0ICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICB3aGlsZSAobm9kZS5wYXJlbnQgIT09IG51bGwpIHtcblx0ICAgICAgICBkZXB0aCArPSAxO1xuXHQgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudDtcblx0ICAgICAgfVxuXHQgICAgICBkZXB0aEFyci5wdXNoKGRlcHRoKTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIHRoaXMudHJhdmVyc2VERihjYWxsYmFjayk7XG5cdCAgcmV0dXJuIGRlcHRoQXJyO1xuXHR9O1xuXHRcblx0VHJlZS5wcm90b3R5cGUuZGltZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgaG9yaU1heCA9IHZvaWQgMCxcblx0ICAgICAgdmVydGljYWxNYXggPSB2b2lkIDAsXG5cdCAgICAgIGhvcmlBcnIgPSBbXTtcblx0ICBob3JpQXJyID0gdGhpcy5kZXB0aCgpO1xuXHQgIGhvcmlNYXggPSBNYXRoLm1heC5hcHBseShudWxsLCBob3JpQXJyKTtcblx0ICB2ZXJ0aWNhbE1heCA9IHRoaXMuX3Jvb3QuY2hpbGRyZW5sZXZlbDtcblx0ICByZXR1cm4gW2hvcmlNYXgsIHZlcnRpY2FsTWF4XTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL2NzcmYuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0dmFyIHJvclBhcmFtcyA9IGV4cG9ydHMucm9yUGFyYW1zID0ge1xuXHQgIC8vIFVwLXRvLWRhdGUgQ3Jvc3MtU2l0ZSBSZXF1ZXN0IEZvcmdlcnkgdG9rZW5cblx0ICBjc3JmVG9rZW46IGZ1bmN0aW9uIGNzcmZUb2tlbigpIHtcblx0ICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9Y3NyZi10b2tlbl0nKS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKTtcblx0ICB9LFxuXHQgIC8vIFVSTCBwYXJhbSB0aGF0IG11c3QgY29udGFpbiB0aGUgQ1NSRiB0b2tlblxuXHQgIGNzcmZQYXJhbTogZnVuY3Rpb24gY3NyZlBhcmFtKCkge1xuXHQgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1jc3JmLXBhcmFtXScpLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xuXHQgIH0sXG5cdCAgLy8gRGV0ZXJtaW5lcyBpZiB0aGUgcmVxdWVzdCBpcyBhIGNyb3NzIGRvbWFpbiByZXF1ZXN0LlxuXHQgIGlzQ3Jvc3NEb21haW46IGZ1bmN0aW9uIGlzQ3Jvc3NEb21haW4odXJsKSB7XG5cdCAgICB2YXIgb3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHQgICAgb3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXHQgICAgdmFyIHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblx0XG5cdCAgICB0cnkge1xuXHQgICAgICB1cmxBbmNob3IuaHJlZiA9IHVybDtcblx0ICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgdG8gYSBJRSBidWcuXG5cdCAgICAgIHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFxuXHQgICAgICAvLyBJZiBVUkwgcHJvdG9jb2wgaXMgZmFsc2Ugb3IgaXMgYSBzdHJpbmcgY29udGFpbmluZyBhIHNpbmdsZSBjb2xvblxuXHQgICAgICAvLyAqYW5kKiBob3N0IGFyZSBmYWxzZSwgYXNzdW1lIGl0IGlzIG5vdCBhIGNyb3NzLWRvbWFpbiByZXF1ZXN0XG5cdCAgICAgIC8vIChzaG91bGQgb25seSBiZSB0aGUgY2FzZSBmb3IgSUU3IGFuZCBJRSBjb21wYXRpYmlsaXR5IG1vZGUpLlxuXHQgICAgICAvLyBPdGhlcndpc2UsIGV2YWx1YXRlIHByb3RvY29sIGFuZCBob3N0IG9mIHRoZSBVUkwgYWdhaW5zdCB0aGUgb3JpZ2luXG5cdCAgICAgIC8vIHByb3RvY29sIGFuZCBob3N0LlxuXHQgICAgICByZXR1cm4gISgoIXVybEFuY2hvci5wcm90b2NvbCB8fCB1cmxBbmNob3IucHJvdG9jb2wgPT09ICc6JykgJiYgIXVybEFuY2hvci5ob3N0IHx8IG9yaWdpbkFuY2hvci5wcm90b2NvbCArICcvLycgKyBvcmlnaW5BbmNob3IuaG9zdCA9PT0gdXJsQW5jaG9yLnByb3RvY29sICsgJy8vJyArIHVybEFuY2hvci5ob3N0KTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgLy8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4uXG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblxuLyoqKi8gfSxcbi8qIDcgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi90d29XYXlEYXRhQmluZGluZy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy50d29XYXlEYXRhQmluZGluZyA9IHR3b1dheURhdGFCaW5kaW5nO1xuXHRmdW5jdGlvbiB0d29XYXlEYXRhQmluZGluZyhkYXRhLCBkb21Db250ZXh0KSB7XG5cdCAgLyogSW5zdGF0aWF0ZSBhbiBlbXB0eSBgbW9kZWxgIG9iamVjdC4gKi9cblx0ICB2YXIgbW9kZWwgPSB7fTtcblx0ICAvKiBJdGVyYXRlIG92ZXIgdGhlIGtleXMgb2YgdGhlIHN1cHBsaWVkIGBkYXRhYCBvYmplY3QuICovXG5cdCAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAvKiBTdG9yZSBvdXIgdmFsdWUgaW5zaWRlIHRoZSBgZm9yRWFjaGAgY2xvc3VyZS4gKi9cblx0ICAgIHZhciB2YWx1ZSA9IGRhdGFba2V5XTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2RlbCwga2V5LCB7XG5cdCAgICAgIC8qIFdlIHdhbnQgb3VyIHByb3BlcnR5IHRvIGFwcGVhciBpbiBgZm9yLi5pbmAgbG9vcHMuICovXG5cdCAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIC8qIFRoaXMgZG9lc24ndCBuZWVkIHRvIGRvIG11Y2gsIG9ubHkgcmV0dXJuIHRoZSBgdmFsdWVgIGZyb20gb3VyIGNsb3N1cmUuICovXG5cdCAgICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgICB9LFxuXHQgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcblx0ICAgICAgICAvKiBPdmVyd3JpdGUgb3VyIGNsb3N1cmVzIGB2YWx1ZWAgd2l0aCB0aGUgbmV3IGB2YWxgLiAqL1xuXHQgICAgICAgIHZhbHVlID0gdmFsO1xuXHQgICAgICAgIC8qIFNlbGVjdCBhbGwgbm9kZXMgd2l0aCBgYmluZGAgYW5kIGBtb2RlbGAgYXR0cmlidXRlcy4gKi9cblx0ICAgICAgICBzZWxlY3RvclRvQXJyYXkoJ1tiaW5kPScgKyBrZXkgKyAnXScsIGRvbUNvbnRleHQpLmNvbmNhdChzZWxlY3RvclRvQXJyYXkoJ1ttb2RlbD0nICsga2V5ICsgJ10nLCBkb21Db250ZXh0KSkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcblx0ICAgICAgICAgIC8qIElmIGVsZW1lbnQgaGFzIGBiaW5kYCBhdHRyaWJ1dGUsIHNldCBpdCdzIGB0ZXh0Q29udGVudGAuICovXG5cdCAgICAgICAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKCdiaW5kJykgJiYgIWVsLmhhc0F0dHJpYnV0ZSgnYmluZC10b2dnbGUtY2xhc3MnKSkgZWwudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0ICAgICAgICAgIGlmIChlbC5oYXNBdHRyaWJ1dGUoJ2JpbmQtdG9nZ2xlLWNsYXNzJykpIHtcblx0ICAgICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBcInRydWVcIikge1xuXHQgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3RvZ2dsZS10cnVlJyk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBcImZhbHNlXCIpIHtcblx0ICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCd0b2dnbGUtdHJ1ZScpO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlICYmICgnJyArIHZhbHVlKS5sZW5ndGggPiAwICYmICFoYXNBY3RpdmVFbGUoZWxBbmREZXNjZW5kYW50cyhlbCkpKSB7XG5cdCAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgndG9nZ2xlLXRydWUnKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSgnYmluZC1hdHRyLWhyZWYnKSkge1xuXHQgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB2YWx1ZSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICAvKiBJZiBlbGVtZW50IGhhcyBgbW9kZWxgIGF0dHJpYnV0ZSwgc2V0IGl0J3MgYHZhbHVlYC4gKi9cblx0XG5cdCAgICAgICAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKCdtb2RlbCcpICYmIGVsICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG5cdCAgICAgICAgICAgIGVsLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyogU2V0IG91ciBtb2RlbCBvYmplY3RzIHByb3BlcnR5IHZhbHVlIHRvIHRoZSBzYW1lIHZhbHVlLiAqL1xuXHQgICAgbW9kZWxba2V5XSA9IHZhbHVlO1xuXHQgICAgLyogQWRkIGNoYW5nZSBoYW5kbGVycyB0byBpbnB1dHMgb24gdGhlIHBhZ2UuICovXG5cdCAgICBzZWxlY3RvclRvQXJyYXkoJ1ttb2RlbD0nICsga2V5ICsgJ10nLCBkb21Db250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuXHQgICAgICAvKiBPdXIgaGFuZGxlciBzaW1wbHkgc2V0cyBvdXIgbW9kZWxzIGBrZXlgIHRvIHRoZSBlbGVtZW50J3MgdmFsdWUuICovXG5cdCAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG5cdCAgICAgICAgbW9kZWxba2V5XSA9IGVsLnZhbHVlO1xuXHQgICAgICB9XG5cdCAgICAgIC8qIEJpbmQgYSBga2V5dXBgIGhhbmRsZXIgc28gd2UgZ2V0IGxpdmUgZmVlZGJhY2sgb24gZWFjaCBrZXkgcHJlc3MuICovXG5cdCAgICAgIC8vIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgaGFuZGxlcik7XG5cdCAgICAgIC8qIEJpbmQgYSBgY2hhbmdlYCBoYW5kbGVyIHdoaWNoIGlzIGZpcmVkIHdoZW4gdGhlIGVsZW1lbnQgaXMgYmx1cnJlZC4gKi9cblx0ICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBoYW5kbGVyKTtcblx0ICAgIH0pO1xuXHQgIH0pO1xuXHQgIC8qIFJldHVybiBvdXIgbmV3IG1vZGVsIG9iamVjdC4gKi9cblx0ICByZXR1cm4gbW9kZWw7XG5cdH1cblx0XG5cdC8qIGluY2x1ZGUgZG9tQ29udGV4dCBpdHNzZWxmICovXG5cdGZ1bmN0aW9uIHNlbGVjdG9yVG9BcnJheShzZWxlY3RvciwgZG9tQ29udGV4dCkge1xuXHQgIHZhciBhcnIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb21Db250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcblx0ICBpZiAoZG9tQ29udGV4dC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuXHQgICAgYXJyLnB1c2goZG9tQ29udGV4dCk7XG5cdCAgfVxuXHQgIHJldHVybiBhcnI7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGVsQW5kRGVzY2VuZGFudHMoZWwpIHtcblx0ICB2YXIgcmVzdWx0QXJyID0gW107XG5cdCAgKGZ1bmN0aW9uIGxvb3AoZWxlKSB7XG5cdCAgICB2YXIgY2hpbGRyZW5FbGVzID0gZWxlLmNoaWxkcmVuO1xuXHQgICAgaWYgKGVsZS5jaGlsZEVsZW1lbnRDb3VudCkge1xuXHQgICAgICBmb3IgKHZhciBpID0gY2hpbGRyZW5FbGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgbG9vcChjaGlsZHJlbkVsZXNbaV0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXN1bHRBcnIucHVzaChlbGUpO1xuXHQgIH0pKGVsKTtcblx0ICByZXR1cm4gcmVzdWx0QXJyO1xuXHR9XG5cdGZ1bmN0aW9uIGhhc0FjdGl2ZUVsZShhcnIpIHtcblx0ICB2YXIgYm9sID0gZmFsc2U7XG5cdCAgaWYgKGFyci5sZW5ndGggPT09IDApIHJldHVybjtcblx0ICBmb3IgKHZhciBpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICBpZiAoYm9sID09PSB0cnVlKSBicmVhaztcblx0ICAgIGJvbCA9IGFycltpXSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA/IHRydWUgOiBmYWxzZTtcblx0ICB9XG5cdCAgcmV0dXJuIGJvbDtcblx0fVxuXG4vKioqLyB9LFxuLyogOCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvZ2xvYmFsL2NvbnN0YW50LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHR2YXIgcm9vdEFQSSA9IGV4cG9ydHMucm9vdEFQSSA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyAnL2FwaXMnO1xuXG4vKioqLyB9LFxuLyogOSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL34vdnVlL2Rpc3QvdnVlLmNvbW1vbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsvKiFcblx0ICogVnVlLmpzIHYyLjEuOFxuXHQgKiAoYykgMjAxNC0yMDE2IEV2YW4gWW91XG5cdCAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblx0ICovJ3VzZSBzdHJpY3QnOy8qICAqLy8qKlxuXHQgKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cblx0ICovdmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9O2Z1bmN0aW9uIF90b1N0cmluZyh2YWwpe3JldHVybiB2YWw9PW51bGw/Jyc6KHR5cGVvZiB2YWw9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKHZhbCkpPT09J29iamVjdCc/SlNPTi5zdHJpbmdpZnkodmFsLG51bGwsMik6U3RyaW5nKHZhbCk7fS8qKlxuXHQgKiBDb252ZXJ0IGEgaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuXHQgKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cblx0ICovZnVuY3Rpb24gdG9OdW1iZXIodmFsKXt2YXIgbj1wYXJzZUZsb2F0KHZhbCwxMCk7cmV0dXJuIG58fG49PT0wP246dmFsO30vKipcblx0ICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG5cdCAqIGlzIGluIHRoYXQgbWFwLlxuXHQgKi9mdW5jdGlvbiBtYWtlTWFwKHN0cixleHBlY3RzTG93ZXJDYXNlKXt2YXIgbWFwPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIGxpc3Q9c3RyLnNwbGl0KCcsJyk7Zm9yKHZhciBpPTA7aTxsaXN0Lmxlbmd0aDtpKyspe21hcFtsaXN0W2ldXT10cnVlO31yZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZT9mdW5jdGlvbih2YWwpe3JldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldO306ZnVuY3Rpb24odmFsKXtyZXR1cm4gbWFwW3ZhbF07fTt9LyoqXG5cdCAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuXHQgKi92YXIgaXNCdWlsdEluVGFnPW1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50Jyx0cnVlKTsvKipcblx0ICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheVxuXHQgKi9mdW5jdGlvbiByZW1vdmUkMShhcnIsaXRlbSl7aWYoYXJyLmxlbmd0aCl7dmFyIGluZGV4PWFyci5pbmRleE9mKGl0ZW0pO2lmKGluZGV4Pi0xKXtyZXR1cm4gYXJyLnNwbGljZShpbmRleCwxKTt9fX0vKipcblx0ICogQ2hlY2sgd2hldGhlciB0aGUgb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG5cdCAqL3ZhciBoYXNPd25Qcm9wZXJ0eT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIGhhc093bihvYmosa2V5KXtyZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosa2V5KTt9LyoqXG5cdCAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZVxuXHQgKi9mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZT09PSdzdHJpbmcnfHx0eXBlb2YgdmFsdWU9PT0nbnVtYmVyJzt9LyoqXG5cdCAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cblx0ICovZnVuY3Rpb24gY2FjaGVkKGZuKXt2YXIgY2FjaGU9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gZnVuY3Rpb24gY2FjaGVkRm4oc3RyKXt2YXIgaGl0PWNhY2hlW3N0cl07cmV0dXJuIGhpdHx8KGNhY2hlW3N0cl09Zm4oc3RyKSk7fTt9LyoqXG5cdCAqIENhbWVsaXplIGEgaHlwaGVuLWRlbG1pdGVkIHN0cmluZy5cblx0ICovdmFyIGNhbWVsaXplUkU9Ly0oXFx3KS9nO3ZhciBjYW1lbGl6ZT1jYWNoZWQoZnVuY3Rpb24oc3RyKXtyZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSxmdW5jdGlvbihfLGMpe3JldHVybiBjP2MudG9VcHBlckNhc2UoKTonJzt9KTt9KTsvKipcblx0ICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cblx0ICovdmFyIGNhcGl0YWxpemU9Y2FjaGVkKGZ1bmN0aW9uKHN0cil7cmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStzdHIuc2xpY2UoMSk7fSk7LyoqXG5cdCAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG5cdCAqL3ZhciBoeXBoZW5hdGVSRT0vKFteLV0pKFtBLVpdKS9nO3ZhciBoeXBoZW5hdGU9Y2FjaGVkKGZ1bmN0aW9uKHN0cil7cmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCckMS0kMicpLnJlcGxhY2UoaHlwaGVuYXRlUkUsJyQxLSQyJykudG9Mb3dlckNhc2UoKTt9KTsvKipcblx0ICogU2ltcGxlIGJpbmQsIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQgKi9mdW5jdGlvbiBiaW5kJDEoZm4sY3R4KXtmdW5jdGlvbiBib3VuZEZuKGEpe3ZhciBsPWFyZ3VtZW50cy5sZW5ndGg7cmV0dXJuIGw/bD4xP2ZuLmFwcGx5KGN0eCxhcmd1bWVudHMpOmZuLmNhbGwoY3R4LGEpOmZuLmNhbGwoY3R4KTt9Ly8gcmVjb3JkIG9yaWdpbmFsIGZuIGxlbmd0aFxuXHRib3VuZEZuLl9sZW5ndGg9Zm4ubGVuZ3RoO3JldHVybiBib3VuZEZuO30vKipcblx0ICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG5cdCAqL2Z1bmN0aW9uIHRvQXJyYXkobGlzdCxzdGFydCl7c3RhcnQ9c3RhcnR8fDA7dmFyIGk9bGlzdC5sZW5ndGgtc3RhcnQ7dmFyIHJldD1uZXcgQXJyYXkoaSk7d2hpbGUoaS0tKXtyZXRbaV09bGlzdFtpK3N0YXJ0XTt9cmV0dXJuIHJldDt9LyoqXG5cdCAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cblx0ICovZnVuY3Rpb24gZXh0ZW5kKHRvLF9mcm9tKXtmb3IodmFyIGtleSBpbiBfZnJvbSl7dG9ba2V5XT1fZnJvbVtrZXldO31yZXR1cm4gdG87fS8qKlxuXHQgKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcblx0ICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuXHQgKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG5cdCAqL2Z1bmN0aW9uIGlzT2JqZWN0KG9iail7cmV0dXJuIG9iaiE9PW51bGwmJih0eXBlb2Ygb2JqPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZihvYmopKT09PSdvYmplY3QnO30vKipcblx0ICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuXHQgKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuXHQgKi92YXIgdG9TdHJpbmc9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzt2YXIgT0JKRUNUX1NUUklORz0nW29iamVjdCBPYmplY3RdJztmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iail7cmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKT09PU9CSkVDVF9TVFJJTkc7fS8qKlxuXHQgKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuXHQgKi9mdW5jdGlvbiB0b09iamVjdChhcnIpe3ZhciByZXM9e307Zm9yKHZhciBpPTA7aTxhcnIubGVuZ3RoO2krKyl7aWYoYXJyW2ldKXtleHRlbmQocmVzLGFycltpXSk7fX1yZXR1cm4gcmVzO30vKipcblx0ICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG5cdCAqL2Z1bmN0aW9uIG5vb3AoKXt9LyoqXG5cdCAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG5cdCAqL3ZhciBubz1mdW5jdGlvbiBubygpe3JldHVybiBmYWxzZTt9Oy8qKlxuXHQgKiBSZXR1cm4gc2FtZSB2YWx1ZVxuXHQgKi92YXIgaWRlbnRpdHk9ZnVuY3Rpb24gaWRlbnRpdHkoXyl7cmV0dXJuIF87fTsvKipcblx0ICogR2VuZXJhdGUgYSBzdGF0aWMga2V5cyBzdHJpbmcgZnJvbSBjb21waWxlciBtb2R1bGVzLlxuXHQgKi9mdW5jdGlvbiBnZW5TdGF0aWNLZXlzKG1vZHVsZXMpe3JldHVybiBtb2R1bGVzLnJlZHVjZShmdW5jdGlvbihrZXlzLG0pe3JldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXN8fFtdKTt9LFtdKS5qb2luKCcsJyk7fS8qKlxuXHQgKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcblx0ICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuXHQgKi9mdW5jdGlvbiBsb29zZUVxdWFsKGEsYil7dmFyIGlzT2JqZWN0QT1pc09iamVjdChhKTt2YXIgaXNPYmplY3RCPWlzT2JqZWN0KGIpO2lmKGlzT2JqZWN0QSYmaXNPYmplY3RCKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoYSk9PT1KU09OLnN0cmluZ2lmeShiKTt9ZWxzZSBpZighaXNPYmplY3RBJiYhaXNPYmplY3RCKXtyZXR1cm4gU3RyaW5nKGEpPT09U3RyaW5nKGIpO31lbHNle3JldHVybiBmYWxzZTt9fWZ1bmN0aW9uIGxvb3NlSW5kZXhPZihhcnIsdmFsKXtmb3IodmFyIGk9MDtpPGFyci5sZW5ndGg7aSsrKXtpZihsb29zZUVxdWFsKGFycltpXSx2YWwpKXtyZXR1cm4gaTt9fXJldHVybi0xO30vKiAgKi92YXIgY29uZmlnPXsvKipcblx0ICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcblx0ICAgKi9vcHRpb25NZXJnZVN0cmF0ZWdpZXM6T2JqZWN0LmNyZWF0ZShudWxsKSwvKipcblx0ICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuXHQgICAqL3NpbGVudDpmYWxzZSwvKipcblx0ICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuXHQgICAqL2RldnRvb2xzOihcInByb2R1Y3Rpb25cIikhPT0ncHJvZHVjdGlvbicsLyoqXG5cdCAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcblx0ICAgKi9lcnJvckhhbmRsZXI6bnVsbCwvKipcblx0ICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcblx0ICAgKi9pZ25vcmVkRWxlbWVudHM6W10sLyoqXG5cdCAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cblx0ICAgKi9rZXlDb2RlczpPYmplY3QuY3JlYXRlKG51bGwpLC8qKlxuXHQgICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuXHQgICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cblx0ICAgKi9pc1Jlc2VydmVkVGFnOm5vLC8qKlxuXHQgICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cblx0ICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG5cdCAgICovaXNVbmtub3duRWxlbWVudDpubywvKipcblx0ICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG5cdCAgICovZ2V0VGFnTmFtZXNwYWNlOm5vb3AsLyoqXG5cdCAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cblx0ICAgKi9wYXJzZVBsYXRmb3JtVGFnTmFtZTppZGVudGl0eSwvKipcblx0ICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuXHQgICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cblx0ICAgKi9tdXN0VXNlUHJvcDpubywvKipcblx0ICAgKiBMaXN0IG9mIGFzc2V0IHR5cGVzIHRoYXQgYSBjb21wb25lbnQgY2FuIG93bi5cblx0ICAgKi9fYXNzZXRUeXBlczpbJ2NvbXBvbmVudCcsJ2RpcmVjdGl2ZScsJ2ZpbHRlciddLC8qKlxuXHQgICAqIExpc3Qgb2YgbGlmZWN5Y2xlIGhvb2tzLlxuXHQgICAqL19saWZlY3ljbGVIb29rczpbJ2JlZm9yZUNyZWF0ZScsJ2NyZWF0ZWQnLCdiZWZvcmVNb3VudCcsJ21vdW50ZWQnLCdiZWZvcmVVcGRhdGUnLCd1cGRhdGVkJywnYmVmb3JlRGVzdHJveScsJ2Rlc3Ryb3llZCcsJ2FjdGl2YXRlZCcsJ2RlYWN0aXZhdGVkJ10sLyoqXG5cdCAgICogTWF4IGNpcmN1bGFyIHVwZGF0ZXMgYWxsb3dlZCBpbiBhIHNjaGVkdWxlciBmbHVzaCBjeWNsZS5cblx0ICAgKi9fbWF4VXBkYXRlQ291bnQ6MTAwfTsvKiAgKi8vKipcblx0ICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG5cdCAqL2Z1bmN0aW9uIGlzUmVzZXJ2ZWQoc3RyKXt2YXIgYz0oc3RyKycnKS5jaGFyQ29kZUF0KDApO3JldHVybiBjPT09MHgyNHx8Yz09PTB4NUY7fS8qKlxuXHQgKiBEZWZpbmUgYSBwcm9wZXJ0eS5cblx0ICovZnVuY3Rpb24gZGVmKG9iaixrZXksdmFsLGVudW1lcmFibGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHt2YWx1ZTp2YWwsZW51bWVyYWJsZTohIWVudW1lcmFibGUsd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX0pO30vKipcblx0ICogUGFyc2Ugc2ltcGxlIHBhdGguXG5cdCAqL3ZhciBiYWlsUkU9L1teXFx3LiRdLztmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCl7aWYoYmFpbFJFLnRlc3QocGF0aCkpe3JldHVybjt9ZWxzZXt2YXIgc2VnbWVudHM9cGF0aC5zcGxpdCgnLicpO3JldHVybiBmdW5jdGlvbihvYmope2Zvcih2YXIgaT0wO2k8c2VnbWVudHMubGVuZ3RoO2krKyl7aWYoIW9iail7cmV0dXJuO31vYmo9b2JqW3NlZ21lbnRzW2ldXTt9cmV0dXJuIG9iajt9O319LyogICovLyogZ2xvYmFscyBNdXRhdGlvbk9ic2VydmVyICovLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG5cdHZhciBoYXNQcm90bz0nX19wcm90b19fJ2lue307Ly8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xuXHR2YXIgaW5Ccm93c2VyPXR5cGVvZiB3aW5kb3chPT0ndW5kZWZpbmVkJzt2YXIgVUE9aW5Ccm93c2VyJiZ3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO3ZhciBpc0lFPVVBJiYvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTt2YXIgaXNJRTk9VUEmJlVBLmluZGV4T2YoJ21zaWUgOS4wJyk+MDt2YXIgaXNFZGdlPVVBJiZVQS5pbmRleE9mKCdlZGdlLycpPjA7dmFyIGlzQW5kcm9pZD1VQSYmVUEuaW5kZXhPZignYW5kcm9pZCcpPjA7dmFyIGlzSU9TPVVBJiYvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpOy8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuXHQvLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxuXHR2YXIgX2lzU2VydmVyO3ZhciBpc1NlcnZlclJlbmRlcmluZz1mdW5jdGlvbiBpc1NlcnZlclJlbmRlcmluZygpe2lmKF9pc1NlcnZlcj09PXVuZGVmaW5lZCl7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoIWluQnJvd3NlciYmdHlwZW9mIGdsb2JhbCE9PSd1bmRlZmluZWQnKXsvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcblx0Ly8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuXHRfaXNTZXJ2ZXI9Z2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlY9PT0nc2VydmVyJzt9ZWxzZXtfaXNTZXJ2ZXI9ZmFsc2U7fX1yZXR1cm4gX2lzU2VydmVyO307Ly8gZGV0ZWN0IGRldnRvb2xzXG5cdHZhciBkZXZ0b29scz1pbkJyb3dzZXImJndpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fOy8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovZnVuY3Rpb24gaXNOYXRpdmUoQ3Rvcil7cmV0dXJuIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpO30vKipcblx0ICogRGVmZXIgYSB0YXNrIHRvIGV4ZWN1dGUgaXQgYXN5bmNocm9ub3VzbHkuXG5cdCAqL3ZhciBuZXh0VGljaz1mdW5jdGlvbigpe3ZhciBjYWxsYmFja3M9W107dmFyIHBlbmRpbmc9ZmFsc2U7dmFyIHRpbWVyRnVuYztmdW5jdGlvbiBuZXh0VGlja0hhbmRsZXIoKXtwZW5kaW5nPWZhbHNlO3ZhciBjb3BpZXM9Y2FsbGJhY2tzLnNsaWNlKDApO2NhbGxiYWNrcy5sZW5ndGg9MDtmb3IodmFyIGk9MDtpPGNvcGllcy5sZW5ndGg7aSsrKXtjb3BpZXNbaV0oKTt9fS8vIHRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG5cdC8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxuXHQvLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cblx0Ly8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcblx0Ly8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxuXHQvLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKHR5cGVvZiBQcm9taXNlIT09J3VuZGVmaW5lZCcmJmlzTmF0aXZlKFByb21pc2UpKXt2YXIgcD1Qcm9taXNlLnJlc29sdmUoKTt2YXIgbG9nRXJyb3I9ZnVuY3Rpb24gbG9nRXJyb3IoZXJyKXtjb25zb2xlLmVycm9yKGVycik7fTt0aW1lckZ1bmM9ZnVuY3Rpb24gdGltZXJGdW5jKCl7cC50aGVuKG5leHRUaWNrSGFuZGxlcikuY2F0Y2gobG9nRXJyb3IpOy8vIGluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuXHQvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcblx0Ly8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcblx0Ly8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG5cdC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuXHRpZihpc0lPUyl7c2V0VGltZW91dChub29wKTt9fTt9ZWxzZSBpZih0eXBlb2YgTXV0YXRpb25PYnNlcnZlciE9PSd1bmRlZmluZWQnJiYoaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcil8fC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuXHRNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCk9PT0nW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJykpey8vIHVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG5cdC8vIGUuZy4gUGhhbnRvbUpTIElFMTEsIGlPUzcsIEFuZHJvaWQgNC40XG5cdHZhciBjb3VudGVyPTE7dmFyIG9ic2VydmVyPW5ldyBNdXRhdGlvbk9ic2VydmVyKG5leHRUaWNrSGFuZGxlcik7dmFyIHRleHROb2RlPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7b2JzZXJ2ZXIub2JzZXJ2ZSh0ZXh0Tm9kZSx7Y2hhcmFjdGVyRGF0YTp0cnVlfSk7dGltZXJGdW5jPWZ1bmN0aW9uIHRpbWVyRnVuYygpe2NvdW50ZXI9KGNvdW50ZXIrMSklMjt0ZXh0Tm9kZS5kYXRhPVN0cmluZyhjb3VudGVyKTt9O31lbHNley8vIGZhbGxiYWNrIHRvIHNldFRpbWVvdXRcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi90aW1lckZ1bmM9ZnVuY3Rpb24gdGltZXJGdW5jKCl7c2V0VGltZW91dChuZXh0VGlja0hhbmRsZXIsMCk7fTt9cmV0dXJuIGZ1bmN0aW9uIHF1ZXVlTmV4dFRpY2soY2IsY3R4KXt2YXIgX3Jlc29sdmU7Y2FsbGJhY2tzLnB1c2goZnVuY3Rpb24oKXtpZihjYil7Y2IuY2FsbChjdHgpO31pZihfcmVzb2x2ZSl7X3Jlc29sdmUoY3R4KTt9fSk7aWYoIXBlbmRpbmcpe3BlbmRpbmc9dHJ1ZTt0aW1lckZ1bmMoKTt9aWYoIWNiJiZ0eXBlb2YgUHJvbWlzZSE9PSd1bmRlZmluZWQnKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSl7X3Jlc29sdmU9cmVzb2x2ZTt9KTt9fTt9KCk7dmFyIF9TZXQ7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYodHlwZW9mIFNldCE9PSd1bmRlZmluZWQnJiZpc05hdGl2ZShTZXQpKXsvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cblx0X1NldD1TZXQ7fWVsc2V7Ly8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuXHRfU2V0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gU2V0KCl7dGhpcy5zZXQ9T2JqZWN0LmNyZWF0ZShudWxsKTt9U2V0LnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24gaGFzKGtleSl7cmV0dXJuIHRoaXMuc2V0W2tleV09PT10cnVlO307U2V0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24gYWRkKGtleSl7dGhpcy5zZXRba2V5XT10cnVlO307U2V0LnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbiBjbGVhcigpe3RoaXMuc2V0PU9iamVjdC5jcmVhdGUobnVsbCk7fTtyZXR1cm4gU2V0O30oKTt9dmFyIHdhcm49bm9vcDt2YXIgZm9ybWF0Q29tcG9uZW50TmFtZTtpZihmYWxzZSl7dmFyIGhhc0NvbnNvbGU9dHlwZW9mIGNvbnNvbGUhPT0ndW5kZWZpbmVkJzt3YXJuPWZ1bmN0aW9uIHdhcm4obXNnLHZtKXtpZihoYXNDb25zb2xlJiYhY29uZmlnLnNpbGVudCl7Y29uc29sZS5lcnJvcihcIltWdWUgd2Fybl06IFwiK21zZytcIiBcIisodm0/Zm9ybWF0TG9jYXRpb24oZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpOicnKSk7fX07Zm9ybWF0Q29tcG9uZW50TmFtZT1mdW5jdGlvbiBmb3JtYXRDb21wb25lbnROYW1lKHZtKXtpZih2bS4kcm9vdD09PXZtKXtyZXR1cm4ncm9vdCBpbnN0YW5jZSc7fXZhciBuYW1lPXZtLl9pc1Z1ZT92bS4kb3B0aW9ucy5uYW1lfHx2bS4kb3B0aW9ucy5fY29tcG9uZW50VGFnOnZtLm5hbWU7cmV0dXJuKG5hbWU/XCJjb21wb25lbnQgPFwiK25hbWUrXCI+XCI6XCJhbm9ueW1vdXMgY29tcG9uZW50XCIpKyh2bS5faXNWdWUmJnZtLiRvcHRpb25zLl9fZmlsZT9cIiBhdCBcIit2bS4kb3B0aW9ucy5fX2ZpbGU6JycpO307dmFyIGZvcm1hdExvY2F0aW9uPWZ1bmN0aW9uIGZvcm1hdExvY2F0aW9uKHN0cil7aWYoc3RyPT09J2Fub255bW91cyBjb21wb25lbnQnKXtzdHIrPVwiIC0gdXNlIHRoZSBcXFwibmFtZVxcXCIgb3B0aW9uIGZvciBiZXR0ZXIgZGVidWdnaW5nIG1lc3NhZ2VzLlwiO31yZXR1cm5cIlxcbihmb3VuZCBpbiBcIitzdHIrXCIpXCI7fTt9LyogICovdmFyIHVpZCQxPTA7LyoqXG5cdCAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuXHQgKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuXHQgKi92YXIgRGVwPWZ1bmN0aW9uIERlcCgpe3RoaXMuaWQ9dWlkJDErKzt0aGlzLnN1YnM9W107fTtEZXAucHJvdG90eXBlLmFkZFN1Yj1mdW5jdGlvbiBhZGRTdWIoc3ViKXt0aGlzLnN1YnMucHVzaChzdWIpO307RGVwLnByb3RvdHlwZS5yZW1vdmVTdWI9ZnVuY3Rpb24gcmVtb3ZlU3ViKHN1Yil7cmVtb3ZlJDEodGhpcy5zdWJzLHN1Yik7fTtEZXAucHJvdG90eXBlLmRlcGVuZD1mdW5jdGlvbiBkZXBlbmQoKXtpZihEZXAudGFyZ2V0KXtEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTt9fTtEZXAucHJvdG90eXBlLm5vdGlmeT1mdW5jdGlvbiBub3RpZnkoKXsvLyBzdGFibGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG5cdHZhciBzdWJzPXRoaXMuc3Vicy5zbGljZSgpO2Zvcih2YXIgaT0wLGw9c3Vicy5sZW5ndGg7aTxsO2krKyl7c3Vic1tpXS51cGRhdGUoKTt9fTsvLyB0aGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG5cdC8vIHRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb25seSBvbmVcblx0Ly8gd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQgYXQgYW55IHRpbWUuXG5cdERlcC50YXJnZXQ9bnVsbDt2YXIgdGFyZ2V0U3RhY2s9W107ZnVuY3Rpb24gcHVzaFRhcmdldChfdGFyZ2V0KXtpZihEZXAudGFyZ2V0KXt0YXJnZXRTdGFjay5wdXNoKERlcC50YXJnZXQpO31EZXAudGFyZ2V0PV90YXJnZXQ7fWZ1bmN0aW9uIHBvcFRhcmdldCgpe0RlcC50YXJnZXQ9dGFyZ2V0U3RhY2sucG9wKCk7fS8qXG5cdCAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuXHQgKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcblx0ICovdmFyIGFycmF5UHJvdG89QXJyYXkucHJvdG90eXBlO3ZhciBhcnJheU1ldGhvZHM9T2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtbJ3B1c2gnLCdwb3AnLCdzaGlmdCcsJ3Vuc2hpZnQnLCdzcGxpY2UnLCdzb3J0JywncmV2ZXJzZSddLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKXsvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2Rcblx0dmFyIG9yaWdpbmFsPWFycmF5UHJvdG9bbWV0aG9kXTtkZWYoYXJyYXlNZXRob2RzLG1ldGhvZCxmdW5jdGlvbiBtdXRhdG9yKCl7dmFyIGFyZ3VtZW50cyQxPWFyZ3VtZW50czsvLyBhdm9pZCBsZWFraW5nIGFyZ3VtZW50czpcblx0Ly8gaHR0cDovL2pzcGVyZi5jb20vY2xvc3VyZS13aXRoLWFyZ3VtZW50c1xuXHR2YXIgaT1hcmd1bWVudHMubGVuZ3RoO3ZhciBhcmdzPW5ldyBBcnJheShpKTt3aGlsZShpLS0pe2FyZ3NbaV09YXJndW1lbnRzJDFbaV07fXZhciByZXN1bHQ9b3JpZ2luYWwuYXBwbHkodGhpcyxhcmdzKTt2YXIgb2I9dGhpcy5fX29iX187dmFyIGluc2VydGVkO3N3aXRjaChtZXRob2Qpe2Nhc2UncHVzaCc6aW5zZXJ0ZWQ9YXJnczticmVhaztjYXNlJ3Vuc2hpZnQnOmluc2VydGVkPWFyZ3M7YnJlYWs7Y2FzZSdzcGxpY2UnOmluc2VydGVkPWFyZ3Muc2xpY2UoMik7YnJlYWs7fWlmKGluc2VydGVkKXtvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpO30vLyBub3RpZnkgY2hhbmdlXG5cdG9iLmRlcC5ub3RpZnkoKTtyZXR1cm4gcmVzdWx0O30pO30pOy8qICAqL3ZhciBhcnJheUtleXM9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTsvKipcblx0ICogQnkgZGVmYXVsdCwgd2hlbiBhIHJlYWN0aXZlIHByb3BlcnR5IGlzIHNldCwgdGhlIG5ldyB2YWx1ZSBpc1xuXHQgKiBhbHNvIGNvbnZlcnRlZCB0byBiZWNvbWUgcmVhY3RpdmUuIEhvd2V2ZXIgd2hlbiBwYXNzaW5nIGRvd24gcHJvcHMsXG5cdCAqIHdlIGRvbid0IHdhbnQgdG8gZm9yY2UgY29udmVyc2lvbiBiZWNhdXNlIHRoZSB2YWx1ZSBtYXkgYmUgYSBuZXN0ZWQgdmFsdWVcblx0ICogdW5kZXIgYSBmcm96ZW4gZGF0YSBzdHJ1Y3R1cmUuIENvbnZlcnRpbmcgaXQgd291bGQgZGVmZWF0IHRoZSBvcHRpbWl6YXRpb24uXG5cdCAqL3ZhciBvYnNlcnZlclN0YXRlPXtzaG91bGRDb252ZXJ0OnRydWUsaXNTZXR0aW5nUHJvcHM6ZmFsc2V9Oy8qKlxuXHQgKiBPYnNlcnZlciBjbGFzcyB0aGF0IGFyZSBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG5cdCAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRhcmdldFxuXHQgKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuXHQgKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2hlcyB1cGRhdGVzLlxuXHQgKi92YXIgT2JzZXJ2ZXI9ZnVuY3Rpb24gT2JzZXJ2ZXIodmFsdWUpe3RoaXMudmFsdWU9dmFsdWU7dGhpcy5kZXA9bmV3IERlcCgpO3RoaXMudm1Db3VudD0wO2RlZih2YWx1ZSwnX19vYl9fJyx0aGlzKTtpZihBcnJheS5pc0FycmF5KHZhbHVlKSl7dmFyIGF1Z21lbnQ9aGFzUHJvdG8/cHJvdG9BdWdtZW50OmNvcHlBdWdtZW50O2F1Z21lbnQodmFsdWUsYXJyYXlNZXRob2RzLGFycmF5S2V5cyk7dGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO31lbHNle3RoaXMud2Fsayh2YWx1ZSk7fX07LyoqXG5cdCAqIFdhbGsgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuXHQgKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cblx0ICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG5cdCAqL09ic2VydmVyLnByb3RvdHlwZS53YWxrPWZ1bmN0aW9uIHdhbGsob2JqKXt2YXIga2V5cz1PYmplY3Qua2V5cyhvYmopO2Zvcih2YXIgaT0wO2k8a2V5cy5sZW5ndGg7aSsrKXtkZWZpbmVSZWFjdGl2ZSQkMShvYmosa2V5c1tpXSxvYmpba2V5c1tpXV0pO319Oy8qKlxuXHQgKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cblx0ICovT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheT1mdW5jdGlvbiBvYnNlcnZlQXJyYXkoaXRlbXMpe2Zvcih2YXIgaT0wLGw9aXRlbXMubGVuZ3RoO2k8bDtpKyspe29ic2VydmUoaXRlbXNbaV0pO319Oy8vIGhlbHBlcnNcblx0LyoqXG5cdCAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcblx0ICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cblx0ICovZnVuY3Rpb24gcHJvdG9BdWdtZW50KHRhcmdldCxzcmMpey8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovdGFyZ2V0Ll9fcHJvdG9fXz1zcmM7LyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL30vKipcblx0ICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG5cdCAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuXHQgKi8vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL2Z1bmN0aW9uIGNvcHlBdWdtZW50KHRhcmdldCxzcmMsa2V5cyl7Zm9yKHZhciBpPTAsbD1rZXlzLmxlbmd0aDtpPGw7aSsrKXt2YXIga2V5PWtleXNbaV07ZGVmKHRhcmdldCxrZXksc3JjW2tleV0pO319LyoqXG5cdCAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuXHQgKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuXHQgKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cblx0ICovZnVuY3Rpb24gb2JzZXJ2ZSh2YWx1ZSxhc1Jvb3REYXRhKXtpZighaXNPYmplY3QodmFsdWUpKXtyZXR1cm47fXZhciBvYjtpZihoYXNPd24odmFsdWUsJ19fb2JfXycpJiZ2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcil7b2I9dmFsdWUuX19vYl9fO31lbHNlIGlmKG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCYmIWlzU2VydmVyUmVuZGVyaW5nKCkmJihBcnJheS5pc0FycmF5KHZhbHVlKXx8aXNQbGFpbk9iamVjdCh2YWx1ZSkpJiZPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSYmIXZhbHVlLl9pc1Z1ZSl7b2I9bmV3IE9ic2VydmVyKHZhbHVlKTt9aWYoYXNSb290RGF0YSYmb2Ipe29iLnZtQ291bnQrKzt9cmV0dXJuIG9iO30vKipcblx0ICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuXHQgKi9mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMShvYmosa2V5LHZhbCxjdXN0b21TZXR0ZXIpe3ZhciBkZXA9bmV3IERlcCgpO3ZhciBwcm9wZXJ0eT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaixrZXkpO2lmKHByb3BlcnR5JiZwcm9wZXJ0eS5jb25maWd1cmFibGU9PT1mYWxzZSl7cmV0dXJuO30vLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcblx0dmFyIGdldHRlcj1wcm9wZXJ0eSYmcHJvcGVydHkuZ2V0O3ZhciBzZXR0ZXI9cHJvcGVydHkmJnByb3BlcnR5LnNldDt2YXIgY2hpbGRPYj1vYnNlcnZlKHZhbCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaixrZXkse2VudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIoKXt2YXIgdmFsdWU9Z2V0dGVyP2dldHRlci5jYWxsKG9iaik6dmFsO2lmKERlcC50YXJnZXQpe2RlcC5kZXBlbmQoKTtpZihjaGlsZE9iKXtjaGlsZE9iLmRlcC5kZXBlbmQoKTt9aWYoQXJyYXkuaXNBcnJheSh2YWx1ZSkpe2RlcGVuZEFycmF5KHZhbHVlKTt9fXJldHVybiB2YWx1ZTt9LHNldDpmdW5jdGlvbiByZWFjdGl2ZVNldHRlcihuZXdWYWwpe3ZhciB2YWx1ZT1nZXR0ZXI/Z2V0dGVyLmNhbGwob2JqKTp2YWw7LyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovaWYobmV3VmFsPT09dmFsdWV8fG5ld1ZhbCE9PW5ld1ZhbCYmdmFsdWUhPT12YWx1ZSl7cmV0dXJuO30vKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL2lmKGZhbHNlKXtjdXN0b21TZXR0ZXIoKTt9aWYoc2V0dGVyKXtzZXR0ZXIuY2FsbChvYmosbmV3VmFsKTt9ZWxzZXt2YWw9bmV3VmFsO31jaGlsZE9iPW9ic2VydmUobmV3VmFsKTtkZXAubm90aWZ5KCk7fX0pO30vKipcblx0ICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG5cdCAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3Rcblx0ICogYWxyZWFkeSBleGlzdC5cblx0ICovZnVuY3Rpb24gc2V0JDEob2JqLGtleSx2YWwpe2lmKEFycmF5LmlzQXJyYXkob2JqKSl7b2JqLmxlbmd0aD1NYXRoLm1heChvYmoubGVuZ3RoLGtleSk7b2JqLnNwbGljZShrZXksMSx2YWwpO3JldHVybiB2YWw7fWlmKGhhc093bihvYmosa2V5KSl7b2JqW2tleV09dmFsO3JldHVybjt9dmFyIG9iPW9iai5fX29iX187aWYob2JqLl9pc1Z1ZXx8b2ImJm9iLnZtQ291bnQpeyhcInByb2R1Y3Rpb25cIikhPT0ncHJvZHVjdGlvbicmJndhcm4oJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcrJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLicpO3JldHVybjt9aWYoIW9iKXtvYmpba2V5XT12YWw7cmV0dXJuO31kZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSxrZXksdmFsKTtvYi5kZXAubm90aWZ5KCk7cmV0dXJuIHZhbDt9LyoqXG5cdCAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG5cdCAqL2Z1bmN0aW9uIGRlbChvYmosa2V5KXt2YXIgb2I9b2JqLl9fb2JfXztpZihvYmouX2lzVnVlfHxvYiYmb2Iudm1Db3VudCl7KFwicHJvZHVjdGlvblwiKSE9PSdwcm9kdWN0aW9uJyYmd2FybignQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnKyctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJyk7cmV0dXJuO31pZighaGFzT3duKG9iaixrZXkpKXtyZXR1cm47fWRlbGV0ZSBvYmpba2V5XTtpZighb2Ipe3JldHVybjt9b2IuZGVwLm5vdGlmeSgpO30vKipcblx0ICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2Vcblx0ICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG5cdCAqL2Z1bmN0aW9uIGRlcGVuZEFycmF5KHZhbHVlKXtmb3IodmFyIGU9dm9pZCAwLGk9MCxsPXZhbHVlLmxlbmd0aDtpPGw7aSsrKXtlPXZhbHVlW2ldO2UmJmUuX19vYl9fJiZlLl9fb2JfXy5kZXAuZGVwZW5kKCk7aWYoQXJyYXkuaXNBcnJheShlKSl7ZGVwZW5kQXJyYXkoZSk7fX19LyogICovLyoqXG5cdCAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcblx0ICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cblx0ICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG5cdCAqL3ZhciBzdHJhdHM9Y29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llczsvKipcblx0ICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuXHQgKi9pZihmYWxzZSl7c3RyYXRzLmVsPXN0cmF0cy5wcm9wc0RhdGE9ZnVuY3Rpb24ocGFyZW50LGNoaWxkLHZtLGtleSl7aWYoIXZtKXt3YXJuKFwib3B0aW9uIFxcXCJcIitrZXkrXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiKydjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLicpO31yZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCxjaGlsZCk7fTt9LyoqXG5cdCAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuXHQgKi9mdW5jdGlvbiBtZXJnZURhdGEodG8sZnJvbSl7aWYoIWZyb20pe3JldHVybiB0bzt9dmFyIGtleSx0b1ZhbCxmcm9tVmFsO3ZhciBrZXlzPU9iamVjdC5rZXlzKGZyb20pO2Zvcih2YXIgaT0wO2k8a2V5cy5sZW5ndGg7aSsrKXtrZXk9a2V5c1tpXTt0b1ZhbD10b1trZXldO2Zyb21WYWw9ZnJvbVtrZXldO2lmKCFoYXNPd24odG8sa2V5KSl7c2V0JDEodG8sa2V5LGZyb21WYWwpO31lbHNlIGlmKGlzUGxhaW5PYmplY3QodG9WYWwpJiZpc1BsYWluT2JqZWN0KGZyb21WYWwpKXttZXJnZURhdGEodG9WYWwsZnJvbVZhbCk7fX1yZXR1cm4gdG87fS8qKlxuXHQgKiBEYXRhXG5cdCAqL3N0cmF0cy5kYXRhPWZ1bmN0aW9uKHBhcmVudFZhbCxjaGlsZFZhbCx2bSl7aWYoIXZtKXsvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuXHRpZighY2hpbGRWYWwpe3JldHVybiBwYXJlbnRWYWw7fWlmKHR5cGVvZiBjaGlsZFZhbCE9PSdmdW5jdGlvbicpeyhcInByb2R1Y3Rpb25cIikhPT0ncHJvZHVjdGlvbicmJndhcm4oJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJysndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnKydkZWZpbml0aW9ucy4nLHZtKTtyZXR1cm4gcGFyZW50VmFsO31pZighcGFyZW50VmFsKXtyZXR1cm4gY2hpbGRWYWw7fS8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcblx0Ly8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG5cdC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuXHQvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2Vcblx0Ly8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG5cdHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4oKXtyZXR1cm4gbWVyZ2VEYXRhKGNoaWxkVmFsLmNhbGwodGhpcykscGFyZW50VmFsLmNhbGwodGhpcykpO307fWVsc2UgaWYocGFyZW50VmFsfHxjaGlsZFZhbCl7cmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuKCl7Ly8gaW5zdGFuY2UgbWVyZ2Vcblx0dmFyIGluc3RhbmNlRGF0YT10eXBlb2YgY2hpbGRWYWw9PT0nZnVuY3Rpb24nP2NoaWxkVmFsLmNhbGwodm0pOmNoaWxkVmFsO3ZhciBkZWZhdWx0RGF0YT10eXBlb2YgcGFyZW50VmFsPT09J2Z1bmN0aW9uJz9wYXJlbnRWYWwuY2FsbCh2bSk6dW5kZWZpbmVkO2lmKGluc3RhbmNlRGF0YSl7cmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsZGVmYXVsdERhdGEpO31lbHNle3JldHVybiBkZWZhdWx0RGF0YTt9fTt9fTsvKipcblx0ICogSG9va3MgYW5kIHBhcmFtIGF0dHJpYnV0ZXMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG5cdCAqL2Z1bmN0aW9uIG1lcmdlSG9vayhwYXJlbnRWYWwsY2hpbGRWYWwpe3JldHVybiBjaGlsZFZhbD9wYXJlbnRWYWw/cGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbCk6QXJyYXkuaXNBcnJheShjaGlsZFZhbCk/Y2hpbGRWYWw6W2NoaWxkVmFsXTpwYXJlbnRWYWw7fWNvbmZpZy5fbGlmZWN5Y2xlSG9va3MuZm9yRWFjaChmdW5jdGlvbihob29rKXtzdHJhdHNbaG9va109bWVyZ2VIb29rO30pOy8qKlxuXHQgKiBBc3NldHNcblx0ICpcblx0ICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuXHQgKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG5cdCAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuXHQgKi9mdW5jdGlvbiBtZXJnZUFzc2V0cyhwYXJlbnRWYWwsY2hpbGRWYWwpe3ZhciByZXM9T2JqZWN0LmNyZWF0ZShwYXJlbnRWYWx8fG51bGwpO3JldHVybiBjaGlsZFZhbD9leHRlbmQocmVzLGNoaWxkVmFsKTpyZXM7fWNvbmZpZy5fYXNzZXRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUpe3N0cmF0c1t0eXBlKydzJ109bWVyZ2VBc3NldHM7fSk7LyoqXG5cdCAqIFdhdGNoZXJzLlxuXHQgKlxuXHQgKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG5cdCAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuXHQgKi9zdHJhdHMud2F0Y2g9ZnVuY3Rpb24ocGFyZW50VmFsLGNoaWxkVmFsKXsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZighY2hpbGRWYWwpe3JldHVybiBwYXJlbnRWYWw7fWlmKCFwYXJlbnRWYWwpe3JldHVybiBjaGlsZFZhbDt9dmFyIHJldD17fTtleHRlbmQocmV0LHBhcmVudFZhbCk7Zm9yKHZhciBrZXkgaW4gY2hpbGRWYWwpe3ZhciBwYXJlbnQ9cmV0W2tleV07dmFyIGNoaWxkPWNoaWxkVmFsW2tleV07aWYocGFyZW50JiYhQXJyYXkuaXNBcnJheShwYXJlbnQpKXtwYXJlbnQ9W3BhcmVudF07fXJldFtrZXldPXBhcmVudD9wYXJlbnQuY29uY2F0KGNoaWxkKTpbY2hpbGRdO31yZXR1cm4gcmV0O307LyoqXG5cdCAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG5cdCAqL3N0cmF0cy5wcm9wcz1zdHJhdHMubWV0aG9kcz1zdHJhdHMuY29tcHV0ZWQ9ZnVuY3Rpb24ocGFyZW50VmFsLGNoaWxkVmFsKXtpZighY2hpbGRWYWwpe3JldHVybiBwYXJlbnRWYWw7fWlmKCFwYXJlbnRWYWwpe3JldHVybiBjaGlsZFZhbDt9dmFyIHJldD1PYmplY3QuY3JlYXRlKG51bGwpO2V4dGVuZChyZXQscGFyZW50VmFsKTtleHRlbmQocmV0LGNoaWxkVmFsKTtyZXR1cm4gcmV0O307LyoqXG5cdCAqIERlZmF1bHQgc3RyYXRlZ3kuXG5cdCAqL3ZhciBkZWZhdWx0U3RyYXQ9ZnVuY3Rpb24gZGVmYXVsdFN0cmF0KHBhcmVudFZhbCxjaGlsZFZhbCl7cmV0dXJuIGNoaWxkVmFsPT09dW5kZWZpbmVkP3BhcmVudFZhbDpjaGlsZFZhbDt9Oy8qKlxuXHQgKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcblx0ICovZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzKG9wdGlvbnMpe2Zvcih2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cyl7dmFyIGxvd2VyPWtleS50b0xvd2VyQ2FzZSgpO2lmKGlzQnVpbHRJblRhZyhsb3dlcil8fGNvbmZpZy5pc1Jlc2VydmVkVGFnKGxvd2VyKSl7d2FybignRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnKydpZDogJytrZXkpO319fS8qKlxuXHQgKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcblx0ICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cblx0ICovZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMob3B0aW9ucyl7dmFyIHByb3BzPW9wdGlvbnMucHJvcHM7aWYoIXByb3BzKXtyZXR1cm47fXZhciByZXM9e307dmFyIGksdmFsLG5hbWU7aWYoQXJyYXkuaXNBcnJheShwcm9wcykpe2k9cHJvcHMubGVuZ3RoO3doaWxlKGktLSl7dmFsPXByb3BzW2ldO2lmKHR5cGVvZiB2YWw9PT0nc3RyaW5nJyl7bmFtZT1jYW1lbGl6ZSh2YWwpO3Jlc1tuYW1lXT17dHlwZTpudWxsfTt9ZWxzZSBpZihmYWxzZSl7d2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO319fWVsc2UgaWYoaXNQbGFpbk9iamVjdChwcm9wcykpe2Zvcih2YXIga2V5IGluIHByb3BzKXt2YWw9cHJvcHNba2V5XTtuYW1lPWNhbWVsaXplKGtleSk7cmVzW25hbWVdPWlzUGxhaW5PYmplY3QodmFsKT92YWw6e3R5cGU6dmFsfTt9fW9wdGlvbnMucHJvcHM9cmVzO30vKipcblx0ICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cblx0ICovZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyhvcHRpb25zKXt2YXIgZGlycz1vcHRpb25zLmRpcmVjdGl2ZXM7aWYoZGlycyl7Zm9yKHZhciBrZXkgaW4gZGlycyl7dmFyIGRlZj1kaXJzW2tleV07aWYodHlwZW9mIGRlZj09PSdmdW5jdGlvbicpe2RpcnNba2V5XT17YmluZDpkZWYsdXBkYXRlOmRlZn07fX19fS8qKlxuXHQgKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG5cdCAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG5cdCAqL2Z1bmN0aW9uIG1lcmdlT3B0aW9ucyhwYXJlbnQsY2hpbGQsdm0pe2lmKGZhbHNlKXtjaGVja0NvbXBvbmVudHMoY2hpbGQpO31ub3JtYWxpemVQcm9wcyhjaGlsZCk7bm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7dmFyIGV4dGVuZHNGcm9tPWNoaWxkLmV4dGVuZHM7aWYoZXh0ZW5kc0Zyb20pe3BhcmVudD10eXBlb2YgZXh0ZW5kc0Zyb209PT0nZnVuY3Rpb24nP21lcmdlT3B0aW9ucyhwYXJlbnQsZXh0ZW5kc0Zyb20ub3B0aW9ucyx2bSk6bWVyZ2VPcHRpb25zKHBhcmVudCxleHRlbmRzRnJvbSx2bSk7fWlmKGNoaWxkLm1peGlucyl7Zm9yKHZhciBpPTAsbD1jaGlsZC5taXhpbnMubGVuZ3RoO2k8bDtpKyspe3ZhciBtaXhpbj1jaGlsZC5taXhpbnNbaV07aWYobWl4aW4ucHJvdG90eXBlIGluc3RhbmNlb2YgVnVlJDMpe21peGluPW1peGluLm9wdGlvbnM7fXBhcmVudD1tZXJnZU9wdGlvbnMocGFyZW50LG1peGluLHZtKTt9fXZhciBvcHRpb25zPXt9O3ZhciBrZXk7Zm9yKGtleSBpbiBwYXJlbnQpe21lcmdlRmllbGQoa2V5KTt9Zm9yKGtleSBpbiBjaGlsZCl7aWYoIWhhc093bihwYXJlbnQsa2V5KSl7bWVyZ2VGaWVsZChrZXkpO319ZnVuY3Rpb24gbWVyZ2VGaWVsZChrZXkpe3ZhciBzdHJhdD1zdHJhdHNba2V5XXx8ZGVmYXVsdFN0cmF0O29wdGlvbnNba2V5XT1zdHJhdChwYXJlbnRba2V5XSxjaGlsZFtrZXldLHZtLGtleSk7fXJldHVybiBvcHRpb25zO30vKipcblx0ICogUmVzb2x2ZSBhbiBhc3NldC5cblx0ICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG5cdCAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cblx0ICovZnVuY3Rpb24gcmVzb2x2ZUFzc2V0KG9wdGlvbnMsdHlwZSxpZCx3YXJuTWlzc2luZyl7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYodHlwZW9mIGlkIT09J3N0cmluZycpe3JldHVybjt9dmFyIGFzc2V0cz1vcHRpb25zW3R5cGVdOy8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG5cdGlmKGhhc093bihhc3NldHMsaWQpKXtyZXR1cm4gYXNzZXRzW2lkXTt9dmFyIGNhbWVsaXplZElkPWNhbWVsaXplKGlkKTtpZihoYXNPd24oYXNzZXRzLGNhbWVsaXplZElkKSl7cmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF07fXZhciBQYXNjYWxDYXNlSWQ9Y2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7aWYoaGFzT3duKGFzc2V0cyxQYXNjYWxDYXNlSWQpKXtyZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF07fS8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuXHR2YXIgcmVzPWFzc2V0c1tpZF18fGFzc2V0c1tjYW1lbGl6ZWRJZF18fGFzc2V0c1tQYXNjYWxDYXNlSWRdO2lmKGZhbHNlKXt3YXJuKCdGYWlsZWQgdG8gcmVzb2x2ZSAnK3R5cGUuc2xpY2UoMCwtMSkrJzogJytpZCxvcHRpb25zKTt9cmV0dXJuIHJlczt9LyogICovZnVuY3Rpb24gdmFsaWRhdGVQcm9wKGtleSxwcm9wT3B0aW9ucyxwcm9wc0RhdGEsdm0pe3ZhciBwcm9wPXByb3BPcHRpb25zW2tleV07dmFyIGFic2VudD0haGFzT3duKHByb3BzRGF0YSxrZXkpO3ZhciB2YWx1ZT1wcm9wc0RhdGFba2V5XTsvLyBoYW5kbGUgYm9vbGVhbiBwcm9wc1xuXHRpZihpc1R5cGUoQm9vbGVhbixwcm9wLnR5cGUpKXtpZihhYnNlbnQmJiFoYXNPd24ocHJvcCwnZGVmYXVsdCcpKXt2YWx1ZT1mYWxzZTt9ZWxzZSBpZighaXNUeXBlKFN0cmluZyxwcm9wLnR5cGUpJiYodmFsdWU9PT0nJ3x8dmFsdWU9PT1oeXBoZW5hdGUoa2V5KSkpe3ZhbHVlPXRydWU7fX0vLyBjaGVjayBkZWZhdWx0IHZhbHVlXG5cdGlmKHZhbHVlPT09dW5kZWZpbmVkKXt2YWx1ZT1nZXRQcm9wRGVmYXVsdFZhbHVlKHZtLHByb3Asa2V5KTsvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG5cdC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuXHR2YXIgcHJldlNob3VsZENvbnZlcnQ9b2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0O29ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydD10cnVlO29ic2VydmUodmFsdWUpO29ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydD1wcmV2U2hvdWxkQ29udmVydDt9aWYoZmFsc2Upe2Fzc2VydFByb3AocHJvcCxrZXksdmFsdWUsdm0sYWJzZW50KTt9cmV0dXJuIHZhbHVlO30vKipcblx0ICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cblx0ICovZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSxwcm9wLGtleSl7Ly8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuXHRpZighaGFzT3duKHByb3AsJ2RlZmF1bHQnKSl7cmV0dXJuIHVuZGVmaW5lZDt9dmFyIGRlZj1wcm9wLmRlZmF1bHQ7Ly8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuXHRpZihpc09iamVjdChkZWYpKXsoXCJwcm9kdWN0aW9uXCIpIT09J3Byb2R1Y3Rpb24nJiZ3YXJuKCdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInK2tleSsnXCI6ICcrJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcrJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLHZtKTt9Ly8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcblx0Ly8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG5cdGlmKHZtJiZ2bS4kb3B0aW9ucy5wcm9wc0RhdGEmJnZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldPT09dW5kZWZpbmVkJiZ2bVtrZXldIT09dW5kZWZpbmVkKXtyZXR1cm4gdm1ba2V5XTt9Ly8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcblx0cmV0dXJuIHR5cGVvZiBkZWY9PT0nZnVuY3Rpb24nJiZwcm9wLnR5cGUhPT1GdW5jdGlvbj9kZWYuY2FsbCh2bSk6ZGVmO30vKipcblx0ICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuXHQgKi9mdW5jdGlvbiBhc3NlcnRQcm9wKHByb3AsbmFtZSx2YWx1ZSx2bSxhYnNlbnQpe2lmKHByb3AucmVxdWlyZWQmJmFic2VudCl7d2FybignTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicrbmFtZSsnXCInLHZtKTtyZXR1cm47fWlmKHZhbHVlPT1udWxsJiYhcHJvcC5yZXF1aXJlZCl7cmV0dXJuO312YXIgdHlwZT1wcm9wLnR5cGU7dmFyIHZhbGlkPSF0eXBlfHx0eXBlPT09dHJ1ZTt2YXIgZXhwZWN0ZWRUeXBlcz1bXTtpZih0eXBlKXtpZighQXJyYXkuaXNBcnJheSh0eXBlKSl7dHlwZT1bdHlwZV07fWZvcih2YXIgaT0wO2k8dHlwZS5sZW5ndGgmJiF2YWxpZDtpKyspe3ZhciBhc3NlcnRlZFR5cGU9YXNzZXJ0VHlwZSh2YWx1ZSx0eXBlW2ldKTtleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZXx8JycpO3ZhbGlkPWFzc2VydGVkVHlwZS52YWxpZDt9fWlmKCF2YWxpZCl7d2FybignSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicrbmFtZSsnXCIuJysnIEV4cGVjdGVkICcrZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSsnLCBnb3QgJytPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsLTEpKycuJyx2bSk7cmV0dXJuO312YXIgdmFsaWRhdG9yPXByb3AudmFsaWRhdG9yO2lmKHZhbGlkYXRvcil7aWYoIXZhbGlkYXRvcih2YWx1ZSkpe3dhcm4oJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInK25hbWUrJ1wiLicsdm0pO319fS8qKlxuXHQgKiBBc3NlcnQgdGhlIHR5cGUgb2YgYSB2YWx1ZVxuXHQgKi9mdW5jdGlvbiBhc3NlcnRUeXBlKHZhbHVlLHR5cGUpe3ZhciB2YWxpZDt2YXIgZXhwZWN0ZWRUeXBlPWdldFR5cGUodHlwZSk7aWYoZXhwZWN0ZWRUeXBlPT09J1N0cmluZycpe3ZhbGlkPSh0eXBlb2YgdmFsdWU9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKHZhbHVlKSk9PT0oZXhwZWN0ZWRUeXBlPSdzdHJpbmcnKTt9ZWxzZSBpZihleHBlY3RlZFR5cGU9PT0nTnVtYmVyJyl7dmFsaWQ9KHR5cGVvZiB2YWx1ZT09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YodmFsdWUpKT09PShleHBlY3RlZFR5cGU9J251bWJlcicpO31lbHNlIGlmKGV4cGVjdGVkVHlwZT09PSdCb29sZWFuJyl7dmFsaWQ9KHR5cGVvZiB2YWx1ZT09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YodmFsdWUpKT09PShleHBlY3RlZFR5cGU9J2Jvb2xlYW4nKTt9ZWxzZSBpZihleHBlY3RlZFR5cGU9PT0nRnVuY3Rpb24nKXt2YWxpZD0odHlwZW9mIHZhbHVlPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZih2YWx1ZSkpPT09KGV4cGVjdGVkVHlwZT0nZnVuY3Rpb24nKTt9ZWxzZSBpZihleHBlY3RlZFR5cGU9PT0nT2JqZWN0Jyl7dmFsaWQ9aXNQbGFpbk9iamVjdCh2YWx1ZSk7fWVsc2UgaWYoZXhwZWN0ZWRUeXBlPT09J0FycmF5Jyl7dmFsaWQ9QXJyYXkuaXNBcnJheSh2YWx1ZSk7fWVsc2V7dmFsaWQ9dmFsdWUgaW5zdGFuY2VvZiB0eXBlO31yZXR1cm57dmFsaWQ6dmFsaWQsZXhwZWN0ZWRUeXBlOmV4cGVjdGVkVHlwZX07fS8qKlxuXHQgKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG5cdCAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuXHQgKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG5cdCAqL2Z1bmN0aW9uIGdldFR5cGUoZm4pe3ZhciBtYXRjaD1mbiYmZm4udG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtyZXR1cm4gbWF0Y2gmJm1hdGNoWzFdO31mdW5jdGlvbiBpc1R5cGUodHlwZSxmbil7aWYoIUFycmF5LmlzQXJyYXkoZm4pKXtyZXR1cm4gZ2V0VHlwZShmbik9PT1nZXRUeXBlKHR5cGUpO31mb3IodmFyIGk9MCxsZW49Zm4ubGVuZ3RoO2k8bGVuO2krKyl7aWYoZ2V0VHlwZShmbltpXSk9PT1nZXRUeXBlKHR5cGUpKXtyZXR1cm4gdHJ1ZTt9fS8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovcmV0dXJuIGZhbHNlO312YXIgdXRpbD1PYmplY3QuZnJlZXplKHtkZWZpbmVSZWFjdGl2ZTpkZWZpbmVSZWFjdGl2ZSQkMSxfdG9TdHJpbmc6X3RvU3RyaW5nLHRvTnVtYmVyOnRvTnVtYmVyLG1ha2VNYXA6bWFrZU1hcCxpc0J1aWx0SW5UYWc6aXNCdWlsdEluVGFnLHJlbW92ZTpyZW1vdmUkMSxoYXNPd246aGFzT3duLGlzUHJpbWl0aXZlOmlzUHJpbWl0aXZlLGNhY2hlZDpjYWNoZWQsY2FtZWxpemU6Y2FtZWxpemUsY2FwaXRhbGl6ZTpjYXBpdGFsaXplLGh5cGhlbmF0ZTpoeXBoZW5hdGUsYmluZDpiaW5kJDEsdG9BcnJheTp0b0FycmF5LGV4dGVuZDpleHRlbmQsaXNPYmplY3Q6aXNPYmplY3QsaXNQbGFpbk9iamVjdDppc1BsYWluT2JqZWN0LHRvT2JqZWN0OnRvT2JqZWN0LG5vb3A6bm9vcCxubzpubyxpZGVudGl0eTppZGVudGl0eSxnZW5TdGF0aWNLZXlzOmdlblN0YXRpY0tleXMsbG9vc2VFcXVhbDpsb29zZUVxdWFsLGxvb3NlSW5kZXhPZjpsb29zZUluZGV4T2YsaXNSZXNlcnZlZDppc1Jlc2VydmVkLGRlZjpkZWYscGFyc2VQYXRoOnBhcnNlUGF0aCxoYXNQcm90bzpoYXNQcm90byxpbkJyb3dzZXI6aW5Ccm93c2VyLFVBOlVBLGlzSUU6aXNJRSxpc0lFOTppc0lFOSxpc0VkZ2U6aXNFZGdlLGlzQW5kcm9pZDppc0FuZHJvaWQsaXNJT1M6aXNJT1MsaXNTZXJ2ZXJSZW5kZXJpbmc6aXNTZXJ2ZXJSZW5kZXJpbmcsZGV2dG9vbHM6ZGV2dG9vbHMsbmV4dFRpY2s6bmV4dFRpY2ssZ2V0IF9TZXQoKXtyZXR1cm4gX1NldDt9LG1lcmdlT3B0aW9uczptZXJnZU9wdGlvbnMscmVzb2x2ZUFzc2V0OnJlc29sdmVBc3NldCxnZXQgd2Fybigpe3JldHVybiB3YXJuO30sZ2V0IGZvcm1hdENvbXBvbmVudE5hbWUoKXtyZXR1cm4gZm9ybWF0Q29tcG9uZW50TmFtZTt9LHZhbGlkYXRlUHJvcDp2YWxpZGF0ZVByb3B9KTsvKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi92YXIgaW5pdFByb3h5O2lmKGZhbHNlKXt2YXIgYWxsb3dlZEdsb2JhbHM9bWFrZU1hcCgnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnKydwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnKydNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJysncmVxdWlyZScvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG5cdCk7dmFyIHdhcm5Ob25QcmVzZW50PWZ1bmN0aW9uIHdhcm5Ob25QcmVzZW50KHRhcmdldCxrZXkpe3dhcm4oXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiK2tleStcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIitcInJlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRvIGRlY2xhcmUgcmVhY3RpdmUgZGF0YSBcIitcInByb3BlcnRpZXMgaW4gdGhlIGRhdGEgb3B0aW9uLlwiLHRhcmdldCk7fTt2YXIgaGFzUHJveHk9dHlwZW9mIFByb3h5IT09J3VuZGVmaW5lZCcmJlByb3h5LnRvU3RyaW5nKCkubWF0Y2goL25hdGl2ZSBjb2RlLyk7aWYoaGFzUHJveHkpe3ZhciBpc0J1aWx0SW5Nb2RpZmllcj1tYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhJyk7Y29uZmlnLmtleUNvZGVzPW5ldyBQcm94eShjb25maWcua2V5Q29kZXMse3NldDpmdW5jdGlvbiBzZXQodGFyZ2V0LGtleSx2YWx1ZSl7aWYoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSl7d2FybihcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiK2tleSk7cmV0dXJuIGZhbHNlO31lbHNle3RhcmdldFtrZXldPXZhbHVlO3JldHVybiB0cnVlO319fSk7fXZhciBoYXNIYW5kbGVyPXtoYXM6ZnVuY3Rpb24gaGFzKHRhcmdldCxrZXkpe3ZhciBoYXM9a2V5IGluIHRhcmdldDt2YXIgaXNBbGxvd2VkPWFsbG93ZWRHbG9iYWxzKGtleSl8fGtleS5jaGFyQXQoMCk9PT0nXyc7aWYoIWhhcyYmIWlzQWxsb3dlZCl7d2Fybk5vblByZXNlbnQodGFyZ2V0LGtleSk7fXJldHVybiBoYXN8fCFpc0FsbG93ZWQ7fX07dmFyIGdldEhhbmRsZXI9e2dldDpmdW5jdGlvbiBnZXQodGFyZ2V0LGtleSl7aWYodHlwZW9mIGtleT09PSdzdHJpbmcnJiYhKGtleSBpbiB0YXJnZXQpKXt3YXJuTm9uUHJlc2VudCh0YXJnZXQsa2V5KTt9cmV0dXJuIHRhcmdldFtrZXldO319O2luaXRQcm94eT1mdW5jdGlvbiBpbml0UHJveHkodm0pe2lmKGhhc1Byb3h5KXsvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2Vcblx0dmFyIG9wdGlvbnM9dm0uJG9wdGlvbnM7dmFyIGhhbmRsZXJzPW9wdGlvbnMucmVuZGVyJiZvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkP2dldEhhbmRsZXI6aGFzSGFuZGxlcjt2bS5fcmVuZGVyUHJveHk9bmV3IFByb3h5KHZtLGhhbmRsZXJzKTt9ZWxzZXt2bS5fcmVuZGVyUHJveHk9dm07fX07fS8qICAqL3ZhciBxdWV1ZT1bXTt2YXIgaGFzJDE9e307dmFyIGNpcmN1bGFyPXt9O3ZhciB3YWl0aW5nPWZhbHNlO3ZhciBmbHVzaGluZz1mYWxzZTt2YXIgaW5kZXg9MDsvKipcblx0ICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuXHQgKi9mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlKCl7cXVldWUubGVuZ3RoPTA7aGFzJDE9e307aWYoZmFsc2Upe2NpcmN1bGFyPXt9O313YWl0aW5nPWZsdXNoaW5nPWZhbHNlO30vKipcblx0ICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG5cdCAqL2Z1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUoKXtmbHVzaGluZz10cnVlOy8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuXHQvLyBUaGlzIGVuc3VyZXMgdGhhdDpcblx0Ly8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuXHQvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG5cdC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2Vcblx0Ly8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuXHQvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuXHQvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG5cdHF1ZXVlLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5pZC1iLmlkO30pOy8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuXHQvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcblx0Zm9yKGluZGV4PTA7aW5kZXg8cXVldWUubGVuZ3RoO2luZGV4Kyspe3ZhciB3YXRjaGVyPXF1ZXVlW2luZGV4XTt2YXIgaWQ9d2F0Y2hlci5pZDtoYXMkMVtpZF09bnVsbDt3YXRjaGVyLnJ1bigpOy8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cblx0aWYoZmFsc2Upe2NpcmN1bGFyW2lkXT0oY2lyY3VsYXJbaWRdfHwwKSsxO2lmKGNpcmN1bGFyW2lkXT5jb25maWcuX21heFVwZGF0ZUNvdW50KXt3YXJuKCdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJysod2F0Y2hlci51c2VyP1wiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiK3dhdGNoZXIuZXhwcmVzc2lvbitcIlxcXCJcIjpcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIiksd2F0Y2hlci52bSk7YnJlYWs7fX19Ly8gZGV2dG9vbCBob29rXG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGRldnRvb2xzJiZjb25maWcuZGV2dG9vbHMpe2RldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7fXJlc2V0U2NoZWR1bGVyU3RhdGUoKTt9LyoqXG5cdCAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG5cdCAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuXHQgKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cblx0ICovZnVuY3Rpb24gcXVldWVXYXRjaGVyKHdhdGNoZXIpe3ZhciBpZD13YXRjaGVyLmlkO2lmKGhhcyQxW2lkXT09bnVsbCl7aGFzJDFbaWRdPXRydWU7aWYoIWZsdXNoaW5nKXtxdWV1ZS5wdXNoKHdhdGNoZXIpO31lbHNley8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcblx0Ly8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cblx0dmFyIGk9cXVldWUubGVuZ3RoLTE7d2hpbGUoaT49MCYmcXVldWVbaV0uaWQ+d2F0Y2hlci5pZCl7aS0tO31xdWV1ZS5zcGxpY2UoTWF0aC5tYXgoaSxpbmRleCkrMSwwLHdhdGNoZXIpO30vLyBxdWV1ZSB0aGUgZmx1c2hcblx0aWYoIXdhaXRpbmcpe3dhaXRpbmc9dHJ1ZTtuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTt9fX0vKiAgKi92YXIgdWlkJDI9MDsvKipcblx0ICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG5cdCAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG5cdCAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuXHQgKi92YXIgV2F0Y2hlcj1mdW5jdGlvbiBXYXRjaGVyKHZtLGV4cE9yRm4sY2Isb3B0aW9ucyl7dGhpcy52bT12bTt2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTsvLyBvcHRpb25zXG5cdGlmKG9wdGlvbnMpe3RoaXMuZGVlcD0hIW9wdGlvbnMuZGVlcDt0aGlzLnVzZXI9ISFvcHRpb25zLnVzZXI7dGhpcy5sYXp5PSEhb3B0aW9ucy5sYXp5O3RoaXMuc3luYz0hIW9wdGlvbnMuc3luYzt9ZWxzZXt0aGlzLmRlZXA9dGhpcy51c2VyPXRoaXMubGF6eT10aGlzLnN5bmM9ZmFsc2U7fXRoaXMuY2I9Y2I7dGhpcy5pZD0rK3VpZCQyOy8vIHVpZCBmb3IgYmF0Y2hpbmdcblx0dGhpcy5hY3RpdmU9dHJ1ZTt0aGlzLmRpcnR5PXRoaXMubGF6eTsvLyBmb3IgbGF6eSB3YXRjaGVyc1xuXHR0aGlzLmRlcHM9W107dGhpcy5uZXdEZXBzPVtdO3RoaXMuZGVwSWRzPW5ldyBfU2V0KCk7dGhpcy5uZXdEZXBJZHM9bmV3IF9TZXQoKTt0aGlzLmV4cHJlc3Npb249IGZhbHNlP2V4cE9yRm4udG9TdHJpbmcoKTonJzsvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcblx0aWYodHlwZW9mIGV4cE9yRm49PT0nZnVuY3Rpb24nKXt0aGlzLmdldHRlcj1leHBPckZuO31lbHNle3RoaXMuZ2V0dGVyPXBhcnNlUGF0aChleHBPckZuKTtpZighdGhpcy5nZXR0ZXIpe3RoaXMuZ2V0dGVyPWZ1bmN0aW9uKCl7fTsoXCJwcm9kdWN0aW9uXCIpIT09J3Byb2R1Y3Rpb24nJiZ3YXJuKFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIitleHBPckZuK1wiXFxcIiBcIisnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcrJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyx2bSk7fX10aGlzLnZhbHVlPXRoaXMubGF6eT91bmRlZmluZWQ6dGhpcy5nZXQoKTt9Oy8qKlxuXHQgKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG5cdCAqL1dhdGNoZXIucHJvdG90eXBlLmdldD1mdW5jdGlvbiBnZXQoKXtwdXNoVGFyZ2V0KHRoaXMpO3ZhciB2YWx1ZT10aGlzLmdldHRlci5jYWxsKHRoaXMudm0sdGhpcy52bSk7Ly8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG5cdC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuXHRpZih0aGlzLmRlZXApe3RyYXZlcnNlKHZhbHVlKTt9cG9wVGFyZ2V0KCk7dGhpcy5jbGVhbnVwRGVwcygpO3JldHVybiB2YWx1ZTt9Oy8qKlxuXHQgKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuXHQgKi9XYXRjaGVyLnByb3RvdHlwZS5hZGREZXA9ZnVuY3Rpb24gYWRkRGVwKGRlcCl7dmFyIGlkPWRlcC5pZDtpZighdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSl7dGhpcy5uZXdEZXBJZHMuYWRkKGlkKTt0aGlzLm5ld0RlcHMucHVzaChkZXApO2lmKCF0aGlzLmRlcElkcy5oYXMoaWQpKXtkZXAuYWRkU3ViKHRoaXMpO319fTsvKipcblx0ICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cblx0ICovV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHM9ZnVuY3Rpb24gY2xlYW51cERlcHMoKXt2YXIgdGhpcyQxPXRoaXM7dmFyIGk9dGhpcy5kZXBzLmxlbmd0aDt3aGlsZShpLS0pe3ZhciBkZXA9dGhpcyQxLmRlcHNbaV07aWYoIXRoaXMkMS5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpe2RlcC5yZW1vdmVTdWIodGhpcyQxKTt9fXZhciB0bXA9dGhpcy5kZXBJZHM7dGhpcy5kZXBJZHM9dGhpcy5uZXdEZXBJZHM7dGhpcy5uZXdEZXBJZHM9dG1wO3RoaXMubmV3RGVwSWRzLmNsZWFyKCk7dG1wPXRoaXMuZGVwczt0aGlzLmRlcHM9dGhpcy5uZXdEZXBzO3RoaXMubmV3RGVwcz10bXA7dGhpcy5uZXdEZXBzLmxlbmd0aD0wO307LyoqXG5cdCAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuXHQgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuXHQgKi9XYXRjaGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24gdXBkYXRlKCl7LyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9pZih0aGlzLmxhenkpe3RoaXMuZGlydHk9dHJ1ZTt9ZWxzZSBpZih0aGlzLnN5bmMpe3RoaXMucnVuKCk7fWVsc2V7cXVldWVXYXRjaGVyKHRoaXMpO319Oy8qKlxuXHQgKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cblx0ICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cblx0ICovV2F0Y2hlci5wcm90b3R5cGUucnVuPWZ1bmN0aW9uIHJ1bigpe2lmKHRoaXMuYWN0aXZlKXt2YXIgdmFsdWU9dGhpcy5nZXQoKTtpZih2YWx1ZSE9PXRoaXMudmFsdWV8fC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuXHQvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG5cdC8vIGhhdmUgbXV0YXRlZC5cblx0aXNPYmplY3QodmFsdWUpfHx0aGlzLmRlZXApey8vIHNldCBuZXcgdmFsdWVcblx0dmFyIG9sZFZhbHVlPXRoaXMudmFsdWU7dGhpcy52YWx1ZT12YWx1ZTtpZih0aGlzLnVzZXIpe3RyeXt0aGlzLmNiLmNhbGwodGhpcy52bSx2YWx1ZSxvbGRWYWx1ZSk7fWNhdGNoKGUpey8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovaWYoY29uZmlnLmVycm9ySGFuZGxlcil7Y29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsZSx0aGlzLnZtKTt9ZWxzZXsoXCJwcm9kdWN0aW9uXCIpIT09J3Byb2R1Y3Rpb24nJiZ3YXJuKFwiRXJyb3IgaW4gd2F0Y2hlciBcXFwiXCIrdGhpcy5leHByZXNzaW9uK1wiXFxcIlwiLHRoaXMudm0pO3Rocm93IGU7fX19ZWxzZXt0aGlzLmNiLmNhbGwodGhpcy52bSx2YWx1ZSxvbGRWYWx1ZSk7fX19fTsvKipcblx0ICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuXHQgKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG5cdCAqL1dhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlPWZ1bmN0aW9uIGV2YWx1YXRlKCl7dGhpcy52YWx1ZT10aGlzLmdldCgpO3RoaXMuZGlydHk9ZmFsc2U7fTsvKipcblx0ICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG5cdCAqL1dhdGNoZXIucHJvdG90eXBlLmRlcGVuZD1mdW5jdGlvbiBkZXBlbmQoKXt2YXIgdGhpcyQxPXRoaXM7dmFyIGk9dGhpcy5kZXBzLmxlbmd0aDt3aGlsZShpLS0pe3RoaXMkMS5kZXBzW2ldLmRlcGVuZCgpO319Oy8qKlxuXHQgKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cblx0ICovV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd249ZnVuY3Rpb24gdGVhcmRvd24oKXt2YXIgdGhpcyQxPXRoaXM7aWYodGhpcy5hY3RpdmUpey8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3Rcblx0Ly8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuXHQvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuXHRpZighdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCl7cmVtb3ZlJDEodGhpcy52bS5fd2F0Y2hlcnMsdGhpcyk7fXZhciBpPXRoaXMuZGVwcy5sZW5ndGg7d2hpbGUoaS0tKXt0aGlzJDEuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyQxKTt9dGhpcy5hY3RpdmU9ZmFsc2U7fX07LyoqXG5cdCAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG5cdCAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG5cdCAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG5cdCAqL3ZhciBzZWVuT2JqZWN0cz1uZXcgX1NldCgpO2Z1bmN0aW9uIHRyYXZlcnNlKHZhbCl7c2Vlbk9iamVjdHMuY2xlYXIoKTtfdHJhdmVyc2UodmFsLHNlZW5PYmplY3RzKTt9ZnVuY3Rpb24gX3RyYXZlcnNlKHZhbCxzZWVuKXt2YXIgaSxrZXlzO3ZhciBpc0E9QXJyYXkuaXNBcnJheSh2YWwpO2lmKCFpc0EmJiFpc09iamVjdCh2YWwpfHwhT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWwpKXtyZXR1cm47fWlmKHZhbC5fX29iX18pe3ZhciBkZXBJZD12YWwuX19vYl9fLmRlcC5pZDtpZihzZWVuLmhhcyhkZXBJZCkpe3JldHVybjt9c2Vlbi5hZGQoZGVwSWQpO31pZihpc0Epe2k9dmFsLmxlbmd0aDt3aGlsZShpLS0pe190cmF2ZXJzZSh2YWxbaV0sc2Vlbik7fX1lbHNle2tleXM9T2JqZWN0LmtleXModmFsKTtpPWtleXMubGVuZ3RoO3doaWxlKGktLSl7X3RyYXZlcnNlKHZhbFtrZXlzW2ldXSxzZWVuKTt9fX0vKiAgKi9mdW5jdGlvbiBpbml0U3RhdGUodm0pe3ZtLl93YXRjaGVycz1bXTt2YXIgb3B0cz12bS4kb3B0aW9ucztpZihvcHRzLnByb3BzKXtpbml0UHJvcHModm0sb3B0cy5wcm9wcyk7fWlmKG9wdHMubWV0aG9kcyl7aW5pdE1ldGhvZHModm0sb3B0cy5tZXRob2RzKTt9aWYob3B0cy5kYXRhKXtpbml0RGF0YSh2bSk7fWVsc2V7b2JzZXJ2ZSh2bS5fZGF0YT17fSx0cnVlLyogYXNSb290RGF0YSAqLyk7fWlmKG9wdHMuY29tcHV0ZWQpe2luaXRDb21wdXRlZCh2bSxvcHRzLmNvbXB1dGVkKTt9aWYob3B0cy53YXRjaCl7aW5pdFdhdGNoKHZtLG9wdHMud2F0Y2gpO319dmFyIGlzUmVzZXJ2ZWRQcm9wPXtrZXk6MSxyZWY6MSxzbG90OjF9O2Z1bmN0aW9uIGluaXRQcm9wcyh2bSxwcm9wcyl7dmFyIHByb3BzRGF0YT12bS4kb3B0aW9ucy5wcm9wc0RhdGF8fHt9O3ZhciBrZXlzPXZtLiRvcHRpb25zLl9wcm9wS2V5cz1PYmplY3Qua2V5cyhwcm9wcyk7dmFyIGlzUm9vdD0hdm0uJHBhcmVudDsvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcblx0b2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0PWlzUm9vdDt2YXIgbG9vcD1mdW5jdGlvbiBsb29wKGkpe3ZhciBrZXk9a2V5c1tpXTsvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL2lmKGZhbHNlKXtpZihpc1Jlc2VydmVkUHJvcFtrZXldKXt3YXJuKFwiXFxcIlwiK2tleStcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiLHZtKTt9ZGVmaW5lUmVhY3RpdmUkJDEodm0sa2V5LHZhbGlkYXRlUHJvcChrZXkscHJvcHMscHJvcHNEYXRhLHZtKSxmdW5jdGlvbigpe2lmKHZtLiRwYXJlbnQmJiFvYnNlcnZlclN0YXRlLmlzU2V0dGluZ1Byb3BzKXt3YXJuKFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiK1wib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIrXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIrXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIra2V5K1wiXFxcIlwiLHZtKTt9fSk7fWVsc2V7ZGVmaW5lUmVhY3RpdmUkJDEodm0sa2V5LHZhbGlkYXRlUHJvcChrZXkscHJvcHMscHJvcHNEYXRhLHZtKSk7fX07Zm9yKHZhciBpPTA7aTxrZXlzLmxlbmd0aDtpKyspe2xvb3AoaSk7fW9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydD10cnVlO31mdW5jdGlvbiBpbml0RGF0YSh2bSl7dmFyIGRhdGE9dm0uJG9wdGlvbnMuZGF0YTtkYXRhPXZtLl9kYXRhPXR5cGVvZiBkYXRhPT09J2Z1bmN0aW9uJz9kYXRhLmNhbGwodm0pOmRhdGF8fHt9O2lmKCFpc1BsYWluT2JqZWN0KGRhdGEpKXtkYXRhPXt9OyhcInByb2R1Y3Rpb25cIikhPT0ncHJvZHVjdGlvbicmJndhcm4oJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicrJ2h0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMuaHRtbCNkYXRhLU11c3QtQmUtYS1GdW5jdGlvbicsdm0pO30vLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG5cdHZhciBrZXlzPU9iamVjdC5rZXlzKGRhdGEpO3ZhciBwcm9wcz12bS4kb3B0aW9ucy5wcm9wczt2YXIgaT1rZXlzLmxlbmd0aDt3aGlsZShpLS0pe2lmKHByb3BzJiZoYXNPd24ocHJvcHMsa2V5c1tpXSkpeyhcInByb2R1Y3Rpb25cIikhPT0ncHJvZHVjdGlvbicmJndhcm4oXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIra2V5c1tpXStcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiK1wiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlwiLHZtKTt9ZWxzZXtwcm94eSh2bSxrZXlzW2ldKTt9fS8vIG9ic2VydmUgZGF0YVxuXHRvYnNlcnZlKGRhdGEsdHJ1ZS8qIGFzUm9vdERhdGEgKi8pO312YXIgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uPXtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsZ2V0Om5vb3Asc2V0Om5vb3B9O2Z1bmN0aW9uIGluaXRDb21wdXRlZCh2bSxjb21wdXRlZCl7Zm9yKHZhciBrZXkgaW4gY29tcHV0ZWQpey8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGZhbHNlKXt3YXJuKFwiZXhpc3RpbmcgaW5zdGFuY2UgcHJvcGVydHkgXFxcIlwiK2tleStcIlxcXCIgd2lsbCBiZSBcIitcIm92ZXJ3cml0dGVuIGJ5IGEgY29tcHV0ZWQgcHJvcGVydHkgd2l0aCB0aGUgc2FtZSBuYW1lLlwiLHZtKTt9dmFyIHVzZXJEZWY9Y29tcHV0ZWRba2V5XTtpZih0eXBlb2YgdXNlckRlZj09PSdmdW5jdGlvbicpe2NvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbi5nZXQ9bWFrZUNvbXB1dGVkR2V0dGVyKHVzZXJEZWYsdm0pO2NvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbi5zZXQ9bm9vcDt9ZWxzZXtjb21wdXRlZFNoYXJlZERlZmluaXRpb24uZ2V0PXVzZXJEZWYuZ2V0P3VzZXJEZWYuY2FjaGUhPT1mYWxzZT9tYWtlQ29tcHV0ZWRHZXR0ZXIodXNlckRlZi5nZXQsdm0pOmJpbmQkMSh1c2VyRGVmLmdldCx2bSk6bm9vcDtjb21wdXRlZFNoYXJlZERlZmluaXRpb24uc2V0PXVzZXJEZWYuc2V0P2JpbmQkMSh1c2VyRGVmLnNldCx2bSk6bm9vcDt9T2JqZWN0LmRlZmluZVByb3BlcnR5KHZtLGtleSxjb21wdXRlZFNoYXJlZERlZmluaXRpb24pO319ZnVuY3Rpb24gbWFrZUNvbXB1dGVkR2V0dGVyKGdldHRlcixvd25lcil7dmFyIHdhdGNoZXI9bmV3IFdhdGNoZXIob3duZXIsZ2V0dGVyLG5vb3Ase2xhenk6dHJ1ZX0pO3JldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlcigpe2lmKHdhdGNoZXIuZGlydHkpe3dhdGNoZXIuZXZhbHVhdGUoKTt9aWYoRGVwLnRhcmdldCl7d2F0Y2hlci5kZXBlbmQoKTt9cmV0dXJuIHdhdGNoZXIudmFsdWU7fTt9ZnVuY3Rpb24gaW5pdE1ldGhvZHModm0sbWV0aG9kcyl7Zm9yKHZhciBrZXkgaW4gbWV0aG9kcyl7dm1ba2V5XT1tZXRob2RzW2tleV09PW51bGw/bm9vcDpiaW5kJDEobWV0aG9kc1trZXldLHZtKTtpZihmYWxzZSl7d2FybihcIm1ldGhvZCBcXFwiXCIra2V5K1wiXFxcIiBoYXMgYW4gdW5kZWZpbmVkIHZhbHVlIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIrXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLHZtKTt9fX1mdW5jdGlvbiBpbml0V2F0Y2godm0sd2F0Y2gpe2Zvcih2YXIga2V5IGluIHdhdGNoKXt2YXIgaGFuZGxlcj13YXRjaFtrZXldO2lmKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpe2Zvcih2YXIgaT0wO2k8aGFuZGxlci5sZW5ndGg7aSsrKXtjcmVhdGVXYXRjaGVyKHZtLGtleSxoYW5kbGVyW2ldKTt9fWVsc2V7Y3JlYXRlV2F0Y2hlcih2bSxrZXksaGFuZGxlcik7fX19ZnVuY3Rpb24gY3JlYXRlV2F0Y2hlcih2bSxrZXksaGFuZGxlcil7dmFyIG9wdGlvbnM7aWYoaXNQbGFpbk9iamVjdChoYW5kbGVyKSl7b3B0aW9ucz1oYW5kbGVyO2hhbmRsZXI9aGFuZGxlci5oYW5kbGVyO31pZih0eXBlb2YgaGFuZGxlcj09PSdzdHJpbmcnKXtoYW5kbGVyPXZtW2hhbmRsZXJdO312bS4kd2F0Y2goa2V5LGhhbmRsZXIsb3B0aW9ucyk7fWZ1bmN0aW9uIHN0YXRlTWl4aW4oVnVlKXsvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3Rcblx0Ly8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG5cdC8vIHRoZSBvYmplY3QgaGVyZS5cblx0dmFyIGRhdGFEZWY9e307ZGF0YURlZi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YTt9O2lmKGZhbHNlKXtkYXRhRGVmLnNldD1mdW5jdGlvbihuZXdEYXRhKXt3YXJuKCdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJysnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLHRoaXMpO307fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCckZGF0YScsZGF0YURlZik7VnVlLnByb3RvdHlwZS4kc2V0PXNldCQxO1Z1ZS5wcm90b3R5cGUuJGRlbGV0ZT1kZWw7VnVlLnByb3RvdHlwZS4kd2F0Y2g9ZnVuY3Rpb24oZXhwT3JGbixjYixvcHRpb25zKXt2YXIgdm09dGhpcztvcHRpb25zPW9wdGlvbnN8fHt9O29wdGlvbnMudXNlcj10cnVlO3ZhciB3YXRjaGVyPW5ldyBXYXRjaGVyKHZtLGV4cE9yRm4sY2Isb3B0aW9ucyk7aWYob3B0aW9ucy5pbW1lZGlhdGUpe2NiLmNhbGwodm0sd2F0Y2hlci52YWx1ZSk7fXJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4oKXt3YXRjaGVyLnRlYXJkb3duKCk7fTt9O31mdW5jdGlvbiBwcm94eSh2bSxrZXkpe2lmKCFpc1Jlc2VydmVkKGtleSkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh2bSxrZXkse2NvbmZpZ3VyYWJsZTp0cnVlLGVudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24gcHJveHlHZXR0ZXIoKXtyZXR1cm4gdm0uX2RhdGFba2V5XTt9LHNldDpmdW5jdGlvbiBwcm94eVNldHRlcih2YWwpe3ZtLl9kYXRhW2tleV09dmFsO319KTt9fS8qICAqL3ZhciBWTm9kZT1mdW5jdGlvbiBWTm9kZSh0YWcsZGF0YSxjaGlsZHJlbix0ZXh0LGVsbSxjb250ZXh0LGNvbXBvbmVudE9wdGlvbnMpe3RoaXMudGFnPXRhZzt0aGlzLmRhdGE9ZGF0YTt0aGlzLmNoaWxkcmVuPWNoaWxkcmVuO3RoaXMudGV4dD10ZXh0O3RoaXMuZWxtPWVsbTt0aGlzLm5zPXVuZGVmaW5lZDt0aGlzLmNvbnRleHQ9Y29udGV4dDt0aGlzLmZ1bmN0aW9uYWxDb250ZXh0PXVuZGVmaW5lZDt0aGlzLmtleT1kYXRhJiZkYXRhLmtleTt0aGlzLmNvbXBvbmVudE9wdGlvbnM9Y29tcG9uZW50T3B0aW9uczt0aGlzLmNoaWxkPXVuZGVmaW5lZDt0aGlzLnBhcmVudD11bmRlZmluZWQ7dGhpcy5yYXc9ZmFsc2U7dGhpcy5pc1N0YXRpYz1mYWxzZTt0aGlzLmlzUm9vdEluc2VydD10cnVlO3RoaXMuaXNDb21tZW50PWZhbHNlO3RoaXMuaXNDbG9uZWQ9ZmFsc2U7dGhpcy5pc09uY2U9ZmFsc2U7fTt2YXIgY3JlYXRlRW1wdHlWTm9kZT1mdW5jdGlvbiBjcmVhdGVFbXB0eVZOb2RlKCl7dmFyIG5vZGU9bmV3IFZOb2RlKCk7bm9kZS50ZXh0PScnO25vZGUuaXNDb21tZW50PXRydWU7cmV0dXJuIG5vZGU7fTtmdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUodmFsKXtyZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkLFN0cmluZyh2YWwpKTt9Ly8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcblx0Ly8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuXHQvLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcblx0Ly8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cblx0ZnVuY3Rpb24gY2xvbmVWTm9kZSh2bm9kZSl7dmFyIGNsb25lZD1uZXcgVk5vZGUodm5vZGUudGFnLHZub2RlLmRhdGEsdm5vZGUuY2hpbGRyZW4sdm5vZGUudGV4dCx2bm9kZS5lbG0sdm5vZGUuY29udGV4dCx2bm9kZS5jb21wb25lbnRPcHRpb25zKTtjbG9uZWQubnM9dm5vZGUubnM7Y2xvbmVkLmlzU3RhdGljPXZub2RlLmlzU3RhdGljO2Nsb25lZC5rZXk9dm5vZGUua2V5O2Nsb25lZC5pc0Nsb25lZD10cnVlO3JldHVybiBjbG9uZWQ7fWZ1bmN0aW9uIGNsb25lVk5vZGVzKHZub2Rlcyl7dmFyIHJlcz1uZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTx2bm9kZXMubGVuZ3RoO2krKyl7cmVzW2ldPWNsb25lVk5vZGUodm5vZGVzW2ldKTt9cmV0dXJuIHJlczt9LyogICovZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2soZGVmLGhvb2tLZXksaG9vayxrZXkpe2tleT1rZXkraG9va0tleTt2YXIgaW5qZWN0ZWRIYXNoPWRlZi5fX2luamVjdGVkfHwoZGVmLl9faW5qZWN0ZWQ9e30pO2lmKCFpbmplY3RlZEhhc2hba2V5XSl7aW5qZWN0ZWRIYXNoW2tleV09dHJ1ZTt2YXIgb2xkSG9vaz1kZWZbaG9va0tleV07aWYob2xkSG9vayl7ZGVmW2hvb2tLZXldPWZ1bmN0aW9uKCl7b2xkSG9vay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aG9vay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fTt9ZWxzZXtkZWZbaG9va0tleV09aG9vazt9fX0vKiAgKi9mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMob24sb2xkT24sYWRkLHJlbW92ZSQkMSx2bSl7dmFyIG5hbWUsY3VyLG9sZCxmbixldmVudCxjYXB0dXJlLG9uY2U7Zm9yKG5hbWUgaW4gb24pe2N1cj1vbltuYW1lXTtvbGQ9b2xkT25bbmFtZV07aWYoIWN1cil7KFwicHJvZHVjdGlvblwiKSE9PSdwcm9kdWN0aW9uJyYmd2FybihcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiK25hbWUrXCJcXFwiOiBnb3QgXCIrU3RyaW5nKGN1ciksdm0pO31lbHNlIGlmKCFvbGQpe29uY2U9bmFtZS5jaGFyQXQoMCk9PT0nfic7Ly8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuXHRldmVudD1vbmNlP25hbWUuc2xpY2UoMSk6bmFtZTtjYXB0dXJlPWV2ZW50LmNoYXJBdCgwKT09PSchJztldmVudD1jYXB0dXJlP2V2ZW50LnNsaWNlKDEpOmV2ZW50O2lmKEFycmF5LmlzQXJyYXkoY3VyKSl7YWRkKGV2ZW50LGN1ci5pbnZva2VyPWFyckludm9rZXIoY3VyKSxvbmNlLGNhcHR1cmUpO31lbHNle2lmKCFjdXIuaW52b2tlcil7Zm49Y3VyO2N1cj1vbltuYW1lXT17fTtjdXIuZm49Zm47Y3VyLmludm9rZXI9Zm5JbnZva2VyKGN1cik7fWFkZChldmVudCxjdXIuaW52b2tlcixvbmNlLGNhcHR1cmUpO319ZWxzZSBpZihjdXIhPT1vbGQpe2lmKEFycmF5LmlzQXJyYXkob2xkKSl7b2xkLmxlbmd0aD1jdXIubGVuZ3RoO2Zvcih2YXIgaT0wO2k8b2xkLmxlbmd0aDtpKyspe29sZFtpXT1jdXJbaV07fW9uW25hbWVdPW9sZDt9ZWxzZXtvbGQuZm49Y3VyO29uW25hbWVdPW9sZDt9fX1mb3IobmFtZSBpbiBvbGRPbil7aWYoIW9uW25hbWVdKXtvbmNlPW5hbWUuY2hhckF0KDApPT09J34nOy8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3Rcblx0ZXZlbnQ9b25jZT9uYW1lLnNsaWNlKDEpOm5hbWU7Y2FwdHVyZT1ldmVudC5jaGFyQXQoMCk9PT0nISc7ZXZlbnQ9Y2FwdHVyZT9ldmVudC5zbGljZSgxKTpldmVudDtyZW1vdmUkJDEoZXZlbnQsb2xkT25bbmFtZV0uaW52b2tlcixjYXB0dXJlKTt9fX1mdW5jdGlvbiBhcnJJbnZva2VyKGFycil7cmV0dXJuIGZ1bmN0aW9uKGV2KXt2YXIgYXJndW1lbnRzJDE9YXJndW1lbnRzO3ZhciBzaW5nbGU9YXJndW1lbnRzLmxlbmd0aD09PTE7Zm9yKHZhciBpPTA7aTxhcnIubGVuZ3RoO2krKyl7c2luZ2xlP2FycltpXShldik6YXJyW2ldLmFwcGx5KG51bGwsYXJndW1lbnRzJDEpO319O31mdW5jdGlvbiBmbkludm9rZXIobyl7cmV0dXJuIGZ1bmN0aW9uKGV2KXt2YXIgc2luZ2xlPWFyZ3VtZW50cy5sZW5ndGg9PT0xO3NpbmdsZT9vLmZuKGV2KTpvLmZuLmFwcGx5KG51bGwsYXJndW1lbnRzKTt9O30vKiAgKi8vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcblx0Ly8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cblx0Ly9cblx0Ly8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcblx0Ly8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuXHQvLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cdC8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcblx0Ly8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuXHQvLyBub21yYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcblx0Ly8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG5cdC8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cblx0ZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pe2Zvcih2YXIgaT0wO2k8Y2hpbGRyZW4ubGVuZ3RoO2krKyl7aWYoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpe3JldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLGNoaWxkcmVuKTt9fXJldHVybiBjaGlsZHJlbjt9Ly8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RyY3V0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcblx0Ly8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG5cdC8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cblx0Ly8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5cdGZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKXtyZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pP1tjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXTpBcnJheS5pc0FycmF5KGNoaWxkcmVuKT9ub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKTp1bmRlZmluZWQ7fWZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4sbmVzdGVkSW5kZXgpe3ZhciByZXM9W107dmFyIGksYyxsYXN0O2ZvcihpPTA7aTxjaGlsZHJlbi5sZW5ndGg7aSsrKXtjPWNoaWxkcmVuW2ldO2lmKGM9PW51bGx8fHR5cGVvZiBjPT09J2Jvb2xlYW4nKXtjb250aW51ZTt9bGFzdD1yZXNbcmVzLmxlbmd0aC0xXTsvLyAgbmVzdGVkXG5cdGlmKEFycmF5LmlzQXJyYXkoYykpe3Jlcy5wdXNoLmFwcGx5KHJlcyxub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsKG5lc3RlZEluZGV4fHwnJykrXCJfXCIraSkpO31lbHNlIGlmKGlzUHJpbWl0aXZlKGMpKXtpZihsYXN0JiZsYXN0LnRleHQpe2xhc3QudGV4dCs9U3RyaW5nKGMpO31lbHNlIGlmKGMhPT0nJyl7Ly8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcblx0cmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTt9fWVsc2V7aWYoYy50ZXh0JiZsYXN0JiZsYXN0LnRleHQpe3Jlc1tyZXMubGVuZ3RoLTFdPWNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQrYy50ZXh0KTt9ZWxzZXsvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuXHRpZihjLnRhZyYmYy5rZXk9PW51bGwmJm5lc3RlZEluZGV4IT1udWxsKXtjLmtleT1cIl9fdmxpc3RcIituZXN0ZWRJbmRleCtcIl9cIitpK1wiX19cIjt9cmVzLnB1c2goYyk7fX19cmV0dXJuIHJlczt9LyogICovZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjaGlsZHJlbil7cmV0dXJuIGNoaWxkcmVuJiZjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24oYyl7cmV0dXJuIGMmJmMuY29tcG9uZW50T3B0aW9uczt9KVswXTt9LyogICovZnVuY3Rpb24gaW5pdEV2ZW50cyh2bSl7dm0uX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpO3ZtLl9oYXNIb29rRXZlbnQ9ZmFsc2U7Ly8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG5cdHZhciBsaXN0ZW5lcnM9dm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztpZihsaXN0ZW5lcnMpe3VwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSxsaXN0ZW5lcnMpO319dmFyIHRhcmdldDtmdW5jdGlvbiBhZGQkMShldmVudCxmbixvbmNlKXtpZihvbmNlKXt0YXJnZXQuJG9uY2UoZXZlbnQsZm4pO31lbHNle3RhcmdldC4kb24oZXZlbnQsZm4pO319ZnVuY3Rpb24gcmVtb3ZlJDIoZXZlbnQsZm4pe3RhcmdldC4kb2ZmKGV2ZW50LGZuKTt9ZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLGxpc3RlbmVycyxvbGRMaXN0ZW5lcnMpe3RhcmdldD12bTt1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLG9sZExpc3RlbmVyc3x8e30sYWRkJDEscmVtb3ZlJDIsdm0pO31mdW5jdGlvbiBldmVudHNNaXhpbihWdWUpe3ZhciBob29rUkU9L15ob29rOi87VnVlLnByb3RvdHlwZS4kb249ZnVuY3Rpb24oZXZlbnQsZm4pe3ZhciB2bT10aGlzOyh2bS5fZXZlbnRzW2V2ZW50XXx8KHZtLl9ldmVudHNbZXZlbnRdPVtdKSkucHVzaChmbik7Ly8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cblx0Ly8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG5cdGlmKGhvb2tSRS50ZXN0KGV2ZW50KSl7dm0uX2hhc0hvb2tFdmVudD10cnVlO31yZXR1cm4gdm07fTtWdWUucHJvdG90eXBlLiRvbmNlPWZ1bmN0aW9uKGV2ZW50LGZuKXt2YXIgdm09dGhpcztmdW5jdGlvbiBvbigpe3ZtLiRvZmYoZXZlbnQsb24pO2ZuLmFwcGx5KHZtLGFyZ3VtZW50cyk7fW9uLmZuPWZuO3ZtLiRvbihldmVudCxvbik7cmV0dXJuIHZtO307VnVlLnByb3RvdHlwZS4kb2ZmPWZ1bmN0aW9uKGV2ZW50LGZuKXt2YXIgdm09dGhpczsvLyBhbGxcblx0aWYoIWFyZ3VtZW50cy5sZW5ndGgpe3ZtLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gdm07fS8vIHNwZWNpZmljIGV2ZW50XG5cdHZhciBjYnM9dm0uX2V2ZW50c1tldmVudF07aWYoIWNicyl7cmV0dXJuIHZtO31pZihhcmd1bWVudHMubGVuZ3RoPT09MSl7dm0uX2V2ZW50c1tldmVudF09bnVsbDtyZXR1cm4gdm07fS8vIHNwZWNpZmljIGhhbmRsZXJcblx0dmFyIGNiO3ZhciBpPWNicy5sZW5ndGg7d2hpbGUoaS0tKXtjYj1jYnNbaV07aWYoY2I9PT1mbnx8Y2IuZm49PT1mbil7Y2JzLnNwbGljZShpLDEpO2JyZWFrO319cmV0dXJuIHZtO307VnVlLnByb3RvdHlwZS4kZW1pdD1mdW5jdGlvbihldmVudCl7dmFyIHZtPXRoaXM7dmFyIGNicz12bS5fZXZlbnRzW2V2ZW50XTtpZihjYnMpe2Nicz1jYnMubGVuZ3RoPjE/dG9BcnJheShjYnMpOmNiczt2YXIgYXJncz10b0FycmF5KGFyZ3VtZW50cywxKTtmb3IodmFyIGk9MCxsPWNicy5sZW5ndGg7aTxsO2krKyl7Y2JzW2ldLmFwcGx5KHZtLGFyZ3MpO319cmV0dXJuIHZtO307fS8qICAqL3ZhciBhY3RpdmVJbnN0YW5jZT1udWxsO2Z1bmN0aW9uIGluaXRMaWZlY3ljbGUodm0pe3ZhciBvcHRpb25zPXZtLiRvcHRpb25zOy8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG5cdHZhciBwYXJlbnQ9b3B0aW9ucy5wYXJlbnQ7aWYocGFyZW50JiYhb3B0aW9ucy5hYnN0cmFjdCl7d2hpbGUocGFyZW50LiRvcHRpb25zLmFic3RyYWN0JiZwYXJlbnQuJHBhcmVudCl7cGFyZW50PXBhcmVudC4kcGFyZW50O31wYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO312bS4kcGFyZW50PXBhcmVudDt2bS4kcm9vdD1wYXJlbnQ/cGFyZW50LiRyb290OnZtO3ZtLiRjaGlsZHJlbj1bXTt2bS4kcmVmcz17fTt2bS5fd2F0Y2hlcj1udWxsO3ZtLl9pbmFjdGl2ZT1mYWxzZTt2bS5faXNNb3VudGVkPWZhbHNlO3ZtLl9pc0Rlc3Ryb3llZD1mYWxzZTt2bS5faXNCZWluZ0Rlc3Ryb3llZD1mYWxzZTt9ZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4oVnVlKXtWdWUucHJvdG90eXBlLl9tb3VudD1mdW5jdGlvbihlbCxoeWRyYXRpbmcpe3ZhciB2bT10aGlzO3ZtLiRlbD1lbDtpZighdm0uJG9wdGlvbnMucmVuZGVyKXt2bS4kb3B0aW9ucy5yZW5kZXI9Y3JlYXRlRW1wdHlWTm9kZTtpZihmYWxzZSl7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYodm0uJG9wdGlvbnMudGVtcGxhdGUmJnZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSE9PScjJyl7d2FybignWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJysnb3B0aW9uIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJysncmVuZGVyIGZ1bmN0aW9ucywgb3IgdXNlIHRoZSBjb21waWxlci1pbmNsdWRlZCBidWlsZC4nLHZtKTt9ZWxzZXt3YXJuKCdGYWlsZWQgdG8gbW91bnQgY29tcG9uZW50OiB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24gbm90IGRlZmluZWQuJyx2bSk7fX19Y2FsbEhvb2sodm0sJ2JlZm9yZU1vdW50Jyk7dm0uX3dhdGNoZXI9bmV3IFdhdGNoZXIodm0sZnVuY3Rpb24oKXt2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSxoeWRyYXRpbmcpO30sbm9vcCk7aHlkcmF0aW5nPWZhbHNlOy8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG5cdC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG5cdGlmKHZtLiR2bm9kZT09bnVsbCl7dm0uX2lzTW91bnRlZD10cnVlO2NhbGxIb29rKHZtLCdtb3VudGVkJyk7fXJldHVybiB2bTt9O1Z1ZS5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbih2bm9kZSxoeWRyYXRpbmcpe3ZhciB2bT10aGlzO2lmKHZtLl9pc01vdW50ZWQpe2NhbGxIb29rKHZtLCdiZWZvcmVVcGRhdGUnKTt9dmFyIHByZXZFbD12bS4kZWw7dmFyIHByZXZWbm9kZT12bS5fdm5vZGU7dmFyIHByZXZBY3RpdmVJbnN0YW5jZT1hY3RpdmVJbnN0YW5jZTthY3RpdmVJbnN0YW5jZT12bTt2bS5fdm5vZGU9dm5vZGU7Ly8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG5cdC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuXHRpZighcHJldlZub2RlKXsvLyBpbml0aWFsIHJlbmRlclxuXHR2bS4kZWw9dm0uX19wYXRjaF9fKHZtLiRlbCx2bm9kZSxoeWRyYXRpbmcsZmFsc2UvKiByZW1vdmVPbmx5ICovLHZtLiRvcHRpb25zLl9wYXJlbnRFbG0sdm0uJG9wdGlvbnMuX3JlZkVsbSk7fWVsc2V7Ly8gdXBkYXRlc1xuXHR2bS4kZWw9dm0uX19wYXRjaF9fKHByZXZWbm9kZSx2bm9kZSk7fWFjdGl2ZUluc3RhbmNlPXByZXZBY3RpdmVJbnN0YW5jZTsvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2Vcblx0aWYocHJldkVsKXtwcmV2RWwuX192dWVfXz1udWxsO31pZih2bS4kZWwpe3ZtLiRlbC5fX3Z1ZV9fPXZtO30vLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG5cdGlmKHZtLiR2bm9kZSYmdm0uJHBhcmVudCYmdm0uJHZub2RlPT09dm0uJHBhcmVudC5fdm5vZGUpe3ZtLiRwYXJlbnQuJGVsPXZtLiRlbDt9aWYodm0uX2lzTW91bnRlZCl7Y2FsbEhvb2sodm0sJ3VwZGF0ZWQnKTt9fTtWdWUucHJvdG90eXBlLl91cGRhdGVGcm9tUGFyZW50PWZ1bmN0aW9uKHByb3BzRGF0YSxsaXN0ZW5lcnMscGFyZW50Vm5vZGUscmVuZGVyQ2hpbGRyZW4pe3ZhciB2bT10aGlzO3ZhciBoYXNDaGlsZHJlbj0hISh2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW58fHJlbmRlckNoaWxkcmVuKTt2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGU9cGFyZW50Vm5vZGU7dm0uJHZub2RlPXBhcmVudFZub2RlOy8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblx0aWYodm0uX3Zub2RlKXsvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuXHR2bS5fdm5vZGUucGFyZW50PXBhcmVudFZub2RlO312bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW49cmVuZGVyQ2hpbGRyZW47Ly8gdXBkYXRlIHByb3BzXG5cdGlmKHByb3BzRGF0YSYmdm0uJG9wdGlvbnMucHJvcHMpe29ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydD1mYWxzZTtpZihmYWxzZSl7b2JzZXJ2ZXJTdGF0ZS5pc1NldHRpbmdQcm9wcz10cnVlO312YXIgcHJvcEtleXM9dm0uJG9wdGlvbnMuX3Byb3BLZXlzfHxbXTtmb3IodmFyIGk9MDtpPHByb3BLZXlzLmxlbmd0aDtpKyspe3ZhciBrZXk9cHJvcEtleXNbaV07dm1ba2V5XT12YWxpZGF0ZVByb3Aoa2V5LHZtLiRvcHRpb25zLnByb3BzLHByb3BzRGF0YSx2bSk7fW9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydD10cnVlO2lmKGZhbHNlKXtvYnNlcnZlclN0YXRlLmlzU2V0dGluZ1Byb3BzPWZhbHNlO312bS4kb3B0aW9ucy5wcm9wc0RhdGE9cHJvcHNEYXRhO30vLyB1cGRhdGUgbGlzdGVuZXJzXG5cdGlmKGxpc3RlbmVycyl7dmFyIG9sZExpc3RlbmVycz12bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO3ZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM9bGlzdGVuZXJzO3VwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSxsaXN0ZW5lcnMsb2xkTGlzdGVuZXJzKTt9Ly8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cblx0aWYoaGFzQ2hpbGRyZW4pe3ZtLiRzbG90cz1yZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4scGFyZW50Vm5vZGUuY29udGV4dCk7dm0uJGZvcmNlVXBkYXRlKCk7fX07VnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGU9ZnVuY3Rpb24oKXt2YXIgdm09dGhpcztpZih2bS5fd2F0Y2hlcil7dm0uX3dhdGNoZXIudXBkYXRlKCk7fX07VnVlLnByb3RvdHlwZS4kZGVzdHJveT1mdW5jdGlvbigpe3ZhciB2bT10aGlzO2lmKHZtLl9pc0JlaW5nRGVzdHJveWVkKXtyZXR1cm47fWNhbGxIb29rKHZtLCdiZWZvcmVEZXN0cm95Jyk7dm0uX2lzQmVpbmdEZXN0cm95ZWQ9dHJ1ZTsvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuXHR2YXIgcGFyZW50PXZtLiRwYXJlbnQ7aWYocGFyZW50JiYhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkJiYhdm0uJG9wdGlvbnMuYWJzdHJhY3Qpe3JlbW92ZSQxKHBhcmVudC4kY2hpbGRyZW4sdm0pO30vLyB0ZWFyZG93biB3YXRjaGVyc1xuXHRpZih2bS5fd2F0Y2hlcil7dm0uX3dhdGNoZXIudGVhcmRvd24oKTt9dmFyIGk9dm0uX3dhdGNoZXJzLmxlbmd0aDt3aGlsZShpLS0pe3ZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO30vLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuXHQvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cblx0aWYodm0uX2RhdGEuX19vYl9fKXt2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO30vLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cblx0dm0uX2lzRGVzdHJveWVkPXRydWU7Y2FsbEhvb2sodm0sJ2Rlc3Ryb3llZCcpOy8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG5cdHZtLiRvZmYoKTsvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2Vcblx0aWYodm0uJGVsKXt2bS4kZWwuX192dWVfXz1udWxsO30vLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcblx0dm0uX19wYXRjaF9fKHZtLl92bm9kZSxudWxsKTt9O31mdW5jdGlvbiBjYWxsSG9vayh2bSxob29rKXt2YXIgaGFuZGxlcnM9dm0uJG9wdGlvbnNbaG9va107aWYoaGFuZGxlcnMpe2Zvcih2YXIgaT0wLGo9aGFuZGxlcnMubGVuZ3RoO2k8ajtpKyspe2hhbmRsZXJzW2ldLmNhbGwodm0pO319aWYodm0uX2hhc0hvb2tFdmVudCl7dm0uJGVtaXQoJ2hvb2s6Jytob29rKTt9fS8qICAqL3ZhciBob29rcz17aW5pdDppbml0LHByZXBhdGNoOnByZXBhdGNoLGluc2VydDppbnNlcnQsZGVzdHJveTpkZXN0cm95JDF9O3ZhciBob29rc1RvTWVyZ2U9T2JqZWN0LmtleXMoaG9va3MpO2Z1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudChDdG9yLGRhdGEsY29udGV4dCxjaGlsZHJlbix0YWcpe2lmKCFDdG9yKXtyZXR1cm47fXZhciBiYXNlQ3Rvcj1jb250ZXh0LiRvcHRpb25zLl9iYXNlO2lmKGlzT2JqZWN0KEN0b3IpKXtDdG9yPWJhc2VDdG9yLmV4dGVuZChDdG9yKTt9aWYodHlwZW9mIEN0b3IhPT0nZnVuY3Rpb24nKXtpZihmYWxzZSl7d2FybihcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiK1N0cmluZyhDdG9yKSxjb250ZXh0KTt9cmV0dXJuO30vLyBhc3luYyBjb21wb25lbnRcblx0aWYoIUN0b3IuY2lkKXtpZihDdG9yLnJlc29sdmVkKXtDdG9yPUN0b3IucmVzb2x2ZWQ7fWVsc2V7Q3Rvcj1yZXNvbHZlQXN5bmNDb21wb25lbnQoQ3RvcixiYXNlQ3RvcixmdW5jdGlvbigpey8vIGl0J3Mgb2sgdG8gcXVldWUgdGhpcyBvbiBldmVyeSByZW5kZXIgYmVjYXVzZVxuXHQvLyAkZm9yY2VVcGRhdGUgaXMgYnVmZmVyZWQgYnkgdGhlIHNjaGVkdWxlci5cblx0Y29udGV4dC4kZm9yY2VVcGRhdGUoKTt9KTtpZighQ3Rvcil7Ly8gcmV0dXJuIG5vdGhpbmcgaWYgdGhpcyBpcyBpbmRlZWQgYW4gYXN5bmMgY29tcG9uZW50XG5cdC8vIHdhaXQgZm9yIHRoZSBjYWxsYmFjayB0byB0cmlnZ2VyIHBhcmVudCB1cGRhdGUuXG5cdHJldHVybjt9fX0vLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG5cdC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuXHRyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO2RhdGE9ZGF0YXx8e307Ly8gZXh0cmFjdCBwcm9wc1xuXHR2YXIgcHJvcHNEYXRhPWV4dHJhY3RQcm9wcyhkYXRhLEN0b3IpOy8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG5cdGlmKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKXtyZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLHByb3BzRGF0YSxkYXRhLGNvbnRleHQsY2hpbGRyZW4pO30vLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuXHQvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuXHR2YXIgbGlzdGVuZXJzPWRhdGEub247Ly8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcblx0ZGF0YS5vbj1kYXRhLm5hdGl2ZU9uO2lmKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCl7Ly8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuXHQvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzXG5cdGRhdGE9e307fS8vIG1lcmdlIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcblx0bWVyZ2VIb29rcyhkYXRhKTsvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuXHR2YXIgbmFtZT1DdG9yLm9wdGlvbnMubmFtZXx8dGFnO3ZhciB2bm9kZT1uZXcgVk5vZGUoXCJ2dWUtY29tcG9uZW50LVwiK0N0b3IuY2lkKyhuYW1lP1wiLVwiK25hbWU6JycpLGRhdGEsdW5kZWZpbmVkLHVuZGVmaW5lZCx1bmRlZmluZWQsY29udGV4dCx7Q3RvcjpDdG9yLHByb3BzRGF0YTpwcm9wc0RhdGEsbGlzdGVuZXJzOmxpc3RlbmVycyx0YWc6dGFnLGNoaWxkcmVuOmNoaWxkcmVufSk7cmV0dXJuIHZub2RlO31mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IscHJvcHNEYXRhLGRhdGEsY29udGV4dCxjaGlsZHJlbil7dmFyIHByb3BzPXt9O3ZhciBwcm9wT3B0aW9ucz1DdG9yLm9wdGlvbnMucHJvcHM7aWYocHJvcE9wdGlvbnMpe2Zvcih2YXIga2V5IGluIHByb3BPcHRpb25zKXtwcm9wc1trZXldPXZhbGlkYXRlUHJvcChrZXkscHJvcE9wdGlvbnMscHJvcHNEYXRhKTt9fS8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcblx0Ly8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuXHR2YXIgX2NvbnRleHQ9T2JqZWN0LmNyZWF0ZShjb250ZXh0KTt2YXIgaD1mdW5jdGlvbiBoKGEsYixjLGQpe3JldHVybiBjcmVhdGVFbGVtZW50KF9jb250ZXh0LGEsYixjLGQsdHJ1ZSk7fTt2YXIgdm5vZGU9Q3Rvci5vcHRpb25zLnJlbmRlci5jYWxsKG51bGwsaCx7cHJvcHM6cHJvcHMsZGF0YTpkYXRhLHBhcmVudDpjb250ZXh0LGNoaWxkcmVuOmNoaWxkcmVuLHNsb3RzOmZ1bmN0aW9uIHNsb3RzKCl7cmV0dXJuIHJlc29sdmVTbG90cyhjaGlsZHJlbixjb250ZXh0KTt9fSk7aWYodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSl7dm5vZGUuZnVuY3Rpb25hbENvbnRleHQ9Y29udGV4dDtpZihkYXRhLnNsb3Qpeyh2bm9kZS5kYXRhfHwodm5vZGUuZGF0YT17fSkpLnNsb3Q9ZGF0YS5zbG90O319cmV0dXJuIHZub2RlO31mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKHZub2RlLC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuXHRwYXJlbnQsLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG5cdHBhcmVudEVsbSxyZWZFbG0pe3ZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnM9dm5vZGUuY29tcG9uZW50T3B0aW9uczt2YXIgb3B0aW9ucz17X2lzQ29tcG9uZW50OnRydWUscGFyZW50OnBhcmVudCxwcm9wc0RhdGE6dm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YSxfY29tcG9uZW50VGFnOnZub2RlQ29tcG9uZW50T3B0aW9ucy50YWcsX3BhcmVudFZub2RlOnZub2RlLF9wYXJlbnRMaXN0ZW5lcnM6dm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycyxfcmVuZGVyQ2hpbGRyZW46dm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuLF9wYXJlbnRFbG06cGFyZW50RWxtfHxudWxsLF9yZWZFbG06cmVmRWxtfHxudWxsfTsvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuXHR2YXIgaW5saW5lVGVtcGxhdGU9dm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtpZihpbmxpbmVUZW1wbGF0ZSl7b3B0aW9ucy5yZW5kZXI9aW5saW5lVGVtcGxhdGUucmVuZGVyO29wdGlvbnMuc3RhdGljUmVuZGVyRm5zPWlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZuczt9cmV0dXJuIG5ldyB2bm9kZUNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKTt9ZnVuY3Rpb24gaW5pdCh2bm9kZSxoeWRyYXRpbmcscGFyZW50RWxtLHJlZkVsbSl7aWYoIXZub2RlLmNoaWxkfHx2bm9kZS5jaGlsZC5faXNEZXN0cm95ZWQpe3ZhciBjaGlsZD12bm9kZS5jaGlsZD1jcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKHZub2RlLGFjdGl2ZUluc3RhbmNlLHBhcmVudEVsbSxyZWZFbG0pO2NoaWxkLiRtb3VudChoeWRyYXRpbmc/dm5vZGUuZWxtOnVuZGVmaW5lZCxoeWRyYXRpbmcpO31lbHNlIGlmKHZub2RlLmRhdGEua2VlcEFsaXZlKXsvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcblx0dmFyIG1vdW50ZWROb2RlPXZub2RlOy8vIHdvcmsgYXJvdW5kIGZsb3dcblx0cHJlcGF0Y2gobW91bnRlZE5vZGUsbW91bnRlZE5vZGUpO319ZnVuY3Rpb24gcHJlcGF0Y2gob2xkVm5vZGUsdm5vZGUpe3ZhciBvcHRpb25zPXZub2RlLmNvbXBvbmVudE9wdGlvbnM7dmFyIGNoaWxkPXZub2RlLmNoaWxkPW9sZFZub2RlLmNoaWxkO2NoaWxkLl91cGRhdGVGcm9tUGFyZW50KG9wdGlvbnMucHJvcHNEYXRhLC8vIHVwZGF0ZWQgcHJvcHNcblx0b3B0aW9ucy5saXN0ZW5lcnMsLy8gdXBkYXRlZCBsaXN0ZW5lcnNcblx0dm5vZGUsLy8gbmV3IHBhcmVudCB2bm9kZVxuXHRvcHRpb25zLmNoaWxkcmVuLy8gbmV3IGNoaWxkcmVuXG5cdCk7fWZ1bmN0aW9uIGluc2VydCh2bm9kZSl7aWYoIXZub2RlLmNoaWxkLl9pc01vdW50ZWQpe3Zub2RlLmNoaWxkLl9pc01vdW50ZWQ9dHJ1ZTtjYWxsSG9vayh2bm9kZS5jaGlsZCwnbW91bnRlZCcpO31pZih2bm9kZS5kYXRhLmtlZXBBbGl2ZSl7dm5vZGUuY2hpbGQuX2luYWN0aXZlPWZhbHNlO2NhbGxIb29rKHZub2RlLmNoaWxkLCdhY3RpdmF0ZWQnKTt9fWZ1bmN0aW9uIGRlc3Ryb3kkMSh2bm9kZSl7aWYoIXZub2RlLmNoaWxkLl9pc0Rlc3Ryb3llZCl7aWYoIXZub2RlLmRhdGEua2VlcEFsaXZlKXt2bm9kZS5jaGlsZC4kZGVzdHJveSgpO31lbHNle3Zub2RlLmNoaWxkLl9pbmFjdGl2ZT10cnVlO2NhbGxIb29rKHZub2RlLmNoaWxkLCdkZWFjdGl2YXRlZCcpO319fWZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudChmYWN0b3J5LGJhc2VDdG9yLGNiKXtpZihmYWN0b3J5LnJlcXVlc3RlZCl7Ly8gcG9vbCBjYWxsYmFja3Ncblx0ZmFjdG9yeS5wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2IpO31lbHNle2ZhY3RvcnkucmVxdWVzdGVkPXRydWU7dmFyIGNicz1mYWN0b3J5LnBlbmRpbmdDYWxsYmFja3M9W2NiXTt2YXIgc3luYz10cnVlO3ZhciByZXNvbHZlPWZ1bmN0aW9uIHJlc29sdmUocmVzKXtpZihpc09iamVjdChyZXMpKXtyZXM9YmFzZUN0b3IuZXh0ZW5kKHJlcyk7fS8vIGNhY2hlIHJlc29sdmVkXG5cdGZhY3RvcnkucmVzb2x2ZWQ9cmVzOy8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcblx0Ly8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG5cdGlmKCFzeW5jKXtmb3IodmFyIGk9MCxsPWNicy5sZW5ndGg7aTxsO2krKyl7Y2JzW2ldKHJlcyk7fX19O3ZhciByZWplY3Q9ZnVuY3Rpb24gcmVqZWN0KHJlYXNvbil7KFwicHJvZHVjdGlvblwiKSE9PSdwcm9kdWN0aW9uJyYmd2FybihcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIrU3RyaW5nKGZhY3RvcnkpKyhyZWFzb24/XCJcXG5SZWFzb246IFwiK3JlYXNvbjonJykpO307dmFyIHJlcz1mYWN0b3J5KHJlc29sdmUscmVqZWN0KTsvLyBoYW5kbGUgcHJvbWlzZVxuXHRpZihyZXMmJnR5cGVvZiByZXMudGhlbj09PSdmdW5jdGlvbicmJiFmYWN0b3J5LnJlc29sdmVkKXtyZXMudGhlbihyZXNvbHZlLHJlamVjdCk7fXN5bmM9ZmFsc2U7Ly8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuXHRyZXR1cm4gZmFjdG9yeS5yZXNvbHZlZDt9fWZ1bmN0aW9uIGV4dHJhY3RQcm9wcyhkYXRhLEN0b3Ipey8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuXHQvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcblx0Ly8gY29tcG9uZW50IGl0c2VsZi5cblx0dmFyIHByb3BPcHRpb25zPUN0b3Iub3B0aW9ucy5wcm9wcztpZighcHJvcE9wdGlvbnMpe3JldHVybjt9dmFyIHJlcz17fTt2YXIgYXR0cnM9ZGF0YS5hdHRyczt2YXIgcHJvcHM9ZGF0YS5wcm9wczt2YXIgZG9tUHJvcHM9ZGF0YS5kb21Qcm9wcztpZihhdHRyc3x8cHJvcHN8fGRvbVByb3BzKXtmb3IodmFyIGtleSBpbiBwcm9wT3B0aW9ucyl7dmFyIGFsdEtleT1oeXBoZW5hdGUoa2V5KTtjaGVja1Byb3AocmVzLHByb3BzLGtleSxhbHRLZXksdHJ1ZSl8fGNoZWNrUHJvcChyZXMsYXR0cnMsa2V5LGFsdEtleSl8fGNoZWNrUHJvcChyZXMsZG9tUHJvcHMsa2V5LGFsdEtleSk7fX1yZXR1cm4gcmVzO31mdW5jdGlvbiBjaGVja1Byb3AocmVzLGhhc2gsa2V5LGFsdEtleSxwcmVzZXJ2ZSl7aWYoaGFzaCl7aWYoaGFzT3duKGhhc2gsa2V5KSl7cmVzW2tleV09aGFzaFtrZXldO2lmKCFwcmVzZXJ2ZSl7ZGVsZXRlIGhhc2hba2V5XTt9cmV0dXJuIHRydWU7fWVsc2UgaWYoaGFzT3duKGhhc2gsYWx0S2V5KSl7cmVzW2tleV09aGFzaFthbHRLZXldO2lmKCFwcmVzZXJ2ZSl7ZGVsZXRlIGhhc2hbYWx0S2V5XTt9cmV0dXJuIHRydWU7fX1yZXR1cm4gZmFsc2U7fWZ1bmN0aW9uIG1lcmdlSG9va3MoZGF0YSl7aWYoIWRhdGEuaG9vayl7ZGF0YS5ob29rPXt9O31mb3IodmFyIGk9MDtpPGhvb2tzVG9NZXJnZS5sZW5ndGg7aSsrKXt2YXIga2V5PWhvb2tzVG9NZXJnZVtpXTt2YXIgZnJvbVBhcmVudD1kYXRhLmhvb2tba2V5XTt2YXIgb3Vycz1ob29rc1trZXldO2RhdGEuaG9va1trZXldPWZyb21QYXJlbnQ/bWVyZ2VIb29rJDEob3Vycyxmcm9tUGFyZW50KTpvdXJzO319ZnVuY3Rpb24gbWVyZ2VIb29rJDEob25lLHR3byl7cmV0dXJuIGZ1bmN0aW9uKGEsYixjLGQpe29uZShhLGIsYyxkKTt0d28oYSxiLGMsZCk7fTt9LyogICovdmFyIFNJTVBMRV9OT1JNQUxJWkU9MTt2YXIgQUxXQVlTX05PUk1BTElaRT0yOy8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG5cdC8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuXHRmdW5jdGlvbiBjcmVhdGVFbGVtZW50KGNvbnRleHQsdGFnLGRhdGEsY2hpbGRyZW4sbm9ybWFsaXphdGlvblR5cGUsYWx3YXlzTm9ybWFsaXplKXtpZihBcnJheS5pc0FycmF5KGRhdGEpfHxpc1ByaW1pdGl2ZShkYXRhKSl7bm9ybWFsaXphdGlvblR5cGU9Y2hpbGRyZW47Y2hpbGRyZW49ZGF0YTtkYXRhPXVuZGVmaW5lZDt9aWYoYWx3YXlzTm9ybWFsaXplKXtub3JtYWxpemF0aW9uVHlwZT1BTFdBWVNfTk9STUFMSVpFO31yZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCx0YWcsZGF0YSxjaGlsZHJlbixub3JtYWxpemF0aW9uVHlwZSk7fWZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsdGFnLGRhdGEsY2hpbGRyZW4sbm9ybWFsaXphdGlvblR5cGUpe2lmKGRhdGEmJmRhdGEuX19vYl9fKXsoXCJwcm9kdWN0aW9uXCIpIT09J3Byb2R1Y3Rpb24nJiZ3YXJuKFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIrSlNPTi5zdHJpbmdpZnkoZGF0YSkrXCJcXG5cIisnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxjb250ZXh0KTtyZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpO31pZighdGFnKXsvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG5cdHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKCk7fS8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3Rcblx0aWYoQXJyYXkuaXNBcnJheShjaGlsZHJlbikmJnR5cGVvZiBjaGlsZHJlblswXT09PSdmdW5jdGlvbicpe2RhdGE9ZGF0YXx8e307ZGF0YS5zY29wZWRTbG90cz17ZGVmYXVsdDpjaGlsZHJlblswXX07Y2hpbGRyZW4ubGVuZ3RoPTA7fWlmKG5vcm1hbGl6YXRpb25UeXBlPT09QUxXQVlTX05PUk1BTElaRSl7Y2hpbGRyZW49bm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO31lbHNlIGlmKG5vcm1hbGl6YXRpb25UeXBlPT09U0lNUExFX05PUk1BTElaRSl7Y2hpbGRyZW49c2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO312YXIgdm5vZGUsbnM7aWYodHlwZW9mIHRhZz09PSdzdHJpbmcnKXt2YXIgQ3Rvcjtucz1jb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7aWYoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSl7Ly8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcblx0dm5vZGU9bmV3IFZOb2RlKGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLGRhdGEsY2hpbGRyZW4sdW5kZWZpbmVkLHVuZGVmaW5lZCxjb250ZXh0KTt9ZWxzZSBpZihDdG9yPXJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCdjb21wb25lbnRzJyx0YWcpKXsvLyBjb21wb25lbnRcblx0dm5vZGU9Y3JlYXRlQ29tcG9uZW50KEN0b3IsZGF0YSxjb250ZXh0LGNoaWxkcmVuLHRhZyk7fWVsc2V7Ly8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG5cdC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG5cdC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG5cdHZub2RlPW5ldyBWTm9kZSh0YWcsZGF0YSxjaGlsZHJlbix1bmRlZmluZWQsdW5kZWZpbmVkLGNvbnRleHQpO319ZWxzZXsvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuXHR2bm9kZT1jcmVhdGVDb21wb25lbnQodGFnLGRhdGEsY29udGV4dCxjaGlsZHJlbik7fWlmKHZub2RlKXtpZihucyl7YXBwbHlOUyh2bm9kZSxucyk7fXJldHVybiB2bm9kZTt9ZWxzZXtyZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpO319ZnVuY3Rpb24gYXBwbHlOUyh2bm9kZSxucyl7dm5vZGUubnM9bnM7aWYodm5vZGUudGFnPT09J2ZvcmVpZ25PYmplY3QnKXsvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3Rcblx0cmV0dXJuO31pZih2bm9kZS5jaGlsZHJlbil7Zm9yKHZhciBpPTAsbD12bm9kZS5jaGlsZHJlbi5sZW5ndGg7aTxsO2krKyl7dmFyIGNoaWxkPXZub2RlLmNoaWxkcmVuW2ldO2lmKGNoaWxkLnRhZyYmIWNoaWxkLm5zKXthcHBseU5TKGNoaWxkLG5zKTt9fX19LyogICovZnVuY3Rpb24gaW5pdFJlbmRlcih2bSl7dm0uJHZub2RlPW51bGw7Ly8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcblx0dm0uX3Zub2RlPW51bGw7Ly8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcblx0dm0uX3N0YXRpY1RyZWVzPW51bGw7dmFyIHBhcmVudFZub2RlPXZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZTt2YXIgcmVuZGVyQ29udGV4dD1wYXJlbnRWbm9kZSYmcGFyZW50Vm5vZGUuY29udGV4dDt2bS4kc2xvdHM9cmVzb2x2ZVNsb3RzKHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbixyZW5kZXJDb250ZXh0KTt2bS4kc2NvcGVkU2xvdHM9e307Ly8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG5cdC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG5cdC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcblx0Ly8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcblx0dm0uX2M9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sYSxiLGMsZCxmYWxzZSk7fTsvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cblx0Ly8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG5cdHZtLiRjcmVhdGVFbGVtZW50PWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiBjcmVhdGVFbGVtZW50KHZtLGEsYixjLGQsdHJ1ZSk7fTtpZih2bS4kb3B0aW9ucy5lbCl7dm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTt9fWZ1bmN0aW9uIHJlbmRlck1peGluKFZ1ZSl7VnVlLnByb3RvdHlwZS4kbmV4dFRpY2s9ZnVuY3Rpb24oZm4pe3JldHVybiBuZXh0VGljayhmbix0aGlzKTt9O1Z1ZS5wcm90b3R5cGUuX3JlbmRlcj1mdW5jdGlvbigpe3ZhciB2bT10aGlzO3ZhciByZWY9dm0uJG9wdGlvbnM7dmFyIHJlbmRlcj1yZWYucmVuZGVyO3ZhciBzdGF0aWNSZW5kZXJGbnM9cmVmLnN0YXRpY1JlbmRlckZuczt2YXIgX3BhcmVudFZub2RlPXJlZi5fcGFyZW50Vm5vZGU7aWYodm0uX2lzTW91bnRlZCl7Ly8gY2xvbmUgc2xvdCBub2RlcyBvbiByZS1yZW5kZXJzXG5cdGZvcih2YXIga2V5IGluIHZtLiRzbG90cyl7dm0uJHNsb3RzW2tleV09Y2xvbmVWTm9kZXModm0uJHNsb3RzW2tleV0pO319aWYoX3BhcmVudFZub2RlJiZfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyl7dm0uJHNjb3BlZFNsb3RzPV9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO31pZihzdGF0aWNSZW5kZXJGbnMmJiF2bS5fc3RhdGljVHJlZXMpe3ZtLl9zdGF0aWNUcmVlcz1bXTt9Ly8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuXHQvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cblx0dm0uJHZub2RlPV9wYXJlbnRWbm9kZTsvLyByZW5kZXIgc2VsZlxuXHR2YXIgdm5vZGU7dHJ5e3Zub2RlPXJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSx2bS4kY3JlYXRlRWxlbWVudCk7fWNhdGNoKGUpey8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovaWYoY29uZmlnLmVycm9ySGFuZGxlcil7Y29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsZSx2bSk7fWVsc2V7aWYoZmFsc2Upe3dhcm4oXCJFcnJvciB3aGVuIHJlbmRlcmluZyBcIitmb3JtYXRDb21wb25lbnROYW1lKHZtKStcIjpcIik7fXRocm93IGU7fS8vIHJldHVybiBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuXHR2bm9kZT12bS5fdm5vZGU7fS8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcblx0aWYoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSl7aWYoZmFsc2Upe3dhcm4oJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnKydzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLHZtKTt9dm5vZGU9Y3JlYXRlRW1wdHlWTm9kZSgpO30vLyBzZXQgcGFyZW50XG5cdHZub2RlLnBhcmVudD1fcGFyZW50Vm5vZGU7cmV0dXJuIHZub2RlO307Ly8gdG9TdHJpbmcgZm9yIG11c3RhY2hlc1xuXHRWdWUucHJvdG90eXBlLl9zPV90b1N0cmluZzsvLyBjb252ZXJ0IHRleHQgdG8gdm5vZGVcblx0VnVlLnByb3RvdHlwZS5fdj1jcmVhdGVUZXh0Vk5vZGU7Ly8gbnVtYmVyIGNvbnZlcnNpb25cblx0VnVlLnByb3RvdHlwZS5fbj10b051bWJlcjsvLyBlbXB0eSB2bm9kZVxuXHRWdWUucHJvdG90eXBlLl9lPWNyZWF0ZUVtcHR5Vk5vZGU7Ly8gbG9vc2UgZXF1YWxcblx0VnVlLnByb3RvdHlwZS5fcT1sb29zZUVxdWFsOy8vIGxvb3NlIGluZGV4T2Zcblx0VnVlLnByb3RvdHlwZS5faT1sb29zZUluZGV4T2Y7Ly8gcmVuZGVyIHN0YXRpYyB0cmVlIGJ5IGluZGV4XG5cdFZ1ZS5wcm90b3R5cGUuX209ZnVuY3Rpb24gcmVuZGVyU3RhdGljKGluZGV4LGlzSW5Gb3Ipe3ZhciB0cmVlPXRoaXMuX3N0YXRpY1RyZWVzW2luZGV4XTsvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcblx0Ly8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUgYnkgZG9pbmcgYSBzaGFsbG93IGNsb25lLlxuXHRpZih0cmVlJiYhaXNJbkZvcil7cmV0dXJuIEFycmF5LmlzQXJyYXkodHJlZSk/Y2xvbmVWTm9kZXModHJlZSk6Y2xvbmVWTm9kZSh0cmVlKTt9Ly8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuXHR0cmVlPXRoaXMuX3N0YXRpY1RyZWVzW2luZGV4XT10aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbCh0aGlzLl9yZW5kZXJQcm94eSk7bWFya1N0YXRpYyh0cmVlLFwiX19zdGF0aWNfX1wiK2luZGV4LGZhbHNlKTtyZXR1cm4gdHJlZTt9Oy8vIG1hcmsgbm9kZSBhcyBzdGF0aWMgKHYtb25jZSlcblx0VnVlLnByb3RvdHlwZS5fbz1mdW5jdGlvbiBtYXJrT25jZSh0cmVlLGluZGV4LGtleSl7bWFya1N0YXRpYyh0cmVlLFwiX19vbmNlX19cIitpbmRleCsoa2V5P1wiX1wiK2tleTpcIlwiKSx0cnVlKTtyZXR1cm4gdHJlZTt9O2Z1bmN0aW9uIG1hcmtTdGF0aWModHJlZSxrZXksaXNPbmNlKXtpZihBcnJheS5pc0FycmF5KHRyZWUpKXtmb3IodmFyIGk9MDtpPHRyZWUubGVuZ3RoO2krKyl7aWYodHJlZVtpXSYmdHlwZW9mIHRyZWVbaV0hPT0nc3RyaW5nJyl7bWFya1N0YXRpY05vZGUodHJlZVtpXSxrZXkrXCJfXCIraSxpc09uY2UpO319fWVsc2V7bWFya1N0YXRpY05vZGUodHJlZSxrZXksaXNPbmNlKTt9fWZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlKG5vZGUsa2V5LGlzT25jZSl7bm9kZS5pc1N0YXRpYz10cnVlO25vZGUua2V5PWtleTtub2RlLmlzT25jZT1pc09uY2U7fS8vIGZpbHRlciByZXNvbHV0aW9uIGhlbHBlclxuXHRWdWUucHJvdG90eXBlLl9mPWZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIoaWQpe3JldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywnZmlsdGVycycsaWQsdHJ1ZSl8fGlkZW50aXR5O307Ly8gcmVuZGVyIHYtZm9yXG5cdFZ1ZS5wcm90b3R5cGUuX2w9ZnVuY3Rpb24gcmVuZGVyTGlzdCh2YWwscmVuZGVyKXt2YXIgcmV0LGksbCxrZXlzLGtleTtpZihBcnJheS5pc0FycmF5KHZhbCl8fHR5cGVvZiB2YWw9PT0nc3RyaW5nJyl7cmV0PW5ldyBBcnJheSh2YWwubGVuZ3RoKTtmb3IoaT0wLGw9dmFsLmxlbmd0aDtpPGw7aSsrKXtyZXRbaV09cmVuZGVyKHZhbFtpXSxpKTt9fWVsc2UgaWYodHlwZW9mIHZhbD09PSdudW1iZXInKXtyZXQ9bmV3IEFycmF5KHZhbCk7Zm9yKGk9MDtpPHZhbDtpKyspe3JldFtpXT1yZW5kZXIoaSsxLGkpO319ZWxzZSBpZihpc09iamVjdCh2YWwpKXtrZXlzPU9iamVjdC5rZXlzKHZhbCk7cmV0PW5ldyBBcnJheShrZXlzLmxlbmd0aCk7Zm9yKGk9MCxsPWtleXMubGVuZ3RoO2k8bDtpKyspe2tleT1rZXlzW2ldO3JldFtpXT1yZW5kZXIodmFsW2tleV0sa2V5LGkpO319cmV0dXJuIHJldDt9Oy8vIHJlbmRlclNsb3Rcblx0VnVlLnByb3RvdHlwZS5fdD1mdW5jdGlvbihuYW1lLGZhbGxiYWNrLHByb3BzLGJpbmRPYmplY3Qpe3ZhciBzY29wZWRTbG90Rm49dGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07aWYoc2NvcGVkU2xvdEZuKXsvLyBzY29wZWQgc2xvdFxuXHRwcm9wcz1wcm9wc3x8e307aWYoYmluZE9iamVjdCl7ZXh0ZW5kKHByb3BzLGJpbmRPYmplY3QpO31yZXR1cm4gc2NvcGVkU2xvdEZuKHByb3BzKXx8ZmFsbGJhY2s7fWVsc2V7dmFyIHNsb3ROb2Rlcz10aGlzLiRzbG90c1tuYW1lXTsvLyB3YXJuIGR1cGxpY2F0ZSBzbG90IHVzYWdlXG5cdGlmKHNsb3ROb2RlcyYmKFwicHJvZHVjdGlvblwiKSE9PSdwcm9kdWN0aW9uJyl7c2xvdE5vZGVzLl9yZW5kZXJlZCYmd2FybihcIkR1cGxpY2F0ZSBwcmVzZW5jZSBvZiBzbG90IFxcXCJcIituYW1lK1wiXFxcIiBmb3VuZCBpbiB0aGUgc2FtZSByZW5kZXIgdHJlZSBcIitcIi0gdGhpcyB3aWxsIGxpa2VseSBjYXVzZSByZW5kZXIgZXJyb3JzLlwiLHRoaXMpO3Nsb3ROb2Rlcy5fcmVuZGVyZWQ9dHJ1ZTt9cmV0dXJuIHNsb3ROb2Rlc3x8ZmFsbGJhY2s7fX07Ly8gYXBwbHkgdi1iaW5kIG9iamVjdFxuXHRWdWUucHJvdG90eXBlLl9iPWZ1bmN0aW9uIGJpbmRQcm9wcyhkYXRhLHRhZyx2YWx1ZSxhc1Byb3Ape2lmKHZhbHVlKXtpZighaXNPYmplY3QodmFsdWUpKXsoXCJwcm9kdWN0aW9uXCIpIT09J3Byb2R1Y3Rpb24nJiZ3YXJuKCd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsdGhpcyk7fWVsc2V7aWYoQXJyYXkuaXNBcnJheSh2YWx1ZSkpe3ZhbHVlPXRvT2JqZWN0KHZhbHVlKTt9Zm9yKHZhciBrZXkgaW4gdmFsdWUpe2lmKGtleT09PSdjbGFzcyd8fGtleT09PSdzdHlsZScpe2RhdGFba2V5XT12YWx1ZVtrZXldO31lbHNle3ZhciBoYXNoPWFzUHJvcHx8Y29uZmlnLm11c3RVc2VQcm9wKHRhZyxrZXkpP2RhdGEuZG9tUHJvcHN8fChkYXRhLmRvbVByb3BzPXt9KTpkYXRhLmF0dHJzfHwoZGF0YS5hdHRycz17fSk7aGFzaFtrZXldPXZhbHVlW2tleV07fX19fXJldHVybiBkYXRhO307Ly8gY2hlY2sgdi1vbiBrZXlDb2Rlc1xuXHRWdWUucHJvdG90eXBlLl9rPWZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMoZXZlbnRLZXlDb2RlLGtleSxidWlsdEluQWxpYXMpe3ZhciBrZXlDb2Rlcz1jb25maWcua2V5Q29kZXNba2V5XXx8YnVpbHRJbkFsaWFzO2lmKEFycmF5LmlzQXJyYXkoa2V5Q29kZXMpKXtyZXR1cm4ga2V5Q29kZXMuaW5kZXhPZihldmVudEtleUNvZGUpPT09LTE7fWVsc2V7cmV0dXJuIGtleUNvZGVzIT09ZXZlbnRLZXlDb2RlO319O31mdW5jdGlvbiByZXNvbHZlU2xvdHMoY2hpbGRyZW4sY29udGV4dCl7dmFyIHNsb3RzPXt9O2lmKCFjaGlsZHJlbil7cmV0dXJuIHNsb3RzO312YXIgZGVmYXVsdFNsb3Q9W107dmFyIG5hbWUsY2hpbGQ7Zm9yKHZhciBpPTAsbD1jaGlsZHJlbi5sZW5ndGg7aTxsO2krKyl7Y2hpbGQ9Y2hpbGRyZW5baV07Ly8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG5cdC8vIHNhbWUgY29udGV4dC5cblx0aWYoKGNoaWxkLmNvbnRleHQ9PT1jb250ZXh0fHxjaGlsZC5mdW5jdGlvbmFsQ29udGV4dD09PWNvbnRleHQpJiZjaGlsZC5kYXRhJiYobmFtZT1jaGlsZC5kYXRhLnNsb3QpKXt2YXIgc2xvdD1zbG90c1tuYW1lXXx8KHNsb3RzW25hbWVdPVtdKTtpZihjaGlsZC50YWc9PT0ndGVtcGxhdGUnKXtzbG90LnB1c2guYXBwbHkoc2xvdCxjaGlsZC5jaGlsZHJlbik7fWVsc2V7c2xvdC5wdXNoKGNoaWxkKTt9fWVsc2V7ZGVmYXVsdFNsb3QucHVzaChjaGlsZCk7fX0vLyBpZ25vcmUgc2luZ2xlIHdoaXRlc3BhY2Vcblx0aWYoZGVmYXVsdFNsb3QubGVuZ3RoJiYhKGRlZmF1bHRTbG90Lmxlbmd0aD09PTEmJihkZWZhdWx0U2xvdFswXS50ZXh0PT09JyAnfHxkZWZhdWx0U2xvdFswXS5pc0NvbW1lbnQpKSl7c2xvdHMuZGVmYXVsdD1kZWZhdWx0U2xvdDt9cmV0dXJuIHNsb3RzO30vKiAgKi92YXIgdWlkPTA7ZnVuY3Rpb24gaW5pdE1peGluKFZ1ZSl7VnVlLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbihvcHRpb25zKXt2YXIgdm09dGhpczsvLyBhIHVpZFxuXHR2bS5fdWlkPXVpZCsrOy8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG5cdHZtLl9pc1Z1ZT10cnVlOy8vIG1lcmdlIG9wdGlvbnNcblx0aWYob3B0aW9ucyYmb3B0aW9ucy5faXNDb21wb25lbnQpey8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG5cdC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcblx0Ly8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG5cdGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSxvcHRpb25zKTt9ZWxzZXt2bS4kb3B0aW9ucz1tZXJnZU9wdGlvbnMocmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3Rvciksb3B0aW9uc3x8e30sdm0pO30vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL2lmKGZhbHNlKXtpbml0UHJveHkodm0pO31lbHNle3ZtLl9yZW5kZXJQcm94eT12bTt9Ly8gZXhwb3NlIHJlYWwgc2VsZlxuXHR2bS5fc2VsZj12bTtpbml0TGlmZWN5Y2xlKHZtKTtpbml0RXZlbnRzKHZtKTtjYWxsSG9vayh2bSwnYmVmb3JlQ3JlYXRlJyk7aW5pdFN0YXRlKHZtKTtjYWxsSG9vayh2bSwnY3JlYXRlZCcpO2luaXRSZW5kZXIodm0pO307fWZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSxvcHRpb25zKXt2YXIgb3B0cz12bS4kb3B0aW9ucz1PYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpOy8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG5cdG9wdHMucGFyZW50PW9wdGlvbnMucGFyZW50O29wdHMucHJvcHNEYXRhPW9wdGlvbnMucHJvcHNEYXRhO29wdHMuX3BhcmVudFZub2RlPW9wdGlvbnMuX3BhcmVudFZub2RlO29wdHMuX3BhcmVudExpc3RlbmVycz1vcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7b3B0cy5fcmVuZGVyQ2hpbGRyZW49b3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW47b3B0cy5fY29tcG9uZW50VGFnPW9wdGlvbnMuX2NvbXBvbmVudFRhZztvcHRzLl9wYXJlbnRFbG09b3B0aW9ucy5fcGFyZW50RWxtO29wdHMuX3JlZkVsbT1vcHRpb25zLl9yZWZFbG07aWYob3B0aW9ucy5yZW5kZXIpe29wdHMucmVuZGVyPW9wdGlvbnMucmVuZGVyO29wdHMuc3RhdGljUmVuZGVyRm5zPW9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO319ZnVuY3Rpb24gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKXt2YXIgb3B0aW9ucz1DdG9yLm9wdGlvbnM7aWYoQ3Rvci5zdXBlcil7dmFyIHN1cGVyT3B0aW9ucz1DdG9yLnN1cGVyLm9wdGlvbnM7dmFyIGNhY2hlZFN1cGVyT3B0aW9ucz1DdG9yLnN1cGVyT3B0aW9uczt2YXIgZXh0ZW5kT3B0aW9ucz1DdG9yLmV4dGVuZE9wdGlvbnM7aWYoc3VwZXJPcHRpb25zIT09Y2FjaGVkU3VwZXJPcHRpb25zKXsvLyBzdXBlciBvcHRpb24gY2hhbmdlZFxuXHRDdG9yLnN1cGVyT3B0aW9ucz1zdXBlck9wdGlvbnM7ZXh0ZW5kT3B0aW9ucy5yZW5kZXI9b3B0aW9ucy5yZW5kZXI7ZXh0ZW5kT3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM9b3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7ZXh0ZW5kT3B0aW9ucy5fc2NvcGVJZD1vcHRpb25zLl9zY29wZUlkO29wdGlvbnM9Q3Rvci5vcHRpb25zPW1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsZXh0ZW5kT3B0aW9ucyk7aWYob3B0aW9ucy5uYW1lKXtvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXT1DdG9yO319fXJldHVybiBvcHRpb25zO31mdW5jdGlvbiBWdWUkMyhvcHRpb25zKXtpZihmYWxzZSl7d2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO310aGlzLl9pbml0KG9wdGlvbnMpO31pbml0TWl4aW4oVnVlJDMpO3N0YXRlTWl4aW4oVnVlJDMpO2V2ZW50c01peGluKFZ1ZSQzKTtsaWZlY3ljbGVNaXhpbihWdWUkMyk7cmVuZGVyTWl4aW4oVnVlJDMpOy8qICAqL2Z1bmN0aW9uIGluaXRVc2UoVnVlKXtWdWUudXNlPWZ1bmN0aW9uKHBsdWdpbil7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYocGx1Z2luLmluc3RhbGxlZCl7cmV0dXJuO30vLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcblx0dmFyIGFyZ3M9dG9BcnJheShhcmd1bWVudHMsMSk7YXJncy51bnNoaWZ0KHRoaXMpO2lmKHR5cGVvZiBwbHVnaW4uaW5zdGFsbD09PSdmdW5jdGlvbicpe3BsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbixhcmdzKTt9ZWxzZXtwbHVnaW4uYXBwbHkobnVsbCxhcmdzKTt9cGx1Z2luLmluc3RhbGxlZD10cnVlO3JldHVybiB0aGlzO307fS8qICAqL2Z1bmN0aW9uIGluaXRNaXhpbiQxKFZ1ZSl7VnVlLm1peGluPWZ1bmN0aW9uKG1peGluKXt0aGlzLm9wdGlvbnM9bWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucyxtaXhpbik7fTt9LyogICovZnVuY3Rpb24gaW5pdEV4dGVuZChWdWUpey8qKlxuXHQgICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuXHQgICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcblx0ICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cblx0ICAgKi9WdWUuY2lkPTA7dmFyIGNpZD0xOy8qKlxuXHQgICAqIENsYXNzIGluaGVyaXRhbmNlXG5cdCAgICovVnVlLmV4dGVuZD1mdW5jdGlvbihleHRlbmRPcHRpb25zKXtleHRlbmRPcHRpb25zPWV4dGVuZE9wdGlvbnN8fHt9O3ZhciBTdXBlcj10aGlzO3ZhciBTdXBlcklkPVN1cGVyLmNpZDt2YXIgY2FjaGVkQ3RvcnM9ZXh0ZW5kT3B0aW9ucy5fQ3Rvcnx8KGV4dGVuZE9wdGlvbnMuX0N0b3I9e30pO2lmKGNhY2hlZEN0b3JzW1N1cGVySWRdKXtyZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF07fXZhciBuYW1lPWV4dGVuZE9wdGlvbnMubmFtZXx8U3VwZXIub3B0aW9ucy5uYW1lO2lmKGZhbHNlKXtpZighL15bYS16QS1aXVtcXHctXSokLy50ZXN0KG5hbWUpKXt3YXJuKCdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicrbmFtZSsnXCIuIENvbXBvbmVudCBuYW1lcyAnKydjYW4gb25seSBjb250YWluIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGFuZCB0aGUgaHlwaGVuLCAnKydhbmQgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyLicpO319dmFyIFN1Yj1mdW5jdGlvbiBWdWVDb21wb25lbnQob3B0aW9ucyl7dGhpcy5faW5pdChvcHRpb25zKTt9O1N1Yi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1N1Yi5wcm90b3R5cGUuY29uc3RydWN0b3I9U3ViO1N1Yi5jaWQ9Y2lkKys7U3ViLm9wdGlvbnM9bWVyZ2VPcHRpb25zKFN1cGVyLm9wdGlvbnMsZXh0ZW5kT3B0aW9ucyk7U3ViWydzdXBlciddPVN1cGVyOy8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuXHRTdWIuZXh0ZW5kPVN1cGVyLmV4dGVuZDtTdWIubWl4aW49U3VwZXIubWl4aW47U3ViLnVzZT1TdXBlci51c2U7Ly8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuXHQvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG5cdGNvbmZpZy5fYXNzZXRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUpe1N1Ylt0eXBlXT1TdXBlclt0eXBlXTt9KTsvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG5cdGlmKG5hbWUpe1N1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV09U3ViO30vLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuXHQvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuXHQvLyBiZWVuIHVwZGF0ZWQuXG5cdFN1Yi5zdXBlck9wdGlvbnM9U3VwZXIub3B0aW9ucztTdWIuZXh0ZW5kT3B0aW9ucz1leHRlbmRPcHRpb25zOy8vIGNhY2hlIGNvbnN0cnVjdG9yXG5cdGNhY2hlZEN0b3JzW1N1cGVySWRdPVN1YjtyZXR1cm4gU3ViO307fS8qICAqL2Z1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpey8qKlxuXHQgICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cblx0ICAgKi9jb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlKXtWdWVbdHlwZV09ZnVuY3Rpb24oaWQsZGVmaW5pdGlvbil7aWYoIWRlZmluaXRpb24pe3JldHVybiB0aGlzLm9wdGlvbnNbdHlwZSsncyddW2lkXTt9ZWxzZXsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihmYWxzZSl7aWYodHlwZT09PSdjb21wb25lbnQnJiZjb25maWcuaXNSZXNlcnZlZFRhZyhpZCkpe3dhcm4oJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJysnaWQ6ICcraWQpO319aWYodHlwZT09PSdjb21wb25lbnQnJiZpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKXtkZWZpbml0aW9uLm5hbWU9ZGVmaW5pdGlvbi5uYW1lfHxpZDtkZWZpbml0aW9uPXRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7fWlmKHR5cGU9PT0nZGlyZWN0aXZlJyYmdHlwZW9mIGRlZmluaXRpb249PT0nZnVuY3Rpb24nKXtkZWZpbml0aW9uPXtiaW5kOmRlZmluaXRpb24sdXBkYXRlOmRlZmluaXRpb259O310aGlzLm9wdGlvbnNbdHlwZSsncyddW2lkXT1kZWZpbml0aW9uO3JldHVybiBkZWZpbml0aW9uO319O30pO30vKiAgKi92YXIgcGF0dGVyblR5cGVzPVtTdHJpbmcsUmVnRXhwXTtmdW5jdGlvbiBtYXRjaGVzKHBhdHRlcm4sbmFtZSl7aWYodHlwZW9mIHBhdHRlcm49PT0nc3RyaW5nJyl7cmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpPi0xO31lbHNle3JldHVybiBwYXR0ZXJuLnRlc3QobmFtZSk7fX12YXIgS2VlcEFsaXZlPXtuYW1lOidrZWVwLWFsaXZlJyxhYnN0cmFjdDp0cnVlLHByb3BzOntpbmNsdWRlOnBhdHRlcm5UeXBlcyxleGNsdWRlOnBhdHRlcm5UeXBlc30sY3JlYXRlZDpmdW5jdGlvbiBjcmVhdGVkKCl7dGhpcy5jYWNoZT1PYmplY3QuY3JlYXRlKG51bGwpO30scmVuZGVyOmZ1bmN0aW9uIHJlbmRlcigpe3ZhciB2bm9kZT1nZXRGaXJzdENvbXBvbmVudENoaWxkKHRoaXMuJHNsb3RzLmRlZmF1bHQpO2lmKHZub2RlJiZ2bm9kZS5jb21wb25lbnRPcHRpb25zKXt2YXIgb3B0cz12bm9kZS5jb21wb25lbnRPcHRpb25zOy8vIGNoZWNrIHBhdHRlcm5cblx0dmFyIG5hbWU9b3B0cy5DdG9yLm9wdGlvbnMubmFtZXx8b3B0cy50YWc7aWYobmFtZSYmKHRoaXMuaW5jbHVkZSYmIW1hdGNoZXModGhpcy5pbmNsdWRlLG5hbWUpfHx0aGlzLmV4Y2x1ZGUmJm1hdGNoZXModGhpcy5leGNsdWRlLG5hbWUpKSl7cmV0dXJuIHZub2RlO312YXIga2V5PXZub2RlLmtleT09bnVsbC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG5cdC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcblx0P29wdHMuQ3Rvci5jaWQrKG9wdHMudGFnP1wiOjpcIitvcHRzLnRhZzonJyk6dm5vZGUua2V5O2lmKHRoaXMuY2FjaGVba2V5XSl7dm5vZGUuY2hpbGQ9dGhpcy5jYWNoZVtrZXldLmNoaWxkO31lbHNle3RoaXMuY2FjaGVba2V5XT12bm9kZTt9dm5vZGUuZGF0YS5rZWVwQWxpdmU9dHJ1ZTt9cmV0dXJuIHZub2RlO30sZGVzdHJveWVkOmZ1bmN0aW9uIGRlc3Ryb3llZCgpe3ZhciB0aGlzJDE9dGhpcztmb3IodmFyIGtleSBpbiB0aGlzLmNhY2hlKXt2YXIgdm5vZGU9dGhpcyQxLmNhY2hlW2tleV07Y2FsbEhvb2sodm5vZGUuY2hpbGQsJ2RlYWN0aXZhdGVkJyk7dm5vZGUuY2hpbGQuJGRlc3Ryb3koKTt9fX07dmFyIGJ1aWx0SW5Db21wb25lbnRzPXtLZWVwQWxpdmU6S2VlcEFsaXZlfTsvKiAgKi9mdW5jdGlvbiBpbml0R2xvYmFsQVBJKFZ1ZSl7Ly8gY29uZmlnXG5cdHZhciBjb25maWdEZWY9e307Y29uZmlnRGVmLmdldD1mdW5jdGlvbigpe3JldHVybiBjb25maWc7fTtpZihmYWxzZSl7Y29uZmlnRGVmLnNldD1mdW5jdGlvbigpe3dhcm4oJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJyk7fTt9T2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwnY29uZmlnJyxjb25maWdEZWYpO1Z1ZS51dGlsPXV0aWw7VnVlLnNldD1zZXQkMTtWdWUuZGVsZXRlPWRlbDtWdWUubmV4dFRpY2s9bmV4dFRpY2s7VnVlLm9wdGlvbnM9T2JqZWN0LmNyZWF0ZShudWxsKTtjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlKXtWdWUub3B0aW9uc1t0eXBlKydzJ109T2JqZWN0LmNyZWF0ZShudWxsKTt9KTsvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG5cdC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuXHRWdWUub3B0aW9ucy5fYmFzZT1WdWU7ZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsYnVpbHRJbkNvbXBvbmVudHMpO2luaXRVc2UoVnVlKTtpbml0TWl4aW4kMShWdWUpO2luaXRFeHRlbmQoVnVlKTtpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTt9aW5pdEdsb2JhbEFQSShWdWUkMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSQzLnByb3RvdHlwZSwnJGlzU2VydmVyJyx7Z2V0OmlzU2VydmVyUmVuZGVyaW5nfSk7VnVlJDMudmVyc2lvbj0nMi4xLjgnOy8qICAqLy8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcblx0dmFyIGFjY2VwdFZhbHVlPW1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QnKTt2YXIgbXVzdFVzZVByb3A9ZnVuY3Rpb24gbXVzdFVzZVByb3AodGFnLGF0dHIpe3JldHVybiBhdHRyPT09J3ZhbHVlJyYmYWNjZXB0VmFsdWUodGFnKXx8YXR0cj09PSdzZWxlY3RlZCcmJnRhZz09PSdvcHRpb24nfHxhdHRyPT09J2NoZWNrZWQnJiZ0YWc9PT0naW5wdXQnfHxhdHRyPT09J211dGVkJyYmdGFnPT09J3ZpZGVvJzt9O3ZhciBpc0VudW1lcmF0ZWRBdHRyPW1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO3ZhciBpc0Jvb2xlYW5BdHRyPW1ha2VNYXAoJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJysnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcrJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJysnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnKydyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcrJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnKTt2YXIgeGxpbmtOUz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7dmFyIGlzWGxpbms9ZnVuY3Rpb24gaXNYbGluayhuYW1lKXtyZXR1cm4gbmFtZS5jaGFyQXQoNSk9PT0nOicmJm5hbWUuc2xpY2UoMCw1KT09PSd4bGluayc7fTt2YXIgZ2V0WGxpbmtQcm9wPWZ1bmN0aW9uIGdldFhsaW5rUHJvcChuYW1lKXtyZXR1cm4gaXNYbGluayhuYW1lKT9uYW1lLnNsaWNlKDYsbmFtZS5sZW5ndGgpOicnO307dmFyIGlzRmFsc3lBdHRyVmFsdWU9ZnVuY3Rpb24gaXNGYWxzeUF0dHJWYWx1ZSh2YWwpe3JldHVybiB2YWw9PW51bGx8fHZhbD09PWZhbHNlO307LyogICovZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSl7dmFyIGRhdGE9dm5vZGUuZGF0YTt2YXIgcGFyZW50Tm9kZT12bm9kZTt2YXIgY2hpbGROb2RlPXZub2RlO3doaWxlKGNoaWxkTm9kZS5jaGlsZCl7Y2hpbGROb2RlPWNoaWxkTm9kZS5jaGlsZC5fdm5vZGU7aWYoY2hpbGROb2RlLmRhdGEpe2RhdGE9bWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsZGF0YSk7fX13aGlsZShwYXJlbnROb2RlPXBhcmVudE5vZGUucGFyZW50KXtpZihwYXJlbnROb2RlLmRhdGEpe2RhdGE9bWVyZ2VDbGFzc0RhdGEoZGF0YSxwYXJlbnROb2RlLmRhdGEpO319cmV0dXJuIGdlbkNsYXNzRnJvbURhdGEoZGF0YSk7fWZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhKGNoaWxkLHBhcmVudCl7cmV0dXJue3N0YXRpY0NsYXNzOmNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcyxwYXJlbnQuc3RhdGljQ2xhc3MpLGNsYXNzOmNoaWxkLmNsYXNzP1tjaGlsZC5jbGFzcyxwYXJlbnQuY2xhc3NdOnBhcmVudC5jbGFzc307fWZ1bmN0aW9uIGdlbkNsYXNzRnJvbURhdGEoZGF0YSl7dmFyIGR5bmFtaWNDbGFzcz1kYXRhLmNsYXNzO3ZhciBzdGF0aWNDbGFzcz1kYXRhLnN0YXRpY0NsYXNzO2lmKHN0YXRpY0NsYXNzfHxkeW5hbWljQ2xhc3Mpe3JldHVybiBjb25jYXQoc3RhdGljQ2xhc3Msc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSk7fS8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovcmV0dXJuJyc7fWZ1bmN0aW9uIGNvbmNhdChhLGIpe3JldHVybiBhP2I/YSsnICcrYjphOmJ8fCcnO31mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyh2YWx1ZSl7dmFyIHJlcz0nJztpZighdmFsdWUpe3JldHVybiByZXM7fWlmKHR5cGVvZiB2YWx1ZT09PSdzdHJpbmcnKXtyZXR1cm4gdmFsdWU7fWlmKEFycmF5LmlzQXJyYXkodmFsdWUpKXt2YXIgc3RyaW5naWZpZWQ7Zm9yKHZhciBpPTAsbD12YWx1ZS5sZW5ndGg7aTxsO2krKyl7aWYodmFsdWVbaV0pe2lmKHN0cmluZ2lmaWVkPXN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSl7cmVzKz1zdHJpbmdpZmllZCsnICc7fX19cmV0dXJuIHJlcy5zbGljZSgwLC0xKTt9aWYoaXNPYmplY3QodmFsdWUpKXtmb3IodmFyIGtleSBpbiB2YWx1ZSl7aWYodmFsdWVba2V5XSl7cmVzKz1rZXkrJyAnO319cmV0dXJuIHJlcy5zbGljZSgwLC0xKTt9LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9yZXR1cm4gcmVzO30vKiAgKi92YXIgbmFtZXNwYWNlTWFwPXtzdmc6J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxtYXRoOidodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ307dmFyIGlzSFRNTFRhZz1tYWtlTWFwKCdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnKydhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJysnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcrJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnKydzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnKydlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnKydjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnKydidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcrJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJysnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcrJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUnKTsvLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcblx0Ly8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cblx0dmFyIGlzU1ZHPW1ha2VNYXAoJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLCcrJ2ZvbnQtZmFjZSxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJysncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsdHJ1ZSk7dmFyIGlzUHJlVGFnPWZ1bmN0aW9uIGlzUHJlVGFnKHRhZyl7cmV0dXJuIHRhZz09PSdwcmUnO307dmFyIGlzUmVzZXJ2ZWRUYWc9ZnVuY3Rpb24gaXNSZXNlcnZlZFRhZyh0YWcpe3JldHVybiBpc0hUTUxUYWcodGFnKXx8aXNTVkcodGFnKTt9O2Z1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSh0YWcpe2lmKGlzU1ZHKHRhZykpe3JldHVybidzdmcnO30vLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcblx0Ly8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuXHRpZih0YWc9PT0nbWF0aCcpe3JldHVybidtYXRoJzt9fXZhciB1bmtub3duRWxlbWVudENhY2hlPU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCh0YWcpey8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKCFpbkJyb3dzZXIpe3JldHVybiB0cnVlO31pZihpc1Jlc2VydmVkVGFnKHRhZykpe3JldHVybiBmYWxzZTt9dGFnPXRhZy50b0xvd2VyQ2FzZSgpOy8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSE9bnVsbCl7cmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXTt9dmFyIGVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtpZih0YWcuaW5kZXhPZignLScpPi0xKXsvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG5cdHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ109ZWwuY29uc3RydWN0b3I9PT13aW5kb3cuSFRNTFVua25vd25FbGVtZW50fHxlbC5jb25zdHJ1Y3Rvcj09PXdpbmRvdy5IVE1MRWxlbWVudDt9ZWxzZXtyZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddPS9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSk7fX0vKiAgKi8vKipcblx0ICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG5cdCAqL2Z1bmN0aW9uIHF1ZXJ5KGVsKXtpZih0eXBlb2YgZWw9PT0nc3RyaW5nJyl7dmFyIHNlbGVjdG9yPWVsO2VsPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO2lmKCFlbCl7KFwicHJvZHVjdGlvblwiKSE9PSdwcm9kdWN0aW9uJyYmd2FybignQ2Fubm90IGZpbmQgZWxlbWVudDogJytzZWxlY3Rvcik7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO319cmV0dXJuIGVsO30vKiAgKi9mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEodGFnTmFtZSx2bm9kZSl7dmFyIGVsbT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO2lmKHRhZ05hbWUhPT0nc2VsZWN0Jyl7cmV0dXJuIGVsbTt9aWYodm5vZGUuZGF0YSYmdm5vZGUuZGF0YS5hdHRycyYmJ211bHRpcGxlJ2luIHZub2RlLmRhdGEuYXR0cnMpe2VsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywnbXVsdGlwbGUnKTt9cmV0dXJuIGVsbTt9ZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSx0YWdOYW1lKXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLHRhZ05hbWUpO31mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSh0ZXh0KXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCk7fWZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQodGV4dCl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dCk7fWZ1bmN0aW9uIGluc2VydEJlZm9yZShwYXJlbnROb2RlLG5ld05vZGUscmVmZXJlbmNlTm9kZSl7cGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSxyZWZlcmVuY2VOb2RlKTt9ZnVuY3Rpb24gcmVtb3ZlQ2hpbGQobm9kZSxjaGlsZCl7bm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7fWZ1bmN0aW9uIGFwcGVuZENoaWxkKG5vZGUsY2hpbGQpe25vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO31mdW5jdGlvbiBwYXJlbnROb2RlKG5vZGUpe3JldHVybiBub2RlLnBhcmVudE5vZGU7fWZ1bmN0aW9uIG5leHRTaWJsaW5nKG5vZGUpe3JldHVybiBub2RlLm5leHRTaWJsaW5nO31mdW5jdGlvbiB0YWdOYW1lKG5vZGUpe3JldHVybiBub2RlLnRhZ05hbWU7fWZ1bmN0aW9uIHNldFRleHRDb250ZW50KG5vZGUsdGV4dCl7bm9kZS50ZXh0Q29udGVudD10ZXh0O31mdW5jdGlvbiBzZXRBdHRyaWJ1dGUobm9kZSxrZXksdmFsKXtub2RlLnNldEF0dHJpYnV0ZShrZXksdmFsKTt9dmFyIG5vZGVPcHM9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDpjcmVhdGVFbGVtZW50JDEsY3JlYXRlRWxlbWVudE5TOmNyZWF0ZUVsZW1lbnROUyxjcmVhdGVUZXh0Tm9kZTpjcmVhdGVUZXh0Tm9kZSxjcmVhdGVDb21tZW50OmNyZWF0ZUNvbW1lbnQsaW5zZXJ0QmVmb3JlOmluc2VydEJlZm9yZSxyZW1vdmVDaGlsZDpyZW1vdmVDaGlsZCxhcHBlbmRDaGlsZDphcHBlbmRDaGlsZCxwYXJlbnROb2RlOnBhcmVudE5vZGUsbmV4dFNpYmxpbmc6bmV4dFNpYmxpbmcsdGFnTmFtZTp0YWdOYW1lLHNldFRleHRDb250ZW50OnNldFRleHRDb250ZW50LHNldEF0dHJpYnV0ZTpzZXRBdHRyaWJ1dGV9KTsvKiAgKi92YXIgcmVmPXtjcmVhdGU6ZnVuY3Rpb24gY3JlYXRlKF8sdm5vZGUpe3JlZ2lzdGVyUmVmKHZub2RlKTt9LHVwZGF0ZTpmdW5jdGlvbiB1cGRhdGUob2xkVm5vZGUsdm5vZGUpe2lmKG9sZFZub2RlLmRhdGEucmVmIT09dm5vZGUuZGF0YS5yZWYpe3JlZ2lzdGVyUmVmKG9sZFZub2RlLHRydWUpO3JlZ2lzdGVyUmVmKHZub2RlKTt9fSxkZXN0cm95OmZ1bmN0aW9uIGRlc3Ryb3kodm5vZGUpe3JlZ2lzdGVyUmVmKHZub2RlLHRydWUpO319O2Z1bmN0aW9uIHJlZ2lzdGVyUmVmKHZub2RlLGlzUmVtb3ZhbCl7dmFyIGtleT12bm9kZS5kYXRhLnJlZjtpZigha2V5KXtyZXR1cm47fXZhciB2bT12bm9kZS5jb250ZXh0O3ZhciByZWY9dm5vZGUuY2hpbGR8fHZub2RlLmVsbTt2YXIgcmVmcz12bS4kcmVmcztpZihpc1JlbW92YWwpe2lmKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSl7cmVtb3ZlJDEocmVmc1trZXldLHJlZik7fWVsc2UgaWYocmVmc1trZXldPT09cmVmKXtyZWZzW2tleV09dW5kZWZpbmVkO319ZWxzZXtpZih2bm9kZS5kYXRhLnJlZkluRm9yKXtpZihBcnJheS5pc0FycmF5KHJlZnNba2V5XSkmJnJlZnNba2V5XS5pbmRleE9mKHJlZik8MCl7cmVmc1trZXldLnB1c2gocmVmKTt9ZWxzZXtyZWZzW2tleV09W3JlZl07fX1lbHNle3JlZnNba2V5XT1yZWY7fX19LyoqXG5cdCAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuXHQgKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG5cdCAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuXHQgKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0Vcblx0ICpcblx0ICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG5cdCAqXG5cdFxuXHQvKlxuXHQgKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG5cdCAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuXHQgKi92YXIgZW1wdHlOb2RlPW5ldyBWTm9kZSgnJyx7fSxbXSk7dmFyIGhvb2tzJDE9WydjcmVhdGUnLCdhY3RpdmF0ZScsJ3VwZGF0ZScsJ3JlbW92ZScsJ2Rlc3Ryb3knXTtmdW5jdGlvbiBpc1VuZGVmKHMpe3JldHVybiBzPT1udWxsO31mdW5jdGlvbiBpc0RlZihzKXtyZXR1cm4gcyE9bnVsbDt9ZnVuY3Rpb24gc2FtZVZub2RlKHZub2RlMSx2bm9kZTIpe3JldHVybiB2bm9kZTEua2V5PT09dm5vZGUyLmtleSYmdm5vZGUxLnRhZz09PXZub2RlMi50YWcmJnZub2RlMS5pc0NvbW1lbnQ9PT12bm9kZTIuaXNDb21tZW50JiYhdm5vZGUxLmRhdGE9PT0hdm5vZGUyLmRhdGE7fWZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4KGNoaWxkcmVuLGJlZ2luSWR4LGVuZElkeCl7dmFyIGksa2V5O3ZhciBtYXA9e307Zm9yKGk9YmVnaW5JZHg7aTw9ZW5kSWR4OysraSl7a2V5PWNoaWxkcmVuW2ldLmtleTtpZihpc0RlZihrZXkpKXttYXBba2V5XT1pO319cmV0dXJuIG1hcDt9ZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbihiYWNrZW5kKXt2YXIgaSxqO3ZhciBjYnM9e307dmFyIG1vZHVsZXM9YmFja2VuZC5tb2R1bGVzO3ZhciBub2RlT3BzPWJhY2tlbmQubm9kZU9wcztmb3IoaT0wO2k8aG9va3MkMS5sZW5ndGg7KytpKXtjYnNbaG9va3MkMVtpXV09W107Zm9yKGo9MDtqPG1vZHVsZXMubGVuZ3RoOysrail7aWYobW9kdWxlc1tqXVtob29rcyQxW2ldXSE9PXVuZGVmaW5lZCl7Y2JzW2hvb2tzJDFbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rcyQxW2ldXSk7fX19ZnVuY3Rpb24gZW1wdHlOb2RlQXQoZWxtKXtyZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCkse30sW10sdW5kZWZpbmVkLGVsbSk7fWZ1bmN0aW9uIGNyZWF0ZVJtQ2IoY2hpbGRFbG0sbGlzdGVuZXJzKXtmdW5jdGlvbiByZW1vdmUkJDEoKXtpZigtLXJlbW92ZSQkMS5saXN0ZW5lcnM9PT0wKXtyZW1vdmVOb2RlKGNoaWxkRWxtKTt9fXJlbW92ZSQkMS5saXN0ZW5lcnM9bGlzdGVuZXJzO3JldHVybiByZW1vdmUkJDE7fWZ1bmN0aW9uIHJlbW92ZU5vZGUoZWwpe3ZhciBwYXJlbnQ9bm9kZU9wcy5wYXJlbnROb2RlKGVsKTsvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcblx0aWYocGFyZW50KXtub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCxlbCk7fX12YXIgaW5QcmU9MDtmdW5jdGlvbiBjcmVhdGVFbG0odm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLHBhcmVudEVsbSxyZWZFbG0sbmVzdGVkKXt2bm9kZS5pc1Jvb3RJbnNlcnQ9IW5lc3RlZDsvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuXHRpZihjcmVhdGVDb21wb25lbnQodm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLHBhcmVudEVsbSxyZWZFbG0pKXtyZXR1cm47fXZhciBkYXRhPXZub2RlLmRhdGE7dmFyIGNoaWxkcmVuPXZub2RlLmNoaWxkcmVuO3ZhciB0YWc9dm5vZGUudGFnO2lmKGlzRGVmKHRhZykpe2lmKGZhbHNlKXtpZihkYXRhJiZkYXRhLnByZSl7aW5QcmUrKzt9aWYoIWluUHJlJiYhdm5vZGUubnMmJiEoY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGgmJmNvbmZpZy5pZ25vcmVkRWxlbWVudHMuaW5kZXhPZih0YWcpPi0xKSYmY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodGFnKSl7d2FybignVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcrdGFnKyc+IC0gZGlkIHlvdSAnKydyZWdpc3RlciB0aGUgY29tcG9uZW50IGNvcnJlY3RseT8gRm9yIHJlY3Vyc2l2ZSBjb21wb25lbnRzLCAnKydtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicsdm5vZGUuY29udGV4dCk7fX12bm9kZS5lbG09dm5vZGUubnM/bm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsdGFnKTpub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLHZub2RlKTtzZXRTY29wZSh2bm9kZSk7LyogaXN0YW5idWwgaWdub3JlIGlmICove2NyZWF0ZUNoaWxkcmVuKHZub2RlLGNoaWxkcmVuLGluc2VydGVkVm5vZGVRdWV1ZSk7aWYoaXNEZWYoZGF0YSkpe2ludm9rZUNyZWF0ZUhvb2tzKHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSk7fWluc2VydChwYXJlbnRFbG0sdm5vZGUuZWxtLHJlZkVsbSk7fWlmKGZhbHNlKXtpblByZS0tO319ZWxzZSBpZih2bm9kZS5pc0NvbW1lbnQpe3Zub2RlLmVsbT1ub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7aW5zZXJ0KHBhcmVudEVsbSx2bm9kZS5lbG0scmVmRWxtKTt9ZWxzZXt2bm9kZS5lbG09bm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtpbnNlcnQocGFyZW50RWxtLHZub2RlLmVsbSxyZWZFbG0pO319ZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50KHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSxwYXJlbnRFbG0scmVmRWxtKXt2YXIgaT12bm9kZS5kYXRhO2lmKGlzRGVmKGkpKXt2YXIgaXNSZWFjdGl2YXRlZD1pc0RlZih2bm9kZS5jaGlsZCkmJmkua2VlcEFsaXZlO2lmKGlzRGVmKGk9aS5ob29rKSYmaXNEZWYoaT1pLmluaXQpKXtpKHZub2RlLGZhbHNlLyogaHlkcmF0aW5nICovLHBhcmVudEVsbSxyZWZFbG0pO30vLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuXHQvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcblx0Ly8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG5cdC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG5cdGlmKGlzRGVmKHZub2RlLmNoaWxkKSl7aW5pdENvbXBvbmVudCh2bm9kZSxpbnNlcnRlZFZub2RlUXVldWUpO2lmKGlzUmVhY3RpdmF0ZWQpe3JlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLHBhcmVudEVsbSxyZWZFbG0pO31yZXR1cm4gdHJ1ZTt9fX1mdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSxwYXJlbnRFbG0scmVmRWxtKXt2YXIgaTsvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG5cdC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcblx0Ly8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG5cdC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG5cdHZhciBpbm5lck5vZGU9dm5vZGU7d2hpbGUoaW5uZXJOb2RlLmNoaWxkKXtpbm5lck5vZGU9aW5uZXJOb2RlLmNoaWxkLl92bm9kZTtpZihpc0RlZihpPWlubmVyTm9kZS5kYXRhKSYmaXNEZWYoaT1pLnRyYW5zaXRpb24pKXtmb3IoaT0wO2k8Y2JzLmFjdGl2YXRlLmxlbmd0aDsrK2kpe2Nicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsaW5uZXJOb2RlKTt9aW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTticmVhazt9fS8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuXHQvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuXHRpbnNlcnQocGFyZW50RWxtLHZub2RlLmVsbSxyZWZFbG0pO31mdW5jdGlvbiBpbnNlcnQocGFyZW50LGVsbSxyZWYpe2lmKHBhcmVudCl7aWYocmVmKXtub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsZWxtLHJlZik7fWVsc2V7bm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsZWxtKTt9fX1mdW5jdGlvbiBjcmVhdGVDaGlsZHJlbih2bm9kZSxjaGlsZHJlbixpbnNlcnRlZFZub2RlUXVldWUpe2lmKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKXtmb3IodmFyIGk9MDtpPGNoaWxkcmVuLmxlbmd0aDsrK2kpe2NyZWF0ZUVsbShjaGlsZHJlbltpXSxpbnNlcnRlZFZub2RlUXVldWUsdm5vZGUuZWxtLG51bGwsdHJ1ZSk7fX1lbHNlIGlmKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKXtub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSxub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpKTt9fWZ1bmN0aW9uIGlzUGF0Y2hhYmxlKHZub2RlKXt3aGlsZSh2bm9kZS5jaGlsZCl7dm5vZGU9dm5vZGUuY2hpbGQuX3Zub2RlO31yZXR1cm4gaXNEZWYodm5vZGUudGFnKTt9ZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlKXtmb3IodmFyIGkkMT0wO2kkMTxjYnMuY3JlYXRlLmxlbmd0aDsrK2kkMSl7Y2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSx2bm9kZSk7fWk9dm5vZGUuZGF0YS5ob29rOy8vIFJldXNlIHZhcmlhYmxlXG5cdGlmKGlzRGVmKGkpKXtpZihpLmNyZWF0ZSl7aS5jcmVhdGUoZW1wdHlOb2RlLHZub2RlKTt9aWYoaS5pbnNlcnQpe2luc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTt9fX1mdW5jdGlvbiBpbml0Q29tcG9uZW50KHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSl7aWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KXtpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTt9dm5vZGUuZWxtPXZub2RlLmNoaWxkLiRlbDtpZihpc1BhdGNoYWJsZSh2bm9kZSkpe2ludm9rZUNyZWF0ZUhvb2tzKHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSk7c2V0U2NvcGUodm5vZGUpO31lbHNley8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuXHQvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG5cdHJlZ2lzdGVyUmVmKHZub2RlKTsvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuXHRpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7fX0vLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuXHQvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuXHQvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG5cdGZ1bmN0aW9uIHNldFNjb3BlKHZub2RlKXt2YXIgaTtpZihpc0RlZihpPXZub2RlLmNvbnRleHQpJiZpc0RlZihpPWkuJG9wdGlvbnMuX3Njb3BlSWQpKXtub2RlT3BzLnNldEF0dHJpYnV0ZSh2bm9kZS5lbG0saSwnJyk7fWlmKGlzRGVmKGk9YWN0aXZlSW5zdGFuY2UpJiZpIT09dm5vZGUuY29udGV4dCYmaXNEZWYoaT1pLiRvcHRpb25zLl9zY29wZUlkKSl7bm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLGksJycpO319ZnVuY3Rpb24gYWRkVm5vZGVzKHBhcmVudEVsbSxyZWZFbG0sdm5vZGVzLHN0YXJ0SWR4LGVuZElkeCxpbnNlcnRlZFZub2RlUXVldWUpe2Zvcig7c3RhcnRJZHg8PWVuZElkeDsrK3N0YXJ0SWR4KXtjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSxpbnNlcnRlZFZub2RlUXVldWUscGFyZW50RWxtLHJlZkVsbSk7fX1mdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayh2bm9kZSl7dmFyIGksajt2YXIgZGF0YT12bm9kZS5kYXRhO2lmKGlzRGVmKGRhdGEpKXtpZihpc0RlZihpPWRhdGEuaG9vaykmJmlzRGVmKGk9aS5kZXN0cm95KSl7aSh2bm9kZSk7fWZvcihpPTA7aTxjYnMuZGVzdHJveS5sZW5ndGg7KytpKXtjYnMuZGVzdHJveVtpXSh2bm9kZSk7fX1pZihpc0RlZihpPXZub2RlLmNoaWxkcmVuKSl7Zm9yKGo9MDtqPHZub2RlLmNoaWxkcmVuLmxlbmd0aDsrK2ope2ludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTt9fX1mdW5jdGlvbiByZW1vdmVWbm9kZXMocGFyZW50RWxtLHZub2RlcyxzdGFydElkeCxlbmRJZHgpe2Zvcig7c3RhcnRJZHg8PWVuZElkeDsrK3N0YXJ0SWR4KXt2YXIgY2g9dm5vZGVzW3N0YXJ0SWR4XTtpZihpc0RlZihjaCkpe2lmKGlzRGVmKGNoLnRhZykpe3JlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO2ludm9rZURlc3Ryb3lIb29rKGNoKTt9ZWxzZXsvLyBUZXh0IG5vZGVcblx0cmVtb3ZlTm9kZShjaC5lbG0pO319fX1mdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKHZub2RlLHJtKXtpZihybXx8aXNEZWYodm5vZGUuZGF0YSkpe3ZhciBsaXN0ZW5lcnM9Y2JzLnJlbW92ZS5sZW5ndGgrMTtpZighcm0pey8vIGRpcmVjdGx5IHJlbW92aW5nXG5cdHJtPWNyZWF0ZVJtQ2Iodm5vZGUuZWxtLGxpc3RlbmVycyk7fWVsc2V7Ly8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG5cdC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcblx0cm0ubGlzdGVuZXJzKz1saXN0ZW5lcnM7fS8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG5cdGlmKGlzRGVmKGk9dm5vZGUuY2hpbGQpJiZpc0RlZihpPWkuX3Zub2RlKSYmaXNEZWYoaS5kYXRhKSl7cmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLHJtKTt9Zm9yKGk9MDtpPGNicy5yZW1vdmUubGVuZ3RoOysraSl7Y2JzLnJlbW92ZVtpXSh2bm9kZSxybSk7fWlmKGlzRGVmKGk9dm5vZGUuZGF0YS5ob29rKSYmaXNEZWYoaT1pLnJlbW92ZSkpe2kodm5vZGUscm0pO31lbHNle3JtKCk7fX1lbHNle3JlbW92ZU5vZGUodm5vZGUuZWxtKTt9fWZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuKHBhcmVudEVsbSxvbGRDaCxuZXdDaCxpbnNlcnRlZFZub2RlUXVldWUscmVtb3ZlT25seSl7dmFyIG9sZFN0YXJ0SWR4PTA7dmFyIG5ld1N0YXJ0SWR4PTA7dmFyIG9sZEVuZElkeD1vbGRDaC5sZW5ndGgtMTt2YXIgb2xkU3RhcnRWbm9kZT1vbGRDaFswXTt2YXIgb2xkRW5kVm5vZGU9b2xkQ2hbb2xkRW5kSWR4XTt2YXIgbmV3RW5kSWR4PW5ld0NoLmxlbmd0aC0xO3ZhciBuZXdTdGFydFZub2RlPW5ld0NoWzBdO3ZhciBuZXdFbmRWbm9kZT1uZXdDaFtuZXdFbmRJZHhdO3ZhciBvbGRLZXlUb0lkeCxpZHhJbk9sZCxlbG1Ub01vdmUscmVmRWxtOy8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuXHQvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG5cdC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG5cdHZhciBjYW5Nb3ZlPSFyZW1vdmVPbmx5O3doaWxlKG9sZFN0YXJ0SWR4PD1vbGRFbmRJZHgmJm5ld1N0YXJ0SWR4PD1uZXdFbmRJZHgpe2lmKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpe29sZFN0YXJ0Vm5vZGU9b2xkQ2hbKytvbGRTdGFydElkeF07Ly8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuXHR9ZWxzZSBpZihpc1VuZGVmKG9sZEVuZFZub2RlKSl7b2xkRW5kVm5vZGU9b2xkQ2hbLS1vbGRFbmRJZHhdO31lbHNlIGlmKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLG5ld1N0YXJ0Vm5vZGUpKXtwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsbmV3U3RhcnRWbm9kZSxpbnNlcnRlZFZub2RlUXVldWUpO29sZFN0YXJ0Vm5vZGU9b2xkQ2hbKytvbGRTdGFydElkeF07bmV3U3RhcnRWbm9kZT1uZXdDaFsrK25ld1N0YXJ0SWR4XTt9ZWxzZSBpZihzYW1lVm5vZGUob2xkRW5kVm5vZGUsbmV3RW5kVm5vZGUpKXtwYXRjaFZub2RlKG9sZEVuZFZub2RlLG5ld0VuZFZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSk7b2xkRW5kVm5vZGU9b2xkQ2hbLS1vbGRFbmRJZHhdO25ld0VuZFZub2RlPW5ld0NoWy0tbmV3RW5kSWR4XTt9ZWxzZSBpZihzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSxuZXdFbmRWbm9kZSkpey8vIFZub2RlIG1vdmVkIHJpZ2h0XG5cdHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSxuZXdFbmRWbm9kZSxpbnNlcnRlZFZub2RlUXVldWUpO2Nhbk1vdmUmJm5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSxvbGRTdGFydFZub2RlLmVsbSxub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO29sZFN0YXJ0Vm5vZGU9b2xkQ2hbKytvbGRTdGFydElkeF07bmV3RW5kVm5vZGU9bmV3Q2hbLS1uZXdFbmRJZHhdO31lbHNlIGlmKHNhbWVWbm9kZShvbGRFbmRWbm9kZSxuZXdTdGFydFZub2RlKSl7Ly8gVm5vZGUgbW92ZWQgbGVmdFxuXHRwYXRjaFZub2RlKG9sZEVuZFZub2RlLG5ld1N0YXJ0Vm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtjYW5Nb3ZlJiZub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sb2xkRW5kVm5vZGUuZWxtLG9sZFN0YXJ0Vm5vZGUuZWxtKTtvbGRFbmRWbm9kZT1vbGRDaFstLW9sZEVuZElkeF07bmV3U3RhcnRWbm9kZT1uZXdDaFsrK25ld1N0YXJ0SWR4XTt9ZWxzZXtpZihpc1VuZGVmKG9sZEtleVRvSWR4KSl7b2xkS2V5VG9JZHg9Y3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsb2xkU3RhcnRJZHgsb2xkRW5kSWR4KTt9aWR4SW5PbGQ9aXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpP29sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XTpudWxsO2lmKGlzVW5kZWYoaWR4SW5PbGQpKXsvLyBOZXcgZWxlbWVudFxuXHRjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSxpbnNlcnRlZFZub2RlUXVldWUscGFyZW50RWxtLG9sZFN0YXJ0Vm5vZGUuZWxtKTtuZXdTdGFydFZub2RlPW5ld0NoWysrbmV3U3RhcnRJZHhdO31lbHNle2VsbVRvTW92ZT1vbGRDaFtpZHhJbk9sZF07LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoZmFsc2Upe3dhcm4oJ0l0IHNlZW1zIHRoZXJlIGFyZSBkdXBsaWNhdGUga2V5cyB0aGF0IGlzIGNhdXNpbmcgYW4gdXBkYXRlIGVycm9yLiAnKydNYWtlIHN1cmUgZWFjaCB2LWZvciBpdGVtIGhhcyBhIHVuaXF1ZSBrZXkuJyk7fWlmKHNhbWVWbm9kZShlbG1Ub01vdmUsbmV3U3RhcnRWbm9kZSkpe3BhdGNoVm5vZGUoZWxtVG9Nb3ZlLG5ld1N0YXJ0Vm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtvbGRDaFtpZHhJbk9sZF09dW5kZWZpbmVkO2Nhbk1vdmUmJm5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSxuZXdTdGFydFZub2RlLmVsbSxvbGRTdGFydFZub2RlLmVsbSk7bmV3U3RhcnRWbm9kZT1uZXdDaFsrK25ld1N0YXJ0SWR4XTt9ZWxzZXsvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG5cdGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSxwYXJlbnRFbG0sb2xkU3RhcnRWbm9kZS5lbG0pO25ld1N0YXJ0Vm5vZGU9bmV3Q2hbKytuZXdTdGFydElkeF07fX19fWlmKG9sZFN0YXJ0SWR4Pm9sZEVuZElkeCl7cmVmRWxtPWlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4KzFdKT9udWxsOm5ld0NoW25ld0VuZElkeCsxXS5lbG07YWRkVm5vZGVzKHBhcmVudEVsbSxyZWZFbG0sbmV3Q2gsbmV3U3RhcnRJZHgsbmV3RW5kSWR4LGluc2VydGVkVm5vZGVRdWV1ZSk7fWVsc2UgaWYobmV3U3RhcnRJZHg+bmV3RW5kSWR4KXtyZW1vdmVWbm9kZXMocGFyZW50RWxtLG9sZENoLG9sZFN0YXJ0SWR4LG9sZEVuZElkeCk7fX1mdW5jdGlvbiBwYXRjaFZub2RlKG9sZFZub2RlLHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSxyZW1vdmVPbmx5KXtpZihvbGRWbm9kZT09PXZub2RlKXtyZXR1cm47fS8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cblx0Ly8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG5cdC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuXHQvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuXHRpZih2bm9kZS5pc1N0YXRpYyYmb2xkVm5vZGUuaXNTdGF0aWMmJnZub2RlLmtleT09PW9sZFZub2RlLmtleSYmKHZub2RlLmlzQ2xvbmVkfHx2bm9kZS5pc09uY2UpKXt2bm9kZS5lbG09b2xkVm5vZGUuZWxtO3Zub2RlLmNoaWxkPW9sZFZub2RlLmNoaWxkO3JldHVybjt9dmFyIGk7dmFyIGRhdGE9dm5vZGUuZGF0YTt2YXIgaGFzRGF0YT1pc0RlZihkYXRhKTtpZihoYXNEYXRhJiZpc0RlZihpPWRhdGEuaG9vaykmJmlzRGVmKGk9aS5wcmVwYXRjaCkpe2kob2xkVm5vZGUsdm5vZGUpO312YXIgZWxtPXZub2RlLmVsbT1vbGRWbm9kZS5lbG07dmFyIG9sZENoPW9sZFZub2RlLmNoaWxkcmVuO3ZhciBjaD12bm9kZS5jaGlsZHJlbjtpZihoYXNEYXRhJiZpc1BhdGNoYWJsZSh2bm9kZSkpe2ZvcihpPTA7aTxjYnMudXBkYXRlLmxlbmd0aDsrK2kpe2Nicy51cGRhdGVbaV0ob2xkVm5vZGUsdm5vZGUpO31pZihpc0RlZihpPWRhdGEuaG9vaykmJmlzRGVmKGk9aS51cGRhdGUpKXtpKG9sZFZub2RlLHZub2RlKTt9fWlmKGlzVW5kZWYodm5vZGUudGV4dCkpe2lmKGlzRGVmKG9sZENoKSYmaXNEZWYoY2gpKXtpZihvbGRDaCE9PWNoKXt1cGRhdGVDaGlsZHJlbihlbG0sb2xkQ2gsY2gsaW5zZXJ0ZWRWbm9kZVF1ZXVlLHJlbW92ZU9ubHkpO319ZWxzZSBpZihpc0RlZihjaCkpe2lmKGlzRGVmKG9sZFZub2RlLnRleHQpKXtub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwnJyk7fWFkZFZub2RlcyhlbG0sbnVsbCxjaCwwLGNoLmxlbmd0aC0xLGluc2VydGVkVm5vZGVRdWV1ZSk7fWVsc2UgaWYoaXNEZWYob2xkQ2gpKXtyZW1vdmVWbm9kZXMoZWxtLG9sZENoLDAsb2xkQ2gubGVuZ3RoLTEpO31lbHNlIGlmKGlzRGVmKG9sZFZub2RlLnRleHQpKXtub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwnJyk7fX1lbHNlIGlmKG9sZFZub2RlLnRleHQhPT12bm9kZS50ZXh0KXtub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSx2bm9kZS50ZXh0KTt9aWYoaGFzRGF0YSl7aWYoaXNEZWYoaT1kYXRhLmhvb2spJiZpc0RlZihpPWkucG9zdHBhdGNoKSl7aShvbGRWbm9kZSx2bm9kZSk7fX19ZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayh2bm9kZSxxdWV1ZSxpbml0aWFsKXsvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcblx0Ly8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcblx0aWYoaW5pdGlhbCYmdm5vZGUucGFyZW50KXt2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0PXF1ZXVlO31lbHNle2Zvcih2YXIgaT0wO2k8cXVldWUubGVuZ3RoOysraSl7cXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7fX19dmFyIGJhaWxlZD1mYWxzZTsvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuXHQvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuXHR2YXIgaXNSZW5kZXJlZE1vZHVsZT1tYWtlTWFwKCdhdHRycyxzdHlsZSxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTsvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuXHRmdW5jdGlvbiBoeWRyYXRlKGVsbSx2bm9kZSxpbnNlcnRlZFZub2RlUXVldWUpe2lmKGZhbHNlKXtpZighYXNzZXJ0Tm9kZU1hdGNoKGVsbSx2bm9kZSkpe3JldHVybiBmYWxzZTt9fXZub2RlLmVsbT1lbG07dmFyIHRhZz12bm9kZS50YWc7dmFyIGRhdGE9dm5vZGUuZGF0YTt2YXIgY2hpbGRyZW49dm5vZGUuY2hpbGRyZW47aWYoaXNEZWYoZGF0YSkpe2lmKGlzRGVmKGk9ZGF0YS5ob29rKSYmaXNEZWYoaT1pLmluaXQpKXtpKHZub2RlLHRydWUvKiBoeWRyYXRpbmcgKi8pO31pZihpc0RlZihpPXZub2RlLmNoaWxkKSl7Ly8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG5cdGluaXRDb21wb25lbnQodm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtyZXR1cm4gdHJ1ZTt9fWlmKGlzRGVmKHRhZykpe2lmKGlzRGVmKGNoaWxkcmVuKSl7Ly8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG5cdGlmKCFlbG0uaGFzQ2hpbGROb2RlcygpKXtjcmVhdGVDaGlsZHJlbih2bm9kZSxjaGlsZHJlbixpbnNlcnRlZFZub2RlUXVldWUpO31lbHNle3ZhciBjaGlsZHJlbk1hdGNoPXRydWU7dmFyIGNoaWxkTm9kZT1lbG0uZmlyc3RDaGlsZDtmb3IodmFyIGkkMT0wO2kkMTxjaGlsZHJlbi5sZW5ndGg7aSQxKyspe2lmKCFjaGlsZE5vZGV8fCFoeWRyYXRlKGNoaWxkTm9kZSxjaGlsZHJlbltpJDFdLGluc2VydGVkVm5vZGVRdWV1ZSkpe2NoaWxkcmVuTWF0Y2g9ZmFsc2U7YnJlYWs7fWNoaWxkTm9kZT1jaGlsZE5vZGUubmV4dFNpYmxpbmc7fS8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcblx0Ly8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cblx0aWYoIWNoaWxkcmVuTWF0Y2h8fGNoaWxkTm9kZSl7aWYoZmFsc2Upe2JhaWxlZD10cnVlO2NvbnNvbGUud2FybignUGFyZW50OiAnLGVsbSk7Y29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsZWxtLmNoaWxkTm9kZXMsY2hpbGRyZW4pO31yZXR1cm4gZmFsc2U7fX19aWYoaXNEZWYoZGF0YSkpe2Zvcih2YXIga2V5IGluIGRhdGEpe2lmKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpe2ludm9rZUNyZWF0ZUhvb2tzKHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSk7YnJlYWs7fX19fWVsc2UgaWYoZWxtLmRhdGEhPT12bm9kZS50ZXh0KXtlbG0uZGF0YT12bm9kZS50ZXh0O31yZXR1cm4gdHJ1ZTt9ZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoKG5vZGUsdm5vZGUpe2lmKHZub2RlLnRhZyl7cmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50Jyk9PT0wfHx2bm9kZS50YWcudG9Mb3dlckNhc2UoKT09PShub2RlLnRhZ05hbWUmJm5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKTt9ZWxzZXtyZXR1cm4gbm9kZS5ub2RlVHlwZT09PSh2bm9kZS5pc0NvbW1lbnQ/ODozKTt9fXJldHVybiBmdW5jdGlvbiBwYXRjaChvbGRWbm9kZSx2bm9kZSxoeWRyYXRpbmcscmVtb3ZlT25seSxwYXJlbnRFbG0scmVmRWxtKXtpZighdm5vZGUpe2lmKG9sZFZub2RlKXtpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7fXJldHVybjt9dmFyIGVsbSxwYXJlbnQ7dmFyIGlzSW5pdGlhbFBhdGNoPWZhbHNlO3ZhciBpbnNlcnRlZFZub2RlUXVldWU9W107aWYoIW9sZFZub2RlKXsvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG5cdGlzSW5pdGlhbFBhdGNoPXRydWU7Y3JlYXRlRWxtKHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSxwYXJlbnRFbG0scmVmRWxtKTt9ZWxzZXt2YXIgaXNSZWFsRWxlbWVudD1pc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7aWYoIWlzUmVhbEVsZW1lbnQmJnNhbWVWbm9kZShvbGRWbm9kZSx2bm9kZSkpey8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuXHRwYXRjaFZub2RlKG9sZFZub2RlLHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSxyZW1vdmVPbmx5KTt9ZWxzZXtpZihpc1JlYWxFbGVtZW50KXsvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuXHQvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuXHQvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuXHRpZihvbGRWbm9kZS5ub2RlVHlwZT09PTEmJm9sZFZub2RlLmhhc0F0dHJpYnV0ZSgnc2VydmVyLXJlbmRlcmVkJykpe29sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZSgnc2VydmVyLXJlbmRlcmVkJyk7aHlkcmF0aW5nPXRydWU7fWlmKGh5ZHJhdGluZyl7aWYoaHlkcmF0ZShvbGRWbm9kZSx2bm9kZSxpbnNlcnRlZFZub2RlUXVldWUpKXtpbnZva2VJbnNlcnRIb29rKHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSx0cnVlKTtyZXR1cm4gb2xkVm5vZGU7fWVsc2UgaWYoZmFsc2Upe3dhcm4oJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnKydzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnKydIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJysnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcrJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLicpO319Ly8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG5cdC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG5cdG9sZFZub2RlPWVtcHR5Tm9kZUF0KG9sZFZub2RlKTt9Ly8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcblx0ZWxtPW9sZFZub2RlLmVsbTtwYXJlbnQ9bm9kZU9wcy5wYXJlbnROb2RlKGVsbSk7Y3JlYXRlRWxtKHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSxwYXJlbnQsbm9kZU9wcy5uZXh0U2libGluZyhlbG0pKTtpZih2bm9kZS5wYXJlbnQpey8vIGNvbXBvbmVudCByb290IGVsZW1lbnQgcmVwbGFjZWQuXG5cdC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuXHR2YXIgYW5jZXN0b3I9dm5vZGUucGFyZW50O3doaWxlKGFuY2VzdG9yKXthbmNlc3Rvci5lbG09dm5vZGUuZWxtO2FuY2VzdG9yPWFuY2VzdG9yLnBhcmVudDt9aWYoaXNQYXRjaGFibGUodm5vZGUpKXtmb3IodmFyIGk9MDtpPGNicy5jcmVhdGUubGVuZ3RoOysraSl7Y2JzLmNyZWF0ZVtpXShlbXB0eU5vZGUsdm5vZGUucGFyZW50KTt9fX1pZihwYXJlbnQhPT1udWxsKXtyZW1vdmVWbm9kZXMocGFyZW50LFtvbGRWbm9kZV0sMCwwKTt9ZWxzZSBpZihpc0RlZihvbGRWbm9kZS50YWcpKXtpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7fX19aW52b2tlSW5zZXJ0SG9vayh2bm9kZSxpbnNlcnRlZFZub2RlUXVldWUsaXNJbml0aWFsUGF0Y2gpO3JldHVybiB2bm9kZS5lbG07fTt9LyogICovdmFyIGRpcmVjdGl2ZXM9e2NyZWF0ZTp1cGRhdGVEaXJlY3RpdmVzLHVwZGF0ZTp1cGRhdGVEaXJlY3RpdmVzLGRlc3Ryb3k6ZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyh2bm9kZSl7dXBkYXRlRGlyZWN0aXZlcyh2bm9kZSxlbXB0eU5vZGUpO319O2Z1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMob2xkVm5vZGUsdm5vZGUpe2lmKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlc3x8dm5vZGUuZGF0YS5kaXJlY3RpdmVzKXtfdXBkYXRlKG9sZFZub2RlLHZub2RlKTt9fWZ1bmN0aW9uIF91cGRhdGUob2xkVm5vZGUsdm5vZGUpe3ZhciBpc0NyZWF0ZT1vbGRWbm9kZT09PWVtcHR5Tm9kZTt2YXIgaXNEZXN0cm95PXZub2RlPT09ZW1wdHlOb2RlO3ZhciBvbGREaXJzPW5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsb2xkVm5vZGUuY29udGV4dCk7dmFyIG5ld0RpcnM9bm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcyx2bm9kZS5jb250ZXh0KTt2YXIgZGlyc1dpdGhJbnNlcnQ9W107dmFyIGRpcnNXaXRoUG9zdHBhdGNoPVtdO3ZhciBrZXksb2xkRGlyLGRpcjtmb3Ioa2V5IGluIG5ld0RpcnMpe29sZERpcj1vbGREaXJzW2tleV07ZGlyPW5ld0RpcnNba2V5XTtpZighb2xkRGlyKXsvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG5cdGNhbGxIb29rJDEoZGlyLCdiaW5kJyx2bm9kZSxvbGRWbm9kZSk7aWYoZGlyLmRlZiYmZGlyLmRlZi5pbnNlcnRlZCl7ZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO319ZWxzZXsvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuXHRkaXIub2xkVmFsdWU9b2xkRGlyLnZhbHVlO2NhbGxIb29rJDEoZGlyLCd1cGRhdGUnLHZub2RlLG9sZFZub2RlKTtpZihkaXIuZGVmJiZkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpe2RpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTt9fX1pZihkaXJzV2l0aEluc2VydC5sZW5ndGgpe3ZhciBjYWxsSW5zZXJ0PWZ1bmN0aW9uIGNhbGxJbnNlcnQoKXtmb3IodmFyIGk9MDtpPGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDtpKyspe2NhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sJ2luc2VydGVkJyx2bm9kZSxvbGRWbm9kZSk7fX07aWYoaXNDcmVhdGUpe21lcmdlVk5vZGVIb29rKHZub2RlLmRhdGEuaG9va3x8KHZub2RlLmRhdGEuaG9vaz17fSksJ2luc2VydCcsY2FsbEluc2VydCwnZGlyLWluc2VydCcpO31lbHNle2NhbGxJbnNlcnQoKTt9fWlmKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCl7bWVyZ2VWTm9kZUhvb2sodm5vZGUuZGF0YS5ob29rfHwodm5vZGUuZGF0YS5ob29rPXt9KSwncG9zdHBhdGNoJyxmdW5jdGlvbigpe2Zvcih2YXIgaT0wO2k8ZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoO2krKyl7Y2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwnY29tcG9uZW50VXBkYXRlZCcsdm5vZGUsb2xkVm5vZGUpO319LCdkaXItcG9zdHBhdGNoJyk7fWlmKCFpc0NyZWF0ZSl7Zm9yKGtleSBpbiBvbGREaXJzKXtpZighbmV3RGlyc1trZXldKXsvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG5cdGNhbGxIb29rJDEob2xkRGlyc1trZXldLCd1bmJpbmQnLG9sZFZub2RlLG9sZFZub2RlLGlzRGVzdHJveSk7fX19fXZhciBlbXB0eU1vZGlmaWVycz1PYmplY3QuY3JlYXRlKG51bGwpO2Z1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShkaXJzLHZtKXt2YXIgcmVzPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoIWRpcnMpe3JldHVybiByZXM7fXZhciBpLGRpcjtmb3IoaT0wO2k8ZGlycy5sZW5ndGg7aSsrKXtkaXI9ZGlyc1tpXTtpZighZGlyLm1vZGlmaWVycyl7ZGlyLm1vZGlmaWVycz1lbXB0eU1vZGlmaWVyczt9cmVzW2dldFJhd0Rpck5hbWUoZGlyKV09ZGlyO2Rpci5kZWY9cmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCdkaXJlY3RpdmVzJyxkaXIubmFtZSx0cnVlKTt9cmV0dXJuIHJlczt9ZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZShkaXIpe3JldHVybiBkaXIucmF3TmFtZXx8ZGlyLm5hbWUrXCIuXCIrT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVyc3x8e30pLmpvaW4oJy4nKTt9ZnVuY3Rpb24gY2FsbEhvb2skMShkaXIsaG9vayx2bm9kZSxvbGRWbm9kZSxpc0Rlc3Ryb3kpe3ZhciBmbj1kaXIuZGVmJiZkaXIuZGVmW2hvb2tdO2lmKGZuKXtmbih2bm9kZS5lbG0sZGlyLHZub2RlLG9sZFZub2RlLGlzRGVzdHJveSk7fX12YXIgYmFzZU1vZHVsZXM9W3JlZixkaXJlY3RpdmVzXTsvKiAgKi9mdW5jdGlvbiB1cGRhdGVBdHRycyhvbGRWbm9kZSx2bm9kZSl7aWYoIW9sZFZub2RlLmRhdGEuYXR0cnMmJiF2bm9kZS5kYXRhLmF0dHJzKXtyZXR1cm47fXZhciBrZXksY3VyLG9sZDt2YXIgZWxtPXZub2RlLmVsbTt2YXIgb2xkQXR0cnM9b2xkVm5vZGUuZGF0YS5hdHRyc3x8e307dmFyIGF0dHJzPXZub2RlLmRhdGEuYXR0cnN8fHt9Oy8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuXHRpZihhdHRycy5fX29iX18pe2F0dHJzPXZub2RlLmRhdGEuYXR0cnM9ZXh0ZW5kKHt9LGF0dHJzKTt9Zm9yKGtleSBpbiBhdHRycyl7Y3VyPWF0dHJzW2tleV07b2xkPW9sZEF0dHJzW2tleV07aWYob2xkIT09Y3VyKXtzZXRBdHRyKGVsbSxrZXksY3VyKTt9fS8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGlzSUU5JiZhdHRycy52YWx1ZSE9PW9sZEF0dHJzLnZhbHVlKXtzZXRBdHRyKGVsbSwndmFsdWUnLGF0dHJzLnZhbHVlKTt9Zm9yKGtleSBpbiBvbGRBdHRycyl7aWYoYXR0cnNba2V5XT09bnVsbCl7aWYoaXNYbGluayhrZXkpKXtlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUyxnZXRYbGlua1Byb3Aoa2V5KSk7fWVsc2UgaWYoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSl7ZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO319fX1mdW5jdGlvbiBzZXRBdHRyKGVsLGtleSx2YWx1ZSl7aWYoaXNCb29sZWFuQXR0cihrZXkpKXsvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuXHQvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuXHRpZihpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSl7ZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7fWVsc2V7ZWwuc2V0QXR0cmlidXRlKGtleSxrZXkpO319ZWxzZSBpZihpc0VudW1lcmF0ZWRBdHRyKGtleSkpe2VsLnNldEF0dHJpYnV0ZShrZXksaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSl8fHZhbHVlPT09J2ZhbHNlJz8nZmFsc2UnOid0cnVlJyk7fWVsc2UgaWYoaXNYbGluayhrZXkpKXtpZihpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSl7ZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUyxnZXRYbGlua1Byb3Aoa2V5KSk7fWVsc2V7ZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUyxrZXksdmFsdWUpO319ZWxzZXtpZihpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSl7ZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7fWVsc2V7ZWwuc2V0QXR0cmlidXRlKGtleSx2YWx1ZSk7fX19dmFyIGF0dHJzPXtjcmVhdGU6dXBkYXRlQXR0cnMsdXBkYXRlOnVwZGF0ZUF0dHJzfTsvKiAgKi9mdW5jdGlvbiB1cGRhdGVDbGFzcyhvbGRWbm9kZSx2bm9kZSl7dmFyIGVsPXZub2RlLmVsbTt2YXIgZGF0YT12bm9kZS5kYXRhO3ZhciBvbGREYXRhPW9sZFZub2RlLmRhdGE7aWYoIWRhdGEuc3RhdGljQ2xhc3MmJiFkYXRhLmNsYXNzJiYoIW9sZERhdGF8fCFvbGREYXRhLnN0YXRpY0NsYXNzJiYhb2xkRGF0YS5jbGFzcykpe3JldHVybjt9dmFyIGNscz1nZW5DbGFzc0ZvclZub2RlKHZub2RlKTsvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG5cdHZhciB0cmFuc2l0aW9uQ2xhc3M9ZWwuX3RyYW5zaXRpb25DbGFzc2VzO2lmKHRyYW5zaXRpb25DbGFzcyl7Y2xzPWNvbmNhdChjbHMsc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7fS8vIHNldCB0aGUgY2xhc3Ncblx0aWYoY2xzIT09ZWwuX3ByZXZDbGFzcyl7ZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsY2xzKTtlbC5fcHJldkNsYXNzPWNsczt9fXZhciBrbGFzcz17Y3JlYXRlOnVwZGF0ZUNsYXNzLHVwZGF0ZTp1cGRhdGVDbGFzc307LyogICovdmFyIHRhcmdldCQxO2Z1bmN0aW9uIGFkZCQyKGV2ZW50LF9oYW5kbGVyLG9uY2UsY2FwdHVyZSl7aWYob25jZSl7dmFyIG9sZEhhbmRsZXI9X2hhbmRsZXI7X2hhbmRsZXI9ZnVuY3Rpb24gaGFuZGxlcihldil7cmVtb3ZlJDMoZXZlbnQsX2hhbmRsZXIsY2FwdHVyZSk7YXJndW1lbnRzLmxlbmd0aD09PTE/b2xkSGFuZGxlcihldik6b2xkSGFuZGxlci5hcHBseShudWxsLGFyZ3VtZW50cyk7fTt9dGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihldmVudCxfaGFuZGxlcixjYXB0dXJlKTt9ZnVuY3Rpb24gcmVtb3ZlJDMoZXZlbnQsaGFuZGxlcixjYXB0dXJlKXt0YXJnZXQkMS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LGhhbmRsZXIsY2FwdHVyZSk7fWZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyhvbGRWbm9kZSx2bm9kZSl7aWYoIW9sZFZub2RlLmRhdGEub24mJiF2bm9kZS5kYXRhLm9uKXtyZXR1cm47fXZhciBvbj12bm9kZS5kYXRhLm9ufHx7fTt2YXIgb2xkT249b2xkVm5vZGUuZGF0YS5vbnx8e307dGFyZ2V0JDE9dm5vZGUuZWxtO3VwZGF0ZUxpc3RlbmVycyhvbixvbGRPbixhZGQkMixyZW1vdmUkMyx2bm9kZS5jb250ZXh0KTt9dmFyIGV2ZW50cz17Y3JlYXRlOnVwZGF0ZURPTUxpc3RlbmVycyx1cGRhdGU6dXBkYXRlRE9NTGlzdGVuZXJzfTsvKiAgKi9mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyhvbGRWbm9kZSx2bm9kZSl7aWYoIW9sZFZub2RlLmRhdGEuZG9tUHJvcHMmJiF2bm9kZS5kYXRhLmRvbVByb3BzKXtyZXR1cm47fXZhciBrZXksY3VyO3ZhciBlbG09dm5vZGUuZWxtO3ZhciBvbGRQcm9wcz1vbGRWbm9kZS5kYXRhLmRvbVByb3BzfHx7fTt2YXIgcHJvcHM9dm5vZGUuZGF0YS5kb21Qcm9wc3x8e307Ly8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG5cdGlmKHByb3BzLl9fb2JfXyl7cHJvcHM9dm5vZGUuZGF0YS5kb21Qcm9wcz1leHRlbmQoe30scHJvcHMpO31mb3Ioa2V5IGluIG9sZFByb3BzKXtpZihwcm9wc1trZXldPT1udWxsKXtlbG1ba2V5XT0nJzt9fWZvcihrZXkgaW4gcHJvcHMpe2N1cj1wcm9wc1trZXldOy8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuXHQvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuXHQvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuXHRpZihrZXk9PT0ndGV4dENvbnRlbnQnfHxrZXk9PT0naW5uZXJIVE1MJyl7aWYodm5vZGUuY2hpbGRyZW4pe3Zub2RlLmNoaWxkcmVuLmxlbmd0aD0wO31pZihjdXI9PT1vbGRQcm9wc1trZXldKXtjb250aW51ZTt9fS8vICM0NTIxOiBpZiBhIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHVwZGF0ZSBiZWZvcmUgdGhlIGNoYW5nZSBldmVudCBpc1xuXHQvLyBkaXNwYXRjaGVkIG9uIGEgY2hlY2tib3gvcmFkaW8gaW5wdXQsIHRoZSBpbnB1dCdzIGNoZWNrZWQgc3RhdGUgd2lsbFxuXHQvLyBiZSByZXNldCBhbmQgZmFpbCB0byB0cmlnZ2VyIGFub3RoZXIgdXBkYXRlLlxuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL2lmKGtleT09PSdjaGVja2VkJyYmIWlzRGlydHkoZWxtLGN1cikpe2NvbnRpbnVlO31pZihrZXk9PT0ndmFsdWUnKXsvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuXHQvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG5cdGVsbS5fdmFsdWU9Y3VyOy8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuXHR2YXIgc3RyQ3VyPWN1cj09bnVsbD8nJzpTdHJpbmcoY3VyKTtpZihzaG91bGRVcGRhdGVWYWx1ZShlbG0sdm5vZGUsc3RyQ3VyKSl7ZWxtLnZhbHVlPXN0ckN1cjt9fWVsc2V7ZWxtW2tleV09Y3VyO319fS8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXHRmdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZShlbG0sdm5vZGUsY2hlY2tWYWwpe2lmKCFlbG0uY29tcG9zaW5nJiYodm5vZGUudGFnPT09J29wdGlvbid8fGlzRGlydHkoZWxtLGNoZWNrVmFsKXx8aXNJbnB1dENoYW5nZWQodm5vZGUsY2hlY2tWYWwpKSl7cmV0dXJuIHRydWU7fXJldHVybiBmYWxzZTt9ZnVuY3Rpb24gaXNEaXJ0eShlbG0sY2hlY2tWYWwpe3JldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IT09ZWxtJiZlbG0udmFsdWUhPT1jaGVja1ZhbDt9ZnVuY3Rpb24gaXNJbnB1dENoYW5nZWQodm5vZGUsbmV3VmFsKXt2YXIgdmFsdWU9dm5vZGUuZWxtLnZhbHVlO3ZhciBtb2RpZmllcnM9dm5vZGUuZWxtLl92TW9kaWZpZXJzOy8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuXHRpZihtb2RpZmllcnMmJm1vZGlmaWVycy5udW1iZXJ8fHZub2RlLmVsbS50eXBlPT09J251bWJlcicpe3JldHVybiB0b051bWJlcih2YWx1ZSkhPT10b051bWJlcihuZXdWYWwpO31pZihtb2RpZmllcnMmJm1vZGlmaWVycy50cmltKXtyZXR1cm4gdmFsdWUudHJpbSgpIT09bmV3VmFsLnRyaW0oKTt9cmV0dXJuIHZhbHVlIT09bmV3VmFsO312YXIgZG9tUHJvcHM9e2NyZWF0ZTp1cGRhdGVET01Qcm9wcyx1cGRhdGU6dXBkYXRlRE9NUHJvcHN9Oy8qICAqL3ZhciBwYXJzZVN0eWxlVGV4dD1jYWNoZWQoZnVuY3Rpb24oY3NzVGV4dCl7dmFyIHJlcz17fTt2YXIgbGlzdERlbGltaXRlcj0vOyg/IVteKF0qXFwpKS9nO3ZhciBwcm9wZXJ0eURlbGltaXRlcj0vOiguKykvO2Nzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtpZihpdGVtKXt2YXIgdG1wPWl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO3RtcC5sZW5ndGg+MSYmKHJlc1t0bXBbMF0udHJpbSgpXT10bXBbMV0udHJpbSgpKTt9fSk7cmV0dXJuIHJlczt9KTsvLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuXHRmdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEoZGF0YSl7dmFyIHN0eWxlPW5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTsvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cblx0Ly8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcblx0cmV0dXJuIGRhdGEuc3RhdGljU3R5bGU/ZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsc3R5bGUpOnN0eWxlO30vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5cdGZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyhiaW5kaW5nU3R5bGUpe2lmKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSl7cmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSk7fWlmKHR5cGVvZiBiaW5kaW5nU3R5bGU9PT0nc3RyaW5nJyl7cmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSk7fXJldHVybiBiaW5kaW5nU3R5bGU7fS8qKlxuXHQgKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG5cdCAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG5cdCAqL2Z1bmN0aW9uIGdldFN0eWxlKHZub2RlLGNoZWNrQ2hpbGQpe3ZhciByZXM9e307dmFyIHN0eWxlRGF0YTtpZihjaGVja0NoaWxkKXt2YXIgY2hpbGROb2RlPXZub2RlO3doaWxlKGNoaWxkTm9kZS5jaGlsZCl7Y2hpbGROb2RlPWNoaWxkTm9kZS5jaGlsZC5fdm5vZGU7aWYoY2hpbGROb2RlLmRhdGEmJihzdHlsZURhdGE9bm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSkpe2V4dGVuZChyZXMsc3R5bGVEYXRhKTt9fX1pZihzdHlsZURhdGE9bm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKXtleHRlbmQocmVzLHN0eWxlRGF0YSk7fXZhciBwYXJlbnROb2RlPXZub2RlO3doaWxlKHBhcmVudE5vZGU9cGFyZW50Tm9kZS5wYXJlbnQpe2lmKHBhcmVudE5vZGUuZGF0YSYmKHN0eWxlRGF0YT1ub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpe2V4dGVuZChyZXMsc3R5bGVEYXRhKTt9fXJldHVybiByZXM7fS8qICAqL3ZhciBjc3NWYXJSRT0vXi0tLzt2YXIgaW1wb3J0YW50UkU9L1xccyohaW1wb3J0YW50JC87dmFyIHNldFByb3A9ZnVuY3Rpb24gc2V0UHJvcChlbCxuYW1lLHZhbCl7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoY3NzVmFyUkUudGVzdChuYW1lKSl7ZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSx2YWwpO31lbHNlIGlmKGltcG9ydGFudFJFLnRlc3QodmFsKSl7ZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSx2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwnJyksJ2ltcG9ydGFudCcpO31lbHNle2VsLnN0eWxlW25vcm1hbGl6ZShuYW1lKV09dmFsO319O3ZhciBwcmVmaXhlcz1bJ1dlYmtpdCcsJ01veicsJ21zJ107dmFyIHRlc3RFbDt2YXIgbm9ybWFsaXplPWNhY2hlZChmdW5jdGlvbihwcm9wKXt0ZXN0RWw9dGVzdEVsfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtwcm9wPWNhbWVsaXplKHByb3ApO2lmKHByb3AhPT0nZmlsdGVyJyYmcHJvcCBpbiB0ZXN0RWwuc3R5bGUpe3JldHVybiBwcm9wO312YXIgdXBwZXI9cHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStwcm9wLnNsaWNlKDEpO2Zvcih2YXIgaT0wO2k8cHJlZml4ZXMubGVuZ3RoO2krKyl7dmFyIHByZWZpeGVkPXByZWZpeGVzW2ldK3VwcGVyO2lmKHByZWZpeGVkIGluIHRlc3RFbC5zdHlsZSl7cmV0dXJuIHByZWZpeGVkO319fSk7ZnVuY3Rpb24gdXBkYXRlU3R5bGUob2xkVm5vZGUsdm5vZGUpe3ZhciBkYXRhPXZub2RlLmRhdGE7dmFyIG9sZERhdGE9b2xkVm5vZGUuZGF0YTtpZighZGF0YS5zdGF0aWNTdHlsZSYmIWRhdGEuc3R5bGUmJiFvbGREYXRhLnN0YXRpY1N0eWxlJiYhb2xkRGF0YS5zdHlsZSl7cmV0dXJuO312YXIgY3VyLG5hbWU7dmFyIGVsPXZub2RlLmVsbTt2YXIgb2xkU3RhdGljU3R5bGU9b2xkVm5vZGUuZGF0YS5zdGF0aWNTdHlsZTt2YXIgb2xkU3R5bGVCaW5kaW5nPW9sZFZub2RlLmRhdGEuc3R5bGV8fHt9Oy8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG5cdHZhciBvbGRTdHlsZT1vbGRTdGF0aWNTdHlsZXx8b2xkU3R5bGVCaW5kaW5nO3ZhciBzdHlsZT1ub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSl8fHt9O3Zub2RlLmRhdGEuc3R5bGU9c3R5bGUuX19vYl9fP2V4dGVuZCh7fSxzdHlsZSk6c3R5bGU7dmFyIG5ld1N0eWxlPWdldFN0eWxlKHZub2RlLHRydWUpO2ZvcihuYW1lIGluIG9sZFN0eWxlKXtpZihuZXdTdHlsZVtuYW1lXT09bnVsbCl7c2V0UHJvcChlbCxuYW1lLCcnKTt9fWZvcihuYW1lIGluIG5ld1N0eWxlKXtjdXI9bmV3U3R5bGVbbmFtZV07aWYoY3VyIT09b2xkU3R5bGVbbmFtZV0pey8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG5cdHNldFByb3AoZWwsbmFtZSxjdXI9PW51bGw/Jyc6Y3VyKTt9fX12YXIgc3R5bGU9e2NyZWF0ZTp1cGRhdGVTdHlsZSx1cGRhdGU6dXBkYXRlU3R5bGV9Oy8qICAqLy8qKlxuXHQgKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cblx0ICogU1ZHIGVsZW1lbnRzIGluIElFXG5cdCAqL2Z1bmN0aW9uIGFkZENsYXNzKGVsLGNscyl7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoIWNsc3x8IWNscy50cmltKCkpe3JldHVybjt9LyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9pZihlbC5jbGFzc0xpc3Qpe2lmKGNscy5pbmRleE9mKCcgJyk+LTEpe2Nscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24oYyl7cmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7fSk7fWVsc2V7ZWwuY2xhc3NMaXN0LmFkZChjbHMpO319ZWxzZXt2YXIgY3VyPScgJytlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykrJyAnO2lmKGN1ci5pbmRleE9mKCcgJytjbHMrJyAnKTwwKXtlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywoY3VyK2NscykudHJpbSgpKTt9fX0vKipcblx0ICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG5cdCAqIFNWRyBlbGVtZW50cyBpbiBJRVxuXHQgKi9mdW5jdGlvbiByZW1vdmVDbGFzcyhlbCxjbHMpey8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKCFjbHN8fCFjbHMudHJpbSgpKXtyZXR1cm47fS8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovaWYoZWwuY2xhc3NMaXN0KXtpZihjbHMuaW5kZXhPZignICcpPi0xKXtjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uKGMpe3JldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpO30pO31lbHNle2VsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTt9fWVsc2V7dmFyIGN1cj0nICcrZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpKycgJzt2YXIgdGFyPScgJytjbHMrJyAnO3doaWxlKGN1ci5pbmRleE9mKHRhcik+PTApe2N1cj1jdXIucmVwbGFjZSh0YXIsJyAnKTt9ZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsY3VyLnRyaW0oKSk7fX0vKiAgKi92YXIgaGFzVHJhbnNpdGlvbj1pbkJyb3dzZXImJiFpc0lFOTt2YXIgVFJBTlNJVElPTj0ndHJhbnNpdGlvbic7dmFyIEFOSU1BVElPTj0nYW5pbWF0aW9uJzsvLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG5cdHZhciB0cmFuc2l0aW9uUHJvcD0ndHJhbnNpdGlvbic7dmFyIHRyYW5zaXRpb25FbmRFdmVudD0ndHJhbnNpdGlvbmVuZCc7dmFyIGFuaW1hdGlvblByb3A9J2FuaW1hdGlvbic7dmFyIGFuaW1hdGlvbkVuZEV2ZW50PSdhbmltYXRpb25lbmQnO2lmKGhhc1RyYW5zaXRpb24pey8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQ9PT11bmRlZmluZWQmJndpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQhPT11bmRlZmluZWQpe3RyYW5zaXRpb25Qcm9wPSdXZWJraXRUcmFuc2l0aW9uJzt0cmFuc2l0aW9uRW5kRXZlbnQ9J3dlYmtpdFRyYW5zaXRpb25FbmQnO31pZih3aW5kb3cub25hbmltYXRpb25lbmQ9PT11bmRlZmluZWQmJndpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCE9PXVuZGVmaW5lZCl7YW5pbWF0aW9uUHJvcD0nV2Via2l0QW5pbWF0aW9uJzthbmltYXRpb25FbmRFdmVudD0nd2Via2l0QW5pbWF0aW9uRW5kJzt9fXZhciByYWY9aW5Ccm93c2VyJiZ3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxzZXRUaW1lb3V0O2Z1bmN0aW9uIG5leHRGcmFtZShmbil7cmFmKGZ1bmN0aW9uKCl7cmFmKGZuKTt9KTt9ZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzKGVsLGNscyl7KGVsLl90cmFuc2l0aW9uQ2xhc3Nlc3x8KGVsLl90cmFuc2l0aW9uQ2xhc3Nlcz1bXSkpLnB1c2goY2xzKTthZGRDbGFzcyhlbCxjbHMpO31mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsY2xzKXtpZihlbC5fdHJhbnNpdGlvbkNsYXNzZXMpe3JlbW92ZSQxKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyxjbHMpO31yZW1vdmVDbGFzcyhlbCxjbHMpO31mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsZXhwZWN0ZWRUeXBlLGNiKXt2YXIgcmVmPWdldFRyYW5zaXRpb25JbmZvKGVsLGV4cGVjdGVkVHlwZSk7dmFyIHR5cGU9cmVmLnR5cGU7dmFyIHRpbWVvdXQ9cmVmLnRpbWVvdXQ7dmFyIHByb3BDb3VudD1yZWYucHJvcENvdW50O2lmKCF0eXBlKXtyZXR1cm4gY2IoKTt9dmFyIGV2ZW50PXR5cGU9PT1UUkFOU0lUSU9OP3RyYW5zaXRpb25FbmRFdmVudDphbmltYXRpb25FbmRFdmVudDt2YXIgZW5kZWQ9MDt2YXIgZW5kPWZ1bmN0aW9uIGVuZCgpe2VsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsb25FbmQpO2NiKCk7fTt2YXIgb25FbmQ9ZnVuY3Rpb24gb25FbmQoZSl7aWYoZS50YXJnZXQ9PT1lbCl7aWYoKytlbmRlZD49cHJvcENvdW50KXtlbmQoKTt9fX07c2V0VGltZW91dChmdW5jdGlvbigpe2lmKGVuZGVkPHByb3BDb3VudCl7ZW5kKCk7fX0sdGltZW91dCsxKTtlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LG9uRW5kKTt9dmFyIHRyYW5zZm9ybVJFPS9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87ZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8oZWwsZXhwZWN0ZWRUeXBlKXt2YXIgc3R5bGVzPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTt2YXIgdHJhbnNpdGlvbmVEZWxheXM9c3R5bGVzW3RyYW5zaXRpb25Qcm9wKydEZWxheSddLnNwbGl0KCcsICcpO3ZhciB0cmFuc2l0aW9uRHVyYXRpb25zPXN0eWxlc1t0cmFuc2l0aW9uUHJvcCsnRHVyYXRpb24nXS5zcGxpdCgnLCAnKTt2YXIgdHJhbnNpdGlvblRpbWVvdXQ9Z2V0VGltZW91dCh0cmFuc2l0aW9uZURlbGF5cyx0cmFuc2l0aW9uRHVyYXRpb25zKTt2YXIgYW5pbWF0aW9uRGVsYXlzPXN0eWxlc1thbmltYXRpb25Qcm9wKydEZWxheSddLnNwbGl0KCcsICcpO3ZhciBhbmltYXRpb25EdXJhdGlvbnM9c3R5bGVzW2FuaW1hdGlvblByb3ArJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7dmFyIGFuaW1hdGlvblRpbWVvdXQ9Z2V0VGltZW91dChhbmltYXRpb25EZWxheXMsYW5pbWF0aW9uRHVyYXRpb25zKTt2YXIgdHlwZTt2YXIgdGltZW91dD0wO3ZhciBwcm9wQ291bnQ9MDsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihleHBlY3RlZFR5cGU9PT1UUkFOU0lUSU9OKXtpZih0cmFuc2l0aW9uVGltZW91dD4wKXt0eXBlPVRSQU5TSVRJT047dGltZW91dD10cmFuc2l0aW9uVGltZW91dDtwcm9wQ291bnQ9dHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7fX1lbHNlIGlmKGV4cGVjdGVkVHlwZT09PUFOSU1BVElPTil7aWYoYW5pbWF0aW9uVGltZW91dD4wKXt0eXBlPUFOSU1BVElPTjt0aW1lb3V0PWFuaW1hdGlvblRpbWVvdXQ7cHJvcENvdW50PWFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7fX1lbHNle3RpbWVvdXQ9TWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsYW5pbWF0aW9uVGltZW91dCk7dHlwZT10aW1lb3V0PjA/dHJhbnNpdGlvblRpbWVvdXQ+YW5pbWF0aW9uVGltZW91dD9UUkFOU0lUSU9OOkFOSU1BVElPTjpudWxsO3Byb3BDb3VudD10eXBlP3R5cGU9PT1UUkFOU0lUSU9OP3RyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoOmFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg6MDt9dmFyIGhhc1RyYW5zZm9ybT10eXBlPT09VFJBTlNJVElPTiYmdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3ArJ1Byb3BlcnR5J10pO3JldHVybnt0eXBlOnR5cGUsdGltZW91dDp0aW1lb3V0LHByb3BDb3VudDpwcm9wQ291bnQsaGFzVHJhbnNmb3JtOmhhc1RyYW5zZm9ybX07fWZ1bmN0aW9uIGdldFRpbWVvdXQoZGVsYXlzLGR1cmF0aW9ucyl7LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi93aGlsZShkZWxheXMubGVuZ3RoPGR1cmF0aW9ucy5sZW5ndGgpe2RlbGF5cz1kZWxheXMuY29uY2F0KGRlbGF5cyk7fXJldHVybiBNYXRoLm1heC5hcHBseShudWxsLGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24oZCxpKXtyZXR1cm4gdG9NcyhkKSt0b01zKGRlbGF5c1tpXSk7fSkpO31mdW5jdGlvbiB0b01zKHMpe3JldHVybiBOdW1iZXIocy5zbGljZSgwLC0xKSkqMTAwMDt9LyogICovZnVuY3Rpb24gZW50ZXIodm5vZGUsdG9nZ2xlRGlzcGxheSl7dmFyIGVsPXZub2RlLmVsbTsvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuXHRpZihlbC5fbGVhdmVDYil7ZWwuX2xlYXZlQ2IuY2FuY2VsbGVkPXRydWU7ZWwuX2xlYXZlQ2IoKTt9dmFyIGRhdGE9cmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtpZighZGF0YSl7cmV0dXJuO30vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihlbC5fZW50ZXJDYnx8ZWwubm9kZVR5cGUhPT0xKXtyZXR1cm47fXZhciBjc3M9ZGF0YS5jc3M7dmFyIHR5cGU9ZGF0YS50eXBlO3ZhciBlbnRlckNsYXNzPWRhdGEuZW50ZXJDbGFzczt2YXIgZW50ZXJUb0NsYXNzPWRhdGEuZW50ZXJUb0NsYXNzO3ZhciBlbnRlckFjdGl2ZUNsYXNzPWRhdGEuZW50ZXJBY3RpdmVDbGFzczt2YXIgYXBwZWFyQ2xhc3M9ZGF0YS5hcHBlYXJDbGFzczt2YXIgYXBwZWFyVG9DbGFzcz1kYXRhLmFwcGVhclRvQ2xhc3M7dmFyIGFwcGVhckFjdGl2ZUNsYXNzPWRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7dmFyIGJlZm9yZUVudGVyPWRhdGEuYmVmb3JlRW50ZXI7dmFyIGVudGVyPWRhdGEuZW50ZXI7dmFyIGFmdGVyRW50ZXI9ZGF0YS5hZnRlckVudGVyO3ZhciBlbnRlckNhbmNlbGxlZD1kYXRhLmVudGVyQ2FuY2VsbGVkO3ZhciBiZWZvcmVBcHBlYXI9ZGF0YS5iZWZvcmVBcHBlYXI7dmFyIGFwcGVhcj1kYXRhLmFwcGVhcjt2YXIgYWZ0ZXJBcHBlYXI9ZGF0YS5hZnRlckFwcGVhcjt2YXIgYXBwZWFyQ2FuY2VsbGVkPWRhdGEuYXBwZWFyQ2FuY2VsbGVkOy8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcblx0Ly8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG5cdC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG5cdC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuXHR2YXIgY29udGV4dD1hY3RpdmVJbnN0YW5jZTt2YXIgdHJhbnNpdGlvbk5vZGU9YWN0aXZlSW5zdGFuY2UuJHZub2RlO3doaWxlKHRyYW5zaXRpb25Ob2RlJiZ0cmFuc2l0aW9uTm9kZS5wYXJlbnQpe3RyYW5zaXRpb25Ob2RlPXRyYW5zaXRpb25Ob2RlLnBhcmVudDtjb250ZXh0PXRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7fXZhciBpc0FwcGVhcj0hY29udGV4dC5faXNNb3VudGVkfHwhdm5vZGUuaXNSb290SW5zZXJ0O2lmKGlzQXBwZWFyJiYhYXBwZWFyJiZhcHBlYXIhPT0nJyl7cmV0dXJuO312YXIgc3RhcnRDbGFzcz1pc0FwcGVhcj9hcHBlYXJDbGFzczplbnRlckNsYXNzO3ZhciBhY3RpdmVDbGFzcz1pc0FwcGVhcj9hcHBlYXJBY3RpdmVDbGFzczplbnRlckFjdGl2ZUNsYXNzO3ZhciB0b0NsYXNzPWlzQXBwZWFyP2FwcGVhclRvQ2xhc3M6ZW50ZXJUb0NsYXNzO3ZhciBiZWZvcmVFbnRlckhvb2s9aXNBcHBlYXI/YmVmb3JlQXBwZWFyfHxiZWZvcmVFbnRlcjpiZWZvcmVFbnRlcjt2YXIgZW50ZXJIb29rPWlzQXBwZWFyP3R5cGVvZiBhcHBlYXI9PT0nZnVuY3Rpb24nP2FwcGVhcjplbnRlcjplbnRlcjt2YXIgYWZ0ZXJFbnRlckhvb2s9aXNBcHBlYXI/YWZ0ZXJBcHBlYXJ8fGFmdGVyRW50ZXI6YWZ0ZXJFbnRlcjt2YXIgZW50ZXJDYW5jZWxsZWRIb29rPWlzQXBwZWFyP2FwcGVhckNhbmNlbGxlZHx8ZW50ZXJDYW5jZWxsZWQ6ZW50ZXJDYW5jZWxsZWQ7dmFyIGV4cGVjdHNDU1M9Y3NzIT09ZmFsc2UmJiFpc0lFOTt2YXIgdXNlcldhbnRzQ29udHJvbD1lbnRlckhvb2smJi8vIGVudGVySG9vayBtYXkgYmUgYSBib3VuZCBtZXRob2Qgd2hpY2ggZXhwb3Nlc1xuXHQvLyB0aGUgbGVuZ3RoIG9mIG9yaWdpbmFsIGZuIGFzIF9sZW5ndGhcblx0KGVudGVySG9vay5fbGVuZ3RofHxlbnRlckhvb2subGVuZ3RoKT4xO3ZhciBjYj1lbC5fZW50ZXJDYj1vbmNlKGZ1bmN0aW9uKCl7aWYoZXhwZWN0c0NTUyl7cmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLHRvQ2xhc3MpO3JlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCxhY3RpdmVDbGFzcyk7fWlmKGNiLmNhbmNlbGxlZCl7aWYoZXhwZWN0c0NTUyl7cmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLHN0YXJ0Q2xhc3MpO31lbnRlckNhbmNlbGxlZEhvb2smJmVudGVyQ2FuY2VsbGVkSG9vayhlbCk7fWVsc2V7YWZ0ZXJFbnRlckhvb2smJmFmdGVyRW50ZXJIb29rKGVsKTt9ZWwuX2VudGVyQ2I9bnVsbDt9KTtpZighdm5vZGUuZGF0YS5zaG93KXsvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuXHRtZXJnZVZOb2RlSG9vayh2bm9kZS5kYXRhLmhvb2t8fCh2bm9kZS5kYXRhLmhvb2s9e30pLCdpbnNlcnQnLGZ1bmN0aW9uKCl7dmFyIHBhcmVudD1lbC5wYXJlbnROb2RlO3ZhciBwZW5kaW5nTm9kZT1wYXJlbnQmJnBhcmVudC5fcGVuZGluZyYmcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07aWYocGVuZGluZ05vZGUmJnBlbmRpbmdOb2RlLmNvbnRleHQ9PT12bm9kZS5jb250ZXh0JiZwZW5kaW5nTm9kZS50YWc9PT12bm9kZS50YWcmJnBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYil7cGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7fWVudGVySG9vayYmZW50ZXJIb29rKGVsLGNiKTt9LCd0cmFuc2l0aW9uLWluc2VydCcpO30vLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG5cdGJlZm9yZUVudGVySG9vayYmYmVmb3JlRW50ZXJIb29rKGVsKTtpZihleHBlY3RzQ1NTKXthZGRUcmFuc2l0aW9uQ2xhc3MoZWwsc3RhcnRDbGFzcyk7YWRkVHJhbnNpdGlvbkNsYXNzKGVsLGFjdGl2ZUNsYXNzKTtuZXh0RnJhbWUoZnVuY3Rpb24oKXthZGRUcmFuc2l0aW9uQ2xhc3MoZWwsdG9DbGFzcyk7cmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLHN0YXJ0Q2xhc3MpO2lmKCFjYi5jYW5jZWxsZWQmJiF1c2VyV2FudHNDb250cm9sKXt3aGVuVHJhbnNpdGlvbkVuZHMoZWwsdHlwZSxjYik7fX0pO31pZih2bm9kZS5kYXRhLnNob3cpe3RvZ2dsZURpc3BsYXkmJnRvZ2dsZURpc3BsYXkoKTtlbnRlckhvb2smJmVudGVySG9vayhlbCxjYik7fWlmKCFleHBlY3RzQ1NTJiYhdXNlcldhbnRzQ29udHJvbCl7Y2IoKTt9fWZ1bmN0aW9uIGxlYXZlKHZub2RlLHJtKXt2YXIgZWw9dm5vZGUuZWxtOy8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG5cdGlmKGVsLl9lbnRlckNiKXtlbC5fZW50ZXJDYi5jYW5jZWxsZWQ9dHJ1ZTtlbC5fZW50ZXJDYigpO312YXIgZGF0YT1yZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO2lmKCFkYXRhKXtyZXR1cm4gcm0oKTt9LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoZWwuX2xlYXZlQ2J8fGVsLm5vZGVUeXBlIT09MSl7cmV0dXJuO312YXIgY3NzPWRhdGEuY3NzO3ZhciB0eXBlPWRhdGEudHlwZTt2YXIgbGVhdmVDbGFzcz1kYXRhLmxlYXZlQ2xhc3M7dmFyIGxlYXZlVG9DbGFzcz1kYXRhLmxlYXZlVG9DbGFzczt2YXIgbGVhdmVBY3RpdmVDbGFzcz1kYXRhLmxlYXZlQWN0aXZlQ2xhc3M7dmFyIGJlZm9yZUxlYXZlPWRhdGEuYmVmb3JlTGVhdmU7dmFyIGxlYXZlPWRhdGEubGVhdmU7dmFyIGFmdGVyTGVhdmU9ZGF0YS5hZnRlckxlYXZlO3ZhciBsZWF2ZUNhbmNlbGxlZD1kYXRhLmxlYXZlQ2FuY2VsbGVkO3ZhciBkZWxheUxlYXZlPWRhdGEuZGVsYXlMZWF2ZTt2YXIgZXhwZWN0c0NTUz1jc3MhPT1mYWxzZSYmIWlzSUU5O3ZhciB1c2VyV2FudHNDb250cm9sPWxlYXZlJiYvLyBsZWF2ZSBob29rIG1heSBiZSBhIGJvdW5kIG1ldGhvZCB3aGljaCBleHBvc2VzXG5cdC8vIHRoZSBsZW5ndGggb2Ygb3JpZ2luYWwgZm4gYXMgX2xlbmd0aFxuXHQobGVhdmUuX2xlbmd0aHx8bGVhdmUubGVuZ3RoKT4xO3ZhciBjYj1lbC5fbGVhdmVDYj1vbmNlKGZ1bmN0aW9uKCl7aWYoZWwucGFyZW50Tm9kZSYmZWwucGFyZW50Tm9kZS5fcGVuZGluZyl7ZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldPW51bGw7fWlmKGV4cGVjdHNDU1Mpe3JlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCxsZWF2ZVRvQ2xhc3MpO3JlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCxsZWF2ZUFjdGl2ZUNsYXNzKTt9aWYoY2IuY2FuY2VsbGVkKXtpZihleHBlY3RzQ1NTKXtyZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsbGVhdmVDbGFzcyk7fWxlYXZlQ2FuY2VsbGVkJiZsZWF2ZUNhbmNlbGxlZChlbCk7fWVsc2V7cm0oKTthZnRlckxlYXZlJiZhZnRlckxlYXZlKGVsKTt9ZWwuX2xlYXZlQ2I9bnVsbDt9KTtpZihkZWxheUxlYXZlKXtkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7fWVsc2V7cGVyZm9ybUxlYXZlKCk7fWZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSgpey8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcblx0aWYoY2IuY2FuY2VsbGVkKXtyZXR1cm47fS8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcblx0aWYoIXZub2RlLmRhdGEuc2hvdyl7KGVsLnBhcmVudE5vZGUuX3BlbmRpbmd8fChlbC5wYXJlbnROb2RlLl9wZW5kaW5nPXt9KSlbdm5vZGUua2V5XT12bm9kZTt9YmVmb3JlTGVhdmUmJmJlZm9yZUxlYXZlKGVsKTtpZihleHBlY3RzQ1NTKXthZGRUcmFuc2l0aW9uQ2xhc3MoZWwsbGVhdmVDbGFzcyk7YWRkVHJhbnNpdGlvbkNsYXNzKGVsLGxlYXZlQWN0aXZlQ2xhc3MpO25leHRGcmFtZShmdW5jdGlvbigpe2FkZFRyYW5zaXRpb25DbGFzcyhlbCxsZWF2ZVRvQ2xhc3MpO3JlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCxsZWF2ZUNsYXNzKTtpZighY2IuY2FuY2VsbGVkJiYhdXNlcldhbnRzQ29udHJvbCl7d2hlblRyYW5zaXRpb25FbmRzKGVsLHR5cGUsY2IpO319KTt9bGVhdmUmJmxlYXZlKGVsLGNiKTtpZighZXhwZWN0c0NTUyYmIXVzZXJXYW50c0NvbnRyb2wpe2NiKCk7fX19ZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24oZGVmJCQxKXtpZighZGVmJCQxKXtyZXR1cm47fS8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovaWYoKHR5cGVvZiBkZWYkJDE9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKGRlZiQkMSkpPT09J29iamVjdCcpe3ZhciByZXM9e307aWYoZGVmJCQxLmNzcyE9PWZhbHNlKXtleHRlbmQocmVzLGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lfHwndicpKTt9ZXh0ZW5kKHJlcyxkZWYkJDEpO3JldHVybiByZXM7fWVsc2UgaWYodHlwZW9mIGRlZiQkMT09PSdzdHJpbmcnKXtyZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKTt9fXZhciBhdXRvQ3NzVHJhbnNpdGlvbj1jYWNoZWQoZnVuY3Rpb24obmFtZSl7cmV0dXJue2VudGVyQ2xhc3M6bmFtZStcIi1lbnRlclwiLGxlYXZlQ2xhc3M6bmFtZStcIi1sZWF2ZVwiLGFwcGVhckNsYXNzOm5hbWUrXCItZW50ZXJcIixlbnRlclRvQ2xhc3M6bmFtZStcIi1lbnRlci10b1wiLGxlYXZlVG9DbGFzczpuYW1lK1wiLWxlYXZlLXRvXCIsYXBwZWFyVG9DbGFzczpuYW1lK1wiLWVudGVyLXRvXCIsZW50ZXJBY3RpdmVDbGFzczpuYW1lK1wiLWVudGVyLWFjdGl2ZVwiLGxlYXZlQWN0aXZlQ2xhc3M6bmFtZStcIi1sZWF2ZS1hY3RpdmVcIixhcHBlYXJBY3RpdmVDbGFzczpuYW1lK1wiLWVudGVyLWFjdGl2ZVwifTt9KTtmdW5jdGlvbiBvbmNlKGZuKXt2YXIgY2FsbGVkPWZhbHNlO3JldHVybiBmdW5jdGlvbigpe2lmKCFjYWxsZWQpe2NhbGxlZD10cnVlO2ZuKCk7fX07fWZ1bmN0aW9uIF9lbnRlcihfLHZub2RlKXtpZighdm5vZGUuZGF0YS5zaG93KXtlbnRlcih2bm9kZSk7fX12YXIgdHJhbnNpdGlvbj1pbkJyb3dzZXI/e2NyZWF0ZTpfZW50ZXIsYWN0aXZhdGU6X2VudGVyLHJlbW92ZTpmdW5jdGlvbiByZW1vdmUodm5vZGUscm0pey8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovaWYoIXZub2RlLmRhdGEuc2hvdyl7bGVhdmUodm5vZGUscm0pO31lbHNle3JtKCk7fX19Ont9O3ZhciBwbGF0Zm9ybU1vZHVsZXM9W2F0dHJzLGtsYXNzLGV2ZW50cyxkb21Qcm9wcyxzdHlsZSx0cmFuc2l0aW9uXTsvKiAgKi8vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcblx0Ly8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cblx0dmFyIG1vZHVsZXM9cGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7dmFyIHBhdGNoJDE9Y3JlYXRlUGF0Y2hGdW5jdGlvbih7bm9kZU9wczpub2RlT3BzLG1vZHVsZXM6bW9kdWxlc30pOy8qKlxuXHQgKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcblx0ICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cblx0ICovdmFyIG1vZGVsYWJsZVRhZ1JFPS9eaW5wdXR8c2VsZWN0fHRleHRhcmVhfHZ1ZS1jb21wb25lbnQtWzAtOV0rKC1bMC05YS16QS1aXy1dKik/JC87LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoaXNJRTkpey8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLGZ1bmN0aW9uKCl7dmFyIGVsPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7aWYoZWwmJmVsLnZtb2RlbCl7dHJpZ2dlcihlbCwnaW5wdXQnKTt9fSk7fXZhciBtb2RlbD17aW5zZXJ0ZWQ6ZnVuY3Rpb24gaW5zZXJ0ZWQoZWwsYmluZGluZyx2bm9kZSl7aWYoZmFsc2Upe2lmKCFtb2RlbGFibGVUYWdSRS50ZXN0KHZub2RlLnRhZykpe3dhcm4oXCJ2LW1vZGVsIGlzIG5vdCBzdXBwb3J0ZWQgb24gZWxlbWVudCB0eXBlOiA8XCIrdm5vZGUudGFnK1wiPi4gXCIrJ0lmIHlvdSBhcmUgd29ya2luZyB3aXRoIGNvbnRlbnRlZGl0YWJsZSwgaXRcXCdzIHJlY29tbWVuZGVkIHRvICcrJ3dyYXAgYSBsaWJyYXJ5IGRlZGljYXRlZCBmb3IgdGhhdCBwdXJwb3NlIGluc2lkZSBhIGN1c3RvbSBjb21wb25lbnQuJyx2bm9kZS5jb250ZXh0KTt9fWlmKHZub2RlLnRhZz09PSdzZWxlY3QnKXt2YXIgY2I9ZnVuY3Rpb24gY2IoKXtzZXRTZWxlY3RlZChlbCxiaW5kaW5nLHZub2RlLmNvbnRleHQpO307Y2IoKTsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihpc0lFfHxpc0VkZ2Upe3NldFRpbWVvdXQoY2IsMCk7fX1lbHNlIGlmKHZub2RlLnRhZz09PSd0ZXh0YXJlYSd8fGVsLnR5cGU9PT0ndGV4dCcpe2VsLl92TW9kaWZpZXJzPWJpbmRpbmcubW9kaWZpZXJzO2lmKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KXtpZighaXNBbmRyb2lkKXtlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0JyxvbkNvbXBvc2l0aW9uU3RhcnQpO2VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJyxvbkNvbXBvc2l0aW9uRW5kKTt9LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoaXNJRTkpe2VsLnZtb2RlbD10cnVlO319fX0sY29tcG9uZW50VXBkYXRlZDpmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkKGVsLGJpbmRpbmcsdm5vZGUpe2lmKHZub2RlLnRhZz09PSdzZWxlY3QnKXtzZXRTZWxlY3RlZChlbCxiaW5kaW5nLHZub2RlLmNvbnRleHQpOy8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuXHQvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG5cdC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuXHQvLyBvcHRpb24gaW4gdGhlIERPTS5cblx0dmFyIG5lZWRSZXNldD1lbC5tdWx0aXBsZT9iaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24odil7cmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odixlbC5vcHRpb25zKTt9KTpiaW5kaW5nLnZhbHVlIT09YmluZGluZy5vbGRWYWx1ZSYmaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLGVsLm9wdGlvbnMpO2lmKG5lZWRSZXNldCl7dHJpZ2dlcihlbCwnY2hhbmdlJyk7fX19fTtmdW5jdGlvbiBzZXRTZWxlY3RlZChlbCxiaW5kaW5nLHZtKXt2YXIgdmFsdWU9YmluZGluZy52YWx1ZTt2YXIgaXNNdWx0aXBsZT1lbC5tdWx0aXBsZTtpZihpc011bHRpcGxlJiYhQXJyYXkuaXNBcnJheSh2YWx1ZSkpeyhcInByb2R1Y3Rpb25cIikhPT0ncHJvZHVjdGlvbicmJndhcm4oXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiK2JpbmRpbmcuZXhwcmVzc2lvbitcIlxcXCI+IFwiK1wiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIrT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LC0xKSx2bSk7cmV0dXJuO312YXIgc2VsZWN0ZWQsb3B0aW9uO2Zvcih2YXIgaT0wLGw9ZWwub3B0aW9ucy5sZW5ndGg7aTxsO2krKyl7b3B0aW9uPWVsLm9wdGlvbnNbaV07aWYoaXNNdWx0aXBsZSl7c2VsZWN0ZWQ9bG9vc2VJbmRleE9mKHZhbHVlLGdldFZhbHVlKG9wdGlvbikpPi0xO2lmKG9wdGlvbi5zZWxlY3RlZCE9PXNlbGVjdGVkKXtvcHRpb24uc2VsZWN0ZWQ9c2VsZWN0ZWQ7fX1lbHNle2lmKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSx2YWx1ZSkpe2lmKGVsLnNlbGVjdGVkSW5kZXghPT1pKXtlbC5zZWxlY3RlZEluZGV4PWk7fXJldHVybjt9fX1pZighaXNNdWx0aXBsZSl7ZWwuc2VsZWN0ZWRJbmRleD0tMTt9fWZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24odmFsdWUsb3B0aW9ucyl7Zm9yKHZhciBpPTAsbD1vcHRpb25zLmxlbmd0aDtpPGw7aSsrKXtpZihsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbnNbaV0pLHZhbHVlKSl7cmV0dXJuIGZhbHNlO319cmV0dXJuIHRydWU7fWZ1bmN0aW9uIGdldFZhbHVlKG9wdGlvbil7cmV0dXJuJ192YWx1ZSdpbiBvcHRpb24/b3B0aW9uLl92YWx1ZTpvcHRpb24udmFsdWU7fWZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydChlKXtlLnRhcmdldC5jb21wb3Npbmc9dHJ1ZTt9ZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZChlKXtlLnRhcmdldC5jb21wb3Npbmc9ZmFsc2U7dHJpZ2dlcihlLnRhcmdldCwnaW5wdXQnKTt9ZnVuY3Rpb24gdHJpZ2dlcihlbCx0eXBlKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO2UuaW5pdEV2ZW50KHR5cGUsdHJ1ZSx0cnVlKTtlbC5kaXNwYXRjaEV2ZW50KGUpO30vKiAgKi8vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5cdGZ1bmN0aW9uIGxvY2F0ZU5vZGUodm5vZGUpe3JldHVybiB2bm9kZS5jaGlsZCYmKCF2bm9kZS5kYXRhfHwhdm5vZGUuZGF0YS50cmFuc2l0aW9uKT9sb2NhdGVOb2RlKHZub2RlLmNoaWxkLl92bm9kZSk6dm5vZGU7fXZhciBzaG93PXtiaW5kOmZ1bmN0aW9uIGJpbmQoZWwscmVmLHZub2RlKXt2YXIgdmFsdWU9cmVmLnZhbHVlO3Zub2RlPWxvY2F0ZU5vZGUodm5vZGUpO3ZhciB0cmFuc2l0aW9uPXZub2RlLmRhdGEmJnZub2RlLmRhdGEudHJhbnNpdGlvbjt2YXIgb3JpZ2luYWxEaXNwbGF5PWVsLl9fdk9yaWdpbmFsRGlzcGxheT1lbC5zdHlsZS5kaXNwbGF5PT09J25vbmUnPycnOmVsLnN0eWxlLmRpc3BsYXk7aWYodmFsdWUmJnRyYW5zaXRpb24mJiFpc0lFOSl7dm5vZGUuZGF0YS5zaG93PXRydWU7ZW50ZXIodm5vZGUsZnVuY3Rpb24oKXtlbC5zdHlsZS5kaXNwbGF5PW9yaWdpbmFsRGlzcGxheTt9KTt9ZWxzZXtlbC5zdHlsZS5kaXNwbGF5PXZhbHVlP29yaWdpbmFsRGlzcGxheTonbm9uZSc7fX0sdXBkYXRlOmZ1bmN0aW9uIHVwZGF0ZShlbCxyZWYsdm5vZGUpe3ZhciB2YWx1ZT1yZWYudmFsdWU7dmFyIG9sZFZhbHVlPXJlZi5vbGRWYWx1ZTsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZih2YWx1ZT09PW9sZFZhbHVlKXtyZXR1cm47fXZub2RlPWxvY2F0ZU5vZGUodm5vZGUpO3ZhciB0cmFuc2l0aW9uPXZub2RlLmRhdGEmJnZub2RlLmRhdGEudHJhbnNpdGlvbjtpZih0cmFuc2l0aW9uJiYhaXNJRTkpe3Zub2RlLmRhdGEuc2hvdz10cnVlO2lmKHZhbHVlKXtlbnRlcih2bm9kZSxmdW5jdGlvbigpe2VsLnN0eWxlLmRpc3BsYXk9ZWwuX192T3JpZ2luYWxEaXNwbGF5O30pO31lbHNle2xlYXZlKHZub2RlLGZ1bmN0aW9uKCl7ZWwuc3R5bGUuZGlzcGxheT0nbm9uZSc7fSk7fX1lbHNle2VsLnN0eWxlLmRpc3BsYXk9dmFsdWU/ZWwuX192T3JpZ2luYWxEaXNwbGF5Oidub25lJzt9fSx1bmJpbmQ6ZnVuY3Rpb24gdW5iaW5kKGVsLGJpbmRpbmcsdm5vZGUsb2xkVm5vZGUsaXNEZXN0cm95KXtpZighaXNEZXN0cm95KXtlbC5zdHlsZS5kaXNwbGF5PWVsLl9fdk9yaWdpbmFsRGlzcGxheTt9fX07dmFyIHBsYXRmb3JtRGlyZWN0aXZlcz17bW9kZWw6bW9kZWwsc2hvdzpzaG93fTsvKiAgKi8vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGEgc2luZ2xlIGVsZW1lbnQvY29tcG9uZW50LlxuXHQvLyBzdXBwb3J0cyB0cmFuc2l0aW9uIG1vZGUgKG91dC1pbiAvIGluLW91dClcblx0dmFyIHRyYW5zaXRpb25Qcm9wcz17bmFtZTpTdHJpbmcsYXBwZWFyOkJvb2xlYW4sY3NzOkJvb2xlYW4sbW9kZTpTdHJpbmcsdHlwZTpTdHJpbmcsZW50ZXJDbGFzczpTdHJpbmcsbGVhdmVDbGFzczpTdHJpbmcsZW50ZXJUb0NsYXNzOlN0cmluZyxsZWF2ZVRvQ2xhc3M6U3RyaW5nLGVudGVyQWN0aXZlQ2xhc3M6U3RyaW5nLGxlYXZlQWN0aXZlQ2xhc3M6U3RyaW5nLGFwcGVhckNsYXNzOlN0cmluZyxhcHBlYXJBY3RpdmVDbGFzczpTdHJpbmcsYXBwZWFyVG9DbGFzczpTdHJpbmd9Oy8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuXHQvLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuXHRmdW5jdGlvbiBnZXRSZWFsQ2hpbGQodm5vZGUpe3ZhciBjb21wT3B0aW9ucz12bm9kZSYmdm5vZGUuY29tcG9uZW50T3B0aW9ucztpZihjb21wT3B0aW9ucyYmY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KXtyZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKTt9ZWxzZXtyZXR1cm4gdm5vZGU7fX1mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEoY29tcCl7dmFyIGRhdGE9e307dmFyIG9wdGlvbnM9Y29tcC4kb3B0aW9uczsvLyBwcm9wc1xuXHRmb3IodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSl7ZGF0YVtrZXldPWNvbXBba2V5XTt9Ly8gZXZlbnRzLlxuXHQvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcblx0dmFyIGxpc3RlbmVycz1vcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7Zm9yKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpe2RhdGFbY2FtZWxpemUoa2V5JDEpXT1saXN0ZW5lcnNba2V5JDFdLmZuO31yZXR1cm4gZGF0YTt9ZnVuY3Rpb24gcGxhY2Vob2xkZXIoaCxyYXdDaGlsZCl7cmV0dXJuIC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKT9oKCdrZWVwLWFsaXZlJyk6bnVsbDt9ZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbih2bm9kZSl7d2hpbGUodm5vZGU9dm5vZGUucGFyZW50KXtpZih2bm9kZS5kYXRhLnRyYW5zaXRpb24pe3JldHVybiB0cnVlO319fWZ1bmN0aW9uIGlzU2FtZUNoaWxkKGNoaWxkLG9sZENoaWxkKXtyZXR1cm4gb2xkQ2hpbGQua2V5PT09Y2hpbGQua2V5JiZvbGRDaGlsZC50YWc9PT1jaGlsZC50YWc7fXZhciBUcmFuc2l0aW9uPXtuYW1lOid0cmFuc2l0aW9uJyxwcm9wczp0cmFuc2l0aW9uUHJvcHMsYWJzdHJhY3Q6dHJ1ZSxyZW5kZXI6ZnVuY3Rpb24gcmVuZGVyKGgpe3ZhciB0aGlzJDE9dGhpczt2YXIgY2hpbGRyZW49dGhpcy4kc2xvdHMuZGVmYXVsdDtpZighY2hpbGRyZW4pe3JldHVybjt9Ly8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcblx0Y2hpbGRyZW49Y2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGMpe3JldHVybiBjLnRhZzt9KTsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZighY2hpbGRyZW4ubGVuZ3RoKXtyZXR1cm47fS8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcblx0aWYoZmFsc2Upe3dhcm4oJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnKyc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsdGhpcy4kcGFyZW50KTt9dmFyIG1vZGU9dGhpcy5tb2RlOy8vIHdhcm4gaW52YWxpZCBtb2RlXG5cdGlmKGZhbHNlKXt3YXJuKCdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnK21vZGUsdGhpcy4kcGFyZW50KTt9dmFyIHJhd0NoaWxkPWNoaWxkcmVuWzBdOy8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3Ncblx0Ly8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG5cdGlmKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKXtyZXR1cm4gcmF3Q2hpbGQ7fS8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuXHQvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG5cdHZhciBjaGlsZD1nZXRSZWFsQ2hpbGQocmF3Q2hpbGQpOy8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKCFjaGlsZCl7cmV0dXJuIHJhd0NoaWxkO31pZih0aGlzLl9sZWF2aW5nKXtyZXR1cm4gcGxhY2Vob2xkZXIoaCxyYXdDaGlsZCk7fXZhciBrZXk9Y2hpbGQua2V5PWNoaWxkLmtleT09bnVsbHx8Y2hpbGQuaXNTdGF0aWM/XCJfX3ZcIisoY2hpbGQudGFnK3RoaXMuX3VpZCkrXCJfX1wiOmNoaWxkLmtleTt2YXIgZGF0YT0oY2hpbGQuZGF0YXx8KGNoaWxkLmRhdGE9e30pKS50cmFuc2l0aW9uPWV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTt2YXIgb2xkUmF3Q2hpbGQ9dGhpcy5fdm5vZGU7dmFyIG9sZENoaWxkPWdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7Ly8gbWFyayB2LXNob3dcblx0Ly8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG5cdGlmKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyYmY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoZnVuY3Rpb24oZCl7cmV0dXJuIGQubmFtZT09PSdzaG93Jzt9KSl7Y2hpbGQuZGF0YS5zaG93PXRydWU7fWlmKG9sZENoaWxkJiZvbGRDaGlsZC5kYXRhJiYhaXNTYW1lQ2hpbGQoY2hpbGQsb2xkQ2hpbGQpKXsvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcblx0Ly8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuXHR2YXIgb2xkRGF0YT1vbGRDaGlsZCYmKG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbj1leHRlbmQoe30sZGF0YSkpOy8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcblx0aWYobW9kZT09PSdvdXQtaW4nKXsvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcblx0dGhpcy5fbGVhdmluZz10cnVlO21lcmdlVk5vZGVIb29rKG9sZERhdGEsJ2FmdGVyTGVhdmUnLGZ1bmN0aW9uKCl7dGhpcyQxLl9sZWF2aW5nPWZhbHNlO3RoaXMkMS4kZm9yY2VVcGRhdGUoKTt9LGtleSk7cmV0dXJuIHBsYWNlaG9sZGVyKGgscmF3Q2hpbGQpO31lbHNlIGlmKG1vZGU9PT0naW4tb3V0Jyl7dmFyIGRlbGF5ZWRMZWF2ZTt2YXIgcGVyZm9ybUxlYXZlPWZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSgpe2RlbGF5ZWRMZWF2ZSgpO307bWVyZ2VWTm9kZUhvb2soZGF0YSwnYWZ0ZXJFbnRlcicscGVyZm9ybUxlYXZlLGtleSk7bWVyZ2VWTm9kZUhvb2soZGF0YSwnZW50ZXJDYW5jZWxsZWQnLHBlcmZvcm1MZWF2ZSxrZXkpO21lcmdlVk5vZGVIb29rKG9sZERhdGEsJ2RlbGF5TGVhdmUnLGZ1bmN0aW9uKGxlYXZlKXtkZWxheWVkTGVhdmU9bGVhdmU7fSxrZXkpO319cmV0dXJuIHJhd0NoaWxkO319Oy8qICAqLy8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgbGlzdCBpdGVtcy5cblx0Ly8gc3VwcG9ydHMgbW92ZSB0cmFuc2l0aW9ucyB1c2luZyB0aGUgRkxJUCB0ZWNobmlxdWUuXG5cdC8vIEJlY2F1c2UgdGhlIHZkb20ncyBjaGlsZHJlbiB1cGRhdGUgYWxnb3JpdGhtIGlzIFwidW5zdGFibGVcIiAtIGkuZS5cblx0Ly8gaXQgZG9lc24ndCBndWFyYW50ZWUgdGhlIHJlbGF0aXZlIHBvc2l0aW9uaW5nIG9mIHJlbW92ZWQgZWxlbWVudHMsXG5cdC8vIHdlIGZvcmNlIHRyYW5zaXRpb24tZ3JvdXAgdG8gdXBkYXRlIGl0cyBjaGlsZHJlbiBpbnRvIHR3byBwYXNzZXM6XG5cdC8vIGluIHRoZSBmaXJzdCBwYXNzLCB3ZSByZW1vdmUgYWxsIG5vZGVzIHRoYXQgbmVlZCB0byBiZSByZW1vdmVkLFxuXHQvLyB0cmlnZ2VyaW5nIHRoZWlyIGxlYXZpbmcgdHJhbnNpdGlvbjsgaW4gdGhlIHNlY29uZCBwYXNzLCB3ZSBpbnNlcnQvbW92ZVxuXHQvLyBpbnRvIHRoZSBmaW5hbCBkaXNpcmVkIHN0YXRlLiBUaGlzIHdheSBpbiB0aGUgc2Vjb25kIHBhc3MgcmVtb3ZlZFxuXHQvLyBub2RlcyB3aWxsIHJlbWFpbiB3aGVyZSB0aGV5IHNob3VsZCBiZS5cblx0dmFyIHByb3BzPWV4dGVuZCh7dGFnOlN0cmluZyxtb3ZlQ2xhc3M6U3RyaW5nfSx0cmFuc2l0aW9uUHJvcHMpO2RlbGV0ZSBwcm9wcy5tb2RlO3ZhciBUcmFuc2l0aW9uR3JvdXA9e3Byb3BzOnByb3BzLHJlbmRlcjpmdW5jdGlvbiByZW5kZXIoaCl7dmFyIHRhZz10aGlzLnRhZ3x8dGhpcy4kdm5vZGUuZGF0YS50YWd8fCdzcGFuJzt2YXIgbWFwPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIHByZXZDaGlsZHJlbj10aGlzLnByZXZDaGlsZHJlbj10aGlzLmNoaWxkcmVuO3ZhciByYXdDaGlsZHJlbj10aGlzLiRzbG90cy5kZWZhdWx0fHxbXTt2YXIgY2hpbGRyZW49dGhpcy5jaGlsZHJlbj1bXTt2YXIgdHJhbnNpdGlvbkRhdGE9ZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO2Zvcih2YXIgaT0wO2k8cmF3Q2hpbGRyZW4ubGVuZ3RoO2krKyl7dmFyIGM9cmF3Q2hpbGRyZW5baV07aWYoYy50YWcpe2lmKGMua2V5IT1udWxsJiZTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSE9PTApe2NoaWxkcmVuLnB1c2goYyk7bWFwW2Mua2V5XT1jOyhjLmRhdGF8fChjLmRhdGE9e30pKS50cmFuc2l0aW9uPXRyYW5zaXRpb25EYXRhO31lbHNlIGlmKGZhbHNlKXt2YXIgb3B0cz1jLmNvbXBvbmVudE9wdGlvbnM7dmFyIG5hbWU9b3B0cz9vcHRzLkN0b3Iub3B0aW9ucy5uYW1lfHxvcHRzLnRhZzpjLnRhZzt3YXJuKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIituYW1lK1wiPlwiKTt9fX1pZihwcmV2Q2hpbGRyZW4pe3ZhciBrZXB0PVtdO3ZhciByZW1vdmVkPVtdO2Zvcih2YXIgaSQxPTA7aSQxPHByZXZDaGlsZHJlbi5sZW5ndGg7aSQxKyspe3ZhciBjJDE9cHJldkNoaWxkcmVuW2kkMV07YyQxLmRhdGEudHJhbnNpdGlvbj10cmFuc2l0aW9uRGF0YTtjJDEuZGF0YS5wb3M9YyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtpZihtYXBbYyQxLmtleV0pe2tlcHQucHVzaChjJDEpO31lbHNle3JlbW92ZWQucHVzaChjJDEpO319dGhpcy5rZXB0PWgodGFnLG51bGwsa2VwdCk7dGhpcy5yZW1vdmVkPXJlbW92ZWQ7fXJldHVybiBoKHRhZyxudWxsLGNoaWxkcmVuKTt9LGJlZm9yZVVwZGF0ZTpmdW5jdGlvbiBiZWZvcmVVcGRhdGUoKXsvLyBmb3JjZSByZW1vdmluZyBwYXNzXG5cdHRoaXMuX19wYXRjaF9fKHRoaXMuX3Zub2RlLHRoaXMua2VwdCxmYWxzZSwvLyBoeWRyYXRpbmdcblx0dHJ1ZS8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3Zlcylcblx0KTt0aGlzLl92bm9kZT10aGlzLmtlcHQ7fSx1cGRhdGVkOmZ1bmN0aW9uIHVwZGF0ZWQoKXt2YXIgY2hpbGRyZW49dGhpcy5wcmV2Q2hpbGRyZW47dmFyIG1vdmVDbGFzcz10aGlzLm1vdmVDbGFzc3x8KHRoaXMubmFtZXx8J3YnKSsnLW1vdmUnO2lmKCFjaGlsZHJlbi5sZW5ndGh8fCF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLG1vdmVDbGFzcykpe3JldHVybjt9Ly8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG5cdC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuXHRjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pOy8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuXHR2YXIgZj1kb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDsvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oYyl7aWYoYy5kYXRhLm1vdmVkKXt2YXIgZWw9Yy5lbG07dmFyIHM9ZWwuc3R5bGU7YWRkVHJhbnNpdGlvbkNsYXNzKGVsLG1vdmVDbGFzcyk7cy50cmFuc2Zvcm09cy5XZWJraXRUcmFuc2Zvcm09cy50cmFuc2l0aW9uRHVyYXRpb249Jyc7ZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsZWwuX21vdmVDYj1mdW5jdGlvbiBjYihlKXtpZighZXx8L3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKXtlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCxjYik7ZWwuX21vdmVDYj1udWxsO3JlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCxtb3ZlQ2xhc3MpO319KTt9fSk7fSxtZXRob2RzOntoYXNNb3ZlOmZ1bmN0aW9uIGhhc01vdmUoZWwsbW92ZUNsYXNzKXsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZighaGFzVHJhbnNpdGlvbil7cmV0dXJuIGZhbHNlO31pZih0aGlzLl9oYXNNb3ZlIT1udWxsKXtyZXR1cm4gdGhpcy5faGFzTW92ZTt9YWRkVHJhbnNpdGlvbkNsYXNzKGVsLG1vdmVDbGFzcyk7dmFyIGluZm89Z2V0VHJhbnNpdGlvbkluZm8oZWwpO3JlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCxtb3ZlQ2xhc3MpO3JldHVybiB0aGlzLl9oYXNNb3ZlPWluZm8uaGFzVHJhbnNmb3JtO319fTtmdW5jdGlvbiBjYWxsUGVuZGluZ0NicyhjKXsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihjLmVsbS5fbW92ZUNiKXtjLmVsbS5fbW92ZUNiKCk7fS8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGMuZWxtLl9lbnRlckNiKXtjLmVsbS5fZW50ZXJDYigpO319ZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24oYyl7Yy5kYXRhLm5ld1Bvcz1jLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt9ZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbihjKXt2YXIgb2xkUG9zPWMuZGF0YS5wb3M7dmFyIG5ld1Bvcz1jLmRhdGEubmV3UG9zO3ZhciBkeD1vbGRQb3MubGVmdC1uZXdQb3MubGVmdDt2YXIgZHk9b2xkUG9zLnRvcC1uZXdQb3MudG9wO2lmKGR4fHxkeSl7Yy5kYXRhLm1vdmVkPXRydWU7dmFyIHM9Yy5lbG0uc3R5bGU7cy50cmFuc2Zvcm09cy5XZWJraXRUcmFuc2Zvcm09XCJ0cmFuc2xhdGUoXCIrZHgrXCJweCxcIitkeStcInB4KVwiO3MudHJhbnNpdGlvbkR1cmF0aW9uPScwcyc7fX12YXIgcGxhdGZvcm1Db21wb25lbnRzPXtUcmFuc2l0aW9uOlRyYW5zaXRpb24sVHJhbnNpdGlvbkdyb3VwOlRyYW5zaXRpb25Hcm91cH07LyogICovLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuXHRWdWUkMy5jb25maWcuaXNVbmtub3duRWxlbWVudD1pc1Vua25vd25FbGVtZW50O1Z1ZSQzLmNvbmZpZy5pc1Jlc2VydmVkVGFnPWlzUmVzZXJ2ZWRUYWc7VnVlJDMuY29uZmlnLmdldFRhZ05hbWVzcGFjZT1nZXRUYWdOYW1lc3BhY2U7VnVlJDMuY29uZmlnLm11c3RVc2VQcm9wPW11c3RVc2VQcm9wOy8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuXHRleHRlbmQoVnVlJDMub3B0aW9ucy5kaXJlY3RpdmVzLHBsYXRmb3JtRGlyZWN0aXZlcyk7ZXh0ZW5kKFZ1ZSQzLm9wdGlvbnMuY29tcG9uZW50cyxwbGF0Zm9ybUNvbXBvbmVudHMpOy8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblx0VnVlJDMucHJvdG90eXBlLl9fcGF0Y2hfXz1pbkJyb3dzZXI/cGF0Y2gkMTpub29wOy8vIHdyYXAgbW91bnRcblx0VnVlJDMucHJvdG90eXBlLiRtb3VudD1mdW5jdGlvbihlbCxoeWRyYXRpbmcpe2VsPWVsJiZpbkJyb3dzZXI/cXVlcnkoZWwpOnVuZGVmaW5lZDtyZXR1cm4gdGhpcy5fbW91bnQoZWwsaHlkcmF0aW5nKTt9O2lmKGZhbHNlKXtjb25zb2xlW2NvbnNvbGUuaW5mbz8naW5mbyc6J2xvZyddKFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiK1wiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiK1wiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIik7fS8vIGRldnRvb2xzIGdsb2JhbCBob29rXG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovc2V0VGltZW91dChmdW5jdGlvbigpe2lmKGNvbmZpZy5kZXZ0b29scyl7aWYoZGV2dG9vbHMpe2RldnRvb2xzLmVtaXQoJ2luaXQnLFZ1ZSQzKTt9ZWxzZSBpZihmYWxzZSl7Y29uc29sZVtjb25zb2xlLmluZm8/J2luZm8nOidsb2cnXSgnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJysnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scycpO319fSwwKTsvKiAgKi8vLyBjaGVjayB3aGV0aGVyIGN1cnJlbnQgYnJvd3NlciBlbmNvZGVzIGEgY2hhciBpbnNpZGUgYXR0cmlidXRlIHZhbHVlc1xuXHRmdW5jdGlvbiBzaG91bGREZWNvZGUoY29udGVudCxlbmNvZGVkKXt2YXIgZGl2PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO2Rpdi5pbm5lckhUTUw9XCI8ZGl2IGE9XFxcIlwiK2NvbnRlbnQrXCJcXFwiPlwiO3JldHVybiBkaXYuaW5uZXJIVE1MLmluZGV4T2YoZW5jb2RlZCk+MDt9Ly8gIzM2NjNcblx0Ly8gSUUgZW5jb2RlcyBuZXdsaW5lcyBpbnNpZGUgYXR0cmlidXRlIHZhbHVlcyB3aGlsZSBvdGhlciBicm93c2VycyBkb24ndFxuXHR2YXIgc2hvdWxkRGVjb2RlTmV3bGluZXM9aW5Ccm93c2VyP3Nob3VsZERlY29kZSgnXFxuJywnJiMxMDsnKTpmYWxzZTsvKiAgKi92YXIgZGVjb2RlcjtmdW5jdGlvbiBkZWNvZGUoaHRtbCl7ZGVjb2Rlcj1kZWNvZGVyfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtkZWNvZGVyLmlubmVySFRNTD1odG1sO3JldHVybiBkZWNvZGVyLnRleHRDb250ZW50O30vKiAgKi92YXIgaXNVbmFyeVRhZz1tYWtlTWFwKCdhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGZyYW1lLGhyLGltZyxpbnB1dCxpc2luZGV4LGtleWdlbiwnKydsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicicsdHJ1ZSk7Ly8gRWxlbWVudHMgdGhhdCB5b3UgY2FuLCBpbnRlbnRpb25hbGx5LCBsZWF2ZSBvcGVuXG5cdC8vIChhbmQgd2hpY2ggY2xvc2UgdGhlbXNlbHZlcylcblx0dmFyIGNhbkJlTGVmdE9wZW5UYWc9bWFrZU1hcCgnY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZScsdHJ1ZSk7Ly8gSFRNTDUgdGFncyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjZWxlbWVudHMtM1xuXHQvLyBQaHJhc2luZyBDb250ZW50IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2RvbS5odG1sI3BocmFzaW5nLWNvbnRlbnRcblx0dmFyIGlzTm9uUGhyYXNpbmdUYWc9bWFrZU1hcCgnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGJhc2UsYmxvY2txdW90ZSxib2R5LGNhcHRpb24sY29sLGNvbGdyb3VwLGRkLCcrJ2RldGFpbHMsZGlhbG9nLGRpdixkbCxkdCxmaWVsZHNldCxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsZm9ybSwnKydoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnKydvcHRncm91cCxvcHRpb24scGFyYW0scnAscnQsc291cmNlLHN0eWxlLHN1bW1hcnksdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsJysndGl0bGUsdHIsdHJhY2snLHRydWUpOy8qKlxuXHQgKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBpdCdzIG1vc3RseSB2ZW5kb3IgY29kZS5cblx0ICovLyohXG5cdCAqIEhUTUwgUGFyc2VyIEJ5IEpvaG4gUmVzaWcgKGVqb2huLm9yZylcblx0ICogTW9kaWZpZWQgYnkgSnVyaXkgXCJrYW5nYXhcIiBaYXl0c2V2XG5cdCAqIE9yaWdpbmFsIGNvZGUgYnkgRXJpayBBcnZpZHNzb24sIE1vemlsbGEgUHVibGljIExpY2Vuc2Vcblx0ICogaHR0cDovL2VyaWsuZWFlLm5ldC9zaW1wbGVodG1scGFyc2VyL3NpbXBsZWh0bWxwYXJzZXIuanNcblx0ICovLy8gUmVndWxhciBFeHByZXNzaW9ucyBmb3IgcGFyc2luZyB0YWdzIGFuZCBhdHRyaWJ1dGVzXG5cdHZhciBzaW5nbGVBdHRySWRlbnRpZmllcj0vKFteXFxzXCInPD4vPV0rKS87dmFyIHNpbmdsZUF0dHJBc3NpZ249Lyg/Oj0pLzt2YXIgc2luZ2xlQXR0clZhbHVlcz1bLy8gYXR0ciB2YWx1ZSBkb3VibGUgcXVvdGVzXG5cdC9cIihbXlwiXSopXCIrLy5zb3VyY2UsLy8gYXR0ciB2YWx1ZSwgc2luZ2xlIHF1b3Rlc1xuXHQvJyhbXiddKiknKy8uc291cmNlLC8vIGF0dHIgdmFsdWUsIG5vIHF1b3Rlc1xuXHQvKFteXFxzXCInPTw+YF0rKS8uc291cmNlXTt2YXIgYXR0cmlidXRlPW5ldyBSZWdFeHAoJ15cXFxccyonK3NpbmdsZUF0dHJJZGVudGlmaWVyLnNvdXJjZSsnKD86XFxcXHMqKCcrc2luZ2xlQXR0ckFzc2lnbi5zb3VyY2UrJyknKydcXFxccyooPzonK3NpbmdsZUF0dHJWYWx1ZXMuam9pbignfCcpKycpKT8nKTsvLyBjb3VsZCB1c2UgaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvUkVDLXhtbC1uYW1lcy0xOTk5MDExNC8jTlQtUU5hbWVcblx0Ly8gYnV0IGZvciBWdWUgdGVtcGxhdGVzIHdlIGNhbiBlbmZvcmNlIGEgc2ltcGxlIGNoYXJzZXRcblx0dmFyIG5jbmFtZT0nW2EtekEtWl9dW1xcXFx3XFxcXC1cXFxcLl0qJzt2YXIgcW5hbWVDYXB0dXJlPScoKD86JytuY25hbWUrJ1xcXFw6KT8nK25jbmFtZSsnKSc7dmFyIHN0YXJ0VGFnT3Blbj1uZXcgUmVnRXhwKCdePCcrcW5hbWVDYXB0dXJlKTt2YXIgc3RhcnRUYWdDbG9zZT0vXlxccyooXFwvPyk+Lzt2YXIgZW5kVGFnPW5ldyBSZWdFeHAoJ148XFxcXC8nK3FuYW1lQ2FwdHVyZSsnW14+XSo+Jyk7dmFyIGRvY3R5cGU9L148IURPQ1RZUEUgW14+XSs+L2k7dmFyIGNvbW1lbnQ9L148IS0tLzt2YXIgY29uZGl0aW9uYWxDb21tZW50PS9ePCFcXFsvO3ZhciBJU19SRUdFWF9DQVBUVVJJTkdfQlJPS0VOPWZhbHNlOyd4Jy5yZXBsYWNlKC94KC4pPy9nLGZ1bmN0aW9uKG0sZyl7SVNfUkVHRVhfQ0FQVFVSSU5HX0JST0tFTj1nPT09Jyc7fSk7Ly8gU3BlY2lhbCBFbGVtZW50cyAoY2FuIGNvbnRhaW4gYW55dGhpbmcpXG5cdHZhciBpc1NjcmlwdE9yU3R5bGU9bWFrZU1hcCgnc2NyaXB0LHN0eWxlJyx0cnVlKTt2YXIgaGFzTGFuZz1mdW5jdGlvbiBoYXNMYW5nKGF0dHIpe3JldHVybiBhdHRyLm5hbWU9PT0nbGFuZycmJmF0dHIudmFsdWUhPT0naHRtbCc7fTt2YXIgaXNTcGVjaWFsVGFnPWZ1bmN0aW9uIGlzU3BlY2lhbFRhZyh0YWcsaXNTRkMsc3RhY2spe2lmKGlzU2NyaXB0T3JTdHlsZSh0YWcpKXtyZXR1cm4gdHJ1ZTt9aWYoaXNTRkMmJnN0YWNrLmxlbmd0aD09PTEpey8vIHRvcC1sZXZlbCB0ZW1wbGF0ZSB0aGF0IGhhcyBubyBwcmUtcHJvY2Vzc29yXG5cdGlmKHRhZz09PSd0ZW1wbGF0ZScmJiFzdGFja1swXS5hdHRycy5zb21lKGhhc0xhbmcpKXtyZXR1cm4gZmFsc2U7fWVsc2V7cmV0dXJuIHRydWU7fX1yZXR1cm4gZmFsc2U7fTt2YXIgcmVDYWNoZT17fTt2YXIgbHRSRT0vJmx0Oy9nO3ZhciBndFJFPS8mZ3Q7L2c7dmFyIG5sUkU9LyYjMTA7L2c7dmFyIGFtcFJFPS8mYW1wOy9nO3ZhciBxdW90ZVJFPS8mcXVvdDsvZztmdW5jdGlvbiBkZWNvZGVBdHRyKHZhbHVlLHNob3VsZERlY29kZU5ld2xpbmVzKXtpZihzaG91bGREZWNvZGVOZXdsaW5lcyl7dmFsdWU9dmFsdWUucmVwbGFjZShubFJFLCdcXG4nKTt9cmV0dXJuIHZhbHVlLnJlcGxhY2UobHRSRSwnPCcpLnJlcGxhY2UoZ3RSRSwnPicpLnJlcGxhY2UoYW1wUkUsJyYnKS5yZXBsYWNlKHF1b3RlUkUsJ1wiJyk7fWZ1bmN0aW9uIHBhcnNlSFRNTChodG1sLG9wdGlvbnMpe3ZhciBzdGFjaz1bXTt2YXIgZXhwZWN0SFRNTD1vcHRpb25zLmV4cGVjdEhUTUw7dmFyIGlzVW5hcnlUYWckJDE9b3B0aW9ucy5pc1VuYXJ5VGFnfHxubzt2YXIgaW5kZXg9MDt2YXIgbGFzdCxsYXN0VGFnO3doaWxlKGh0bWwpe2xhc3Q9aHRtbDsvLyBNYWtlIHN1cmUgd2UncmUgbm90IGluIGEgc2NyaXB0IG9yIHN0eWxlIGVsZW1lbnRcblx0aWYoIWxhc3RUYWd8fCFpc1NwZWNpYWxUYWcobGFzdFRhZyxvcHRpb25zLnNmYyxzdGFjaykpe3ZhciB0ZXh0RW5kPWh0bWwuaW5kZXhPZignPCcpO2lmKHRleHRFbmQ9PT0wKXsvLyBDb21tZW50OlxuXHRpZihjb21tZW50LnRlc3QoaHRtbCkpe3ZhciBjb21tZW50RW5kPWh0bWwuaW5kZXhPZignLS0+Jyk7aWYoY29tbWVudEVuZD49MCl7YWR2YW5jZShjb21tZW50RW5kKzMpO2NvbnRpbnVlO319Ly8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25kaXRpb25hbF9jb21tZW50I0Rvd25sZXZlbC1yZXZlYWxlZF9jb25kaXRpb25hbF9jb21tZW50XG5cdGlmKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKXt2YXIgY29uZGl0aW9uYWxFbmQ9aHRtbC5pbmRleE9mKCddPicpO2lmKGNvbmRpdGlvbmFsRW5kPj0wKXthZHZhbmNlKGNvbmRpdGlvbmFsRW5kKzIpO2NvbnRpbnVlO319Ly8gRG9jdHlwZTpcblx0dmFyIGRvY3R5cGVNYXRjaD1odG1sLm1hdGNoKGRvY3R5cGUpO2lmKGRvY3R5cGVNYXRjaCl7YWR2YW5jZShkb2N0eXBlTWF0Y2hbMF0ubGVuZ3RoKTtjb250aW51ZTt9Ly8gRW5kIHRhZzpcblx0dmFyIGVuZFRhZ01hdGNoPWh0bWwubWF0Y2goZW5kVGFnKTtpZihlbmRUYWdNYXRjaCl7dmFyIGN1ckluZGV4PWluZGV4O2FkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFswXSxlbmRUYWdNYXRjaFsxXSxjdXJJbmRleCxpbmRleCk7Y29udGludWU7fS8vIFN0YXJ0IHRhZzpcblx0dmFyIHN0YXJ0VGFnTWF0Y2g9cGFyc2VTdGFydFRhZygpO2lmKHN0YXJ0VGFnTWF0Y2gpe2hhbmRsZVN0YXJ0VGFnKHN0YXJ0VGFnTWF0Y2gpO2NvbnRpbnVlO319dmFyIHRleHQ9dm9pZCAwLHJlc3QkMT12b2lkIDAsbmV4dD12b2lkIDA7aWYodGV4dEVuZD4wKXtyZXN0JDE9aHRtbC5zbGljZSh0ZXh0RW5kKTt3aGlsZSghZW5kVGFnLnRlc3QocmVzdCQxKSYmIXN0YXJ0VGFnT3Blbi50ZXN0KHJlc3QkMSkmJiFjb21tZW50LnRlc3QocmVzdCQxKSYmIWNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KHJlc3QkMSkpey8vIDwgaW4gcGxhaW4gdGV4dCwgYmUgZm9yZ2l2aW5nIGFuZCB0cmVhdCBpdCBhcyB0ZXh0XG5cdG5leHQ9cmVzdCQxLmluZGV4T2YoJzwnLDEpO2lmKG5leHQ8MCl7YnJlYWs7fXRleHRFbmQrPW5leHQ7cmVzdCQxPWh0bWwuc2xpY2UodGV4dEVuZCk7fXRleHQ9aHRtbC5zdWJzdHJpbmcoMCx0ZXh0RW5kKTthZHZhbmNlKHRleHRFbmQpO31pZih0ZXh0RW5kPDApe3RleHQ9aHRtbDtodG1sPScnO31pZihvcHRpb25zLmNoYXJzJiZ0ZXh0KXtvcHRpb25zLmNoYXJzKHRleHQpO319ZWxzZXt2YXIgc3RhY2tlZFRhZz1sYXN0VGFnLnRvTG93ZXJDYXNlKCk7dmFyIHJlU3RhY2tlZFRhZz1yZUNhY2hlW3N0YWNrZWRUYWddfHwocmVDYWNoZVtzdGFja2VkVGFnXT1uZXcgUmVnRXhwKCcoW1xcXFxzXFxcXFNdKj8pKDwvJytzdGFja2VkVGFnKydbXj5dKj4pJywnaScpKTt2YXIgZW5kVGFnTGVuZ3RoPTA7dmFyIHJlc3Q9aHRtbC5yZXBsYWNlKHJlU3RhY2tlZFRhZyxmdW5jdGlvbihhbGwsdGV4dCxlbmRUYWcpe2VuZFRhZ0xlbmd0aD1lbmRUYWcubGVuZ3RoO2lmKHN0YWNrZWRUYWchPT0nc2NyaXB0JyYmc3RhY2tlZFRhZyE9PSdzdHlsZScmJnN0YWNrZWRUYWchPT0nbm9zY3JpcHQnKXt0ZXh0PXRleHQucmVwbGFjZSgvPCEtLShbXFxzXFxTXSo/KS0tPi9nLCckMScpLnJlcGxhY2UoLzwhXFxbQ0RBVEFcXFsoW1xcc1xcU10qPyldXT4vZywnJDEnKTt9aWYob3B0aW9ucy5jaGFycyl7b3B0aW9ucy5jaGFycyh0ZXh0KTt9cmV0dXJuJyc7fSk7aW5kZXgrPWh0bWwubGVuZ3RoLXJlc3QubGVuZ3RoO2h0bWw9cmVzdDtwYXJzZUVuZFRhZygnPC8nK3N0YWNrZWRUYWcrJz4nLHN0YWNrZWRUYWcsaW5kZXgtZW5kVGFnTGVuZ3RoLGluZGV4KTt9aWYoaHRtbD09PWxhc3QmJm9wdGlvbnMuY2hhcnMpe29wdGlvbnMuY2hhcnMoaHRtbCk7YnJlYWs7fX0vLyBDbGVhbiB1cCBhbnkgcmVtYWluaW5nIHRhZ3Ncblx0cGFyc2VFbmRUYWcoKTtmdW5jdGlvbiBhZHZhbmNlKG4pe2luZGV4Kz1uO2h0bWw9aHRtbC5zdWJzdHJpbmcobik7fWZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcoKXt2YXIgc3RhcnQ9aHRtbC5tYXRjaChzdGFydFRhZ09wZW4pO2lmKHN0YXJ0KXt2YXIgbWF0Y2g9e3RhZ05hbWU6c3RhcnRbMV0sYXR0cnM6W10sc3RhcnQ6aW5kZXh9O2FkdmFuY2Uoc3RhcnRbMF0ubGVuZ3RoKTt2YXIgZW5kLGF0dHI7d2hpbGUoIShlbmQ9aHRtbC5tYXRjaChzdGFydFRhZ0Nsb3NlKSkmJihhdHRyPWh0bWwubWF0Y2goYXR0cmlidXRlKSkpe2FkdmFuY2UoYXR0clswXS5sZW5ndGgpO21hdGNoLmF0dHJzLnB1c2goYXR0cik7fWlmKGVuZCl7bWF0Y2gudW5hcnlTbGFzaD1lbmRbMV07YWR2YW5jZShlbmRbMF0ubGVuZ3RoKTttYXRjaC5lbmQ9aW5kZXg7cmV0dXJuIG1hdGNoO319fWZ1bmN0aW9uIGhhbmRsZVN0YXJ0VGFnKG1hdGNoKXt2YXIgdGFnTmFtZT1tYXRjaC50YWdOYW1lO3ZhciB1bmFyeVNsYXNoPW1hdGNoLnVuYXJ5U2xhc2g7aWYoZXhwZWN0SFRNTCl7aWYobGFzdFRhZz09PSdwJyYmaXNOb25QaHJhc2luZ1RhZyh0YWdOYW1lKSl7cGFyc2VFbmRUYWcoJycsbGFzdFRhZyk7fWlmKGNhbkJlTGVmdE9wZW5UYWcodGFnTmFtZSkmJmxhc3RUYWc9PT10YWdOYW1lKXtwYXJzZUVuZFRhZygnJyx0YWdOYW1lKTt9fXZhciB1bmFyeT1pc1VuYXJ5VGFnJCQxKHRhZ05hbWUpfHx0YWdOYW1lPT09J2h0bWwnJiZsYXN0VGFnPT09J2hlYWQnfHwhIXVuYXJ5U2xhc2g7dmFyIGw9bWF0Y2guYXR0cnMubGVuZ3RoO3ZhciBhdHRycz1uZXcgQXJyYXkobCk7Zm9yKHZhciBpPTA7aTxsO2krKyl7dmFyIGFyZ3M9bWF0Y2guYXR0cnNbaV07Ly8gaGFja2lzaCB3b3JrIGFyb3VuZCBGRiBidWcgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MzY5Nzc4XG5cdGlmKElTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4mJmFyZ3NbMF0uaW5kZXhPZignXCJcIicpPT09LTEpe2lmKGFyZ3NbM109PT0nJyl7ZGVsZXRlIGFyZ3NbM107fWlmKGFyZ3NbNF09PT0nJyl7ZGVsZXRlIGFyZ3NbNF07fWlmKGFyZ3NbNV09PT0nJyl7ZGVsZXRlIGFyZ3NbNV07fX12YXIgdmFsdWU9YXJnc1szXXx8YXJnc1s0XXx8YXJnc1s1XXx8Jyc7YXR0cnNbaV09e25hbWU6YXJnc1sxXSx2YWx1ZTpkZWNvZGVBdHRyKHZhbHVlLG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXMpfTt9aWYoIXVuYXJ5KXtzdGFjay5wdXNoKHt0YWc6dGFnTmFtZSxhdHRyczphdHRyc30pO2xhc3RUYWc9dGFnTmFtZTt1bmFyeVNsYXNoPScnO31pZihvcHRpb25zLnN0YXJ0KXtvcHRpb25zLnN0YXJ0KHRhZ05hbWUsYXR0cnMsdW5hcnksbWF0Y2guc3RhcnQsbWF0Y2guZW5kKTt9fWZ1bmN0aW9uIHBhcnNlRW5kVGFnKHRhZyx0YWdOYW1lLHN0YXJ0LGVuZCl7dmFyIHBvcztpZihzdGFydD09bnVsbCl7c3RhcnQ9aW5kZXg7fWlmKGVuZD09bnVsbCl7ZW5kPWluZGV4O30vLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZVxuXHRpZih0YWdOYW1lKXt2YXIgbmVlZGxlPXRhZ05hbWUudG9Mb3dlckNhc2UoKTtmb3IocG9zPXN0YWNrLmxlbmd0aC0xO3Bvcz49MDtwb3MtLSl7aWYoc3RhY2tbcG9zXS50YWcudG9Mb3dlckNhc2UoKT09PW5lZWRsZSl7YnJlYWs7fX19ZWxzZXsvLyBJZiBubyB0YWcgbmFtZSBpcyBwcm92aWRlZCwgY2xlYW4gc2hvcFxuXHRwb3M9MDt9aWYocG9zPj0wKXsvLyBDbG9zZSBhbGwgdGhlIG9wZW4gZWxlbWVudHMsIHVwIHRoZSBzdGFja1xuXHRmb3IodmFyIGk9c3RhY2subGVuZ3RoLTE7aT49cG9zO2ktLSl7aWYob3B0aW9ucy5lbmQpe29wdGlvbnMuZW5kKHN0YWNrW2ldLnRhZyxzdGFydCxlbmQpO319Ly8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG5cdHN0YWNrLmxlbmd0aD1wb3M7bGFzdFRhZz1wb3MmJnN0YWNrW3Bvcy0xXS50YWc7fWVsc2UgaWYodGFnTmFtZS50b0xvd2VyQ2FzZSgpPT09J2JyJyl7aWYob3B0aW9ucy5zdGFydCl7b3B0aW9ucy5zdGFydCh0YWdOYW1lLFtdLHRydWUsc3RhcnQsZW5kKTt9fWVsc2UgaWYodGFnTmFtZS50b0xvd2VyQ2FzZSgpPT09J3AnKXtpZihvcHRpb25zLnN0YXJ0KXtvcHRpb25zLnN0YXJ0KHRhZ05hbWUsW10sZmFsc2Usc3RhcnQsZW5kKTt9aWYob3B0aW9ucy5lbmQpe29wdGlvbnMuZW5kKHRhZ05hbWUsc3RhcnQsZW5kKTt9fX19LyogICovZnVuY3Rpb24gcGFyc2VGaWx0ZXJzKGV4cCl7dmFyIGluU2luZ2xlPWZhbHNlO3ZhciBpbkRvdWJsZT1mYWxzZTt2YXIgaW5UZW1wbGF0ZVN0cmluZz1mYWxzZTt2YXIgaW5SZWdleD1mYWxzZTt2YXIgY3VybHk9MDt2YXIgc3F1YXJlPTA7dmFyIHBhcmVuPTA7dmFyIGxhc3RGaWx0ZXJJbmRleD0wO3ZhciBjLHByZXYsaSxleHByZXNzaW9uLGZpbHRlcnM7Zm9yKGk9MDtpPGV4cC5sZW5ndGg7aSsrKXtwcmV2PWM7Yz1leHAuY2hhckNvZGVBdChpKTtpZihpblNpbmdsZSl7aWYoYz09PTB4MjcmJnByZXYhPT0weDVDKXtpblNpbmdsZT1mYWxzZTt9fWVsc2UgaWYoaW5Eb3VibGUpe2lmKGM9PT0weDIyJiZwcmV2IT09MHg1Qyl7aW5Eb3VibGU9ZmFsc2U7fX1lbHNlIGlmKGluVGVtcGxhdGVTdHJpbmcpe2lmKGM9PT0weDYwJiZwcmV2IT09MHg1Qyl7aW5UZW1wbGF0ZVN0cmluZz1mYWxzZTt9fWVsc2UgaWYoaW5SZWdleCl7aWYoYz09PTB4MmYmJnByZXYhPT0weDVDKXtpblJlZ2V4PWZhbHNlO319ZWxzZSBpZihjPT09MHg3QyYmLy8gcGlwZVxuXHRleHAuY2hhckNvZGVBdChpKzEpIT09MHg3QyYmZXhwLmNoYXJDb2RlQXQoaS0xKSE9PTB4N0MmJiFjdXJseSYmIXNxdWFyZSYmIXBhcmVuKXtpZihleHByZXNzaW9uPT09dW5kZWZpbmVkKXsvLyBmaXJzdCBmaWx0ZXIsIGVuZCBvZiBleHByZXNzaW9uXG5cdGxhc3RGaWx0ZXJJbmRleD1pKzE7ZXhwcmVzc2lvbj1leHAuc2xpY2UoMCxpKS50cmltKCk7fWVsc2V7cHVzaEZpbHRlcigpO319ZWxzZXtzd2l0Y2goYyl7Y2FzZSAweDIyOmluRG91YmxlPXRydWU7YnJlYWs7Ly8gXCJcblx0Y2FzZSAweDI3OmluU2luZ2xlPXRydWU7YnJlYWs7Ly8gJ1xuXHRjYXNlIDB4NjA6aW5UZW1wbGF0ZVN0cmluZz10cnVlO2JyZWFrOy8vIGBcblx0Y2FzZSAweDI4OnBhcmVuKys7YnJlYWs7Ly8gKFxuXHRjYXNlIDB4Mjk6cGFyZW4tLTticmVhazsvLyApXG5cdGNhc2UgMHg1QjpzcXVhcmUrKzticmVhazsvLyBbXG5cdGNhc2UgMHg1RDpzcXVhcmUtLTticmVhazsvLyBdXG5cdGNhc2UgMHg3QjpjdXJseSsrO2JyZWFrOy8vIHtcblx0Y2FzZSAweDdEOmN1cmx5LS07YnJlYWs7Ly8gfVxuXHR9aWYoYz09PTB4MmYpey8vIC9cblx0dmFyIGo9aS0xO3ZhciBwPXZvaWQgMDsvLyBmaW5kIGZpcnN0IG5vbi13aGl0ZXNwYWNlIHByZXYgY2hhclxuXHRmb3IoO2o+PTA7ai0tKXtwPWV4cC5jaGFyQXQoaik7aWYocCE9PScgJyl7YnJlYWs7fX1pZighcHx8IS9bXFx3JF0vLnRlc3QocCkpe2luUmVnZXg9dHJ1ZTt9fX19aWYoZXhwcmVzc2lvbj09PXVuZGVmaW5lZCl7ZXhwcmVzc2lvbj1leHAuc2xpY2UoMCxpKS50cmltKCk7fWVsc2UgaWYobGFzdEZpbHRlckluZGV4IT09MCl7cHVzaEZpbHRlcigpO31mdW5jdGlvbiBwdXNoRmlsdGVyKCl7KGZpbHRlcnN8fChmaWx0ZXJzPVtdKSkucHVzaChleHAuc2xpY2UobGFzdEZpbHRlckluZGV4LGkpLnRyaW0oKSk7bGFzdEZpbHRlckluZGV4PWkrMTt9aWYoZmlsdGVycyl7Zm9yKGk9MDtpPGZpbHRlcnMubGVuZ3RoO2krKyl7ZXhwcmVzc2lvbj13cmFwRmlsdGVyKGV4cHJlc3Npb24sZmlsdGVyc1tpXSk7fX1yZXR1cm4gZXhwcmVzc2lvbjt9ZnVuY3Rpb24gd3JhcEZpbHRlcihleHAsZmlsdGVyKXt2YXIgaT1maWx0ZXIuaW5kZXhPZignKCcpO2lmKGk8MCl7Ly8gX2Y6IHJlc29sdmVGaWx0ZXJcblx0cmV0dXJuXCJfZihcXFwiXCIrZmlsdGVyK1wiXFxcIikoXCIrZXhwK1wiKVwiO31lbHNle3ZhciBuYW1lPWZpbHRlci5zbGljZSgwLGkpO3ZhciBhcmdzPWZpbHRlci5zbGljZShpKzEpO3JldHVyblwiX2YoXFxcIlwiK25hbWUrXCJcXFwiKShcIitleHArXCIsXCIrYXJnczt9fS8qICAqL3ZhciBkZWZhdWx0VGFnUkU9L1xce1xceygoPzoufFxcbikrPylcXH1cXH0vZzt2YXIgcmVnZXhFc2NhcGVSRT0vWy0uKis/XiR7fSgpfFtcXF0vXFxcXF0vZzt2YXIgYnVpbGRSZWdleD1jYWNoZWQoZnVuY3Rpb24oZGVsaW1pdGVycyl7dmFyIG9wZW49ZGVsaW1pdGVyc1swXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsJ1xcXFwkJicpO3ZhciBjbG9zZT1kZWxpbWl0ZXJzWzFdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwnXFxcXCQmJyk7cmV0dXJuIG5ldyBSZWdFeHAob3BlbisnKCg/Oi58XFxcXG4pKz8pJytjbG9zZSwnZycpO30pO2Z1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0LGRlbGltaXRlcnMpe3ZhciB0YWdSRT1kZWxpbWl0ZXJzP2J1aWxkUmVnZXgoZGVsaW1pdGVycyk6ZGVmYXVsdFRhZ1JFO2lmKCF0YWdSRS50ZXN0KHRleHQpKXtyZXR1cm47fXZhciB0b2tlbnM9W107dmFyIGxhc3RJbmRleD10YWdSRS5sYXN0SW5kZXg9MDt2YXIgbWF0Y2gsaW5kZXg7d2hpbGUobWF0Y2g9dGFnUkUuZXhlYyh0ZXh0KSl7aW5kZXg9bWF0Y2guaW5kZXg7Ly8gcHVzaCB0ZXh0IHRva2VuXG5cdGlmKGluZGV4Pmxhc3RJbmRleCl7dG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodGV4dC5zbGljZShsYXN0SW5kZXgsaW5kZXgpKSk7fS8vIHRhZyB0b2tlblxuXHR2YXIgZXhwPXBhcnNlRmlsdGVycyhtYXRjaFsxXS50cmltKCkpO3Rva2Vucy5wdXNoKFwiX3MoXCIrZXhwK1wiKVwiKTtsYXN0SW5kZXg9aW5kZXgrbWF0Y2hbMF0ubGVuZ3RoO31pZihsYXN0SW5kZXg8dGV4dC5sZW5ndGgpe3Rva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRleHQuc2xpY2UobGFzdEluZGV4KSkpO31yZXR1cm4gdG9rZW5zLmpvaW4oJysnKTt9LyogICovZnVuY3Rpb24gYmFzZVdhcm4obXNnKXtjb25zb2xlLmVycm9yKFwiW1Z1ZSBwYXJzZXJdOiBcIittc2cpO31mdW5jdGlvbiBwbHVja01vZHVsZUZ1bmN0aW9uKG1vZHVsZXMsa2V5KXtyZXR1cm4gbW9kdWxlcz9tb2R1bGVzLm1hcChmdW5jdGlvbihtKXtyZXR1cm4gbVtrZXldO30pLmZpbHRlcihmdW5jdGlvbihfKXtyZXR1cm4gXzt9KTpbXTt9ZnVuY3Rpb24gYWRkUHJvcChlbCxuYW1lLHZhbHVlKXsoZWwucHJvcHN8fChlbC5wcm9wcz1bXSkpLnB1c2goe25hbWU6bmFtZSx2YWx1ZTp2YWx1ZX0pO31mdW5jdGlvbiBhZGRBdHRyKGVsLG5hbWUsdmFsdWUpeyhlbC5hdHRyc3x8KGVsLmF0dHJzPVtdKSkucHVzaCh7bmFtZTpuYW1lLHZhbHVlOnZhbHVlfSk7fWZ1bmN0aW9uIGFkZERpcmVjdGl2ZShlbCxuYW1lLHJhd05hbWUsdmFsdWUsYXJnLG1vZGlmaWVycyl7KGVsLmRpcmVjdGl2ZXN8fChlbC5kaXJlY3RpdmVzPVtdKSkucHVzaCh7bmFtZTpuYW1lLHJhd05hbWU6cmF3TmFtZSx2YWx1ZTp2YWx1ZSxhcmc6YXJnLG1vZGlmaWVyczptb2RpZmllcnN9KTt9ZnVuY3Rpb24gYWRkSGFuZGxlcihlbCxuYW1lLHZhbHVlLG1vZGlmaWVycyxpbXBvcnRhbnQpey8vIGNoZWNrIGNhcHR1cmUgbW9kaWZpZXJcblx0aWYobW9kaWZpZXJzJiZtb2RpZmllcnMuY2FwdHVyZSl7ZGVsZXRlIG1vZGlmaWVycy5jYXB0dXJlO25hbWU9JyEnK25hbWU7Ly8gbWFyayB0aGUgZXZlbnQgYXMgY2FwdHVyZWRcblx0fWlmKG1vZGlmaWVycyYmbW9kaWZpZXJzLm9uY2Upe2RlbGV0ZSBtb2RpZmllcnMub25jZTtuYW1lPSd+JytuYW1lOy8vIG1hcmsgdGhlIGV2ZW50IGFzIG9uY2Vcblx0fXZhciBldmVudHM7aWYobW9kaWZpZXJzJiZtb2RpZmllcnMubmF0aXZlKXtkZWxldGUgbW9kaWZpZXJzLm5hdGl2ZTtldmVudHM9ZWwubmF0aXZlRXZlbnRzfHwoZWwubmF0aXZlRXZlbnRzPXt9KTt9ZWxzZXtldmVudHM9ZWwuZXZlbnRzfHwoZWwuZXZlbnRzPXt9KTt9dmFyIG5ld0hhbmRsZXI9e3ZhbHVlOnZhbHVlLG1vZGlmaWVyczptb2RpZmllcnN9O3ZhciBoYW5kbGVycz1ldmVudHNbbmFtZV07LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoQXJyYXkuaXNBcnJheShoYW5kbGVycykpe2ltcG9ydGFudD9oYW5kbGVycy51bnNoaWZ0KG5ld0hhbmRsZXIpOmhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7fWVsc2UgaWYoaGFuZGxlcnMpe2V2ZW50c1tuYW1lXT1pbXBvcnRhbnQ/W25ld0hhbmRsZXIsaGFuZGxlcnNdOltoYW5kbGVycyxuZXdIYW5kbGVyXTt9ZWxzZXtldmVudHNbbmFtZV09bmV3SGFuZGxlcjt9fWZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyKGVsLG5hbWUsZ2V0U3RhdGljKXt2YXIgZHluYW1pY1ZhbHVlPWdldEFuZFJlbW92ZUF0dHIoZWwsJzonK25hbWUpfHxnZXRBbmRSZW1vdmVBdHRyKGVsLCd2LWJpbmQ6JytuYW1lKTtpZihkeW5hbWljVmFsdWUhPW51bGwpe3JldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKTt9ZWxzZSBpZihnZXRTdGF0aWMhPT1mYWxzZSl7dmFyIHN0YXRpY1ZhbHVlPWdldEFuZFJlbW92ZUF0dHIoZWwsbmFtZSk7aWYoc3RhdGljVmFsdWUhPW51bGwpe3JldHVybiBKU09OLnN0cmluZ2lmeShzdGF0aWNWYWx1ZSk7fX19ZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0cihlbCxuYW1lKXt2YXIgdmFsO2lmKCh2YWw9ZWwuYXR0cnNNYXBbbmFtZV0pIT1udWxsKXt2YXIgbGlzdD1lbC5hdHRyc0xpc3Q7Zm9yKHZhciBpPTAsbD1saXN0Lmxlbmd0aDtpPGw7aSsrKXtpZihsaXN0W2ldLm5hbWU9PT1uYW1lKXtsaXN0LnNwbGljZShpLDEpO2JyZWFrO319fXJldHVybiB2YWw7fXZhciBsZW47dmFyIHN0cjt2YXIgY2hyO3ZhciBpbmRleCQxO3ZhciBleHByZXNzaW9uUG9zO3ZhciBleHByZXNzaW9uRW5kUG9zOy8qKlxuXHQgKiBwYXJzZSBkaXJlY3RpdmUgbW9kZWwgdG8gZG8gdGhlIGFycmF5IHVwZGF0ZSB0cmFuc2Zvcm0uIGFbaWR4XSA9IHZhbCA9PiAkJGEuc3BsaWNlKCQkaWR4LCAxLCB2YWwpXG5cdCAqXG5cdCAqIGZvciBsb29wIHBvc3NpYmxlIGNhc2VzOlxuXHQgKlxuXHQgKiAtIHRlc3Rcblx0ICogLSB0ZXN0W2lkeF1cblx0ICogLSB0ZXN0W3Rlc3QxW2lkeF1dXG5cdCAqIC0gdGVzdFtcImFcIl1baWR4XVxuXHQgKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFbaWR4XV1cblx0ICogLSB0ZXN0Lnh4eC5hW1wiYXNhXCJdW3Rlc3QxW2lkeF1dXG5cdCAqXG5cdCAqL2Z1bmN0aW9uIHBhcnNlTW9kZWwodmFsKXtzdHI9dmFsO2xlbj1zdHIubGVuZ3RoO2luZGV4JDE9ZXhwcmVzc2lvblBvcz1leHByZXNzaW9uRW5kUG9zPTA7aWYodmFsLmluZGV4T2YoJ1snKTwwfHx2YWwubGFzdEluZGV4T2YoJ10nKTxsZW4tMSl7cmV0dXJue2V4cDp2YWwsaWR4Om51bGx9O313aGlsZSghZW9mKCkpe2Nocj1uZXh0KCk7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoaXNTdHJpbmdTdGFydChjaHIpKXtwYXJzZVN0cmluZyhjaHIpO31lbHNlIGlmKGNocj09PTB4NUIpe3BhcnNlQnJhY2tldChjaHIpO319cmV0dXJue2V4cDp2YWwuc3Vic3RyaW5nKDAsZXhwcmVzc2lvblBvcyksaWR4OnZhbC5zdWJzdHJpbmcoZXhwcmVzc2lvblBvcysxLGV4cHJlc3Npb25FbmRQb3MpfTt9ZnVuY3Rpb24gbmV4dCgpe3JldHVybiBzdHIuY2hhckNvZGVBdCgrK2luZGV4JDEpO31mdW5jdGlvbiBlb2YoKXtyZXR1cm4gaW5kZXgkMT49bGVuO31mdW5jdGlvbiBpc1N0cmluZ1N0YXJ0KGNocil7cmV0dXJuIGNocj09PTB4MjJ8fGNocj09PTB4Mjc7fWZ1bmN0aW9uIHBhcnNlQnJhY2tldChjaHIpe3ZhciBpbkJyYWNrZXQ9MTtleHByZXNzaW9uUG9zPWluZGV4JDE7d2hpbGUoIWVvZigpKXtjaHI9bmV4dCgpO2lmKGlzU3RyaW5nU3RhcnQoY2hyKSl7cGFyc2VTdHJpbmcoY2hyKTtjb250aW51ZTt9aWYoY2hyPT09MHg1Qil7aW5CcmFja2V0Kys7fWlmKGNocj09PTB4NUQpe2luQnJhY2tldC0tO31pZihpbkJyYWNrZXQ9PT0wKXtleHByZXNzaW9uRW5kUG9zPWluZGV4JDE7YnJlYWs7fX19ZnVuY3Rpb24gcGFyc2VTdHJpbmcoY2hyKXt2YXIgc3RyaW5nUXVvdGU9Y2hyO3doaWxlKCFlb2YoKSl7Y2hyPW5leHQoKTtpZihjaHI9PT1zdHJpbmdRdW90ZSl7YnJlYWs7fX19LyogICovdmFyIGRpclJFPS9edi18XkB8XjovO3ZhciBmb3JBbGlhc1JFPS8oLio/KVxccysoPzppbnxvZilcXHMrKC4qKS87dmFyIGZvckl0ZXJhdG9yUkU9L1xcKChcXHtbXn1dKlxcfXxbXixdKiksKFteLF0qKSg/OiwoW14sXSopKT9cXCkvO3ZhciBiaW5kUkU9L146fF52LWJpbmQ6Lzt2YXIgb25SRT0vXkB8XnYtb246Lzt2YXIgYXJnUkU9LzooLiopJC87dmFyIG1vZGlmaWVyUkU9L1xcLlteLl0rL2c7dmFyIGRlY29kZUhUTUxDYWNoZWQ9Y2FjaGVkKGRlY29kZSk7Ly8gY29uZmlndXJhYmxlIHN0YXRlXG5cdHZhciB3YXJuJDE7dmFyIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlO3ZhciBwbGF0Zm9ybU11c3RVc2VQcm9wO3ZhciBwbGF0Zm9ybUlzUHJlVGFnO3ZhciBwcmVUcmFuc2Zvcm1zO3ZhciB0cmFuc2Zvcm1zO3ZhciBwb3N0VHJhbnNmb3Jtczt2YXIgZGVsaW1pdGVyczsvKipcblx0ICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG5cdCAqL2Z1bmN0aW9uIHBhcnNlKHRlbXBsYXRlLG9wdGlvbnMpe3dhcm4kMT1vcHRpb25zLndhcm58fGJhc2VXYXJuO3BsYXRmb3JtR2V0VGFnTmFtZXNwYWNlPW9wdGlvbnMuZ2V0VGFnTmFtZXNwYWNlfHxubztwbGF0Zm9ybU11c3RVc2VQcm9wPW9wdGlvbnMubXVzdFVzZVByb3B8fG5vO3BsYXRmb3JtSXNQcmVUYWc9b3B0aW9ucy5pc1ByZVRhZ3x8bm87cHJlVHJhbnNmb3Jtcz1wbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywncHJlVHJhbnNmb3JtTm9kZScpO3RyYW5zZm9ybXM9cGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsJ3RyYW5zZm9ybU5vZGUnKTtwb3N0VHJhbnNmb3Jtcz1wbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywncG9zdFRyYW5zZm9ybU5vZGUnKTtkZWxpbWl0ZXJzPW9wdGlvbnMuZGVsaW1pdGVyczt2YXIgc3RhY2s9W107dmFyIHByZXNlcnZlV2hpdGVzcGFjZT1vcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSE9PWZhbHNlO3ZhciByb290O3ZhciBjdXJyZW50UGFyZW50O3ZhciBpblZQcmU9ZmFsc2U7dmFyIGluUHJlPWZhbHNlO3ZhciB3YXJuZWQ9ZmFsc2U7cGFyc2VIVE1MKHRlbXBsYXRlLHtleHBlY3RIVE1MOm9wdGlvbnMuZXhwZWN0SFRNTCxpc1VuYXJ5VGFnOm9wdGlvbnMuaXNVbmFyeVRhZyxzaG91bGREZWNvZGVOZXdsaW5lczpvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzLHN0YXJ0OmZ1bmN0aW9uIHN0YXJ0KHRhZyxhdHRycyx1bmFyeSl7Ly8gY2hlY2sgbmFtZXNwYWNlLlxuXHQvLyBpbmhlcml0IHBhcmVudCBucyBpZiB0aGVyZSBpcyBvbmVcblx0dmFyIG5zPWN1cnJlbnRQYXJlbnQmJmN1cnJlbnRQYXJlbnQubnN8fHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlKHRhZyk7Ly8gaGFuZGxlIElFIHN2ZyBidWdcblx0LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoaXNJRSYmbnM9PT0nc3ZnJyl7YXR0cnM9Z3VhcmRJRVNWR0J1ZyhhdHRycyk7fXZhciBlbGVtZW50PXt0eXBlOjEsdGFnOnRhZyxhdHRyc0xpc3Q6YXR0cnMsYXR0cnNNYXA6bWFrZUF0dHJzTWFwKGF0dHJzKSxwYXJlbnQ6Y3VycmVudFBhcmVudCxjaGlsZHJlbjpbXX07aWYobnMpe2VsZW1lbnQubnM9bnM7fWlmKGlzRm9yYmlkZGVuVGFnKGVsZW1lbnQpJiYhaXNTZXJ2ZXJSZW5kZXJpbmcoKSl7ZWxlbWVudC5mb3JiaWRkZW49dHJ1ZTsoXCJwcm9kdWN0aW9uXCIpIT09J3Byb2R1Y3Rpb24nJiZ3YXJuJDEoJ1RlbXBsYXRlcyBzaG91bGQgb25seSBiZSByZXNwb25zaWJsZSBmb3IgbWFwcGluZyB0aGUgc3RhdGUgdG8gdGhlICcrJ1VJLiBBdm9pZCBwbGFjaW5nIHRhZ3Mgd2l0aCBzaWRlLWVmZmVjdHMgaW4geW91ciB0ZW1wbGF0ZXMsIHN1Y2ggYXMgJytcIjxcIit0YWcrXCI+XCIrJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJyk7fS8vIGFwcGx5IHByZS10cmFuc2Zvcm1zXG5cdGZvcih2YXIgaT0wO2k8cHJlVHJhbnNmb3Jtcy5sZW5ndGg7aSsrKXtwcmVUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsb3B0aW9ucyk7fWlmKCFpblZQcmUpe3Byb2Nlc3NQcmUoZWxlbWVudCk7aWYoZWxlbWVudC5wcmUpe2luVlByZT10cnVlO319aWYocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpe2luUHJlPXRydWU7fWlmKGluVlByZSl7cHJvY2Vzc1Jhd0F0dHJzKGVsZW1lbnQpO31lbHNle3Byb2Nlc3NGb3IoZWxlbWVudCk7cHJvY2Vzc0lmKGVsZW1lbnQpO3Byb2Nlc3NPbmNlKGVsZW1lbnQpO3Byb2Nlc3NLZXkoZWxlbWVudCk7Ly8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhIHBsYWluIGVsZW1lbnQgYWZ0ZXJcblx0Ly8gcmVtb3Zpbmcgc3RydWN0dXJhbCBhdHRyaWJ1dGVzXG5cdGVsZW1lbnQucGxhaW49IWVsZW1lbnQua2V5JiYhYXR0cnMubGVuZ3RoO3Byb2Nlc3NSZWYoZWxlbWVudCk7cHJvY2Vzc1Nsb3QoZWxlbWVudCk7cHJvY2Vzc0NvbXBvbmVudChlbGVtZW50KTtmb3IodmFyIGkkMT0wO2kkMTx0cmFuc2Zvcm1zLmxlbmd0aDtpJDErKyl7dHJhbnNmb3Jtc1tpJDFdKGVsZW1lbnQsb3B0aW9ucyk7fXByb2Nlc3NBdHRycyhlbGVtZW50KTt9ZnVuY3Rpb24gY2hlY2tSb290Q29uc3RyYWludHMoZWwpe2lmKGZhbHNlKXtpZihlbC50YWc9PT0nc2xvdCd8fGVsLnRhZz09PSd0ZW1wbGF0ZScpe3dhcm5lZD10cnVlO3dhcm4kMShcIkNhbm5vdCB1c2UgPFwiK2VsLnRhZytcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIisnY29udGFpbiBtdWx0aXBsZSBub2RlczpcXG4nK3RlbXBsYXRlKTt9aWYoZWwuYXR0cnNNYXAuaGFzT3duUHJvcGVydHkoJ3YtZm9yJykpe3dhcm5lZD10cnVlO3dhcm4kMSgnQ2Fubm90IHVzZSB2LWZvciBvbiBzdGF0ZWZ1bCBjb21wb25lbnQgcm9vdCBlbGVtZW50IGJlY2F1c2UgJysnaXQgcmVuZGVycyBtdWx0aXBsZSBlbGVtZW50czpcXG4nK3RlbXBsYXRlKTt9fX0vLyB0cmVlIG1hbmFnZW1lbnRcblx0aWYoIXJvb3Qpe3Jvb3Q9ZWxlbWVudDtjaGVja1Jvb3RDb25zdHJhaW50cyhyb290KTt9ZWxzZSBpZighc3RhY2subGVuZ3RoKXsvLyBhbGxvdyByb290IGVsZW1lbnRzIHdpdGggdi1pZiwgdi1lbHNlLWlmIGFuZCB2LWVsc2Vcblx0aWYocm9vdC5pZiYmKGVsZW1lbnQuZWxzZWlmfHxlbGVtZW50LmVsc2UpKXtjaGVja1Jvb3RDb25zdHJhaW50cyhlbGVtZW50KTthZGRJZkNvbmRpdGlvbihyb290LHtleHA6ZWxlbWVudC5lbHNlaWYsYmxvY2s6ZWxlbWVudH0pO31lbHNlIGlmKGZhbHNlKXt3YXJuZWQ9dHJ1ZTt3YXJuJDEoXCJDb21wb25lbnQgdGVtcGxhdGUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50OlwiK1wiXFxuXFxuXCIrdGVtcGxhdGUrXCJcXG5cXG5cIitcIklmIHlvdSBhcmUgdXNpbmcgdi1pZiBvbiBtdWx0aXBsZSBlbGVtZW50cywgXCIrXCJ1c2Ugdi1lbHNlLWlmIHRvIGNoYWluIHRoZW0gaW5zdGVhZC5cIik7fX1pZihjdXJyZW50UGFyZW50JiYhZWxlbWVudC5mb3JiaWRkZW4pe2lmKGVsZW1lbnQuZWxzZWlmfHxlbGVtZW50LmVsc2Upe3Byb2Nlc3NJZkNvbmRpdGlvbnMoZWxlbWVudCxjdXJyZW50UGFyZW50KTt9ZWxzZSBpZihlbGVtZW50LnNsb3RTY29wZSl7Ly8gc2NvcGVkIHNsb3Rcblx0Y3VycmVudFBhcmVudC5wbGFpbj1mYWxzZTt2YXIgbmFtZT1lbGVtZW50LnNsb3RUYXJnZXR8fCdkZWZhdWx0JzsoY3VycmVudFBhcmVudC5zY29wZWRTbG90c3x8KGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHM9e30pKVtuYW1lXT1lbGVtZW50O31lbHNle2N1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChlbGVtZW50KTtlbGVtZW50LnBhcmVudD1jdXJyZW50UGFyZW50O319aWYoIXVuYXJ5KXtjdXJyZW50UGFyZW50PWVsZW1lbnQ7c3RhY2sucHVzaChlbGVtZW50KTt9Ly8gYXBwbHkgcG9zdC10cmFuc2Zvcm1zXG5cdGZvcih2YXIgaSQyPTA7aSQyPHBvc3RUcmFuc2Zvcm1zLmxlbmd0aDtpJDIrKyl7cG9zdFRyYW5zZm9ybXNbaSQyXShlbGVtZW50LG9wdGlvbnMpO319LGVuZDpmdW5jdGlvbiBlbmQoKXsvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZVxuXHR2YXIgZWxlbWVudD1zdGFja1tzdGFjay5sZW5ndGgtMV07dmFyIGxhc3ROb2RlPWVsZW1lbnQuY2hpbGRyZW5bZWxlbWVudC5jaGlsZHJlbi5sZW5ndGgtMV07aWYobGFzdE5vZGUmJmxhc3ROb2RlLnR5cGU9PT0zJiZsYXN0Tm9kZS50ZXh0PT09JyAnKXtlbGVtZW50LmNoaWxkcmVuLnBvcCgpO30vLyBwb3Agc3RhY2tcblx0c3RhY2subGVuZ3RoLT0xO2N1cnJlbnRQYXJlbnQ9c3RhY2tbc3RhY2subGVuZ3RoLTFdOy8vIGNoZWNrIHByZSBzdGF0ZVxuXHRpZihlbGVtZW50LnByZSl7aW5WUHJlPWZhbHNlO31pZihwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSl7aW5QcmU9ZmFsc2U7fX0sY2hhcnM6ZnVuY3Rpb24gY2hhcnModGV4dCl7aWYoIWN1cnJlbnRQYXJlbnQpe2lmKGZhbHNlKXt3YXJuZWQ9dHJ1ZTt3YXJuJDEoJ0NvbXBvbmVudCB0ZW1wbGF0ZSByZXF1aXJlcyBhIHJvb3QgZWxlbWVudCwgcmF0aGVyIHRoYW4ganVzdCB0ZXh0OlxcblxcbicrdGVtcGxhdGUpO31yZXR1cm47fS8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihpc0lFJiZjdXJyZW50UGFyZW50LnRhZz09PSd0ZXh0YXJlYScmJmN1cnJlbnRQYXJlbnQuYXR0cnNNYXAucGxhY2Vob2xkZXI9PT10ZXh0KXtyZXR1cm47fXZhciBjaGlsZHJlbj1jdXJyZW50UGFyZW50LmNoaWxkcmVuO3RleHQ9aW5QcmV8fHRleHQudHJpbSgpP2RlY29kZUhUTUxDYWNoZWQodGV4dCkvLyBvbmx5IHByZXNlcnZlIHdoaXRlc3BhY2UgaWYgaXRzIG5vdCByaWdodCBhZnRlciBhIHN0YXJ0aW5nIHRhZ1xuXHQ6cHJlc2VydmVXaGl0ZXNwYWNlJiZjaGlsZHJlbi5sZW5ndGg/JyAnOicnO2lmKHRleHQpe3ZhciBleHByZXNzaW9uO2lmKCFpblZQcmUmJnRleHQhPT0nICcmJihleHByZXNzaW9uPXBhcnNlVGV4dCh0ZXh0LGRlbGltaXRlcnMpKSl7Y2hpbGRyZW4ucHVzaCh7dHlwZToyLGV4cHJlc3Npb246ZXhwcmVzc2lvbix0ZXh0OnRleHR9KTt9ZWxzZSBpZih0ZXh0IT09JyAnfHxjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGgtMV0udGV4dCE9PScgJyl7Y3VycmVudFBhcmVudC5jaGlsZHJlbi5wdXNoKHt0eXBlOjMsdGV4dDp0ZXh0fSk7fX19fSk7cmV0dXJuIHJvb3Q7fWZ1bmN0aW9uIHByb2Nlc3NQcmUoZWwpe2lmKGdldEFuZFJlbW92ZUF0dHIoZWwsJ3YtcHJlJykhPW51bGwpe2VsLnByZT10cnVlO319ZnVuY3Rpb24gcHJvY2Vzc1Jhd0F0dHJzKGVsKXt2YXIgbD1lbC5hdHRyc0xpc3QubGVuZ3RoO2lmKGwpe3ZhciBhdHRycz1lbC5hdHRycz1uZXcgQXJyYXkobCk7Zm9yKHZhciBpPTA7aTxsO2krKyl7YXR0cnNbaV09e25hbWU6ZWwuYXR0cnNMaXN0W2ldLm5hbWUsdmFsdWU6SlNPTi5zdHJpbmdpZnkoZWwuYXR0cnNMaXN0W2ldLnZhbHVlKX07fX1lbHNlIGlmKCFlbC5wcmUpey8vIG5vbiByb290IG5vZGUgaW4gcHJlIGJsb2NrcyB3aXRoIG5vIGF0dHJpYnV0ZXNcblx0ZWwucGxhaW49dHJ1ZTt9fWZ1bmN0aW9uIHByb2Nlc3NLZXkoZWwpe3ZhciBleHA9Z2V0QmluZGluZ0F0dHIoZWwsJ2tleScpO2lmKGV4cCl7aWYoZmFsc2Upe3dhcm4kMShcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIik7fWVsLmtleT1leHA7fX1mdW5jdGlvbiBwcm9jZXNzUmVmKGVsKXt2YXIgcmVmPWdldEJpbmRpbmdBdHRyKGVsLCdyZWYnKTtpZihyZWYpe2VsLnJlZj1yZWY7ZWwucmVmSW5Gb3I9Y2hlY2tJbkZvcihlbCk7fX1mdW5jdGlvbiBwcm9jZXNzRm9yKGVsKXt2YXIgZXhwO2lmKGV4cD1nZXRBbmRSZW1vdmVBdHRyKGVsLCd2LWZvcicpKXt2YXIgaW5NYXRjaD1leHAubWF0Y2goZm9yQWxpYXNSRSk7aWYoIWluTWF0Y2gpeyhcInByb2R1Y3Rpb25cIikhPT0ncHJvZHVjdGlvbicmJndhcm4kMShcIkludmFsaWQgdi1mb3IgZXhwcmVzc2lvbjogXCIrZXhwKTtyZXR1cm47fWVsLmZvcj1pbk1hdGNoWzJdLnRyaW0oKTt2YXIgYWxpYXM9aW5NYXRjaFsxXS50cmltKCk7dmFyIGl0ZXJhdG9yTWF0Y2g9YWxpYXMubWF0Y2goZm9ySXRlcmF0b3JSRSk7aWYoaXRlcmF0b3JNYXRjaCl7ZWwuYWxpYXM9aXRlcmF0b3JNYXRjaFsxXS50cmltKCk7ZWwuaXRlcmF0b3IxPWl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO2lmKGl0ZXJhdG9yTWF0Y2hbM10pe2VsLml0ZXJhdG9yMj1pdGVyYXRvck1hdGNoWzNdLnRyaW0oKTt9fWVsc2V7ZWwuYWxpYXM9YWxpYXM7fX19ZnVuY3Rpb24gcHJvY2Vzc0lmKGVsKXt2YXIgZXhwPWdldEFuZFJlbW92ZUF0dHIoZWwsJ3YtaWYnKTtpZihleHApe2VsLmlmPWV4cDthZGRJZkNvbmRpdGlvbihlbCx7ZXhwOmV4cCxibG9jazplbH0pO31lbHNle2lmKGdldEFuZFJlbW92ZUF0dHIoZWwsJ3YtZWxzZScpIT1udWxsKXtlbC5lbHNlPXRydWU7fXZhciBlbHNlaWY9Z2V0QW5kUmVtb3ZlQXR0cihlbCwndi1lbHNlLWlmJyk7aWYoZWxzZWlmKXtlbC5lbHNlaWY9ZWxzZWlmO319fWZ1bmN0aW9uIHByb2Nlc3NJZkNvbmRpdGlvbnMoZWwscGFyZW50KXt2YXIgcHJldj1maW5kUHJldkVsZW1lbnQocGFyZW50LmNoaWxkcmVuKTtpZihwcmV2JiZwcmV2LmlmKXthZGRJZkNvbmRpdGlvbihwcmV2LHtleHA6ZWwuZWxzZWlmLGJsb2NrOmVsfSk7fWVsc2UgaWYoZmFsc2Upe3dhcm4kMShcInYtXCIrKGVsLmVsc2VpZj8nZWxzZS1pZj1cIicrZWwuZWxzZWlmKydcIic6J2Vsc2UnKStcIiBcIitcInVzZWQgb24gZWxlbWVudCA8XCIrZWwudGFnK1wiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIik7fX1mdW5jdGlvbiBmaW5kUHJldkVsZW1lbnQoY2hpbGRyZW4pe3ZhciBpPWNoaWxkcmVuLmxlbmd0aDt3aGlsZShpLS0pe2lmKGNoaWxkcmVuW2ldLnR5cGU9PT0xKXtyZXR1cm4gY2hpbGRyZW5baV07fWVsc2V7aWYoZmFsc2Upe3dhcm4kMShcInRleHQgXFxcIlwiK2NoaWxkcmVuW2ldLnRleHQudHJpbSgpK1wiXFxcIiBiZXR3ZWVuIHYtaWYgYW5kIHYtZWxzZSgtaWYpIFwiK1wid2lsbCBiZSBpZ25vcmVkLlwiKTt9Y2hpbGRyZW4ucG9wKCk7fX19ZnVuY3Rpb24gYWRkSWZDb25kaXRpb24oZWwsY29uZGl0aW9uKXtpZighZWwuaWZDb25kaXRpb25zKXtlbC5pZkNvbmRpdGlvbnM9W107fWVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7fWZ1bmN0aW9uIHByb2Nlc3NPbmNlKGVsKXt2YXIgb25jZT1nZXRBbmRSZW1vdmVBdHRyKGVsLCd2LW9uY2UnKTtpZihvbmNlIT1udWxsKXtlbC5vbmNlPXRydWU7fX1mdW5jdGlvbiBwcm9jZXNzU2xvdChlbCl7aWYoZWwudGFnPT09J3Nsb3QnKXtlbC5zbG90TmFtZT1nZXRCaW5kaW5nQXR0cihlbCwnbmFtZScpO2lmKGZhbHNlKXt3YXJuJDEoXCJga2V5YCBkb2VzIG5vdCB3b3JrIG9uIDxzbG90PiBiZWNhdXNlIHNsb3RzIGFyZSBhYnN0cmFjdCBvdXRsZXRzIFwiK1wiYW5kIGNhbiBwb3NzaWJseSBleHBhbmQgaW50byBtdWx0aXBsZSBlbGVtZW50cy4gXCIrXCJVc2UgdGhlIGtleSBvbiBhIHdyYXBwaW5nIGVsZW1lbnQgaW5zdGVhZC5cIik7fX1lbHNle3ZhciBzbG90VGFyZ2V0PWdldEJpbmRpbmdBdHRyKGVsLCdzbG90Jyk7aWYoc2xvdFRhcmdldCl7ZWwuc2xvdFRhcmdldD1zbG90VGFyZ2V0PT09J1wiXCInPydcImRlZmF1bHRcIic6c2xvdFRhcmdldDt9aWYoZWwudGFnPT09J3RlbXBsYXRlJyl7ZWwuc2xvdFNjb3BlPWdldEFuZFJlbW92ZUF0dHIoZWwsJ3Njb3BlJyk7fX19ZnVuY3Rpb24gcHJvY2Vzc0NvbXBvbmVudChlbCl7dmFyIGJpbmRpbmc7aWYoYmluZGluZz1nZXRCaW5kaW5nQXR0cihlbCwnaXMnKSl7ZWwuY29tcG9uZW50PWJpbmRpbmc7fWlmKGdldEFuZFJlbW92ZUF0dHIoZWwsJ2lubGluZS10ZW1wbGF0ZScpIT1udWxsKXtlbC5pbmxpbmVUZW1wbGF0ZT10cnVlO319ZnVuY3Rpb24gcHJvY2Vzc0F0dHJzKGVsKXt2YXIgbGlzdD1lbC5hdHRyc0xpc3Q7dmFyIGksbCxuYW1lLHJhd05hbWUsdmFsdWUsYXJnLG1vZGlmaWVycyxpc1Byb3A7Zm9yKGk9MCxsPWxpc3QubGVuZ3RoO2k8bDtpKyspe25hbWU9cmF3TmFtZT1saXN0W2ldLm5hbWU7dmFsdWU9bGlzdFtpXS52YWx1ZTtpZihkaXJSRS50ZXN0KG5hbWUpKXsvLyBtYXJrIGVsZW1lbnQgYXMgZHluYW1pY1xuXHRlbC5oYXNCaW5kaW5ncz10cnVlOy8vIG1vZGlmaWVyc1xuXHRtb2RpZmllcnM9cGFyc2VNb2RpZmllcnMobmFtZSk7aWYobW9kaWZpZXJzKXtuYW1lPW5hbWUucmVwbGFjZShtb2RpZmllclJFLCcnKTt9aWYoYmluZFJFLnRlc3QobmFtZSkpey8vIHYtYmluZFxuXHRuYW1lPW5hbWUucmVwbGFjZShiaW5kUkUsJycpO3ZhbHVlPXBhcnNlRmlsdGVycyh2YWx1ZSk7aXNQcm9wPWZhbHNlO2lmKG1vZGlmaWVycyl7aWYobW9kaWZpZXJzLnByb3Ape2lzUHJvcD10cnVlO25hbWU9Y2FtZWxpemUobmFtZSk7aWYobmFtZT09PSdpbm5lckh0bWwnKXtuYW1lPSdpbm5lckhUTUwnO319aWYobW9kaWZpZXJzLmNhbWVsKXtuYW1lPWNhbWVsaXplKG5hbWUpO319aWYoaXNQcm9wfHxwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZyxuYW1lKSl7YWRkUHJvcChlbCxuYW1lLHZhbHVlKTt9ZWxzZXthZGRBdHRyKGVsLG5hbWUsdmFsdWUpO319ZWxzZSBpZihvblJFLnRlc3QobmFtZSkpey8vIHYtb25cblx0bmFtZT1uYW1lLnJlcGxhY2Uob25SRSwnJyk7YWRkSGFuZGxlcihlbCxuYW1lLHZhbHVlLG1vZGlmaWVycyk7fWVsc2V7Ly8gbm9ybWFsIGRpcmVjdGl2ZXNcblx0bmFtZT1uYW1lLnJlcGxhY2UoZGlyUkUsJycpOy8vIHBhcnNlIGFyZ1xuXHR2YXIgYXJnTWF0Y2g9bmFtZS5tYXRjaChhcmdSRSk7aWYoYXJnTWF0Y2gmJihhcmc9YXJnTWF0Y2hbMV0pKXtuYW1lPW5hbWUuc2xpY2UoMCwtKGFyZy5sZW5ndGgrMSkpO31hZGREaXJlY3RpdmUoZWwsbmFtZSxyYXdOYW1lLHZhbHVlLGFyZyxtb2RpZmllcnMpO2lmKGZhbHNlKXtjaGVja0ZvckFsaWFzTW9kZWwoZWwsdmFsdWUpO319fWVsc2V7Ly8gbGl0ZXJhbCBhdHRyaWJ1dGVcblx0aWYoZmFsc2Upe3ZhciBleHByZXNzaW9uPXBhcnNlVGV4dCh2YWx1ZSxkZWxpbWl0ZXJzKTtpZihleHByZXNzaW9uKXt3YXJuJDEobmFtZStcIj1cXFwiXCIrdmFsdWUrXCJcXFwiOiBcIisnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnKydVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcrJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+LicpO319YWRkQXR0cihlbCxuYW1lLEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7Ly8gIzQ1MzAgYWxzbyBiaW5kIHNwZWNpYWwgYXR0cmlidXRlcyBhcyBwcm9wcyBldmVuIGlmIHRoZXkgYXJlIHN0YXRpY1xuXHQvLyBzbyB0aGF0IHBhdGNoZXMgYmV0d2VlbiBkeW5hbWljL3N0YXRpYyBhcmUgY29uc2lzdGVudFxuXHRpZihwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZyxuYW1lKSl7aWYobmFtZT09PSd2YWx1ZScpe2FkZFByb3AoZWwsbmFtZSxKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO31lbHNle2FkZFByb3AoZWwsbmFtZSwndHJ1ZScpO319fX19ZnVuY3Rpb24gY2hlY2tJbkZvcihlbCl7dmFyIHBhcmVudD1lbDt3aGlsZShwYXJlbnQpe2lmKHBhcmVudC5mb3IhPT11bmRlZmluZWQpe3JldHVybiB0cnVlO31wYXJlbnQ9cGFyZW50LnBhcmVudDt9cmV0dXJuIGZhbHNlO31mdW5jdGlvbiBwYXJzZU1vZGlmaWVycyhuYW1lKXt2YXIgbWF0Y2g9bmFtZS5tYXRjaChtb2RpZmllclJFKTtpZihtYXRjaCl7dmFyIHJldD17fTttYXRjaC5mb3JFYWNoKGZ1bmN0aW9uKG0pe3JldFttLnNsaWNlKDEpXT10cnVlO30pO3JldHVybiByZXQ7fX1mdW5jdGlvbiBtYWtlQXR0cnNNYXAoYXR0cnMpe3ZhciBtYXA9e307Zm9yKHZhciBpPTAsbD1hdHRycy5sZW5ndGg7aTxsO2krKyl7aWYoZmFsc2Upe3dhcm4kMSgnZHVwbGljYXRlIGF0dHJpYnV0ZTogJythdHRyc1tpXS5uYW1lKTt9bWFwW2F0dHJzW2ldLm5hbWVdPWF0dHJzW2ldLnZhbHVlO31yZXR1cm4gbWFwO31mdW5jdGlvbiBpc0ZvcmJpZGRlblRhZyhlbCl7cmV0dXJuIGVsLnRhZz09PSdzdHlsZSd8fGVsLnRhZz09PSdzY3JpcHQnJiYoIWVsLmF0dHJzTWFwLnR5cGV8fGVsLmF0dHJzTWFwLnR5cGU9PT0ndGV4dC9qYXZhc2NyaXB0Jyk7fXZhciBpZU5TQnVnPS9eeG1sbnM6TlNcXGQrLzt2YXIgaWVOU1ByZWZpeD0vXk5TXFxkKzovOy8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovZnVuY3Rpb24gZ3VhcmRJRVNWR0J1ZyhhdHRycyl7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPGF0dHJzLmxlbmd0aDtpKyspe3ZhciBhdHRyPWF0dHJzW2ldO2lmKCFpZU5TQnVnLnRlc3QoYXR0ci5uYW1lKSl7YXR0ci5uYW1lPWF0dHIubmFtZS5yZXBsYWNlKGllTlNQcmVmaXgsJycpO3Jlcy5wdXNoKGF0dHIpO319cmV0dXJuIHJlczt9ZnVuY3Rpb24gY2hlY2tGb3JBbGlhc01vZGVsKGVsLHZhbHVlKXt2YXIgX2VsPWVsO3doaWxlKF9lbCl7aWYoX2VsLmZvciYmX2VsLmFsaWFzPT09dmFsdWUpe3dhcm4kMShcIjxcIitlbC50YWcrXCIgdi1tb2RlbD1cXFwiXCIrdmFsdWUrXCJcXFwiPjogXCIrXCJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gXCIrXCJUaGlzIHdpbGwgbm90IGJlIGFibGUgdG8gbW9kaWZ5IHRoZSB2LWZvciBzb3VyY2UgYXJyYXkgYmVjYXVzZSBcIitcIndyaXRpbmcgdG8gdGhlIGFsaWFzIGlzIGxpa2UgbW9kaWZ5aW5nIGEgZnVuY3Rpb24gbG9jYWwgdmFyaWFibGUuIFwiK1wiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuXCIpO31fZWw9X2VsLnBhcmVudDt9fS8qICAqL3ZhciBpc1N0YXRpY0tleTt2YXIgaXNQbGF0Zm9ybVJlc2VydmVkVGFnO3ZhciBnZW5TdGF0aWNLZXlzQ2FjaGVkPWNhY2hlZChnZW5TdGF0aWNLZXlzJDEpOy8qKlxuXHQgKiBHb2FsIG9mIHRoZSBvcHRpbWl6ZXI6IHdhbGsgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBBU1QgdHJlZVxuXHQgKiBhbmQgZGV0ZWN0IHN1Yi10cmVlcyB0aGF0IGFyZSBwdXJlbHkgc3RhdGljLCBpLmUuIHBhcnRzIG9mXG5cdCAqIHRoZSBET00gdGhhdCBuZXZlciBuZWVkcyB0byBjaGFuZ2UuXG5cdCAqXG5cdCAqIE9uY2Ugd2UgZGV0ZWN0IHRoZXNlIHN1Yi10cmVlcywgd2UgY2FuOlxuXHQgKlxuXHQgKiAxLiBIb2lzdCB0aGVtIGludG8gY29uc3RhbnRzLCBzbyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIHRvXG5cdCAqICAgIGNyZWF0ZSBmcmVzaCBub2RlcyBmb3IgdGhlbSBvbiBlYWNoIHJlLXJlbmRlcjtcblx0ICogMi4gQ29tcGxldGVseSBza2lwIHRoZW0gaW4gdGhlIHBhdGNoaW5nIHByb2Nlc3MuXG5cdCAqL2Z1bmN0aW9uIG9wdGltaXplKHJvb3Qsb3B0aW9ucyl7aWYoIXJvb3Qpe3JldHVybjt9aXNTdGF0aWNLZXk9Z2VuU3RhdGljS2V5c0NhY2hlZChvcHRpb25zLnN0YXRpY0tleXN8fCcnKTtpc1BsYXRmb3JtUmVzZXJ2ZWRUYWc9b3B0aW9ucy5pc1Jlc2VydmVkVGFnfHxubzsvLyBmaXJzdCBwYXNzOiBtYXJrIGFsbCBub24tc3RhdGljIG5vZGVzLlxuXHRtYXJrU3RhdGljKHJvb3QpOy8vIHNlY29uZCBwYXNzOiBtYXJrIHN0YXRpYyByb290cy5cblx0bWFya1N0YXRpY1Jvb3RzKHJvb3QsZmFsc2UpO31mdW5jdGlvbiBnZW5TdGF0aWNLZXlzJDEoa2V5cyl7cmV0dXJuIG1ha2VNYXAoJ3R5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMnKyhrZXlzPycsJytrZXlzOicnKSk7fWZ1bmN0aW9uIG1hcmtTdGF0aWMobm9kZSl7bm9kZS5zdGF0aWM9aXNTdGF0aWMobm9kZSk7aWYobm9kZS50eXBlPT09MSl7Ly8gZG8gbm90IG1ha2UgY29tcG9uZW50IHNsb3QgY29udGVudCBzdGF0aWMuIHRoaXMgYXZvaWRzXG5cdC8vIDEuIGNvbXBvbmVudHMgbm90IGFibGUgdG8gbXV0YXRlIHNsb3Qgbm9kZXNcblx0Ly8gMi4gc3RhdGljIHNsb3QgY29udGVudCBmYWlscyBmb3IgaG90LXJlbG9hZGluZ1xuXHRpZighaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSYmbm9kZS50YWchPT0nc2xvdCcmJm5vZGUuYXR0cnNNYXBbJ2lubGluZS10ZW1wbGF0ZSddPT1udWxsKXtyZXR1cm47fWZvcih2YXIgaT0wLGw9bm9kZS5jaGlsZHJlbi5sZW5ndGg7aTxsO2krKyl7dmFyIGNoaWxkPW5vZGUuY2hpbGRyZW5baV07bWFya1N0YXRpYyhjaGlsZCk7aWYoIWNoaWxkLnN0YXRpYyl7bm9kZS5zdGF0aWM9ZmFsc2U7fX19fWZ1bmN0aW9uIG1hcmtTdGF0aWNSb290cyhub2RlLGlzSW5Gb3Ipe2lmKG5vZGUudHlwZT09PTEpe2lmKG5vZGUuc3RhdGljfHxub2RlLm9uY2Upe25vZGUuc3RhdGljSW5Gb3I9aXNJbkZvcjt9Ly8gRm9yIGEgbm9kZSB0byBxdWFsaWZ5IGFzIGEgc3RhdGljIHJvb3QsIGl0IHNob3VsZCBoYXZlIGNoaWxkcmVuIHRoYXRcblx0Ly8gYXJlIG5vdCBqdXN0IHN0YXRpYyB0ZXh0LiBPdGhlcndpc2UgdGhlIGNvc3Qgb2YgaG9pc3Rpbmcgb3V0IHdpbGxcblx0Ly8gb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIGFuZCBpdCdzIGJldHRlciBvZmYgdG8ganVzdCBhbHdheXMgcmVuZGVyIGl0IGZyZXNoLlxuXHRpZihub2RlLnN0YXRpYyYmbm9kZS5jaGlsZHJlbi5sZW5ndGgmJiEobm9kZS5jaGlsZHJlbi5sZW5ndGg9PT0xJiZub2RlLmNoaWxkcmVuWzBdLnR5cGU9PT0zKSl7bm9kZS5zdGF0aWNSb290PXRydWU7cmV0dXJuO31lbHNle25vZGUuc3RhdGljUm9vdD1mYWxzZTt9aWYobm9kZS5jaGlsZHJlbil7Zm9yKHZhciBpPTAsbD1ub2RlLmNoaWxkcmVuLmxlbmd0aDtpPGw7aSsrKXttYXJrU3RhdGljUm9vdHMobm9kZS5jaGlsZHJlbltpXSxpc0luRm9yfHwhIW5vZGUuZm9yKTt9fWlmKG5vZGUuaWZDb25kaXRpb25zKXt3YWxrVGhyb3VnaENvbmRpdGlvbnNCbG9ja3Mobm9kZS5pZkNvbmRpdGlvbnMsaXNJbkZvcik7fX19ZnVuY3Rpb24gd2Fsa1Rocm91Z2hDb25kaXRpb25zQmxvY2tzKGNvbmRpdGlvbkJsb2Nrcyxpc0luRm9yKXtmb3IodmFyIGk9MSxsZW49Y29uZGl0aW9uQmxvY2tzLmxlbmd0aDtpPGxlbjtpKyspe21hcmtTdGF0aWNSb290cyhjb25kaXRpb25CbG9ja3NbaV0uYmxvY2ssaXNJbkZvcik7fX1mdW5jdGlvbiBpc1N0YXRpYyhub2RlKXtpZihub2RlLnR5cGU9PT0yKXsvLyBleHByZXNzaW9uXG5cdHJldHVybiBmYWxzZTt9aWYobm9kZS50eXBlPT09Myl7Ly8gdGV4dFxuXHRyZXR1cm4gdHJ1ZTt9cmV0dXJuISEobm9kZS5wcmV8fCFub2RlLmhhc0JpbmRpbmdzJiYvLyBubyBkeW5hbWljIGJpbmRpbmdzXG5cdCFub2RlLmlmJiYhbm9kZS5mb3ImJi8vIG5vdCB2LWlmIG9yIHYtZm9yIG9yIHYtZWxzZVxuXHQhaXNCdWlsdEluVGFnKG5vZGUudGFnKSYmLy8gbm90IGEgYnVpbHQtaW5cblx0aXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSYmLy8gbm90IGEgY29tcG9uZW50XG5cdCFpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvcihub2RlKSYmT2JqZWN0LmtleXMobm9kZSkuZXZlcnkoaXNTdGF0aWNLZXkpKTt9ZnVuY3Rpb24gaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3Iobm9kZSl7d2hpbGUobm9kZS5wYXJlbnQpe25vZGU9bm9kZS5wYXJlbnQ7aWYobm9kZS50YWchPT0ndGVtcGxhdGUnKXtyZXR1cm4gZmFsc2U7fWlmKG5vZGUuZm9yKXtyZXR1cm4gdHJ1ZTt9fXJldHVybiBmYWxzZTt9LyogICovdmFyIGZuRXhwUkU9L15cXHMqKFtcXHckX10rfFxcKFteKV0qP1xcKSlcXHMqPT58XmZ1bmN0aW9uXFxzKlxcKC87dmFyIHNpbXBsZVBhdGhSRT0vXlxccypbQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWycuKj8nXXxcXFtcIi4qP1wiXXxcXFtcXGQrXXxcXFtbQS1aYS16XyRdW1xcdyRdKl0pKlxccyokLzsvLyBrZXlDb2RlIGFsaWFzZXNcblx0dmFyIGtleUNvZGVzPXtlc2M6MjcsdGFiOjksZW50ZXI6MTMsc3BhY2U6MzIsdXA6MzgsbGVmdDozNyxyaWdodDozOSxkb3duOjQwLCdkZWxldGUnOls4LDQ2XX07dmFyIG1vZGlmaWVyQ29kZT17c3RvcDonJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOycscHJldmVudDonJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7JyxzZWxmOidpZigkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldClyZXR1cm47JyxjdHJsOidpZighJGV2ZW50LmN0cmxLZXkpcmV0dXJuOycsc2hpZnQ6J2lmKCEkZXZlbnQuc2hpZnRLZXkpcmV0dXJuOycsYWx0OidpZighJGV2ZW50LmFsdEtleSlyZXR1cm47JyxtZXRhOidpZighJGV2ZW50Lm1ldGFLZXkpcmV0dXJuOyd9O2Z1bmN0aW9uIGdlbkhhbmRsZXJzKGV2ZW50cyxuYXRpdmUpe3ZhciByZXM9bmF0aXZlPyduYXRpdmVPbjp7Jzonb246eyc7Zm9yKHZhciBuYW1lIGluIGV2ZW50cyl7cmVzKz1cIlxcXCJcIituYW1lK1wiXFxcIjpcIitnZW5IYW5kbGVyKG5hbWUsZXZlbnRzW25hbWVdKStcIixcIjt9cmV0dXJuIHJlcy5zbGljZSgwLC0xKSsnfSc7fWZ1bmN0aW9uIGdlbkhhbmRsZXIobmFtZSxoYW5kbGVyKXtpZighaGFuZGxlcil7cmV0dXJuJ2Z1bmN0aW9uKCl7fSc7fWVsc2UgaWYoQXJyYXkuaXNBcnJheShoYW5kbGVyKSl7cmV0dXJuXCJbXCIraGFuZGxlci5tYXAoZnVuY3Rpb24oaGFuZGxlcil7cmV0dXJuIGdlbkhhbmRsZXIobmFtZSxoYW5kbGVyKTt9KS5qb2luKCcsJykrXCJdXCI7fWVsc2UgaWYoIWhhbmRsZXIubW9kaWZpZXJzKXtyZXR1cm4gZm5FeHBSRS50ZXN0KGhhbmRsZXIudmFsdWUpfHxzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlKT9oYW5kbGVyLnZhbHVlOlwiZnVuY3Rpb24oJGV2ZW50KXtcIitoYW5kbGVyLnZhbHVlK1wifVwiO31lbHNle3ZhciBjb2RlPScnO3ZhciBrZXlzPVtdO2Zvcih2YXIga2V5IGluIGhhbmRsZXIubW9kaWZpZXJzKXtpZihtb2RpZmllckNvZGVba2V5XSl7Y29kZSs9bW9kaWZpZXJDb2RlW2tleV07fWVsc2V7a2V5cy5wdXNoKGtleSk7fX1pZihrZXlzLmxlbmd0aCl7Y29kZT1nZW5LZXlGaWx0ZXIoa2V5cykrY29kZTt9dmFyIGhhbmRsZXJDb2RlPXNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUpP2hhbmRsZXIudmFsdWUrJygkZXZlbnQpJzpoYW5kbGVyLnZhbHVlO3JldHVybidmdW5jdGlvbigkZXZlbnQpeycrY29kZStoYW5kbGVyQ29kZSsnfSc7fX1mdW5jdGlvbiBnZW5LZXlGaWx0ZXIoa2V5cyl7cmV0dXJuXCJpZihcIitrZXlzLm1hcChnZW5GaWx0ZXJDb2RlKS5qb2luKCcmJicpK1wiKXJldHVybjtcIjt9ZnVuY3Rpb24gZ2VuRmlsdGVyQ29kZShrZXkpe3ZhciBrZXlWYWw9cGFyc2VJbnQoa2V5LDEwKTtpZihrZXlWYWwpe3JldHVyblwiJGV2ZW50LmtleUNvZGUhPT1cIitrZXlWYWw7fXZhciBhbGlhcz1rZXlDb2Rlc1trZXldO3JldHVyblwiX2soJGV2ZW50LmtleUNvZGUsXCIrSlNPTi5zdHJpbmdpZnkoa2V5KSsoYWxpYXM/JywnK0pTT04uc3RyaW5naWZ5KGFsaWFzKTonJykrXCIpXCI7fS8qICAqL2Z1bmN0aW9uIGJpbmQkMihlbCxkaXIpe2VsLndyYXBEYXRhPWZ1bmN0aW9uKGNvZGUpe3JldHVyblwiX2IoXCIrY29kZStcIiwnXCIrZWwudGFnK1wiJyxcIitkaXIudmFsdWUrKGRpci5tb2RpZmllcnMmJmRpci5tb2RpZmllcnMucHJvcD8nLHRydWUnOicnKStcIilcIjt9O30vKiAgKi92YXIgYmFzZURpcmVjdGl2ZXM9e2JpbmQ6YmluZCQyLGNsb2FrOm5vb3B9Oy8qICAqLy8vIGNvbmZpZ3VyYWJsZSBzdGF0ZVxuXHR2YXIgd2FybiQyO3ZhciB0cmFuc2Zvcm1zJDE7dmFyIGRhdGFHZW5GbnM7dmFyIHBsYXRmb3JtRGlyZWN0aXZlcyQxO3ZhciBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWckMTt2YXIgc3RhdGljUmVuZGVyRm5zO3ZhciBvbmNlQ291bnQ7dmFyIGN1cnJlbnRPcHRpb25zO2Z1bmN0aW9uIGdlbmVyYXRlKGFzdCxvcHRpb25zKXsvLyBzYXZlIHByZXZpb3VzIHN0YXRpY1JlbmRlckZucyBzbyBnZW5lcmF0ZSBjYWxscyBjYW4gYmUgbmVzdGVkXG5cdHZhciBwcmV2U3RhdGljUmVuZGVyRm5zPXN0YXRpY1JlbmRlckZuczt2YXIgY3VycmVudFN0YXRpY1JlbmRlckZucz1zdGF0aWNSZW5kZXJGbnM9W107dmFyIHByZXZPbmNlQ291bnQ9b25jZUNvdW50O29uY2VDb3VudD0wO2N1cnJlbnRPcHRpb25zPW9wdGlvbnM7d2FybiQyPW9wdGlvbnMud2Fybnx8YmFzZVdhcm47dHJhbnNmb3JtcyQxPXBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCd0cmFuc2Zvcm1Db2RlJyk7ZGF0YUdlbkZucz1wbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywnZ2VuRGF0YScpO3BsYXRmb3JtRGlyZWN0aXZlcyQxPW9wdGlvbnMuZGlyZWN0aXZlc3x8e307aXNQbGF0Zm9ybVJlc2VydmVkVGFnJDE9b3B0aW9ucy5pc1Jlc2VydmVkVGFnfHxubzt2YXIgY29kZT1hc3Q/Z2VuRWxlbWVudChhc3QpOidfYyhcImRpdlwiKSc7c3RhdGljUmVuZGVyRm5zPXByZXZTdGF0aWNSZW5kZXJGbnM7b25jZUNvdW50PXByZXZPbmNlQ291bnQ7cmV0dXJue3JlbmRlcjpcIndpdGgodGhpcyl7cmV0dXJuIFwiK2NvZGUrXCJ9XCIsc3RhdGljUmVuZGVyRm5zOmN1cnJlbnRTdGF0aWNSZW5kZXJGbnN9O31mdW5jdGlvbiBnZW5FbGVtZW50KGVsKXtpZihlbC5zdGF0aWNSb290JiYhZWwuc3RhdGljUHJvY2Vzc2VkKXtyZXR1cm4gZ2VuU3RhdGljKGVsKTt9ZWxzZSBpZihlbC5vbmNlJiYhZWwub25jZVByb2Nlc3NlZCl7cmV0dXJuIGdlbk9uY2UoZWwpO31lbHNlIGlmKGVsLmZvciYmIWVsLmZvclByb2Nlc3NlZCl7cmV0dXJuIGdlbkZvcihlbCk7fWVsc2UgaWYoZWwuaWYmJiFlbC5pZlByb2Nlc3NlZCl7cmV0dXJuIGdlbklmKGVsKTt9ZWxzZSBpZihlbC50YWc9PT0ndGVtcGxhdGUnJiYhZWwuc2xvdFRhcmdldCl7cmV0dXJuIGdlbkNoaWxkcmVuKGVsKXx8J3ZvaWQgMCc7fWVsc2UgaWYoZWwudGFnPT09J3Nsb3QnKXtyZXR1cm4gZ2VuU2xvdChlbCk7fWVsc2V7Ly8gY29tcG9uZW50IG9yIGVsZW1lbnRcblx0dmFyIGNvZGU7aWYoZWwuY29tcG9uZW50KXtjb2RlPWdlbkNvbXBvbmVudChlbC5jb21wb25lbnQsZWwpO31lbHNle3ZhciBkYXRhPWVsLnBsYWluP3VuZGVmaW5lZDpnZW5EYXRhKGVsKTt2YXIgY2hpbGRyZW49ZWwuaW5saW5lVGVtcGxhdGU/bnVsbDpnZW5DaGlsZHJlbihlbCx0cnVlKTtjb2RlPVwiX2MoJ1wiK2VsLnRhZytcIidcIisoZGF0YT9cIixcIitkYXRhOicnKSsoY2hpbGRyZW4/XCIsXCIrY2hpbGRyZW46JycpK1wiKVwiO30vLyBtb2R1bGUgdHJhbnNmb3Jtc1xuXHRmb3IodmFyIGk9MDtpPHRyYW5zZm9ybXMkMS5sZW5ndGg7aSsrKXtjb2RlPXRyYW5zZm9ybXMkMVtpXShlbCxjb2RlKTt9cmV0dXJuIGNvZGU7fX0vLyBob2lzdCBzdGF0aWMgc3ViLXRyZWVzIG91dFxuXHRmdW5jdGlvbiBnZW5TdGF0aWMoZWwpe2VsLnN0YXRpY1Byb2Nlc3NlZD10cnVlO3N0YXRpY1JlbmRlckZucy5wdXNoKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIrZ2VuRWxlbWVudChlbCkrXCJ9XCIpO3JldHVyblwiX20oXCIrKHN0YXRpY1JlbmRlckZucy5sZW5ndGgtMSkrKGVsLnN0YXRpY0luRm9yPycsdHJ1ZSc6JycpK1wiKVwiO30vLyB2LW9uY2Vcblx0ZnVuY3Rpb24gZ2VuT25jZShlbCl7ZWwub25jZVByb2Nlc3NlZD10cnVlO2lmKGVsLmlmJiYhZWwuaWZQcm9jZXNzZWQpe3JldHVybiBnZW5JZihlbCk7fWVsc2UgaWYoZWwuc3RhdGljSW5Gb3Ipe3ZhciBrZXk9Jyc7dmFyIHBhcmVudD1lbC5wYXJlbnQ7d2hpbGUocGFyZW50KXtpZihwYXJlbnQuZm9yKXtrZXk9cGFyZW50LmtleTticmVhazt9cGFyZW50PXBhcmVudC5wYXJlbnQ7fWlmKCFrZXkpeyhcInByb2R1Y3Rpb25cIikhPT0ncHJvZHVjdGlvbicmJndhcm4kMihcInYtb25jZSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB2LWZvciB0aGF0IGlzIGtleWVkLiBcIik7cmV0dXJuIGdlbkVsZW1lbnQoZWwpO31yZXR1cm5cIl9vKFwiK2dlbkVsZW1lbnQoZWwpK1wiLFwiK29uY2VDb3VudCsrICsoa2V5P1wiLFwiK2tleTpcIlwiKStcIilcIjt9ZWxzZXtyZXR1cm4gZ2VuU3RhdGljKGVsKTt9fWZ1bmN0aW9uIGdlbklmKGVsKXtlbC5pZlByb2Nlc3NlZD10cnVlOy8vIGF2b2lkIHJlY3Vyc2lvblxuXHRyZXR1cm4gZ2VuSWZDb25kaXRpb25zKGVsLmlmQ29uZGl0aW9ucy5zbGljZSgpKTt9ZnVuY3Rpb24gZ2VuSWZDb25kaXRpb25zKGNvbmRpdGlvbnMpe2lmKCFjb25kaXRpb25zLmxlbmd0aCl7cmV0dXJuJ19lKCknO312YXIgY29uZGl0aW9uPWNvbmRpdGlvbnMuc2hpZnQoKTtpZihjb25kaXRpb24uZXhwKXtyZXR1cm5cIihcIitjb25kaXRpb24uZXhwK1wiKT9cIitnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykrXCI6XCIrZ2VuSWZDb25kaXRpb25zKGNvbmRpdGlvbnMpO31lbHNle3JldHVyblwiXCIrZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spO30vLyB2LWlmIHdpdGggdi1vbmNlIHNob3VsZCBnZW5lcmF0ZSBjb2RlIGxpa2UgKGEpP19tKDApOl9tKDEpXG5cdGZ1bmN0aW9uIGdlblRlcm5hcnlFeHAoZWwpe3JldHVybiBlbC5vbmNlP2dlbk9uY2UoZWwpOmdlbkVsZW1lbnQoZWwpO319ZnVuY3Rpb24gZ2VuRm9yKGVsKXt2YXIgZXhwPWVsLmZvcjt2YXIgYWxpYXM9ZWwuYWxpYXM7dmFyIGl0ZXJhdG9yMT1lbC5pdGVyYXRvcjE/XCIsXCIrZWwuaXRlcmF0b3IxOicnO3ZhciBpdGVyYXRvcjI9ZWwuaXRlcmF0b3IyP1wiLFwiK2VsLml0ZXJhdG9yMjonJztlbC5mb3JQcm9jZXNzZWQ9dHJ1ZTsvLyBhdm9pZCByZWN1cnNpb25cblx0cmV0dXJuXCJfbCgoXCIrZXhwK1wiKSxcIitcImZ1bmN0aW9uKFwiK2FsaWFzK2l0ZXJhdG9yMStpdGVyYXRvcjIrXCIpe1wiK1wicmV0dXJuIFwiK2dlbkVsZW1lbnQoZWwpKyd9KSc7fWZ1bmN0aW9uIGdlbkRhdGEoZWwpe3ZhciBkYXRhPSd7JzsvLyBkaXJlY3RpdmVzIGZpcnN0LlxuXHQvLyBkaXJlY3RpdmVzIG1heSBtdXRhdGUgdGhlIGVsJ3Mgb3RoZXIgcHJvcGVydGllcyBiZWZvcmUgdGhleSBhcmUgZ2VuZXJhdGVkLlxuXHR2YXIgZGlycz1nZW5EaXJlY3RpdmVzKGVsKTtpZihkaXJzKXtkYXRhKz1kaXJzKycsJzt9Ly8ga2V5XG5cdGlmKGVsLmtleSl7ZGF0YSs9XCJrZXk6XCIrZWwua2V5K1wiLFwiO30vLyByZWZcblx0aWYoZWwucmVmKXtkYXRhKz1cInJlZjpcIitlbC5yZWYrXCIsXCI7fWlmKGVsLnJlZkluRm9yKXtkYXRhKz1cInJlZkluRm9yOnRydWUsXCI7fS8vIHByZVxuXHRpZihlbC5wcmUpe2RhdGErPVwicHJlOnRydWUsXCI7fS8vIHJlY29yZCBvcmlnaW5hbCB0YWcgbmFtZSBmb3IgY29tcG9uZW50cyB1c2luZyBcImlzXCIgYXR0cmlidXRlXG5cdGlmKGVsLmNvbXBvbmVudCl7ZGF0YSs9XCJ0YWc6XFxcIlwiK2VsLnRhZytcIlxcXCIsXCI7fS8vIG1vZHVsZSBkYXRhIGdlbmVyYXRpb24gZnVuY3Rpb25zXG5cdGZvcih2YXIgaT0wO2k8ZGF0YUdlbkZucy5sZW5ndGg7aSsrKXtkYXRhKz1kYXRhR2VuRm5zW2ldKGVsKTt9Ly8gYXR0cmlidXRlc1xuXHRpZihlbC5hdHRycyl7ZGF0YSs9XCJhdHRyczp7XCIrZ2VuUHJvcHMoZWwuYXR0cnMpK1wifSxcIjt9Ly8gRE9NIHByb3BzXG5cdGlmKGVsLnByb3BzKXtkYXRhKz1cImRvbVByb3BzOntcIitnZW5Qcm9wcyhlbC5wcm9wcykrXCJ9LFwiO30vLyBldmVudCBoYW5kbGVyc1xuXHRpZihlbC5ldmVudHMpe2RhdGErPWdlbkhhbmRsZXJzKGVsLmV2ZW50cykrXCIsXCI7fWlmKGVsLm5hdGl2ZUV2ZW50cyl7ZGF0YSs9Z2VuSGFuZGxlcnMoZWwubmF0aXZlRXZlbnRzLHRydWUpK1wiLFwiO30vLyBzbG90IHRhcmdldFxuXHRpZihlbC5zbG90VGFyZ2V0KXtkYXRhKz1cInNsb3Q6XCIrZWwuc2xvdFRhcmdldCtcIixcIjt9Ly8gc2NvcGVkIHNsb3RzXG5cdGlmKGVsLnNjb3BlZFNsb3RzKXtkYXRhKz1nZW5TY29wZWRTbG90cyhlbC5zY29wZWRTbG90cykrXCIsXCI7fS8vIGlubGluZS10ZW1wbGF0ZVxuXHRpZihlbC5pbmxpbmVUZW1wbGF0ZSl7dmFyIGlubGluZVRlbXBsYXRlPWdlbklubGluZVRlbXBsYXRlKGVsKTtpZihpbmxpbmVUZW1wbGF0ZSl7ZGF0YSs9aW5saW5lVGVtcGxhdGUrXCIsXCI7fX1kYXRhPWRhdGEucmVwbGFjZSgvLCQvLCcnKSsnfSc7Ly8gdi1iaW5kIGRhdGEgd3JhcFxuXHRpZihlbC53cmFwRGF0YSl7ZGF0YT1lbC53cmFwRGF0YShkYXRhKTt9cmV0dXJuIGRhdGE7fWZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMoZWwpe3ZhciBkaXJzPWVsLmRpcmVjdGl2ZXM7aWYoIWRpcnMpe3JldHVybjt9dmFyIHJlcz0nZGlyZWN0aXZlczpbJzt2YXIgaGFzUnVudGltZT1mYWxzZTt2YXIgaSxsLGRpcixuZWVkUnVudGltZTtmb3IoaT0wLGw9ZGlycy5sZW5ndGg7aTxsO2krKyl7ZGlyPWRpcnNbaV07bmVlZFJ1bnRpbWU9dHJ1ZTt2YXIgZ2VuPXBsYXRmb3JtRGlyZWN0aXZlcyQxW2Rpci5uYW1lXXx8YmFzZURpcmVjdGl2ZXNbZGlyLm5hbWVdO2lmKGdlbil7Ly8gY29tcGlsZS10aW1lIGRpcmVjdGl2ZSB0aGF0IG1hbmlwdWxhdGVzIEFTVC5cblx0Ly8gcmV0dXJucyB0cnVlIGlmIGl0IGFsc28gbmVlZHMgYSBydW50aW1lIGNvdW50ZXJwYXJ0LlxuXHRuZWVkUnVudGltZT0hIWdlbihlbCxkaXIsd2FybiQyKTt9aWYobmVlZFJ1bnRpbWUpe2hhc1J1bnRpbWU9dHJ1ZTtyZXMrPVwie25hbWU6XFxcIlwiK2Rpci5uYW1lK1wiXFxcIixyYXdOYW1lOlxcXCJcIitkaXIucmF3TmFtZStcIlxcXCJcIisoZGlyLnZhbHVlP1wiLHZhbHVlOihcIitkaXIudmFsdWUrXCIpLGV4cHJlc3Npb246XCIrSlNPTi5zdHJpbmdpZnkoZGlyLnZhbHVlKTonJykrKGRpci5hcmc/XCIsYXJnOlxcXCJcIitkaXIuYXJnK1wiXFxcIlwiOicnKSsoZGlyLm1vZGlmaWVycz9cIixtb2RpZmllcnM6XCIrSlNPTi5zdHJpbmdpZnkoZGlyLm1vZGlmaWVycyk6JycpK1wifSxcIjt9fWlmKGhhc1J1bnRpbWUpe3JldHVybiByZXMuc2xpY2UoMCwtMSkrJ10nO319ZnVuY3Rpb24gZ2VuSW5saW5lVGVtcGxhdGUoZWwpe3ZhciBhc3Q9ZWwuY2hpbGRyZW5bMF07aWYoZmFsc2Upe3dhcm4kMignSW5saW5lLXRlbXBsYXRlIGNvbXBvbmVudHMgbXVzdCBoYXZlIGV4YWN0bHkgb25lIGNoaWxkIGVsZW1lbnQuJyk7fWlmKGFzdC50eXBlPT09MSl7dmFyIGlubGluZVJlbmRlckZucz1nZW5lcmF0ZShhc3QsY3VycmVudE9wdGlvbnMpO3JldHVyblwiaW5saW5lVGVtcGxhdGU6e3JlbmRlcjpmdW5jdGlvbigpe1wiK2lubGluZVJlbmRlckZucy5yZW5kZXIrXCJ9LHN0YXRpY1JlbmRlckZuczpbXCIraW5saW5lUmVuZGVyRm5zLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24oY29kZSl7cmV0dXJuXCJmdW5jdGlvbigpe1wiK2NvZGUrXCJ9XCI7fSkuam9pbignLCcpK1wiXX1cIjt9fWZ1bmN0aW9uIGdlblNjb3BlZFNsb3RzKHNsb3RzKXtyZXR1cm5cInNjb3BlZFNsb3RzOntcIitPYmplY3Qua2V5cyhzbG90cykubWFwKGZ1bmN0aW9uKGtleSl7cmV0dXJuIGdlblNjb3BlZFNsb3Qoa2V5LHNsb3RzW2tleV0pO30pLmpvaW4oJywnKStcIn1cIjt9ZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdChrZXksZWwpe3JldHVybiBrZXkrXCI6ZnVuY3Rpb24oXCIrU3RyaW5nKGVsLmF0dHJzTWFwLnNjb3BlKStcIil7XCIrXCJyZXR1cm4gXCIrKGVsLnRhZz09PSd0ZW1wbGF0ZSc/Z2VuQ2hpbGRyZW4oZWwpfHwndm9pZCAwJzpnZW5FbGVtZW50KGVsKSkrXCJ9XCI7fWZ1bmN0aW9uIGdlbkNoaWxkcmVuKGVsLGNoZWNrU2tpcCl7dmFyIGNoaWxkcmVuPWVsLmNoaWxkcmVuO2lmKGNoaWxkcmVuLmxlbmd0aCl7dmFyIGVsJDE9Y2hpbGRyZW5bMF07Ly8gb3B0aW1pemUgc2luZ2xlIHYtZm9yXG5cdGlmKGNoaWxkcmVuLmxlbmd0aD09PTEmJmVsJDEuZm9yJiZlbCQxLnRhZyE9PSd0ZW1wbGF0ZScmJmVsJDEudGFnIT09J3Nsb3QnKXtyZXR1cm4gZ2VuRWxlbWVudChlbCQxKTt9dmFyIG5vcm1hbGl6YXRpb25UeXBlPWdldE5vcm1hbGl6YXRpb25UeXBlKGNoaWxkcmVuKTtyZXR1cm5cIltcIitjaGlsZHJlbi5tYXAoZ2VuTm9kZSkuam9pbignLCcpK1wiXVwiKyhjaGVja1NraXA/bm9ybWFsaXphdGlvblR5cGU/XCIsXCIrbm9ybWFsaXphdGlvblR5cGU6Jyc6JycpO319Ly8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuXHQvLyAwOiBubyBub3JtYWxpemF0aW9uIG5lZWRlZFxuXHQvLyAxOiBzaW1wbGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgKHBvc3NpYmxlIDEtbGV2ZWwgZGVlcCBuZXN0ZWQgYXJyYXkpXG5cdC8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcblx0ZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4pe3ZhciByZXM9MDtmb3IodmFyIGk9MDtpPGNoaWxkcmVuLmxlbmd0aDtpKyspe3ZhciBlbD1jaGlsZHJlbltpXTtpZihuZWVkc05vcm1hbGl6YXRpb24oZWwpfHxlbC5pZiYmZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24oYyl7cmV0dXJuIG5lZWRzTm9ybWFsaXphdGlvbihjLmJsb2NrKTt9KSl7cmVzPTI7YnJlYWs7fWlmKG1heWJlQ29tcG9uZW50KGVsKXx8ZWwuaWYmJmVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uKGMpe3JldHVybiBtYXliZUNvbXBvbmVudChjLmJsb2NrKTt9KSl7cmVzPTE7fX1yZXR1cm4gcmVzO31mdW5jdGlvbiBuZWVkc05vcm1hbGl6YXRpb24oZWwpe3JldHVybiBlbC5mb3J8fGVsLnRhZz09PSd0ZW1wbGF0ZSd8fGVsLnRhZz09PSdzbG90Jzt9ZnVuY3Rpb24gbWF5YmVDb21wb25lbnQoZWwpe3JldHVybiBlbC50eXBlPT09MSYmIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyQxKGVsLnRhZyk7fWZ1bmN0aW9uIGdlbk5vZGUobm9kZSl7aWYobm9kZS50eXBlPT09MSl7cmV0dXJuIGdlbkVsZW1lbnQobm9kZSk7fWVsc2V7cmV0dXJuIGdlblRleHQobm9kZSk7fX1mdW5jdGlvbiBnZW5UZXh0KHRleHQpe3JldHVyblwiX3YoXCIrKHRleHQudHlwZT09PTI/dGV4dC5leHByZXNzaW9uLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKVxuXHQ6dHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKEpTT04uc3RyaW5naWZ5KHRleHQudGV4dCkpKStcIilcIjt9ZnVuY3Rpb24gZ2VuU2xvdChlbCl7dmFyIHNsb3ROYW1lPWVsLnNsb3ROYW1lfHwnXCJkZWZhdWx0XCInO3ZhciBjaGlsZHJlbj1nZW5DaGlsZHJlbihlbCk7dmFyIHJlcz1cIl90KFwiK3Nsb3ROYW1lKyhjaGlsZHJlbj9cIixcIitjaGlsZHJlbjonJyk7dmFyIGF0dHJzPWVsLmF0dHJzJiZcIntcIitlbC5hdHRycy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGNhbWVsaXplKGEubmFtZSkrXCI6XCIrYS52YWx1ZTt9KS5qb2luKCcsJykrXCJ9XCI7dmFyIGJpbmQkJDE9ZWwuYXR0cnNNYXBbJ3YtYmluZCddO2lmKChhdHRyc3x8YmluZCQkMSkmJiFjaGlsZHJlbil7cmVzKz1cIixudWxsXCI7fWlmKGF0dHJzKXtyZXMrPVwiLFwiK2F0dHJzO31pZihiaW5kJCQxKXtyZXMrPShhdHRycz8nJzonLG51bGwnKStcIixcIitiaW5kJCQxO31yZXR1cm4gcmVzKycpJzt9Ly8gY29tcG9uZW50TmFtZSBpcyBlbC5jb21wb25lbnQsIHRha2UgaXQgYXMgYXJndW1lbnQgdG8gc2h1biBmbG93J3MgcGVzc2ltaXN0aWMgcmVmaW5lbWVudFxuXHRmdW5jdGlvbiBnZW5Db21wb25lbnQoY29tcG9uZW50TmFtZSxlbCl7dmFyIGNoaWxkcmVuPWVsLmlubGluZVRlbXBsYXRlP251bGw6Z2VuQ2hpbGRyZW4oZWwsdHJ1ZSk7cmV0dXJuXCJfYyhcIitjb21wb25lbnROYW1lK1wiLFwiK2dlbkRhdGEoZWwpKyhjaGlsZHJlbj9cIixcIitjaGlsZHJlbjonJykrXCIpXCI7fWZ1bmN0aW9uIGdlblByb3BzKHByb3BzKXt2YXIgcmVzPScnO2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIHByb3A9cHJvcHNbaV07cmVzKz1cIlxcXCJcIitwcm9wLm5hbWUrXCJcXFwiOlwiK3RyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhwcm9wLnZhbHVlKStcIixcIjt9cmV0dXJuIHJlcy5zbGljZSgwLC0xKTt9Ly8gIzM4OTUsICM0MjY4XG5cdGZ1bmN0aW9uIHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyh0ZXh0KXtyZXR1cm4gdGV4dC5yZXBsYWNlKC9cXHUyMDI4L2csJ1xcXFx1MjAyOCcpLnJlcGxhY2UoL1xcdTIwMjkvZywnXFxcXHUyMDI5Jyk7fS8qICAqLy8qKlxuXHQgKiBDb21waWxlIGEgdGVtcGxhdGUuXG5cdCAqL2Z1bmN0aW9uIGNvbXBpbGUkMSh0ZW1wbGF0ZSxvcHRpb25zKXt2YXIgYXN0PXBhcnNlKHRlbXBsYXRlLnRyaW0oKSxvcHRpb25zKTtvcHRpbWl6ZShhc3Qsb3B0aW9ucyk7dmFyIGNvZGU9Z2VuZXJhdGUoYXN0LG9wdGlvbnMpO3JldHVybnthc3Q6YXN0LHJlbmRlcjpjb2RlLnJlbmRlcixzdGF0aWNSZW5kZXJGbnM6Y29kZS5zdGF0aWNSZW5kZXJGbnN9O30vKiAgKi8vLyBvcGVyYXRvcnMgbGlrZSB0eXBlb2YsIGluc3RhbmNlb2YgYW5kIGluIGFyZSBhbGxvd2VkXG5cdHZhciBwcm9oaWJpdGVkS2V5d29yZFJFPW5ldyBSZWdFeHAoJ1xcXFxiJysoJ2RvLGlmLGZvcixsZXQsbmV3LHRyeSx2YXIsY2FzZSxlbHNlLHdpdGgsYXdhaXQsYnJlYWssY2F0Y2gsY2xhc3MsY29uc3QsJysnc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LCcrJ2V4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMnKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxifFxcXFxiJykrJ1xcXFxiJyk7Ly8gY2hlY2sgdmFsaWQgaWRlbnRpZmllciBmb3Igdi1mb3Jcblx0dmFyIGlkZW50UkU9L1tBLVphLXpfJF1bXFx3JF0qLzsvLyBzdHJpcCBzdHJpbmdzIGluIGV4cHJlc3Npb25zXG5cdHZhciBzdHJpcFN0cmluZ1JFPS8nKD86W14nXFxcXF18XFxcXC4pKid8XCIoPzpbXlwiXFxcXF18XFxcXC4pKlwifGAoPzpbXmBcXFxcXXxcXFxcLikqXFwkXFx7fFxcfSg/OlteYFxcXFxdfFxcXFwuKSpgfGAoPzpbXmBcXFxcXXxcXFxcLikqYC9nOy8vIGRldGVjdCBwcm9ibGVtYXRpYyBleHByZXNzaW9ucyBpbiBhIHRlbXBsYXRlXG5cdGZ1bmN0aW9uIGRldGVjdEVycm9ycyhhc3Qpe3ZhciBlcnJvcnM9W107aWYoYXN0KXtjaGVja05vZGUoYXN0LGVycm9ycyk7fXJldHVybiBlcnJvcnM7fWZ1bmN0aW9uIGNoZWNrTm9kZShub2RlLGVycm9ycyl7aWYobm9kZS50eXBlPT09MSl7Zm9yKHZhciBuYW1lIGluIG5vZGUuYXR0cnNNYXApe2lmKGRpclJFLnRlc3QobmFtZSkpe3ZhciB2YWx1ZT1ub2RlLmF0dHJzTWFwW25hbWVdO2lmKHZhbHVlKXtpZihuYW1lPT09J3YtZm9yJyl7Y2hlY2tGb3Iobm9kZSxcInYtZm9yPVxcXCJcIit2YWx1ZStcIlxcXCJcIixlcnJvcnMpO31lbHNle2NoZWNrRXhwcmVzc2lvbih2YWx1ZSxuYW1lK1wiPVxcXCJcIit2YWx1ZStcIlxcXCJcIixlcnJvcnMpO319fX1pZihub2RlLmNoaWxkcmVuKXtmb3IodmFyIGk9MDtpPG5vZGUuY2hpbGRyZW4ubGVuZ3RoO2krKyl7Y2hlY2tOb2RlKG5vZGUuY2hpbGRyZW5baV0sZXJyb3JzKTt9fX1lbHNlIGlmKG5vZGUudHlwZT09PTIpe2NoZWNrRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24sbm9kZS50ZXh0LGVycm9ycyk7fX1mdW5jdGlvbiBjaGVja0Zvcihub2RlLHRleHQsZXJyb3JzKXtjaGVja0V4cHJlc3Npb24obm9kZS5mb3J8fCcnLHRleHQsZXJyb3JzKTtjaGVja0lkZW50aWZpZXIobm9kZS5hbGlhcywndi1mb3IgYWxpYXMnLHRleHQsZXJyb3JzKTtjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjEsJ3YtZm9yIGl0ZXJhdG9yJyx0ZXh0LGVycm9ycyk7Y2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IyLCd2LWZvciBpdGVyYXRvcicsdGV4dCxlcnJvcnMpO31mdW5jdGlvbiBjaGVja0lkZW50aWZpZXIoaWRlbnQsdHlwZSx0ZXh0LGVycm9ycyl7aWYodHlwZW9mIGlkZW50PT09J3N0cmluZycmJiFpZGVudFJFLnRlc3QoaWRlbnQpKXtlcnJvcnMucHVzaChcIi0gaW52YWxpZCBcIit0eXBlK1wiIFxcXCJcIitpZGVudCtcIlxcXCIgaW4gZXhwcmVzc2lvbjogXCIrdGV4dCk7fX1mdW5jdGlvbiBjaGVja0V4cHJlc3Npb24oZXhwLHRleHQsZXJyb3JzKXt0cnl7bmV3IEZ1bmN0aW9uKFwicmV0dXJuIFwiK2V4cCk7fWNhdGNoKGUpe3ZhciBrZXl3b3JkTWF0Y2g9ZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwnJykubWF0Y2gocHJvaGliaXRlZEtleXdvcmRSRSk7aWYoa2V5d29yZE1hdGNoKXtlcnJvcnMucHVzaChcIi0gYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCBrZXl3b3JkIGFzIHByb3BlcnR5IG5hbWU6IFwiK1wiXFxcIlwiK2tleXdvcmRNYXRjaFswXStcIlxcXCIgaW4gZXhwcmVzc2lvbiBcIit0ZXh0KTt9ZWxzZXtlcnJvcnMucHVzaChcIi0gaW52YWxpZCBleHByZXNzaW9uOiBcIit0ZXh0KTt9fX0vKiAgKi9mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlKGVsLG9wdGlvbnMpe3ZhciB3YXJuPW9wdGlvbnMud2Fybnx8YmFzZVdhcm47dmFyIHN0YXRpY0NsYXNzPWdldEFuZFJlbW92ZUF0dHIoZWwsJ2NsYXNzJyk7aWYoZmFsc2Upe3ZhciBleHByZXNzaW9uPXBhcnNlVGV4dChzdGF0aWNDbGFzcyxvcHRpb25zLmRlbGltaXRlcnMpO2lmKGV4cHJlc3Npb24pe3dhcm4oXCJjbGFzcz1cXFwiXCIrc3RhdGljQ2xhc3MrXCJcXFwiOiBcIisnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnKydVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcrJ2luc3RlYWQgb2YgPGRpdiBjbGFzcz1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmNsYXNzPVwidmFsXCI+LicpO319aWYoc3RhdGljQ2xhc3Mpe2VsLnN0YXRpY0NsYXNzPUpTT04uc3RyaW5naWZ5KHN0YXRpY0NsYXNzKTt9dmFyIGNsYXNzQmluZGluZz1nZXRCaW5kaW5nQXR0cihlbCwnY2xhc3MnLGZhbHNlLyogZ2V0U3RhdGljICovKTtpZihjbGFzc0JpbmRpbmcpe2VsLmNsYXNzQmluZGluZz1jbGFzc0JpbmRpbmc7fX1mdW5jdGlvbiBnZW5EYXRhJDEoZWwpe3ZhciBkYXRhPScnO2lmKGVsLnN0YXRpY0NsYXNzKXtkYXRhKz1cInN0YXRpY0NsYXNzOlwiK2VsLnN0YXRpY0NsYXNzK1wiLFwiO31pZihlbC5jbGFzc0JpbmRpbmcpe2RhdGErPVwiY2xhc3M6XCIrZWwuY2xhc3NCaW5kaW5nK1wiLFwiO31yZXR1cm4gZGF0YTt9dmFyIGtsYXNzJDE9e3N0YXRpY0tleXM6WydzdGF0aWNDbGFzcyddLHRyYW5zZm9ybU5vZGU6dHJhbnNmb3JtTm9kZSxnZW5EYXRhOmdlbkRhdGEkMX07LyogICovZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSQxKGVsLG9wdGlvbnMpe3ZhciB3YXJuPW9wdGlvbnMud2Fybnx8YmFzZVdhcm47dmFyIHN0YXRpY1N0eWxlPWdldEFuZFJlbW92ZUF0dHIoZWwsJ3N0eWxlJyk7aWYoc3RhdGljU3R5bGUpey8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGZhbHNlKXt2YXIgZXhwcmVzc2lvbj1wYXJzZVRleHQoc3RhdGljU3R5bGUsb3B0aW9ucy5kZWxpbWl0ZXJzKTtpZihleHByZXNzaW9uKXt3YXJuKFwic3R5bGU9XFxcIlwiK3N0YXRpY1N0eWxlK1wiXFxcIjogXCIrJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJysnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnKydpbnN0ZWFkIG9mIDxkaXYgc3R5bGU9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpzdHlsZT1cInZhbFwiPi4nKTt9fWVsLnN0YXRpY1N0eWxlPUpTT04uc3RyaW5naWZ5KHBhcnNlU3R5bGVUZXh0KHN0YXRpY1N0eWxlKSk7fXZhciBzdHlsZUJpbmRpbmc9Z2V0QmluZGluZ0F0dHIoZWwsJ3N0eWxlJyxmYWxzZS8qIGdldFN0YXRpYyAqLyk7aWYoc3R5bGVCaW5kaW5nKXtlbC5zdHlsZUJpbmRpbmc9c3R5bGVCaW5kaW5nO319ZnVuY3Rpb24gZ2VuRGF0YSQyKGVsKXt2YXIgZGF0YT0nJztpZihlbC5zdGF0aWNTdHlsZSl7ZGF0YSs9XCJzdGF0aWNTdHlsZTpcIitlbC5zdGF0aWNTdHlsZStcIixcIjt9aWYoZWwuc3R5bGVCaW5kaW5nKXtkYXRhKz1cInN0eWxlOihcIitlbC5zdHlsZUJpbmRpbmcrXCIpLFwiO31yZXR1cm4gZGF0YTt9dmFyIHN0eWxlJDE9e3N0YXRpY0tleXM6WydzdGF0aWNTdHlsZSddLHRyYW5zZm9ybU5vZGU6dHJhbnNmb3JtTm9kZSQxLGdlbkRhdGE6Z2VuRGF0YSQyfTt2YXIgbW9kdWxlcyQxPVtrbGFzcyQxLHN0eWxlJDFdOy8qICAqL3ZhciB3YXJuJDM7ZnVuY3Rpb24gbW9kZWwkMShlbCxkaXIsX3dhcm4pe3dhcm4kMz1fd2Fybjt2YXIgdmFsdWU9ZGlyLnZhbHVlO3ZhciBtb2RpZmllcnM9ZGlyLm1vZGlmaWVyczt2YXIgdGFnPWVsLnRhZzt2YXIgdHlwZT1lbC5hdHRyc01hcC50eXBlO2lmKGZhbHNlKXt2YXIgZHluYW1pY1R5cGU9ZWwuYXR0cnNNYXBbJ3YtYmluZDp0eXBlJ118fGVsLmF0dHJzTWFwWyc6dHlwZSddO2lmKHRhZz09PSdpbnB1dCcmJmR5bmFtaWNUeXBlKXt3YXJuJDMoXCI8aW5wdXQgOnR5cGU9XFxcIlwiK2R5bmFtaWNUeXBlK1wiXFxcIiB2LW1vZGVsPVxcXCJcIit2YWx1ZStcIlxcXCI+OlxcblwiK1widi1tb2RlbCBkb2VzIG5vdCBzdXBwb3J0IGR5bmFtaWMgaW5wdXQgdHlwZXMuIFVzZSB2LWlmIGJyYW5jaGVzIGluc3RlYWQuXCIpO319aWYodGFnPT09J3NlbGVjdCcpe2dlblNlbGVjdChlbCx2YWx1ZSxtb2RpZmllcnMpO31lbHNlIGlmKHRhZz09PSdpbnB1dCcmJnR5cGU9PT0nY2hlY2tib3gnKXtnZW5DaGVja2JveE1vZGVsKGVsLHZhbHVlLG1vZGlmaWVycyk7fWVsc2UgaWYodGFnPT09J2lucHV0JyYmdHlwZT09PSdyYWRpbycpe2dlblJhZGlvTW9kZWwoZWwsdmFsdWUsbW9kaWZpZXJzKTt9ZWxzZXtnZW5EZWZhdWx0TW9kZWwoZWwsdmFsdWUsbW9kaWZpZXJzKTt9Ly8gZW5zdXJlIHJ1bnRpbWUgZGlyZWN0aXZlIG1ldGFkYXRhXG5cdHJldHVybiB0cnVlO31mdW5jdGlvbiBnZW5DaGVja2JveE1vZGVsKGVsLHZhbHVlLG1vZGlmaWVycyl7aWYoZmFsc2Upe3dhcm4kMyhcIjxcIitlbC50YWcrXCIgdi1tb2RlbD1cXFwiXCIrdmFsdWUrXCJcXFwiIGNoZWNrZWQ+OlxcblwiK1wiaW5saW5lIGNoZWNrZWQgYXR0cmlidXRlcyB3aWxsIGJlIGlnbm9yZWQgd2hlbiB1c2luZyB2LW1vZGVsLiBcIisnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLicpO312YXIgbnVtYmVyPW1vZGlmaWVycyYmbW9kaWZpZXJzLm51bWJlcjt2YXIgdmFsdWVCaW5kaW5nPWdldEJpbmRpbmdBdHRyKGVsLCd2YWx1ZScpfHwnbnVsbCc7dmFyIHRydWVWYWx1ZUJpbmRpbmc9Z2V0QmluZGluZ0F0dHIoZWwsJ3RydWUtdmFsdWUnKXx8J3RydWUnO3ZhciBmYWxzZVZhbHVlQmluZGluZz1nZXRCaW5kaW5nQXR0cihlbCwnZmFsc2UtdmFsdWUnKXx8J2ZhbHNlJzthZGRQcm9wKGVsLCdjaGVja2VkJyxcIkFycmF5LmlzQXJyYXkoXCIrdmFsdWUrXCIpXCIrXCI/X2koXCIrdmFsdWUrXCIsXCIrdmFsdWVCaW5kaW5nK1wiKT4tMVwiKyh0cnVlVmFsdWVCaW5kaW5nPT09J3RydWUnP1wiOihcIit2YWx1ZStcIilcIjpcIjpfcShcIit2YWx1ZStcIixcIit0cnVlVmFsdWVCaW5kaW5nK1wiKVwiKSk7YWRkSGFuZGxlcihlbCwnY2hhbmdlJyxcInZhciAkJGE9XCIrdmFsdWUrXCIsXCIrJyQkZWw9JGV2ZW50LnRhcmdldCwnK1wiJCRjPSQkZWwuY2hlY2tlZD8oXCIrdHJ1ZVZhbHVlQmluZGluZytcIik6KFwiK2ZhbHNlVmFsdWVCaW5kaW5nK1wiKTtcIisnaWYoQXJyYXkuaXNBcnJheSgkJGEpKXsnK1widmFyICQkdj1cIisobnVtYmVyPydfbignK3ZhbHVlQmluZGluZysnKSc6dmFsdWVCaW5kaW5nKStcIixcIisnJCRpPV9pKCQkYSwkJHYpOycrXCJpZigkJGMpeyQkaTwwJiYoXCIrdmFsdWUrXCI9JCRhLmNvbmNhdCgkJHYpKX1cIitcImVsc2V7JCRpPi0xJiYoXCIrdmFsdWUrXCI9JCRhLnNsaWNlKDAsJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSsxKSkpfVwiK1wifWVsc2V7XCIrdmFsdWUrXCI9JCRjfVwiLG51bGwsdHJ1ZSk7fWZ1bmN0aW9uIGdlblJhZGlvTW9kZWwoZWwsdmFsdWUsbW9kaWZpZXJzKXtpZihmYWxzZSl7d2FybiQzKFwiPFwiK2VsLnRhZytcIiB2LW1vZGVsPVxcXCJcIit2YWx1ZStcIlxcXCIgY2hlY2tlZD46XFxuXCIrXCJpbmxpbmUgY2hlY2tlZCBhdHRyaWJ1dGVzIHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuIFwiKydEZWNsYXJlIGluaXRpYWwgdmFsdWVzIGluIHRoZSBjb21wb25lbnRcXCdzIGRhdGEgb3B0aW9uIGluc3RlYWQuJyk7fXZhciBudW1iZXI9bW9kaWZpZXJzJiZtb2RpZmllcnMubnVtYmVyO3ZhciB2YWx1ZUJpbmRpbmc9Z2V0QmluZGluZ0F0dHIoZWwsJ3ZhbHVlJyl8fCdudWxsJzt2YWx1ZUJpbmRpbmc9bnVtYmVyP1wiX24oXCIrdmFsdWVCaW5kaW5nK1wiKVwiOnZhbHVlQmluZGluZzthZGRQcm9wKGVsLCdjaGVja2VkJyxcIl9xKFwiK3ZhbHVlK1wiLFwiK3ZhbHVlQmluZGluZytcIilcIik7YWRkSGFuZGxlcihlbCwnY2hhbmdlJyxnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSx2YWx1ZUJpbmRpbmcpLG51bGwsdHJ1ZSk7fWZ1bmN0aW9uIGdlbkRlZmF1bHRNb2RlbChlbCx2YWx1ZSxtb2RpZmllcnMpe2lmKGZhbHNlKXtpZihlbC50YWc9PT0naW5wdXQnJiZlbC5hdHRyc01hcC52YWx1ZSl7d2FybiQzKFwiPFwiK2VsLnRhZytcIiB2LW1vZGVsPVxcXCJcIit2YWx1ZStcIlxcXCIgdmFsdWU9XFxcIlwiK2VsLmF0dHJzTWFwLnZhbHVlK1wiXFxcIj46XFxuXCIrJ2lubGluZSB2YWx1ZSBhdHRyaWJ1dGVzIHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuICcrJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nKTt9aWYoZWwudGFnPT09J3RleHRhcmVhJyYmZWwuY2hpbGRyZW4ubGVuZ3RoKXt3YXJuJDMoXCI8dGV4dGFyZWEgdi1tb2RlbD1cXFwiXCIrdmFsdWUrXCJcXFwiPjpcXG5cIisnaW5saW5lIGNvbnRlbnQgaW5zaWRlIDx0ZXh0YXJlYT4gd2lsbCBiZSBpZ25vcmVkIHdoZW4gdXNpbmcgdi1tb2RlbC4gJysnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLicpO319dmFyIHR5cGU9ZWwuYXR0cnNNYXAudHlwZTt2YXIgcmVmPW1vZGlmaWVyc3x8e307dmFyIGxhenk9cmVmLmxhenk7dmFyIG51bWJlcj1yZWYubnVtYmVyO3ZhciB0cmltPXJlZi50cmltO3ZhciBldmVudD1sYXp5fHxpc0lFJiZ0eXBlPT09J3JhbmdlJz8nY2hhbmdlJzonaW5wdXQnO3ZhciBuZWVkQ29tcG9zaXRpb25HdWFyZD0hbGF6eSYmdHlwZSE9PSdyYW5nZSc7dmFyIGlzTmF0aXZlPWVsLnRhZz09PSdpbnB1dCd8fGVsLnRhZz09PSd0ZXh0YXJlYSc7dmFyIHZhbHVlRXhwcmVzc2lvbj1pc05hdGl2ZT9cIiRldmVudC50YXJnZXQudmFsdWVcIisodHJpbT8nLnRyaW0oKSc6JycpOnRyaW0/XCIodHlwZW9mICRldmVudCA9PT0gJ3N0cmluZycgPyAkZXZlbnQudHJpbSgpIDogJGV2ZW50KVwiOlwiJGV2ZW50XCI7dmFsdWVFeHByZXNzaW9uPW51bWJlcnx8dHlwZT09PSdudW1iZXInP1wiX24oXCIrdmFsdWVFeHByZXNzaW9uK1wiKVwiOnZhbHVlRXhwcmVzc2lvbjt2YXIgY29kZT1nZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSx2YWx1ZUV4cHJlc3Npb24pO2lmKGlzTmF0aXZlJiZuZWVkQ29tcG9zaXRpb25HdWFyZCl7Y29kZT1cImlmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXJldHVybjtcIitjb2RlO30vLyBpbnB1dHMgd2l0aCB0eXBlPVwiZmlsZVwiIGFyZSByZWFkIG9ubHkgYW5kIHNldHRpbmcgdGhlIGlucHV0J3Ncblx0Ly8gdmFsdWUgd2lsbCB0aHJvdyBhbiBlcnJvci5cblx0aWYoZmFsc2Upe3dhcm4kMyhcIjxcIitlbC50YWcrXCIgdi1tb2RlbD1cXFwiXCIrdmFsdWUrXCJcXFwiIHR5cGU9XFxcImZpbGVcXFwiPjpcXG5cIitcIkZpbGUgaW5wdXRzIGFyZSByZWFkIG9ubHkuIFVzZSBhIHYtb246Y2hhbmdlIGxpc3RlbmVyIGluc3RlYWQuXCIpO31hZGRQcm9wKGVsLCd2YWx1ZScsaXNOYXRpdmU/XCJfcyhcIit2YWx1ZStcIilcIjpcIihcIit2YWx1ZStcIilcIik7YWRkSGFuZGxlcihlbCxldmVudCxjb2RlLG51bGwsdHJ1ZSk7aWYodHJpbXx8bnVtYmVyfHx0eXBlPT09J251bWJlcicpe2FkZEhhbmRsZXIoZWwsJ2JsdXInLCckZm9yY2VVcGRhdGUoKScpO319ZnVuY3Rpb24gZ2VuU2VsZWN0KGVsLHZhbHVlLG1vZGlmaWVycyl7aWYoZmFsc2Upe2VsLmNoaWxkcmVuLnNvbWUoY2hlY2tPcHRpb25XYXJuaW5nKTt9dmFyIG51bWJlcj1tb2RpZmllcnMmJm1vZGlmaWVycy5udW1iZXI7dmFyIGFzc2lnbm1lbnQ9XCJBcnJheS5wcm90b3R5cGUuZmlsdGVyXCIrXCIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KVwiK1wiLm1hcChmdW5jdGlvbihvKXt2YXIgdmFsID0gXFxcIl92YWx1ZVxcXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtcIitcInJldHVybiBcIisobnVtYmVyPydfbih2YWwpJzondmFsJykrXCJ9KVwiKyhlbC5hdHRyc01hcC5tdWx0aXBsZT09bnVsbD8nWzBdJzonJyk7dmFyIGNvZGU9Z2VuQXNzaWdubWVudENvZGUodmFsdWUsYXNzaWdubWVudCk7YWRkSGFuZGxlcihlbCwnY2hhbmdlJyxjb2RlLG51bGwsdHJ1ZSk7fWZ1bmN0aW9uIGNoZWNrT3B0aW9uV2FybmluZyhvcHRpb24pe2lmKG9wdGlvbi50eXBlPT09MSYmb3B0aW9uLnRhZz09PSdvcHRpb24nJiZvcHRpb24uYXR0cnNNYXAuc2VsZWN0ZWQhPW51bGwpe3dhcm4kMyhcIjxzZWxlY3Qgdi1tb2RlbD1cXFwiXCIrb3B0aW9uLnBhcmVudC5hdHRyc01hcFsndi1tb2RlbCddK1wiXFxcIj46XFxuXCIrJ2lubGluZSBzZWxlY3RlZCBhdHRyaWJ1dGVzIG9uIDxvcHRpb24+IHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuICcrJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nKTtyZXR1cm4gdHJ1ZTt9cmV0dXJuIGZhbHNlO31mdW5jdGlvbiBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSxhc3NpZ25tZW50KXt2YXIgbW9kZWxScz1wYXJzZU1vZGVsKHZhbHVlKTtpZihtb2RlbFJzLmlkeD09PW51bGwpe3JldHVybiB2YWx1ZStcIj1cIithc3NpZ25tZW50O31lbHNle3JldHVyblwidmFyICQkZXhwID0gXCIrbW9kZWxScy5leHArXCIsICQkaWR4ID0gXCIrbW9kZWxScy5pZHgrXCI7XCIrXCJpZiAoIUFycmF5LmlzQXJyYXkoJCRleHApKXtcIit2YWx1ZStcIj1cIithc3NpZ25tZW50K1wifVwiK1wiZWxzZXskJGV4cC5zcGxpY2UoJCRpZHgsIDEsIFwiK2Fzc2lnbm1lbnQrXCIpfVwiO319LyogICovZnVuY3Rpb24gdGV4dChlbCxkaXIpe2lmKGRpci52YWx1ZSl7YWRkUHJvcChlbCwndGV4dENvbnRlbnQnLFwiX3MoXCIrZGlyLnZhbHVlK1wiKVwiKTt9fS8qICAqL2Z1bmN0aW9uIGh0bWwoZWwsZGlyKXtpZihkaXIudmFsdWUpe2FkZFByb3AoZWwsJ2lubmVySFRNTCcsXCJfcyhcIitkaXIudmFsdWUrXCIpXCIpO319dmFyIGRpcmVjdGl2ZXMkMT17bW9kZWw6bW9kZWwkMSx0ZXh0OnRleHQsaHRtbDpodG1sfTsvKiAgKi92YXIgY2FjaGU9T2JqZWN0LmNyZWF0ZShudWxsKTt2YXIgYmFzZU9wdGlvbnM9e2V4cGVjdEhUTUw6dHJ1ZSxtb2R1bGVzOm1vZHVsZXMkMSxzdGF0aWNLZXlzOmdlblN0YXRpY0tleXMobW9kdWxlcyQxKSxkaXJlY3RpdmVzOmRpcmVjdGl2ZXMkMSxpc1Jlc2VydmVkVGFnOmlzUmVzZXJ2ZWRUYWcsaXNVbmFyeVRhZzppc1VuYXJ5VGFnLG11c3RVc2VQcm9wOm11c3RVc2VQcm9wLGdldFRhZ05hbWVzcGFjZTpnZXRUYWdOYW1lc3BhY2UsaXNQcmVUYWc6aXNQcmVUYWd9O2Z1bmN0aW9uIGNvbXBpbGUkJDEodGVtcGxhdGUsb3B0aW9ucyl7b3B0aW9ucz1vcHRpb25zP2V4dGVuZChleHRlbmQoe30sYmFzZU9wdGlvbnMpLG9wdGlvbnMpOmJhc2VPcHRpb25zO3JldHVybiBjb21waWxlJDEodGVtcGxhdGUsb3B0aW9ucyk7fWZ1bmN0aW9uIGNvbXBpbGVUb0Z1bmN0aW9ucyh0ZW1wbGF0ZSxvcHRpb25zLHZtKXt2YXIgX3dhcm49b3B0aW9ucyYmb3B0aW9ucy53YXJufHx3YXJuOy8vIGRldGVjdCBwb3NzaWJsZSBDU1AgcmVzdHJpY3Rpb25cblx0LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoZmFsc2Upe3RyeXtuZXcgRnVuY3Rpb24oJ3JldHVybiAxJyk7fWNhdGNoKGUpe2lmKGUudG9TdHJpbmcoKS5tYXRjaCgvdW5zYWZlLWV2YWx8Q1NQLykpe193YXJuKCdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiAnKydlbnZpcm9ubWVudCB3aXRoIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgcHJvaGliaXRzIHVuc2FmZS1ldmFsLiAnKydUaGUgdGVtcGxhdGUgY29tcGlsZXIgY2Fubm90IHdvcmsgaW4gdGhpcyBlbnZpcm9ubWVudC4gQ29uc2lkZXIgJysncmVsYXhpbmcgdGhlIHBvbGljeSB0byBhbGxvdyB1bnNhZmUtZXZhbCBvciBwcmUtY29tcGlsaW5nIHlvdXIgJysndGVtcGxhdGVzIGludG8gcmVuZGVyIGZ1bmN0aW9ucy4nKTt9fX12YXIga2V5PW9wdGlvbnMmJm9wdGlvbnMuZGVsaW1pdGVycz9TdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJzKSt0ZW1wbGF0ZTp0ZW1wbGF0ZTtpZihjYWNoZVtrZXldKXtyZXR1cm4gY2FjaGVba2V5XTt9dmFyIHJlcz17fTt2YXIgY29tcGlsZWQ9Y29tcGlsZSQkMSh0ZW1wbGF0ZSxvcHRpb25zKTtyZXMucmVuZGVyPW1ha2VGdW5jdGlvbihjb21waWxlZC5yZW5kZXIpO3ZhciBsPWNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5sZW5ndGg7cmVzLnN0YXRpY1JlbmRlckZucz1uZXcgQXJyYXkobCk7Zm9yKHZhciBpPTA7aTxsO2krKyl7cmVzLnN0YXRpY1JlbmRlckZuc1tpXT1tYWtlRnVuY3Rpb24oY29tcGlsZWQuc3RhdGljUmVuZGVyRm5zW2ldKTt9aWYoZmFsc2Upe2lmKHJlcy5yZW5kZXI9PT1ub29wfHxyZXMuc3RhdGljUmVuZGVyRm5zLnNvbWUoZnVuY3Rpb24oZm4pe3JldHVybiBmbj09PW5vb3A7fSkpe193YXJuKFwiZmFpbGVkIHRvIGNvbXBpbGUgdGVtcGxhdGU6XFxuXFxuXCIrdGVtcGxhdGUrXCJcXG5cXG5cIitkZXRlY3RFcnJvcnMoY29tcGlsZWQuYXN0KS5qb2luKCdcXG4nKSsnXFxuXFxuJyx2bSk7fX1yZXR1cm4gY2FjaGVba2V5XT1yZXM7fWZ1bmN0aW9uIG1ha2VGdW5jdGlvbihjb2RlKXt0cnl7cmV0dXJuIG5ldyBGdW5jdGlvbihjb2RlKTt9Y2F0Y2goZSl7cmV0dXJuIG5vb3A7fX0vKiAgKi92YXIgaWRUb1RlbXBsYXRlPWNhY2hlZChmdW5jdGlvbihpZCl7dmFyIGVsPXF1ZXJ5KGlkKTtyZXR1cm4gZWwmJmVsLmlubmVySFRNTDt9KTt2YXIgbW91bnQ9VnVlJDMucHJvdG90eXBlLiRtb3VudDtWdWUkMy5wcm90b3R5cGUuJG1vdW50PWZ1bmN0aW9uKGVsLGh5ZHJhdGluZyl7ZWw9ZWwmJnF1ZXJ5KGVsKTsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihlbD09PWRvY3VtZW50LmJvZHl8fGVsPT09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KXsoXCJwcm9kdWN0aW9uXCIpIT09J3Byb2R1Y3Rpb24nJiZ3YXJuKFwiRG8gbm90IG1vdW50IFZ1ZSB0byA8aHRtbD4gb3IgPGJvZHk+IC0gbW91bnQgdG8gbm9ybWFsIGVsZW1lbnRzIGluc3RlYWQuXCIpO3JldHVybiB0aGlzO312YXIgb3B0aW9ucz10aGlzLiRvcHRpb25zOy8vIHJlc29sdmUgdGVtcGxhdGUvZWwgYW5kIGNvbnZlcnQgdG8gcmVuZGVyIGZ1bmN0aW9uXG5cdGlmKCFvcHRpb25zLnJlbmRlcil7dmFyIHRlbXBsYXRlPW9wdGlvbnMudGVtcGxhdGU7aWYodGVtcGxhdGUpe2lmKHR5cGVvZiB0ZW1wbGF0ZT09PSdzdHJpbmcnKXtpZih0ZW1wbGF0ZS5jaGFyQXQoMCk9PT0nIycpe3RlbXBsYXRlPWlkVG9UZW1wbGF0ZSh0ZW1wbGF0ZSk7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoZmFsc2Upe3dhcm4oXCJUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogXCIrb3B0aW9ucy50ZW1wbGF0ZSx0aGlzKTt9fX1lbHNlIGlmKHRlbXBsYXRlLm5vZGVUeXBlKXt0ZW1wbGF0ZT10ZW1wbGF0ZS5pbm5lckhUTUw7fWVsc2V7aWYoZmFsc2Upe3dhcm4oJ2ludmFsaWQgdGVtcGxhdGUgb3B0aW9uOicrdGVtcGxhdGUsdGhpcyk7fXJldHVybiB0aGlzO319ZWxzZSBpZihlbCl7dGVtcGxhdGU9Z2V0T3V0ZXJIVE1MKGVsKTt9aWYodGVtcGxhdGUpe3ZhciByZWY9Y29tcGlsZVRvRnVuY3Rpb25zKHRlbXBsYXRlLHt3YXJuOndhcm4sc2hvdWxkRGVjb2RlTmV3bGluZXM6c2hvdWxkRGVjb2RlTmV3bGluZXMsZGVsaW1pdGVyczpvcHRpb25zLmRlbGltaXRlcnN9LHRoaXMpO3ZhciByZW5kZXI9cmVmLnJlbmRlcjt2YXIgc3RhdGljUmVuZGVyRm5zPXJlZi5zdGF0aWNSZW5kZXJGbnM7b3B0aW9ucy5yZW5kZXI9cmVuZGVyO29wdGlvbnMuc3RhdGljUmVuZGVyRm5zPXN0YXRpY1JlbmRlckZuczt9fXJldHVybiBtb3VudC5jYWxsKHRoaXMsZWwsaHlkcmF0aW5nKTt9Oy8qKlxuXHQgKiBHZXQgb3V0ZXJIVE1MIG9mIGVsZW1lbnRzLCB0YWtpbmcgY2FyZVxuXHQgKiBvZiBTVkcgZWxlbWVudHMgaW4gSUUgYXMgd2VsbC5cblx0ICovZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MKGVsKXtpZihlbC5vdXRlckhUTUwpe3JldHVybiBlbC5vdXRlckhUTUw7fWVsc2V7dmFyIGNvbnRhaW5lcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwuY2xvbmVOb2RlKHRydWUpKTtyZXR1cm4gY29udGFpbmVyLmlubmVySFRNTDt9fVZ1ZSQzLmNvbXBpbGU9Y29tcGlsZVRvRnVuY3Rpb25zO21vZHVsZS5leHBvcnRzPVZ1ZSQzO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpXG5cbi8qKiovIH0sXG4vKiAxMCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9hcGktdHJlZS9qc29uVHJlZUNvbnZlcnRlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmpzb25Ub1RyZWUgPSBqc29uVG9UcmVlO1xuXHRleHBvcnRzLnRyZWVUb0pzb24gPSB0cmVlVG9Kc29uO1xuXHRcblx0dmFyIF90cmVlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlICovIDUpO1xuXHRcblx0ZnVuY3Rpb24ganNvblRvVHJlZShub2Rlc0Fycikge1xuXHQgIHZhciBoYXNoVGFibGUgPSB7fTtcblx0ICB2YXIgdHJlZSA9IHZvaWQgMDtcblx0ICBmb3IgKHZhciBpID0gMCwgbm9kZXNMZW4gPSBub2Rlc0Fyci5sZW5ndGg7IGkgPCBub2Rlc0xlbjsgaSsrKSB7XG5cdCAgICBoYXNoVGFibGVbbm9kZXNBcnJbaV1bJ3BhcmVudElkJ11dID8gaGFzaFRhYmxlW25vZGVzQXJyW2ldWydwYXJlbnRJZCddXS5wdXNoKG5vZGVzQXJyW2ldKSA6IGhhc2hUYWJsZVtub2Rlc0FycltpXVsncGFyZW50SWQnXV0gPSBbbm9kZXNBcnJbaV1dO1xuXHQgIH1cblx0ICAvLyBub2RlIOeahOWtkOiKgueCueeahElE5oC75piv5aSn5LqObm9kZeeahElEXG5cdCAgdmFyIG1vZEtleXNBcnIgPSByZW1vdmVFbGVGcm9tQXJyKE9iamVjdC5rZXlzKGhhc2hUYWJsZSksICdudWxsJykubWFwKE51bWJlcikuc29ydChzb3J0TnVtYmVyKTtcblx0ICB2YXIgcm9vdE5vZGVEYXRhID0gaGFzaFRhYmxlWydudWxsJ11bMF07XG5cdCAgdHJlZSA9IG5ldyBfdHJlZS5UcmVlKHJvb3ROb2RlRGF0YSk7XG5cdFxuXHQgIGZvciAodmFyIGogPSAwLCBrZXlzTGVuID0gbW9kS2V5c0Fyci5sZW5ndGg7IGogPCBrZXlzTGVuOyBqKyspIHtcblx0ICAgIGlmIChoYXNoVGFibGUuaGFzT3duUHJvcGVydHkobW9kS2V5c0FycltqXSkpIHtcblx0ICAgICAgZm9yICh2YXIgayA9IDAsIGtleUFyckxlbiA9IGhhc2hUYWJsZVttb2RLZXlzQXJyW2pdXS5sZW5ndGg7IGsgPCBrZXlBcnJMZW47IGsrKykge1xuXHQgICAgICAgIHRyZWUuYWRkKGhhc2hUYWJsZVttb2RLZXlzQXJyW2pdXVtrXSwgK21vZEtleXNBcnJbal0sIHRyZWUudHJhdmVyc2VCRik7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHRyZWU7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHJlbW92ZUVsZUZyb21BcnIoYXJyLCBlbGUpIHtcblx0ICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihlbGUpO1xuXHQgIGlmIChpbmRleCA+IC0xKSB7XG5cdCAgICBhcnIuc3BsaWNlKGluZGV4LCAxKTtcblx0ICB9XG5cdCAgcmV0dXJuIGFycjtcblx0fVxuXHRcblx0LyogQnkgZGVmYXVsdCB0aGUgc29ydCBtZXRob2Qgc29ydHMgZWxlbWVudHMgYWxwaGFiZXRpY2FsbHkuICovXG5cdGZ1bmN0aW9uIHNvcnROdW1iZXIoYSwgYikge1xuXHQgIHJldHVybiBhIC0gYjtcblx0fVxuXHRcblx0ZnVuY3Rpb24gdHJlZVRvSnNvbih0cmVlKSB7fVxuXG4vKioqLyB9LFxuLyogMTEgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBpLXRyZWUvcXVldWUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLlF1ZXVlID0gUXVldWU7XG5cdC8qKlxuXHQgKiBbUXVldWUgZGVzY3JpcHRpb25dXG5cdCAqIGVucXVldWUoZGF0YSkgYWRkcyBkYXRhIHRvIGEgcXVldWUuXG5cdCAqIGRlcXVldWUgcmVtb3ZlcyB0aGUgb2xkZXN0IGFkZGVkIGRhdGEgdG8gYSBxdWV1ZS5cblx0ICovXG5cdGZ1bmN0aW9uIFF1ZXVlKCkge1xuXHQgIHRoaXMuX29sZGVzdEluZGV4ID0gMTtcblx0ICB0aGlzLl9uZXdlc3RJbmRleCA9IDE7XG5cdCAgdGhpcy5fc3RvcmFnZSA9IHt9O1xuXHR9XG5cdFxuXHRRdWV1ZS5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4gdGhpcy5fbmV3ZXN0SW5kZXggLSB0aGlzLl9vbGRlc3RJbmRleDtcblx0fTtcblx0XG5cdFF1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlID0gZnVuY3Rpb24gKGRhdGEpIHtcblx0ICB0aGlzLl9zdG9yYWdlW3RoaXMuX25ld2VzdEluZGV4XSA9IGRhdGE7XG5cdCAgdGhpcy5fbmV3ZXN0SW5kZXgrKztcblx0fTtcblx0XG5cdFF1ZXVlLnByb3RvdHlwZS5kZXF1ZXVlID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBvbGRlc3RJbmRleCA9IHRoaXMuX29sZGVzdEluZGV4LFxuXHQgICAgICBuZXdlc3RJbmRleCA9IHRoaXMuX25ld2VzdEluZGV4LFxuXHQgICAgICBkZWxldGVkRGF0YTtcblx0XG5cdCAgaWYgKG9sZGVzdEluZGV4ICE9PSBuZXdlc3RJbmRleCkge1xuXHQgICAgZGVsZXRlZERhdGEgPSB0aGlzLl9zdG9yYWdlW29sZGVzdEluZGV4XTtcblx0ICAgIGRlbGV0ZSB0aGlzLl9zdG9yYWdlW29sZGVzdEluZGV4XTtcblx0ICAgIHRoaXMuX29sZGVzdEluZGV4Kys7XG5cdFxuXHQgICAgcmV0dXJuIGRlbGV0ZWREYXRhO1xuXHQgIH1cblx0fTtcblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9hcGktdHJlZS90cmVlRGF0YUNvbGxlY3QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuY29sbGVjdEFwaURhdGEgPSBjb2xsZWN0QXBpRGF0YTtcblx0XG5cdHZhciBfdXRpbGl0aWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29tbW9uL3V0aWxpdGllcyAqLyAxKTtcblx0XG5cdGZ1bmN0aW9uIGNvbGxlY3RBcGlEYXRhKHRyZWUsIG9wRWxlKSB7XG5cdCAgdmFyIHBlckFwaUVsZSA9IG9wRWxlLmNsb3Nlc3QoJy5wZXItYXBpJyk7XG5cdCAgLy8gbGV0IHRyZWVFbGUgPSBwZXJBcGlFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXRyZWUnKVswXTtcblx0ICByZXR1cm4gKDAsIF91dGlsaXRpZXMubWVyZ2VPYmopKGNvbGxlY3RJbmZvKHBlckFwaUVsZSksIGNvbGxlY3REYXRhRnJvbVRyZWUodHJlZSkpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjb2xsZWN0SW5mbyhwZXJBcGlFbGUpIHtcblx0ICB2YXIgaW5mb0VsZSA9IHBlckFwaUVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktaW5mbycpWzBdO1xuXHQgIHZhciBNb2Rlc1Jvd0VsZSA9IHBlckFwaUVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktbW9kZXMtcm93JylbMF07XG5cdCAgdmFyIGluZm9EYXRhID0ge307XG5cdCAgaW5mb0RhdGEgPSB7XG5cdCAgICAnc2VjdGlvbic6IGluZm9FbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXNlY3Rpb24nKVswXS52YWx1ZSxcblx0ICAgICd1cmknOiBpbmZvRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS11cmknKVswXS52YWx1ZSxcblx0ICAgICdtZXRob2QnOiBpbmZvRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS1tZXRob2QnKVswXS52YWx1ZSxcblx0ICAgICdkZXNjcmlwdGlvbic6IGluZm9FbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLWRlc2NyaXB0aW9uJylbMF0udmFsdWUsXG5cdCAgICAnd2lraUxpbmsnOiBpbmZvRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS13aWtpLWlucHV0JylbMF0udmFsdWUsXG5cdCAgICAnbW9kZSc6IGdldE1vZGVWYWwoTW9kZXNSb3dFbGUpLFxuXHQgICAgJ2RlYnVnQWRkcic6IGdldERlYnVnQWRkcihNb2Rlc1Jvd0VsZSlcblx0ICB9O1xuXHRcblx0ICByZXR1cm4gaW5mb0RhdGE7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldE1vZGVWYWwoTW9kZXNSb3dFbGUpIHtcblx0ICB2YXIgcmFkaW9zID0gTW9kZXNSb3dFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLW1vZGUnKTtcblx0ICB2YXIgbW9kZVZhbDtcblx0ICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcmFkaW9zLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICBpZiAocmFkaW9zW2ldLmNoZWNrZWQpIHtcblx0ICAgICAgbW9kZVZhbCA9IHJhZGlvc1tpXS52YWx1ZTtcblx0ICAgICAgYnJlYWs7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBtb2RlVmFsO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZXREZWJ1Z0FkZHIoTW9kZXNSb3dFbGUpIHtcblx0ICByZXR1cm4gTW9kZXNSb3dFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbW9kZS1kZWJ1Z2dpbmctYWRkcicpWzBdLnZhbHVlO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjb2xsZWN0VHJlZSh0cmVlRWxlKSB7XG5cdCAgdmFyIGxlYXZlcyA9IFtdLnNsaWNlLmNhbGwodHJlZUVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsZWFmJykpO1xuXHQgIHZhciB0cmVlRGF0YUFyciA9IFtdO1xuXHQgIHZhciB0cmVlRGF0YU9iaiA9IHt9O1xuXHQgIHZhciBsZWFmRGF0YSA9IHZvaWQgMDtcblx0ICBmb3IgKHZhciBpID0gMCwgbGVhdmVzTGVuID0gbGVhdmVzLmxlbmd0aDsgaSA8IGxlYXZlc0xlbjsgaSsrKSB7XG5cdCAgICBsZWFmRGF0YSA9IHt9O1xuXHQgICAgbGVhZkRhdGEucGFyZW50SWQgPSBsZWF2ZXNbaV0uZGF0YXNldC5wYXJlbnQ7XG5cdCAgICBsZWFmRGF0YS5ub2RlSWQgPSBsZWF2ZXNbaV0uZGF0YXNldC5pbmRleDtcblx0ICAgIGxlYWZEYXRhLmtleSA9IGxlYXZlc1tpXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsZWFmLWtleScpWzBdLnZhbHVlO1xuXHQgICAgbGVhZkRhdGEudmFsdWUgPSBsZWF2ZXNbaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZi12YWx1ZScpWzBdLnZhbHVlO1xuXHQgICAgbGVhZkRhdGEucXVhbnRpdHkgPSBsZWF2ZXNbaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZi1xdWFudGl0eScpWzBdLnZhbHVlO1xuXHQgICAgdHJlZURhdGFBcnIucHVzaChsZWFmRGF0YSk7XG5cdCAgfTtcblx0ICB0cmVlRGF0YU9iai5ub2RlcyA9IHRyZWVEYXRhQXJyO1xuXHQgIHJldHVybiB0cmVlRGF0YU9iajtcblx0fVxuXHRcblx0ZnVuY3Rpb24gY29sbGVjdERhdGFGcm9tVHJlZShhcGlUcmVlKSB7XG5cdCAgdmFyIHRyZWUgPSBhcGlUcmVlO1xuXHQgIHZhciBub2Rlc0FyciA9IFtdO1xuXHQgIHZhciB0cmVlRGF0YU9iaiA9IHt9O1xuXHQgIHZhciBkaW1lbnNpb25zQXJyID0gW107XG5cdCAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2sobm9kZSkge1xuXHQgICAgaWYgKG5vZGUgPT09IG51bGwpIHJldHVybjtcblx0ICAgIHZhciBub2RlRGF0YSA9IHt9O1xuXHQgICAgbm9kZURhdGEubm9kZUlkID0gbm9kZS5ub2RlSWQ7XG5cdCAgICBub2RlRGF0YS5jb2x1bW4gPSBub2RlLmNvbHVtbjtcblx0ICAgIG5vZGVEYXRhLnBhcmVudElkID0gbm9kZS5wYXJlbnQgPT09IG51bGwgPyBudWxsIDogbm9kZS5wYXJlbnQubm9kZUlkO1xuXHQgICAgbm9kZURhdGEuY2hpbGRyZW5sZXZlbCA9IG5vZGUuY2hpbGRyZW5sZXZlbDtcblx0ICAgIG5vZGVEYXRhLnRvdGFsb2Zmc2V0eWxldmVsID0gbm9kZS50b3RhbG9mZnNldHlsZXZlbDtcblx0ICAgIG5vZGVEYXRhLmRhdGEgPSBub2RlLmRhdGE7XG5cdCAgICBub2RlRGF0YS5kYXRhLmhhc0NoaWxkID0gbm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xuXHQgICAgbm9kZXNBcnIucHVzaChub2RlRGF0YSk7XG5cdCAgfTtcblx0ICB0cmVlLnRyYXZlcnNlREYoY2FsbGJhY2spO1xuXHQgIGRpbWVuc2lvbnNBcnIgPSB0cmVlLmRpbWVuc2lvbnMoKTtcblx0ICB0cmVlRGF0YU9iai5kaW1lbnNpb25zID0ge307XG5cdCAgdHJlZURhdGFPYmouZGltZW5zaW9ucy5oVW5pdCA9IGRpbWVuc2lvbnNBcnJbMF07XG5cdCAgdHJlZURhdGFPYmouZGltZW5zaW9ucy52VW5pdCA9IGRpbWVuc2lvbnNBcnJbMV07XG5cdCAgdHJlZURhdGFPYmoubm9kZXMgPSBub2Rlc0Fycjtcblx0ICByZXR1cm4gdHJlZURhdGFPYmo7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDEzICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBpLXRyZWUvdHJlZURvbS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHdpZHRoIG9mIHNpbmdsZSBzdmcgcGF0aDogMzBweFxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuQXBpRG9tID0gQXBpRG9tO1xuXHRcblx0dmFyIF90cmVlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90cmVlICovIDUpO1xuXHRcblx0dmFyIF9hamF4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29tbW9uL2FqYXggKi8gMik7XG5cdFxuXHR2YXIgX3BvcHVwID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29tbW9uL3BvcHVwICovIDQpO1xuXHRcblx0dmFyIF9jb25zdGFudCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2dsb2JhbC9jb25zdGFudCAqLyA4KTtcblx0XG5cdHZhciBfZmxhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9jb21tb24vZmxhc2ggKi8gMyk7XG5cdFxuXHR2YXIgX3RyZWVEYXRhQ29sbGVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdHJlZURhdGFDb2xsZWN0ICovIDEyKTtcblx0XG5cdHZhciBfdXRpbGl0aWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlsaXRpZXMgKi8gMTQpO1xuXHRcblx0dmFyIF9qc29uVHJlZUNvbnZlcnRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vanNvblRyZWVDb252ZXJ0ZXIgKi8gMTApO1xuXHRcblx0dmFyIF90d29XYXlEYXRhQmluZGluZyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NvbW1vbi90d29XYXlEYXRhQmluZGluZyAqLyA3KTtcblx0XG5cdHZhciBfY2FsbGJhY2tzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29tbW9uL2NhbGxiYWNrcyAqLyAxNik7XG5cdFxuXHR2YXIgX3Njcm9sbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NvbW1vbi9zY3JvbGwgKi8gMTkpO1xuXHRcblx0dmFyIF91dGlsaXRpZXMyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29tbW9uL3V0aWxpdGllcyAqLyAxKTtcblx0XG5cdGZ1bmN0aW9uIHBlckFwaVRwbChkYXRhKSB7XG5cdCAgdmFyIGlzTmV3QXBpID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblx0XG5cdCAgdmFyIGFwaVVVSUQgPSAoMCwgX3V0aWxpdGllczIuZ2VuZXJhdGVVVUlEKSgpO1xuXHQgIHZhciB0cGwgPSAnPGRpdiBjbGFzcz1cImFwaS1pbmZvXCI+XFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImFwaS1sYWJlbFwiPkFQSTo8L2xhYmVsPlxcbiAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJhcGktdXJpXCIgcGxhY2Vob2xkZXI9XCJcIiB2YWx1ZT1cIlwiIG1vZGVsPVwidXJpXCIgLz4gXFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImFwaS1sYWJlbFwiPm1ldGhvZDo8L2xhYmVsPlxcbiAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwiYXBpLW1ldGhvZFwiIG1vZGVsPVwibWV0aG9kXCI+XFxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiR0VUXCI+R0VUPC9vcHRpb24+XFxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiUE9TVFwiPlBPU1Q8L29wdGlvbj5cXG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJQQVRDSFwiPlBBVENIPC9vcHRpb24+XFxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiREVMRVRFXCI+REVMRVRFPC9vcHRpb24+XFxuICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICA8bGFiZWw+c2VjdGlvbjo8L2xhYmVsPlxcbiAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJhcGktc2VjdGlvblwiIHR5cGU9XCJ0ZXh0XCIgbW9kZWw9XCJzZWN0aW9uXCIgLz5cXG4gICAgICAgICAgPGxhYmVsIGZvcj1cIlwiPmRlc2NyaXB0aW9uOjwvbGFiZWw+XFxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImFwaS1kZXNjcmlwdGlvblwiIHR5cGU9XCJ0ZXh0XCIgbW9kZWw9XCJkZXNjcmlwdGlvblwiIC8+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYXBpLXNhdmVcIiBkYXRhLW1ldGhvZD1cIicgKyBwYXRjaE9yUG9zdChpc05ld0FwaSkgKyAnXCIgZGF0YS1hY3Rpb249XCIvYXBpcycgKyBzYXZlT3JDcmVhdGUoZGF0YSwgaXNOZXdBcGkpICsgJ1wiID4nICsgKGlzTmV3QXBpID8gJ2NyZWF0ZScgOiAnc2F2ZScpICsgJzwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJhcGktcmVzcG9uZC1wcmV2aWV3LWJ0blwiPnByZXZpZXc8L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYXBpLXdpa2lcIiBiaW5kLXRvZ2dsZS1jbGFzcyBiaW5kPVwid2lraUxpbmtcIj5cXG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJhcGktd2lraS1sYWJlbFwiPldpa2k6IDwvbGFiZWw+XFxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiYXBpLXdpa2ktaW5wdXRcIiB0eXBlPVwidGV4dFwiIG1vZGVsPVwid2lraUxpbmtcIiAvPlxcbiAgICAgICAgICA8L3NwYW4+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cImFwaS1tb2Rlcy1yb3dcIj5cXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImFwaS1tb2RlLWxhYmVsXCI+PGlucHV0IGNsYXNzPVwiYXBpLW1vZGVcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwiJyArIGFwaVVVSUQgKyAnLW1vZGVcIiB2YWx1ZT1cIjBcIj5cXHU1RjAwXFx1NTNEMTwvbGFiZWw+XFxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJhcGktbW9kZS1sYWJlbCBhcGktbW9kZS1kZWJ1Z1wiPjxpbnB1dCBjbGFzcz1cImFwaS1tb2RlXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cIicgKyBhcGlVVUlEICsgJy1tb2RlXCIgdmFsdWU9XCIxXCI+XFx1ODA1NFxcdThDMDM8aW5wdXQgY2xhc3M9XCJtb2RlLWRlYnVnZ2luZy1hZGRyXCIgdHlwZT1cInRleHRcIiAvPjwvbGFiZWw+XFxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJhcGktbW9kZS1sYWJlbFwiPjxpbnB1dCBjbGFzcz1cImFwaS1tb2RlXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cIicgKyBhcGlVVUlEICsgJy1tb2RlXCIgdmFsdWU9XCIyXCI+XFx1N0VCRlxcdTRFMEE8L2xhYmVsPlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XCJhcGktdHJlZS13cmFwcGVyXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYXBpLXRyZWUtY29udGVudC13cmFwcGVyXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJhcGktdHJlZS1jb250ZW50XCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFwaS10cmVlLWZyYW1lXCI+XFxuICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVwiYXBpLXN2Z1wiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIj48L3N2Zz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXBpLXRyZWVcIj48L2Rpdj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiYXBpLXJlc3BvbmQtcHJldmlld1wiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJldmlldy1jb250cm9sLXdyYXBwZXJcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJldmlldy1jb250cm9sXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXByZXZpZXctdHlwZSBwcmV2aWV3LXJhd1wiPnJhdzwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwZXItcHJldmlldy10eXBlIHByZXZpZXctYmVhdXRpZnlcIj5iZWF1dGlmeTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwZXItcHJldmlldy10eXBlIHByZXZpZXctaGlnaGxpZ2h0XCI+c3ludGF4SGlnaGxpZ2h0PC9zcGFuPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImRhdGEtdmlldyBqc29uXCI+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2Pic7XG5cdCAgcmV0dXJuIHRwbDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gbGVhZlRwbCgpIHtcblx0ICB2YXIgbGVhZkNvbnRlbnRUcGwgPSAnXFxuICAgIDxpIGNsYXNzPVwicmVtb3ZlLWNoaWxkXCI+LTwvaT5cXG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJsZWFmLWtleVwiIHBsYWNlaG9sZGVyPVwia2V5XCIgbW9kZWw9XCJkYXRhTmFtZVwiIC8+XFxuICAgIDxpIGNsYXNzPVwiZ2FwLW1hcmtcIj4tLS08L2k+XFxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwibGVhZi12YWx1ZVwiIHBsYWNlaG9sZGVyPVwidmFsdWVcIiBtb2RlbD1cImRhdGFWYWx1ZVwiIC8+XFxuICAgIDxzZWxlY3QgY2xhc3M9XCJsZWFmLXZhbHVlLXR5cGVcIiBtb2RlbD1cImRhdGFUeXBlXCI+XFxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiU3RyaW5nXCI+U3RyaW5nPC9vcHRpb24+XFxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiSW50ZWdlclwiPkludGVnZXI8L29wdGlvbj5cXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJGbG9hdFwiPkZsb2F0PC9vcHRpb24+XFxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiQm9vbGVhblwiPkJvb2xlYW48L29wdGlvbj5cXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJBcnJheVwiPkFycmF5PC9vcHRpb24+XFxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiSGFzaFwiPkhhc2g8L29wdGlvbj5cXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJSZWdleFwiPlJlZ2V4KHN0cmluZyk8L29wdGlvbj5cXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJGaXhlZFwiPkZpeGVkKHN0cmluZyk8L29wdGlvbj5cXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJOdWxsXCI+TnVsbDwvb3B0aW9uPlxcbiAgICA8L3NlbGVjdD5cXG4gICAgPGkgY2xhc3M9XCJnYXAtbWFya1wiPi0tLTwvaT5cXG4gICAgPGkgY2xhc3M9XCJhZGQtY2hpbGRcIj4rPC9pPlxcbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImxlYWYtcXVhbnRpdHlcIiBwbGFjZWhvbGRlcj1cInF1YW50aXR5XCIgbW9kZWw9XCJkYXRhUXVhbnRpdHlcIiAvPlxcbiAgICA8c3BhbiBjbGFzcz1cImxlYWYtaGlkZS1xdWFudGl0eVwiPjwvc3Bhbj5cXG4gICc7XG5cdCAgcmV0dXJuIGxlYWZDb250ZW50VHBsO1xuXHR9XG5cdFxuXHQvKiBkZWZhdWx0IGdldEJvdW5kaW5nUmVjdE9iaiAqL1xuXHR2YXIgaW5pdFJlY3RPYmogPSB7XG5cdCAgcmlnaHQ6IDAsXG5cdCAgYm90dG9tOiAwLFxuXHQgIGxlZnQ6IDAsXG5cdCAgdG9wOiAwLFxuXHQgIHdpZHRoOiAwLFxuXHQgIGhlaWdodDogMFxuXHR9O1xuXHRcblx0dmFyIGxlYWZEYXRhUGxhY2VIb2xkZXIgPSB7XG5cdCAgZGF0YU5hbWU6ICcnLFxuXHQgIGRhdGFUeXBlOiAnU3RyaW5nJyxcblx0ICBkYXRhVmFsdWU6ICcnLFxuXHQgIGRhdGFRdWFudGl0eTogJzEnLFxuXHQgIGhhc0NoaWxkOiBmYWxzZVxuXHR9O1xuXHRcblx0Lypcblx0c2luZ2xlIGxlYWYgd2lkdGg6IDQ2MHB4O1xuXHQgKi9cblx0dmFyIHBlckxlYWZXaWR0aCA9IDQ2MDtcblx0dmFyIHBlckxlYWZIZWlnaHQgPSAyMjtcblx0dmFyIGxlYXZlc1ZlcnRpY2FsR2FwID0gMzA7XG5cdHZhciBwZXJTVkdQYXRoV2lkdGggPSAzMDtcblx0dmFyIHJvb3ROb2RlV2lkdGggPSBwZXJTVkdQYXRoV2lkdGggKyAxNDtcblx0dmFyIGNhbGxiYWNrID0ge1xuXHQgIHBhdGNoU3VjY2VzczogZnVuY3Rpb24gcGF0Y2hTdWNjZXNzKGRhdGEpIHtcblx0ICAgIHRoaXMuYXBpUmF3RGF0YSA9IGRhdGE7XG5cdCAgICB0aGlzLmFwaURhdGFPYmogPSBKU09OLnBhcnNlKGRhdGEpLmRhdGE7XG5cdCAgICAoMCwgX2ZsYXNoLnBhcnNlQW5kRmxhc2gpKGRhdGEpO1xuXHQgIH0sXG5cdCAgcG9zdFN1Y2Nlc3M6IGZ1bmN0aW9uIHBvc3RTdWNjZXNzKGRhdGEpIHtcblx0ICAgIHRoaXMuYXBpUmF3RGF0YSA9IGRhdGE7XG5cdCAgICB0aGlzLmFwaURhdGFPYmogPSBKU09OLnBhcnNlKGRhdGEpLmRhdGE7XG5cdCAgICAoMCwgX2ZsYXNoLnBhcnNlQW5kRmxhc2gpKGRhdGEpO1xuXHQgICAgdGhpcy5hcGlDb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXNhdmUnKVswXS50ZXh0Q29udGVudCA9ICdzYXZlJztcblx0ICAgIHRoaXMuYXBpQ29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS1zYXZlJylbMF0uZGF0YXNldC5tZXRob2QgPSAnUEFUQ0gnO1xuXHQgIH0sXG5cdCAgZGVsZXRlU3VjY2VzczogZnVuY3Rpb24gZGVsZXRlU3VjY2VzcyhkYXRhKSB7XG5cdCAgICBmdW5jdGlvbiBkZXN0b3J5QXBpTGkoKSB7XG5cdCAgICAgIHRoaXMudGFyZ2V0LmNsb3Nlc3QoJy5hcGktdWwnKS5yZW1vdmVDaGlsZCh0aGlzLnRhcmdldC5jbG9zZXN0KCcuYXBpLWxpJykpO1xuXHQgICAgfVxuXHQgICAgKDAsIF9mbGFzaC5wYXJzZUFuZEZsYXNoKShkYXRhLCBkZXN0b3J5QXBpTGkuYmluZCh0aGlzKSk7XG5cdCAgfSxcblx0ICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKGRhdGEpIHt9LFxuXHQgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihkYXRhKSB7XG5cdCAgICAoMCwgX2ZsYXNoLnBhcnNlQW5kRmxhc2gpKGRhdGEpO1xuXHQgIH0sXG5cdCAgYXBpUmVzcG9uZFN1Y2Nlc3M6IGZ1bmN0aW9uIGFwaVJlc3BvbmRTdWNjZXNzKGRhdGEpIHtcblx0ICAgIHZhciBqc29uT2JqID0gSlNPTi5wYXJzZShkYXRhKTtcblx0ICAgIHRoaXMucHJldmlld0RhdGEgPSBkYXRhO1xuXHQgICAgdGhpcy5wcmV2aWV3RGF0YU9iaiA9IGpzb25PYmo7XG5cdCAgICBzd2l0Y2hQcmV2aWV3KHRoaXMucHJldmlld0RhdGFPYmosIF91dGlsaXRpZXMuaGlnaHRsaWdodEpTT04sIHRoaXMuZXZlbnRDb250ZXh0LCAnaGlnaGxpZ2h0Jyk7XG5cdCAgfVxuXHR9O1xuXHRcblx0ZnVuY3Rpb24gcGF0Y2hPclBvc3QoaXNOZXdBcGkpIHtcblx0ICByZXR1cm4gaXNOZXdBcGkgPyAnUE9TVCcgOiAnUEFUQ0gnO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBzYXZlT3JDcmVhdGUoZGF0YSwgaXNOZXdBcGkpIHtcblx0ICByZXR1cm4gaXNOZXdBcGkgPyAnJyA6ICcvJyArIGRhdGEuaWQ7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNyZWF0ZVBlckFwaShkYXRhLCBpc05ld0FwaSkge1xuXHQgIHZhciBwZXJBcGlFbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICBwZXJBcGlFbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdwZXItYXBpJyk7XG5cdCAgcGVyQXBpRWxlLmRhdGFzZXQuaWQgPSBpc05ld0FwaSA/ICcnIDogZGF0YS5pZDtcblx0ICBwZXJBcGlFbGUuaW5uZXJIVE1MID0gcGVyQXBpVHBsKGRhdGEsIGlzTmV3QXBpKTtcblx0ICBwZXJBcGlFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXVyaScpWzBdLnZhbHVlID0gaXNOZXdBcGkgPyAnJyA6IGRhdGEudXJpO1xuXHQgIHJldHVybiBwZXJBcGlFbGU7XG5cdH1cblx0ZnVuY3Rpb24gY3JlYXRlTmV3QXBpSW5pdERhdGEoKSB7XG5cdCAgdmFyIGluaXREYXRhID0ge1xuXHQgICAgbm9kZUlkOiAwLFxuXHQgICAgcGFyZW50SWQ6IG51bGwsXG5cdCAgICBkYXRhOiBsZWFmRGF0YVBsYWNlSG9sZGVyXG5cdCAgfTtcblx0ICB2YXIgZmlyc3RDaGlsZERhdGEgPSB7XG5cdCAgICBub2RlSWQ6IDEsXG5cdCAgICBwYXJlbnRJZDogMCxcblx0ICAgIGRhdGE6IGxlYWZEYXRhUGxhY2VIb2xkZXJcblx0ICB9O1xuXHQgIHJldHVybiB7XG5cdCAgICBtb2RlOiAnMCcsXG5cdCAgICBkZWJ1Z0FkZHI6ICcnLFxuXHQgICAgbm9kZXM6IFtpbml0RGF0YSwgZmlyc3RDaGlsZERhdGFdXG5cdCAgfTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gQXBpRG9tKGRhdGEsIGNvbnRhaW5lck5vZGUpIHtcblx0ICB2YXIgaXNOZXdBcGkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXHRcblx0ICBpZiAoaXNOZXdBcGkpIHtcblx0ICAgIGRhdGEgPSBjcmVhdGVOZXdBcGlJbml0RGF0YSgpO1xuXHQgIH1cblx0ICB0aGlzLmFwaURhdGFPYmogPSBkYXRhO1xuXHQgIHRoaXMuYXBpQ29udGFpbmVyID0gY29udGFpbmVyTm9kZTtcblx0ICB2YXIgcGVyQXBpRWxlID0gY3JlYXRlUGVyQXBpKGRhdGEsIGlzTmV3QXBpKTtcblx0ICB0aGlzLmFwaUNvbnRhaW5lci5hcHBlbmRDaGlsZChwZXJBcGlFbGUpO1xuXHRcblx0ICB2YXIgYXBpQmluZERhdGEgPSAoMCwgX3R3b1dheURhdGFCaW5kaW5nLnR3b1dheURhdGFCaW5kaW5nKShkYXRhLCB0aGlzLmFwaUNvbnRhaW5lcik7XG5cdCAgZGF0YSA9IGFwaUJpbmREYXRhO1xuXHRcblx0ICB0aGlzLmFwaUVsZSA9IHRoaXMuYXBpQ29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Blci1hcGknKVswXTtcblx0XG5cdCAgdGhpcy5sZWFmSW5kZXggPSAxO1xuXHRcblx0ICB0aGlzLiRhcGlUcmVlID0gdGhpcy5hcGlFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXRyZWUnKVswXTtcblx0ICB0aGlzLiRhcGlUcmVlRnJhbWUgPSB0aGlzLmFwaUVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktdHJlZS1mcmFtZScpWzBdO1xuXHQgIHRoaXMuJGFwaVRyZWVDb250ZW50ID0gdGhpcy5hcGlFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXRyZWUtY29udGVudCcpWzBdO1xuXHQgIC8vIGlmIChpc05ld0FwaSkge1xuXHQgIC8vICAgdGhpcy5pbml0QXBpVHJlZSgpO1xuXHQgIC8vICAgdGhpcy5jYWxjRGltZW5zaW9ucygpO1xuXHQgIC8vIH0gZWxzZSB7XG5cdCAgdGhpcy5yZW5kZXJFeGlzdFRyZWUoZGF0YSk7XG5cdCAgLy8gfVxuXHRcblx0ICB0aGlzLmFwaVJldHVybkRhdGEgPSAnJztcblx0XG5cdCAgdGhpcy5hcGlFbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBiaW5kRXZlbnQuYmluZCh0aGlzKSk7XG5cdCAgdGhpcy5zZXRNb2RlVmFsKGRhdGEubW9kZSk7XG5cdCAgdGhpcy5zZXREZWJ1Z0FkZHIoZGF0YS5kZWJ1Z0FkZHIpO1xuXHQgIHRoaXMuc2Nyb2xsQmFyID0gKDAsIF9zY3JvbGwuc2Nyb2xsQmFySCkoe1xuXHQgICAgd3JhcHBlcjogdGhpcy5hcGlDb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXRyZWUtd3JhcHBlcicpWzBdLFxuXHQgICAgY29udGVudDogdGhpcy5hcGlDb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXRyZWUtY29udGVudC13cmFwcGVyJylbMF0sXG5cdCAgICBvdmVyZmxvd0VsZTogdGhpcy5hcGlDb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXRyZWUtY29udGVudCcpWzBdXG5cdCAgfSk7XG5cdH1cblx0XG5cdEFwaURvbS5wcm90b3R5cGUucmVuZGVyRXhpc3RUcmVlID0gZnVuY3Rpb24gKGRhdGEpIHtcblx0ICB2YXIgZG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XG5cdCAgdmFyIHBlclRXREJBcnIgPSBbXTtcblx0ICBpZiAoZGF0YS5ub2RlcyAmJiBkYXRhLm5vZGVzLmxlbmd0aCkge1xuXHQgICAgdmFyIG5vZGVzQXJyID0gZGF0YS5ub2Rlcztcblx0ICAgIHZhciBub2RlRGF0YSA9IHt9O1xuXHQgICAgdmFyIGxlYWYgPSB2b2lkIDA7XG5cdCAgICB2YXIgbGVhZkRhdGEgPSB7fTtcblx0ICAgIHZhciBwZXJUV0RCID0gdm9pZCAwO1xuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG5vZGVzQXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgIGxlYWYgPSB1bmRlZmluZWQ7XG5cdCAgICAgIGxlYWYgPSBnZW5lcmF0ZUxlYWYoZGF0YS5ub2Rlc1tpXSk7XG5cdCAgICAgIGlmIChkYXRhLm5vZGVzW2ldLmRhdGEgPT09IHVuZGVmaW5lZCB8fCBkYXRhLm5vZGVzW2ldLmRhdGEgPT09IFwiXCIpIHtcblx0ICAgICAgICBkYXRhLm5vZGVzW2ldLmRhdGEgPSBsZWFmRGF0YVBsYWNlSG9sZGVyO1xuXHQgICAgICB9O1xuXHQgICAgICBpZiAoZGF0YS5ub2Rlc1tpXS5wYXJlbnRJZCA9PT0gbnVsbCB8fCBkYXRhLm5vZGVzW2ldLnBhcmVudElkID09PSAnbnVsbCcpIGxlYWYuY2xhc3NMaXN0LmFkZCgncm9vdC1sZWFmJyk7XG5cdCAgICAgIHBlclRXREIgPSAoMCwgX3R3b1dheURhdGFCaW5kaW5nLnR3b1dheURhdGFCaW5kaW5nKShkYXRhLm5vZGVzW2ldLmRhdGEsIGxlYWYpO1xuXHQgICAgICBkYXRhLm5vZGVzW2ldLmRhdGEgPSBwZXJUV0RCO1xuXHQgICAgICBwZXJUV0RCQXJyLnB1c2gocGVyVFdEQik7XG5cdCAgICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQobGVhZik7XG5cdCAgICB9XG5cdCAgICB0aGlzLmxlYWZJbmRleCArPSBsZW4gLSAyO1xuXHQgIH1cblx0ICB0aGlzLmFwaVRyZWUgPSAoMCwgX2pzb25UcmVlQ29udmVydGVyLmpzb25Ub1RyZWUpKGRhdGEubm9kZXMpO1xuXHQgIHRoaXMuJGFwaVRyZWUuYXBwZW5kQ2hpbGQoZG9jRnJhZyk7XG5cdCAgdGhpcy5jYWxjRGltZW5zaW9ucygpO1xuXHQgIHRoaXMuZHJhd1NWRygpO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gZ2VuZXJhdGVMZWFmKG5vZGVEYXRhKSB7XG5cdCAgdmFyIG5ld0xlYWZTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXHQgIG5ld0xlYWZTcGFuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbGVhZicpO1xuXHQgIG5ld0xlYWZTcGFuLnNldEF0dHJpYnV0ZSgnYmluZCcsICdoYXNDaGlsZCcpO1xuXHQgIG5ld0xlYWZTcGFuLnNldEF0dHJpYnV0ZSgnYmluZC10b2dnbGUtY2xhc3MnLCAnJyk7XG5cdCAgbmV3TGVhZlNwYW4uZGF0YXNldC5wYXJlbnRJZCA9IG5vZGVEYXRhLnBhcmVudElkO1xuXHQgIG5ld0xlYWZTcGFuLmRhdGFzZXQubm9kZUlkID0gbm9kZURhdGEubm9kZUlkO1xuXHQgIG5ld0xlYWZTcGFuLmlubmVySFRNTCA9IGxlYWZUcGwoKTtcblx0ICBuZXdMZWFmU3Bhbi5zdHlsZVsndHJhbnNmb3JtJ10gPSAndHJhbnNsYXRlM2QoJyArIE1hdGgucm91bmQoKHBlckxlYWZXaWR0aCArIHBlclNWR1BhdGhXaWR0aCkgKiAobm9kZURhdGEuY29sdW1uIC0gMSkpICsgJ3B4LCAnICsgTWF0aC5yb3VuZChub2RlRGF0YS50b3RhbG9mZnNldHlsZXZlbCAqIChwZXJMZWFmSGVpZ2h0ICsgbGVhdmVzVmVydGljYWxHYXApKSArICdweCwgMCknO1xuXHQgIHJldHVybiBuZXdMZWFmU3Bhbjtcblx0fVxuXHRBcGlEb20ucHJvdG90eXBlLnNldERlYnVnQWRkciA9IGZ1bmN0aW9uICh2YWwpIHtcblx0ICB0aGlzLmFwaUNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtb2RlLWRlYnVnZ2luZy1hZGRyJylbMF0udmFsdWUgPSB2YWw7XG5cdH07XG5cdEFwaURvbS5wcm90b3R5cGUuc2V0TW9kZVZhbCA9IGZ1bmN0aW9uICh2YWwpIHtcblx0ICB2YXIgcmFkaW9zID0gdGhpcy5hcGlDb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLW1vZGUnKTtcblx0ICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcmFkaW9zLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICBpZiAodmFsID09PSByYWRpb3NbaV0udmFsdWUpIHtcblx0ICAgICAgcmFkaW9zW2ldLnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsIHRydWUpO1xuXHQgICAgICBicmVhaztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJhZGlvc1tpXS5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRmdW5jdGlvbiBiaW5kRXZlbnQoZXYpIHtcblx0ICAvKiBfJHRoaXMgaXMgQXBpRG9tLCB3aGlsZSB0aGlzIGlzIGl0cyB3cmFwcGVyKG9iamVjdCkuICovXG5cdCAgdmFyIF90aGlzID0gdGhpcztcblx0ICB2YXIgZXZUYXJnZXRDbGFzc0xpc3QgPSBldi50YXJnZXQuY2xhc3NMaXN0O1xuXHQgIHZhciBldmVudENvbnRleHQgPSB7IF9ldjogZXYsIGRvbUNvbnRhaW5lcjogZXYudGFyZ2V0LmNsb3Nlc3QoJy5hcGktbGknKSB9O1xuXHQgIHRoaXMuZXZlbnRDb250ZXh0ID0gZXZlbnRDb250ZXh0O1xuXHQgIGlmIChldlRhcmdldENsYXNzTGlzdC5jb250YWlucygnYXBpLXNhdmUnKSkge1xuXHQgICAgdmFyIHBhcmFtcyA9ICgwLCBfdHJlZURhdGFDb2xsZWN0LmNvbGxlY3RBcGlEYXRhKShfdGhpcy5hcGlUcmVlLCBfdGhpcy4kYXBpVHJlZSk7XG5cdCAgICBpZiAodGhpcy5hcGlEYXRhT2JqLmlkKSB7XG5cdCAgICAgICgwLCBfYWpheC4kaHR0cCkoX2NvbnN0YW50LnJvb3RBUEkgKyAnLycgKyB0aGlzLmFwaURhdGFPYmouaWQpLnBhdGNoKHBhcmFtcywgJ2FwaScpLnRoZW4oY2FsbGJhY2sucGF0Y2hTdWNjZXNzLmJpbmQodGhpcykpLmNhdGNoKGNhbGxiYWNrLmVycm9yKTtcblx0ICAgIH0gZWxzZSBpZiAoIXRoaXMuYXBpRGF0YU9iai5pZCkge1xuXHQgICAgICAoMCwgX2FqYXguJGh0dHApKF9jb25zdGFudC5yb290QVBJKS5wb3N0KHBhcmFtcywgJ2FwaScpLnRoZW4oY2FsbGJhY2sucG9zdFN1Y2Nlc3MuYmluZCh0aGlzKSkuY2F0Y2goY2FsbGJhY2suZXJyb3IpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfTtcblx0XG5cdCAgaWYgKGV2VGFyZ2V0Q2xhc3NMaXN0LmNvbnRhaW5zKCdhZGQtY2hpbGQnKSkge1xuXHQgICAgX3RoaXMuYWRkQ2hpbGQoZXYpO1xuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfTtcblx0XG5cdCAgaWYgKGV2VGFyZ2V0Q2xhc3NMaXN0LmNvbnRhaW5zKCdyZW1vdmUtY2hpbGQnKSkge1xuXHQgICAgaWYgKGV2LnRhcmdldC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygncm9vdC1sZWFmJykpIHtcblx0ICAgICAgKDAsIF9wb3B1cC5wb3B1cCkoZXYsIHt9LCBkZWxldGVBcGkuYmluZChfdGhpcywgZXYpKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIF90aGlzLmRlbE5vZGUoZXYpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfTtcblx0XG5cdCAgaWYgKGV2VGFyZ2V0Q2xhc3NMaXN0LmNvbnRhaW5zKCdhcGktcmVzcG9uZC1wcmV2aWV3LWJ0bicpKSB7XG5cdCAgICBpZiAoIXRoaXMuYXBpRGF0YU9iai5pZCkge1xuXHQgICAgICAoMCwgX2ZsYXNoLmZsYXNoKSh7IGVycm9yOiAnU2F2ZSBmaXJzdC4nIH0pO1xuXHQgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH07XG5cdCAgICB2YXIgX3BhcmFtcyA9IHsgZGF3bl91cmk6IHRoaXMuYXBpRGF0YU9iai51cmkgfTtcblx0ICAgIHZhciBjb250ZXh0ID0ge307XG5cdCAgICAoMCwgX2FqYXguJGh0dHApKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyAnL2FwaXJlc3BvbnNlJykuZ2V0KF9wYXJhbXMpLnRoZW4oY2FsbGJhY2suYXBpUmVzcG9uZFN1Y2Nlc3MuYmluZCh0aGlzKSkuY2F0Y2goY2FsbGJhY2suZXJyb3IpO1xuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfTtcblx0XG5cdCAgaWYgKGV2VGFyZ2V0Q2xhc3NMaXN0LmNvbnRhaW5zKCdhcGktd2lraS1sYWJlbCcpKSB7XG5cdCAgICBldi50YXJnZXQuY2xvc2VzdCgnLmFwaS13aWtpJykuY2xhc3NMaXN0LnRvZ2dsZSgndG9nZ2xlLXRydWUnKTtcblx0ICB9XG5cdCAgaWYgKGV2VGFyZ2V0Q2xhc3NMaXN0LmNvbnRhaW5zKCdwcmV2aWV3LXJhdycpKSB7XG5cdCAgICByZXR1cm4gc3dpdGNoUHJldmlldyh0aGlzLnByZXZpZXdEYXRhT2JqLCBKU09OLnN0cmluZ2lmeSwgdGhpcy5ldmVudENvbnRleHQsICdyYXcnKTtcblx0ICB9O1xuXHRcblx0ICBpZiAoZXZUYXJnZXRDbGFzc0xpc3QuY29udGFpbnMoJ3ByZXZpZXctYmVhdXRpZnknKSkge1xuXHQgICAgcmV0dXJuIHN3aXRjaFByZXZpZXcodGhpcy5wcmV2aWV3RGF0YU9iaiwgX3V0aWxpdGllcy5iZWF1dGlmeUpTT04sIHRoaXMuZXZlbnRDb250ZXh0LCAnYmVhdXRpZnknKTtcblx0ICB9O1xuXHRcblx0ICBpZiAoZXZUYXJnZXRDbGFzc0xpc3QuY29udGFpbnMoJ3ByZXZpZXctaGlnaGxpZ2h0JykpIHtcblx0ICAgIHJldHVybiBzd2l0Y2hQcmV2aWV3KHRoaXMucHJldmlld0RhdGFPYmosIF91dGlsaXRpZXMuaGlnaHRsaWdodEpTT04sIHRoaXMuZXZlbnRDb250ZXh0LCAnaGlnaGxpZ2h0Jyk7XG5cdCAgfTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gc3dpdGNoUHJldmlldyhkYXRhT2JqLCBmbiwgcHJldmlld0NvbnRleHQsIHByZXZpZXdUeXBlKSB7XG5cdCAgdmFyIHByZXZpZXdTdHIgPSBmbi5jYWxsKG51bGwsIGRhdGFPYmopO1xuXHQgIGpzb25WaWV3LmNhbGwocHJldmlld0NvbnRleHQuZG9tQ29udGFpbmVyLCBwcmV2aWV3U3RyKTtcblx0ICBzd2l0Y2hQcmV2aWV3U3RhdHVzKHByZXZpZXdDb250ZXh0LCBwcmV2aWV3VHlwZSk7XG5cdCAgcmV0dXJuIG51bGw7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHN3aXRjaFByZXZpZXdTdGF0dXMocHJldmlld0NvbnRleHQsIGFwcGx5VHlwZSkge1xuXHQgIHZhciBwcmV2aWV3VHlwZXMgPSBbJ3JhdycsICdiZWF1dGlmeScsICdoaWdobGlnaHQnXTtcblx0ICB2YXIgYXBpUmVzcG9uZFByZXZpZXdFbGUgPSBwcmV2aWV3Q29udGV4dC5kb21Db250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXJlc3BvbmQtcHJldmlldycpWzBdO1xuXHQgIHZhciBhcGlSZXNwb25kUHJldmlld0VsZUNsYXNzQXJyID0gYXBpUmVzcG9uZFByZXZpZXdFbGUuY2xhc3NOYW1lLnRyaW0oKS5zcGxpdCgnICcpO1xuXHQgIGFwaVJlc3BvbmRQcmV2aWV3RWxlQ2xhc3NBcnIuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG5cdCAgICB2YXIgaWR4ID0gcHJldmlld1R5cGVzLmluZGV4T2YoZWxlbWVudCk7XG5cdCAgICBpZiAoaWR4ID4gLTEpIHtcblx0ICAgICAgYXJyYXkuc3BsaWNlKGFycmF5LmluZGV4T2YoZWxlbWVudCksIDEpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgIHZhciBwcmV2aWV3VHlwZUVsZXNBcnIgPSBbXS5zbGljZS5jYWxsKHByZXZpZXdDb250ZXh0LmRvbUNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwZXItcHJldmlldy10eXBlJykpO1xuXHQgIHByZXZpZXdUeXBlRWxlc0Fyci5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCkge1xuXHQgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblx0ICB9KTtcblx0ICBwcmV2aWV3Q29udGV4dC5kb21Db250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncHJldmlldy0nICsgYXBwbHlUeXBlKVswXS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcblx0ICBhcGlSZXNwb25kUHJldmlld0VsZS5jbGFzc05hbWUgPSBhcGlSZXNwb25kUHJldmlld0VsZUNsYXNzQXJyLmpvaW4oJyAnKTtcblx0ICBhcGlSZXNwb25kUHJldmlld0VsZS5jbGFzc0xpc3QuYWRkKGFwcGx5VHlwZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFwaVNhdmUoKSB7fVxuXHRmdW5jdGlvbiBhZGRMZWFmQ2hpbGQoKSB7fVxuXHRmdW5jdGlvbiByZW1vdmVMZWFmQ2hpbGQoKSB7fVxuXHRmdW5jdGlvbiBhcGlUZXN0KCkge31cblx0ZnVuY3Rpb24ganNvblZpZXcoZGF0YSkge1xuXHQgIHZhciAkcHJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJyk7XG5cdCAgJHByZS5pbm5lckhUTUwgPSBkYXRhO1xuXHQgIHZhciAkZGF0YVZpZXdFbGUgPSB0aGlzLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2RhdGEtdmlldycpWzBdO1xuXHQgICRkYXRhVmlld0VsZS5pbm5lckhUTUwgPSAnJztcblx0ICAkZGF0YVZpZXdFbGUuYXBwZW5kQ2hpbGQoJHByZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGRlbGV0ZUFwaShldikge1xuXHQgIGlmICghdGhpcy5hcGlEYXRhT2JqLmlkKSB7XG5cdCAgICBldi50YXJnZXQuY2xvc2VzdCgnLmFwaS11bCcpLnJlbW92ZUNoaWxkKGV2LnRhcmdldC5jbG9zZXN0KCcuYXBpLWxpJykpO1xuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfTtcblx0XG5cdCAgdmFyIHBhcmFtcyA9IHt9O1xuXHQgIGNvbnNvbGUubG9nKF9jb25zdGFudC5yb290QVBJKTtcblx0ICAoMCwgX2FqYXguJGh0dHApKF9jb25zdGFudC5yb290QVBJICsgJy8nICsgdGhpcy5hcGlEYXRhT2JqLmlkKS5kZWxldGUocGFyYW1zKS50aGVuKF9jYWxsYmFja3MuY2FsbGJhY2tzLmRlbGV0ZVN1Y2Nlc3MuYmluZChldikpLmNhdGNoKF9jYWxsYmFja3MuY2FsbGJhY2tzLmVycm9yKTtcblx0fVxuXHRcblx0QXBpRG9tLnByb3RvdHlwZS5zdG9yZUFwaVJldHVybkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuXHQgIHRoaXMuYXBpUmV0dXJuRGF0YSA9IGRhdGE7XG5cdCAgdGhpcy4kZGF0YUJlYXV0aWZ5LmNsaWNrKCk7XG5cdH07XG5cdFxuXHRBcGlEb20ucHJvdG90eXBlLmluaXRBcGlUcmVlID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBpbml0RGF0YSA9IHtcblx0ICAgIG5vZGVJZDogMCxcblx0ICAgIGRhdGE6IGxlYWZEYXRhUGxhY2VIb2xkZXJcblx0ICB9O1xuXHQgIHZhciBmaXJzdENoaWxkRGF0YSA9IHtcblx0ICAgIG5vZGVJZDogMSxcblx0ICAgIGRhdGE6IGxlYWZEYXRhUGxhY2VIb2xkZXJcblx0ICB9O1xuXHQgIHRoaXMuYXBpVHJlZSA9IG5ldyBfdHJlZS5UcmVlKGluaXREYXRhKTtcblx0ICB0aGlzLmFwaVRyZWUuYWRkKGZpcnN0Q2hpbGREYXRhLCAwLCB0aGlzLmFwaVRyZWUudHJhdmVyc2VCRik7XG5cdFxuXHQgIHZhciB0cmVlRG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XG5cdCAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2sobm9kZSkge1xuXHQgICAgdmFyIGxlYWZFbGUgPSB2b2lkIDA7XG5cdCAgICB2YXIgbGVhZkJpbmREYXRhID0gdm9pZCAwO1xuXHQgICAgbm9kZS5wYXJlbnRJZCA9IG5vZGUucGFyZW50ID8gbm9kZS5wYXJlbnQubm9kZUlkIDogbnVsbDtcblx0ICAgIGxlYWZFbGUgPSBnZW5lcmF0ZUxlYWYobm9kZSk7XG5cdCAgICBsZWFmQmluZERhdGEgPSAoMCwgX3R3b1dheURhdGFCaW5kaW5nLnR3b1dheURhdGFCaW5kaW5nKShsZWFmRGF0YVBsYWNlSG9sZGVyLCBsZWFmRWxlKTtcblx0ICAgIG5vZGUuZGF0YSA9IGxlYWZCaW5kRGF0YTtcblx0ICAgIGlmIChub2RlLnBhcmVudElkID09PSBudWxsIHx8IG5vZGUucGFyZW50SWQgPT09ICdudWxsJykgbGVhZkVsZS5jbGFzc0xpc3QuYWRkKCdyb290LWxlYWYnKTtcblx0ICAgIHRyZWVEb2NGcmFnLmFwcGVuZENoaWxkKGxlYWZFbGUpO1xuXHQgIH07XG5cdFxuXHQgIHRoaXMuYXBpVHJlZS50cmF2ZXJzZUJGKGNhbGxiYWNrKTtcblx0ICB0aGlzLiRhcGlUcmVlLmFwcGVuZENoaWxkKHRyZWVEb2NGcmFnKTtcblx0XG5cdCAgcmV0dXJuIHRoaXMuYXBpVHJlZTtcblx0fTtcblx0XG5cdEFwaURvbS5wcm90b3R5cGUuZGVsTm9kZSA9IGZ1bmN0aW9uIChjdHgpIHtcblx0ICB2YXIgY3VycmVudExlYWYgPSBjdHgudGFyZ2V0LmNsb3Nlc3QoJy5sZWFmJyk7XG5cdCAgdmFyIGN1cnJlbnRJZHggPSArY3R4LnRhcmdldC5wYXJlbnROb2RlLmRhdGFzZXQubm9kZUlkO1xuXHQgIHZhciBwYXJlbnRJZHggPSArY3R4LnRhcmdldC5wYXJlbnROb2RlLmRhdGFzZXQucGFyZW50SWQgPT09IDAgPyAwIDogK2N0eC50YXJnZXQucGFyZW50Tm9kZS5kYXRhc2V0LnBhcmVudElkO1xuXHRcblx0ICB2YXIgbm9kZXNBcnIgPSB0aGlzLmFwaVRyZWUudHJhdmVyc2VEZXNjZW5kYW50cyhjdXJyZW50SWR4KTtcblx0ICB2YXIgaWR4QXJyID0gbm9kZXNBcnJUb0lkeEFycihub2Rlc0Fycik7XG5cdCAgdGhpcy5hcGlUcmVlLnJlbW92ZShjdXJyZW50SWR4LCBwYXJlbnRJZHgsIHRoaXMuYXBpVHJlZS50cmF2ZXJzZUJGKTtcblx0ICB0aGlzLnJlbW92ZU5vZGVzRnJvbURvbShpZHhBcnIpO1xuXHRcblx0ICB2YXIgb2JqID0gdGhpcy5hcGlUcmVlLmFwcGx5U3R5bGUoKTtcblx0ICB0aGlzLnN0eWxlTm9kZXMob2JqKTtcblx0ICB0aGlzLnNldFBhcmVudE5vZGVWYWwocGFyZW50SWR4KTtcblx0ICB0aGlzLnNjcm9sbEJhci5yZW5kZXIoKTtcblx0fTtcblx0QXBpRG9tLnByb3RvdHlwZS5yZW1vdmVOb2Rlc0Zyb21Eb20gPSBmdW5jdGlvbiAoYXJyKSB7XG5cdCAgdmFyIGFsbExlYXZlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuJGFwaVRyZWUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZicpKTtcblx0ICB2YXIgYWxsTGVhdmVzTGVuID0gYWxsTGVhdmVzLmxlbmd0aDtcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbExlYXZlc0xlbjsgaSsrKSB7XG5cdCAgICBpZiAoYXJyLmluZGV4T2YoK2FsbExlYXZlc1tpXS5kYXRhc2V0Lm5vZGVJZCkgIT09IC0xKSB7XG5cdCAgICAgIHRoaXMuJGFwaVRyZWUucmVtb3ZlQ2hpbGQoYWxsTGVhdmVzW2ldKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXHRmdW5jdGlvbiBub2Rlc0FyclRvSWR4QXJyKG5vZGVzQXJyKSB7XG5cdCAgdmFyIG5vZGVzQXJyTGVuID0gbm9kZXNBcnIubGVuZ3RoO1xuXHQgIHZhciBpZHhBcnIgPSBbXTtcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzQXJyTGVuOyBpKyspIHtcblx0ICAgIGlkeEFyci5wdXNoKG5vZGVzQXJyW2ldLm5vZGVJZCk7XG5cdCAgfTtcblx0ICByZXR1cm4gaWR4QXJyO1xuXHR9XG5cdFxuXHRBcGlEb20ucHJvdG90eXBlLnNldFBhcmVudE5vZGVWYWwgPSBmdW5jdGlvbiAoaWR4KSB7XG5cdCAgdmFyIGxlYXZlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuJGFwaVRyZWUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZicpKTtcblx0ICB2YXIgcXVldWUgPSB0aGlzLmFwaVRyZWUudHJhdmVyc2VEaXJlY3RDaGlsZChpZHgpO1xuXHQgIHZhciBxdWV1ZUxlbiA9IHF1ZXVlLl9uZXdlc3RJbmRleCAtIHF1ZXVlLl9vbGRlc3RJbmRleDtcblx0ICBmb3IgKHZhciBpID0gMCwgeCA9IGxlYXZlcy5sZW5ndGg7IGkgPCB4OyBpKyspIHtcblx0ICAgIGlmICgrbGVhdmVzW2ldLmRhdGFzZXQubm9kZUlkID09PSBpZHgpIHtcblx0ICAgICAgaWYgKHF1ZXVlTGVuID4gMCkge1xuXHQgICAgICAgIC8vIGxlYXZlc1tpXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsZWFmLXZhbHVlJylbMF0udmFsdWUgPSAnJztcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIC8vIGxlYXZlc1tpXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsZWFmLXZhbHVlJylbMF0udmFsdWUgPSAnJztcblx0ICAgICAgICB9O1xuXHQgICAgICBicmVhaztcblx0ICAgIH07XG5cdCAgfTtcblx0fTtcblx0XG5cdEFwaURvbS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiAoY3R4KSB7XG5cdCAgdGhpcy5sZWFmSW5kZXggPSB0aGlzLmFwaVRyZWUubWF4SWQoKSArIDE7XG5cdCAgdmFyIHBhcmVudElkZXggPSArY3R4LnRhcmdldC5wYXJlbnROb2RlLmRhdGFzZXQubm9kZUlkO1xuXHRcblx0ICB2YXIgbGVhZkNoaWxkID0gY3JlYXRlTGVhZihwYXJlbnRJZGV4LCB0aGlzLmxlYWZJbmRleCk7XG5cdCAgdmFyIGNoaWxkTW9kZWwgPSAoMCwgX3R3b1dheURhdGFCaW5kaW5nLnR3b1dheURhdGFCaW5kaW5nKShsZWFmRGF0YVBsYWNlSG9sZGVyLCBsZWFmQ2hpbGQpO1xuXHQgIHZhciBsZWFmRGF0YSA9IHtcblx0ICAgIG5vZGVJZDogdGhpcy5sZWFmSW5kZXgsXG5cdCAgICBkYXRhOiBjaGlsZE1vZGVsXG5cdCAgfTtcblx0ICB0aGlzLmFwaVRyZWUuYWRkKGxlYWZEYXRhLCBwYXJlbnRJZGV4LCB0aGlzLmFwaVRyZWUudHJhdmVyc2VCRik7XG5cdCAgdGhpcy4kYXBpVHJlZS5hcHBlbmRDaGlsZChsZWFmQ2hpbGQpO1xuXHQgIHZhciBvYmogPSB0aGlzLmFwaVRyZWUuYXBwbHlTdHlsZSgpO1xuXHQgIHRoaXMuc3R5bGVOb2RlcyhvYmopO1xuXHQgIHRoaXMuc2V0UGFyZW50Tm9kZVZhbChwYXJlbnRJZGV4KTtcblx0ICB0aGlzLnNjcm9sbEJhci5yZW5kZXIoKTtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGdlbmVyYXRlTGVhZlNwYW4ocGFyZW50SWQsIG5vZGVJbmRleCkge1xuXHQgIHZhciBuZXdMZWFmU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblx0ICBuZXdMZWFmU3Bhbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2xlYWYnKTtcblx0ICBuZXdMZWFmU3Bhbi5zZXRBdHRyaWJ1dGUoJ2JpbmQnLCAnaGFzQ2hpbGQnKTtcblx0ICBuZXdMZWFmU3Bhbi5zZXRBdHRyaWJ1dGUoJ2JpbmQtdG9nZ2xlLWNsYXNzJywgJycpO1xuXHQgIG5ld0xlYWZTcGFuLmRhdGFzZXQucGFyZW50SWQgPSBwYXJlbnRJZDtcblx0ICBuZXdMZWFmU3Bhbi5kYXRhc2V0Lm5vZGVJZCA9IG5vZGVJbmRleDtcblx0ICBuZXdMZWFmU3Bhbi5pbm5lckhUTUwgPSBsZWFmVHBsKCk7XG5cdCAgcmV0dXJuIG5ld0xlYWZTcGFuO1xuXHR9XG5cdGZ1bmN0aW9uIGNyZWF0ZUxlYWYocGFyZW50SWR4LCBub2RlSWR4KSB7XG5cdCAgcmV0dXJuIGdlbmVyYXRlTGVhZlNwYW4ocGFyZW50SWR4LCBub2RlSWR4KTtcblx0fVxuXHRBcGlEb20ucHJvdG90eXBlLnN0eWxlTm9kZXMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIGxlYXZlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuJGFwaVRyZWUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZicpKTtcblx0XG5cdCAgdmFyIGxlYXZlc0hhc2ggPSB7fTtcblx0ICBmb3IgKHZhciBpID0gMCwgbGVhdmVzTGVuID0gbGVhdmVzLmxlbmd0aDsgaSA8IGxlYXZlc0xlbjsgaSsrKSB7XG5cdCAgICBsZWF2ZXNIYXNoW2xlYXZlc1tpXS5kYXRhc2V0Lm5vZGVJZF0gPSBsZWF2ZXNbaV07XG5cdCAgfVxuXHQgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKG5vZGUpIHtcblx0ICAgIGlmIChub2RlLm5vZGVJZCA8PSAwKSByZXR1cm47XG5cdCAgICBsZWF2ZXNIYXNoW25vZGUubm9kZUlkXS5zdHlsZVsndHJhbnNmb3JtJ10gPSAndHJhbnNsYXRlM2QoJyArIE1hdGgucm91bmQoKHBlckxlYWZXaWR0aCArIHBlclNWR1BhdGhXaWR0aCkgKiAobm9kZS5jb2x1bW4gLSAxKSkgKyAncHgsICcgKyBNYXRoLnJvdW5kKG5vZGUudG90YWxvZmZzZXR5bGV2ZWwgKiAocGVyTGVhZkhlaWdodCArIGxlYXZlc1ZlcnRpY2FsR2FwKSkgKyAncHgsIDApJztcblx0ICB9O1xuXHQgIHRoaXMuYXBpVHJlZS50cmF2ZXJzZUJGKGNhbGxiYWNrKTtcblx0ICB0aGlzLmRpbWVuc2lvbkFyciA9IHRoaXMuY2FsY0RpbWVuc2lvbnMoKTtcblx0ICB0aGlzLmRyYXdTVkcoKTtcblx0fTtcblx0XG5cdC8qIHV0aWxzICovXG5cdGZ1bmN0aW9uIGNsb25lUmVjdE9iaihvYmopIHtcblx0ICByZXR1cm4ge1xuXHQgICAgdG9wOiBvYmoudG9wLFxuXHQgICAgYm90dG9tOiBvYmouYm90dG9tLFxuXHQgICAgbGVmdDogb2JqLmxlZnQsXG5cdCAgICByaWdodDogb2JqLnJpZ2h0LFxuXHQgICAgd2lkdGg6IG9iai53aWR0aCxcblx0ICAgIGhlaWdodDogb2JqLmhlaWdodFxuXHQgIH07XG5cdH1cblx0XG5cdC8qIG1hbmlwdWxhdGUgU1ZHICovXG5cdEFwaURvbS5wcm90b3R5cGUuY2xlYXJTVkcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIHN2ZyA9IHRoaXMuJGFwaVRyZWVGcmFtZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktc3ZnJylbMF07XG5cdCAgd2hpbGUgKHN2Zy5sYXN0Q2hpbGQpIHtcblx0ICAgIHN2Zy5yZW1vdmVDaGlsZChzdmcubGFzdENoaWxkKTtcblx0ICB9XG5cdH07XG5cdC8qKlxuXHQgKiBbZHJhd1NWRyBkZXNjcmlwdGlvbl1cblx0ICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRBcGlEb20ucHJvdG90eXBlLmRyYXdTVkcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgdGhpcy5jbGVhclNWRygpO1xuXHQgIHZhciB0aGF0ID0gdGhpcztcblx0ICB2YXIgc3ZnUGFydGlhbHMgPSBbXTtcblx0ICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhub2RlKSB7XG5cdCAgICBpZiAobm9kZS5wYXJlbnQgIT09IG51bGwpIHtcblx0ICAgICAgc3ZnUGFydGlhbHMucHVzaCh0aGF0LmNyZWF0ZVNpbmdsZVNWRyhub2RlLm5vZGVJZCwgbm9kZS5jb2x1bW4sIG5vZGUucGFyZW50LnRvdGFsb2Zmc2V0eWxldmVsLCBub2RlLnRvdGFsb2Zmc2V0eWxldmVsIC0gbm9kZS5wYXJlbnQudG90YWxvZmZzZXR5bGV2ZWwpKTtcblx0ICAgIH07XG5cdCAgfTtcblx0ICB0aGlzLmFwaVRyZWUudHJhdmVyc2VERihjYWxsYmFjayk7XG5cdFxuXHQgIHZhciBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgc3ZnUGFydGlhbHMubGVuZ3RoOyBpKyspIHtcblx0ICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQoc3ZnUGFydGlhbHNbaV0pO1xuXHQgIH1cblx0ICB0aGlzLiRhcGlUcmVlRnJhbWUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXN2ZycpWzBdLmFwcGVuZENoaWxkKGRvY0ZyYWcpO1xuXHR9O1xuXHRcblx0QXBpRG9tLnByb3RvdHlwZS5jcmVhdGVTaW5nbGVTVkcgPSBmdW5jdGlvbiAoaWR4LCBob3JpLCBwYXJlbnRWZXJ0LCBkdmVydCkge1xuXHRcblx0ICB2YXIgc3ZnbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuXHQgIHZhciBuZXdQYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCAncGF0aCcpO1xuXHQgIHZhciBjb250cm9sUmF0ZSA9IDAuMjtcblx0ICB2YXIgbXgsIG15LCBxeCwgcXksIHF4eCwgcXl5LCB0eCwgdHk7XG5cdCAgaG9yaSA9IGhvcmkgLSAxO1xuXHQgIGR2ZXJ0ID0gZHZlcnQ7XG5cdCAgcGFyZW50VmVydCA9IHBhcmVudFZlcnQ7XG5cdFxuXHQgIG14ID0gaG9yaSAqIDQ5MDsgLyogc2luZ2xlIGxlYWYgd2lkdGggcGx1cyBzaW5nbGUgc3ZnIHBhdGggd2lkdGggKi9cblx0ICBteSA9IHBhcmVudFZlcnQgKiA1MiArIDg7XG5cdCAgcXggPSBteCArIDEwO1xuXHQgIHF5ID0gbXk7XG5cdCAgcXh4ID0gbXggKyAxNTtcblx0ICBxeXkgPSBteSArIGR2ZXJ0IC8gMiAqIDUyO1xuXHQgIHR4ID0gbXggKyAzMDtcblx0ICB0eSA9IG15ICsgZHZlcnQgKiA1Mjtcblx0XG5cdCAgbmV3UGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsICdNICcgKyBteCArICcgJyArIG15ICsgJyBRICcgKyBxeCArICcgJyArIHF5ICsgJywgJyArIHF4eCArICcgJyArIHF5eSArICcgVCAnICsgdHggKyAnICcgKyB0eSArICcnKTtcblx0ICBuZXdQYXRoLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnYXBpLXN2Zy1wYXRoJyk7XG5cdCAgbmV3UGF0aC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWR4JywgaWR4KTtcblx0XG5cdCAgcmV0dXJuIG5ld1BhdGg7XG5cdH07XG5cdFxuXHQvKiBjYWxjdWxhdGUgZGltZW5zaW9ucyAqL1xuXHRBcGlEb20ucHJvdG90eXBlLmNhbGNEaW1lbnNpb25zID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBob3JpTWF4LFxuXHQgICAgICB2ZXJ0aWNhbE1heCxcblx0ICAgICAgaG9yaUFyciA9IFtdLFxuXHQgICAgICB2ZXJ0QXJyID0gW107XG5cdFxuXHQgIGhvcmlBcnIgPSB0aGlzLmFwaVRyZWUuZGVwdGgoKTtcblx0ICBob3JpTWF4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaG9yaUFycik7XG5cdCAgdmVydGljYWxNYXggPSB0aGlzLmFwaVRyZWUuX3Jvb3QuY2hpbGRyZW5sZXZlbDtcblx0ICB0aGlzLiRhcGlUcmVlRnJhbWUuc3R5bGUud2lkdGggPSBob3JpTWF4ICogNTIwICsgJ3B4Jztcblx0ICB0aGlzLiRhcGlUcmVlQ29udGVudC5zdHlsZS53aWR0aCA9IGhvcmlNYXggKiA1MjAgKyAncHgnO1xuXHQgIHRoaXMuJGFwaVRyZWVGcmFtZS5zdHlsZS5oZWlnaHQgPSB2ZXJ0aWNhbE1heCAqIDUyIC0gKHZlcnRpY2FsTWF4ID4gMSA/IDEwIDogMCkgKyAncHgnO1xuXHQgIHRoaXMuJGFwaVRyZWVDb250ZW50LnN0eWxlLmhlaWdodCA9IHZlcnRpY2FsTWF4ICogNTIgLSAodmVydGljYWxNYXggPiAxID8gMTAgOiAwKSArICdweCc7XG5cdCAgcmV0dXJuIFtob3JpTWF4LCB2ZXJ0aWNhbE1heF07XG5cdH07XG5cdFxuXHQvKiBjYWxjdWxhdGUgb2Zmc2V0ICovXG5cdFxuXHRBcGlEb20ucHJvdG90eXBlLm5vZGVMZWZ0T2Zmc2V0ID0gZnVuY3Rpb24gKGVsKSB7XG5cdCAgdmFyIGVsUmVjdE9iamVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHQgIHZhciBib2R5UmVjdE9iaiA9IHRoaXMuJGFwaVRyZWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdCAgdmFyIGNsb25lQm9keVJlY3RPYmogPSBjbG9uZVJlY3RPYmooYm9keVJlY3RPYmopO1xuXHQgIHZhciBjbG9uZUVsUmVjdE9iamVjdCA9IGNsb25lUmVjdE9iaihlbFJlY3RPYmplY3QpO1xuXHQgIGNsb25lRWxSZWN0T2JqZWN0LnRvcCArPSBNYXRoLmFicyhjbG9uZUJvZHlSZWN0T2JqLnRvcCk7XG5cdCAgY2xvbmVFbFJlY3RPYmplY3QuYm90dG9tICs9IE1hdGguYWJzKGNsb25lQm9keVJlY3RPYmoudG9wKTtcblx0ICBjbG9uZUVsUmVjdE9iamVjdC5sZWZ0ICs9IE1hdGguYWJzKGNsb25lQm9keVJlY3RPYmoubGVmdCk7XG5cdCAgY2xvbmVFbFJlY3RPYmplY3QucmlnaHQgKz0gTWF0aC5hYnMoY2xvbmVCb2R5UmVjdE9iai5sZWZ0KTtcblx0ICByZXR1cm4gY2xvbmVFbFJlY3RPYmplY3Q7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxNCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBpLXRyZWUvdXRpbGl0aWVzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0ZXhwb3J0cy5nZXRNYXhPZkFycmF5ID0gZ2V0TWF4T2ZBcnJheTtcblx0ZXhwb3J0cy5oYXNDbGFzcyA9IGhhc0NsYXNzO1xuXHRleHBvcnRzLmJyb3dzZXJQcmVmaXggPSBicm93c2VyUHJlZml4O1xuXHRleHBvcnRzLmdldFRyYW5zZm9ybSA9IGdldFRyYW5zZm9ybTtcblx0ZXhwb3J0cy5nZXRUcmFuc2xhdGVYID0gZ2V0VHJhbnNsYXRlWDtcblx0ZXhwb3J0cy5nZXRUcmFuc2xhdGVZID0gZ2V0VHJhbnNsYXRlWTtcblx0ZXhwb3J0cy5iZWF1dGlmeUpTT04gPSBiZWF1dGlmeUpTT047XG5cdGV4cG9ydHMuaGlnaHRsaWdodEpTT04gPSBoaWdodGxpZ2h0SlNPTjtcblx0ZnVuY3Rpb24gZ2V0TWF4T2ZBcnJheShudW1BcnJheSkge1xuXHQgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBudW1BcnJheSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGhhc0NsYXNzKGVsZW0sIGNsYXNzTmFtZSkge1xuXHQgIHJldHVybiBlbGVtLmNsYXNzTmFtZS5zcGxpdCgnICcpLmluZGV4T2YoY2xhc3NOYW1lKSA+IC0xO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBicm93c2VyUHJlZml4KCkge1xuXHQgIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSxcblx0ICAgICAgcHJlZml4ID0gJyc7XG5cdCAgcHJlZml4ID0gdWEuaW5kZXhPZignY2hyb21lJykgPj0gMCB8fCB3aW5kb3cub3BlbkRhdGFiYXNlID8gJy13ZWJraXQtJyA6IHVhLmluZGV4T2YoJ2ZpcmVmb3gnKSA+PSAwID8gJy1tb3otJyA6IHdpbmRvdy5vcGVyYSA/ICctby0nIDogZG9jdW1lbnQuYWxsICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignT3BlcmEnKSA9PT0gLTEgPyAnLW1zLScgOiAnJztcblx0ICByZXR1cm4gcHJlZml4O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZXRUcmFuc2Zvcm0oZWwpIHtcblx0ICB2YXIgdHJhbnNmb3JtID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoJy13ZWJraXQtdHJhbnNmb3JtJyk7XG5cdCAgdmFyIHJlc3VsdHMgPSB0cmFuc2Zvcm0ubWF0Y2goL21hdHJpeCg/OigzZClcXCgtezAsMX1cXGQrKD86LCAtezAsMX1cXGQrKSooPzosICgtezAsMX1cXGQrKSkoPzosICgtezAsMX1cXGQrKSkoPzosICgtezAsMX1cXGQrKSksIC17MCwxfVxcZCtcXCl8XFwoLXswLDF9XFxkKyg/OiwgLXswLDF9XFxkKykqKD86LCAoLXswLDF9XFxkKykpKD86LCAoLXswLDF9XFxkKykpXFwpKS8pO1xuXHRcblx0ICBpZiAoIXJlc3VsdHMpIHJldHVybiBbMCwgMCwgMF07XG5cdCAgaWYgKHJlc3VsdHNbMV0gPT0gJzNkJykgcmV0dXJuIHJlc3VsdHMuc2xpY2UoMiwgNSk7XG5cdFxuXHQgIHJlc3VsdHMucHVzaCgwKTtcblx0ICByZXR1cm4gcmVzdWx0cy5zbGljZSg1LCA4KTsgLy8gcmV0dXJucyB0aGUgW1gsWSxaLDFdIHZhbHVlc1xuXHR9XG5cdFxuXHQvLyBleHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRlWChlbCkge1xuXHQvLyAgIC8vIGNocm9tZSB3b24ndCB1c2UgcHJlZml4XG5cdC8vICAgLy8gdmFyIHN0eWxlX2F0dHIgPSBicm93c2VyUHJlZml4KCkgKyAndHJhbnNmb3JtJztcblx0Ly8gICB2YXIgc3R5bGVfYXR0ciA9ICd0cmFuc2Zvcm0nO1xuXHQvLyAgIHZhciB0cmFuc2Zvcm0gPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzdHlsZV9hdHRyKTtcblx0Ly8gICB2YXIgcmVzdWx0cyA9IHRyYW5zZm9ybS5tYXRjaCgvbWF0cml4KD86KDNkKVxcKC17MCwxfVxcZCsoPzosIC17MCwxfVxcZCspKig/OiwgKC17MCwxfVxcZCspKSg/OiwgKC17MCwxfVxcZCspKSg/OiwgKC17MCwxfVxcZCspKSwgLXswLDF9XFxkK1xcKXxcXCgtezAsMX1cXGQrKD86LCAtezAsMX1cXGQrKSooPzosICgtezAsMX1cXGQrKSkoPzosICgtezAsMX1cXGQrKSlcXCkpLyk7XG5cdC8vICAgaWYgKCFyZXN1bHRzKSByZXR1cm4gWzAsIDAsIDBdO1xuXHQvLyAgIGlmIChyZXN1bHRzWzFdID09PSAnM2QnKSByZXR1cm4gcmVzdWx0cy5zbGljZSgyLDUpO1xuXHQvLyAgIHJlc3VsdHMucHVzaCgwKTtcblx0Ly8gICByZXR1cm4gKyhyZXN1bHRzLnNsaWNlKDUsIDgpWzBdKTsgLy8gcmV0dXJucyB0aGUgW1gsWSxaLDFdIHZhbHVlc1xuXHQvLyB9XG5cdFxuXHRmdW5jdGlvbiBnZXRUcmFuc2xhdGVYKGVsKSB7XG5cdCAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSgnc3R5bGUnKS5zcGxpdCgndHJhbnNsYXRlM2QnKVsxXS5zcGxpdCgnLCAnKVswXS5zbGljZSgxKS5zcGxpdCgncHgnKVswXTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2V0VHJhbnNsYXRlWShvYmopIHtcblx0ICBpZiAoIXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSByZXR1cm47XG5cdCAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShvYmopLFxuXHQgICAgICB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gfHwgc3R5bGUud2Via2l0VHJhbnNmb3JtIHx8IHN0eWxlLm1velRyYW5zZm9ybTtcblx0ICB2YXIgbWF0ID0gdHJhbnNmb3JtLm1hdGNoKC9ebWF0cml4M2RcXCgoLispXFwpJC8pO1xuXHQgIGlmIChtYXQpIHJldHVybiBwYXJzZUZsb2F0KG1hdFsxXS5zcGxpdCgnLCAnKVsxM10pO1xuXHQgIG1hdCA9IHRyYW5zZm9ybS5tYXRjaCgvXm1hdHJpeFxcKCguKylcXCkkLyk7XG5cdCAgcmV0dXJuIG1hdCA/IHBhcnNlRmxvYXQobWF0WzFdLnNwbGl0KCcsICcpWzVdKSA6IDA7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZShvYmosIHByZWZpeCkge1xuXHQgIHZhciBzdHIgPSBbXTtcblx0ICBmb3IgKHZhciBwIGluIG9iaikge1xuXHQgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwKSkge1xuXHQgICAgICB2YXIgayA9IHByZWZpeCA/IHByZWZpeCArICdbJyArIHAgKyAnXScgOiBwLFxuXHQgICAgICAgICAgdiA9IG9ialtwXTtcblx0ICAgICAgc3RyLnB1c2goKHR5cGVvZiB2ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2KSkgPT09ICdvYmplY3QnID8gc2VyaWFsaXplKHYsIGspIDogZW5jb2RlVVJJQ29tcG9uZW50KGspICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHYpKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHN0ci5qb2luKCcmJyk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBbc3RyaW5naWZ5IHdpdGggNCBzcGFjZXMgYXQgZWFjaCBsZXZlbF1cblx0ICogQHBhcmFtICB7W29iamVjdF19IGpzT2JqIFtkZXNjcmlwdGlvbl1cblx0ICogQHJldHVybiB7W3N0cmluZ119ICAgICAgIFtkZXNjcmlwdGlvbl1cblx0ICogSlNPTi5zdHJpbmdpZnkoanNPYmosIG51bGwsIFwiXFx0XCIpOyAvLyBzdHJpbmdpZnkgd2l0aCB0YWJzIGluc2VydGVkIGF0IGVhY2ggbGV2ZWxcblx0ICovXG5cdGZ1bmN0aW9uIGJlYXV0aWZ5SlNPTihqc09iaikge1xuXHQgIHJldHVybiBKU09OLnN0cmluZ2lmeShqc09iaiwgbnVsbCwgNCk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBbaGlnaHRsaWdodEpTT04gd29ya3Mgb24gSlNPTiBvYmplY3QsIG5vdCBzdHJpbmddXG5cdCAqIEBwYXJhbSAge0pTT04gb2JqZWN0fSBqc29uIFtkZXNjcmlwdGlvbl1cblx0ICogQHJldHVybiB7c3RyaW5nfSAgICAgIFtkZXNjcmlwdGlvbl1cblx0ICovXG5cdGZ1bmN0aW9uIGhpZ2h0bGlnaHRKU09OKGpzb24pIHtcblx0ICBqc29uID0gSlNPTi5zdHJpbmdpZnkoanNvbiwgdW5kZWZpbmVkLCA0KTtcblx0ICBqc29uID0ganNvbi5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XG5cdCAgcmV0dXJuIGpzb24ucmVwbGFjZSgvKFwiKFxcXFx1W2EtekEtWjAtOV17NH18XFxcXFtedV18W15cXFxcXCJdKSpcIihcXHMqOik/fFxcYih0cnVlfGZhbHNlfG51bGwpXFxifC0/XFxkKyg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/KS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcblx0ICAgIHZhciBjbHMgPSAnbnVtYmVyJztcblx0ICAgIGlmICgvXlwiLy50ZXN0KG1hdGNoKSkge1xuXHQgICAgICBpZiAoLzokLy50ZXN0KG1hdGNoKSkge1xuXHQgICAgICAgIGNscyA9ICdrZXknO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGNscyA9ICdzdHJpbmcnO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2UgaWYgKC90cnVlfGZhbHNlLy50ZXN0KG1hdGNoKSkge1xuXHQgICAgICBjbHMgPSAnYm9vbGVhbic7XG5cdCAgICB9IGVsc2UgaWYgKC9udWxsLy50ZXN0KG1hdGNoKSkge1xuXHQgICAgICBjbHMgPSAnbnVsbCc7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiJyArIGNscyArICdcIj4nICsgbWF0Y2ggKyAnPC9zcGFuPic7XG5cdCAgfSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDE1ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vQWN0aW9uQ2FibGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSkge1widXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0KGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgc2xpY2UgPSBbXS5zbGljZTtcblx0XG5cdCAgdGhpcy5BY3Rpb25DYWJsZSA9IHtcblx0ICAgIElOVEVSTkFMOiB7XG5cdCAgICAgIFwibWVzc2FnZV90eXBlc1wiOiB7XG5cdCAgICAgICAgXCJ3ZWxjb21lXCI6IFwid2VsY29tZVwiLFxuXHQgICAgICAgIFwicGluZ1wiOiBcInBpbmdcIixcblx0ICAgICAgICBcImNvbmZpcm1hdGlvblwiOiBcImNvbmZpcm1fc3Vic2NyaXB0aW9uXCIsXG5cdCAgICAgICAgXCJyZWplY3Rpb25cIjogXCJyZWplY3Rfc3Vic2NyaXB0aW9uXCJcblx0ICAgICAgfSxcblx0ICAgICAgXCJkZWZhdWx0X21vdW50X3BhdGhcIjogXCIvY2FibGVcIixcblx0ICAgICAgXCJwcm90b2NvbHNcIjogW1wiYWN0aW9uY2FibGUtdjEtanNvblwiLCBcImFjdGlvbmNhYmxlLXVuc3VwcG9ydGVkXCJdXG5cdCAgICB9LFxuXHQgICAgY3JlYXRlQ29uc3VtZXI6IGZ1bmN0aW9uIGNyZWF0ZUNvbnN1bWVyKHVybCkge1xuXHQgICAgICB2YXIgcmVmO1xuXHQgICAgICBpZiAodXJsID09IG51bGwpIHtcblx0ICAgICAgICB1cmwgPSAocmVmID0gdGhpcy5nZXRDb25maWcoXCJ1cmxcIikpICE9IG51bGwgPyByZWYgOiB0aGlzLklOVEVSTkFMLmRlZmF1bHRfbW91bnRfcGF0aDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbmV3IEFjdGlvbkNhYmxlLkNvbnN1bWVyKHRoaXMuY3JlYXRlV2ViU29ja2V0VVJMKHVybCkpO1xuXHQgICAgfSxcblx0ICAgIGdldENvbmZpZzogZnVuY3Rpb24gZ2V0Q29uZmlnKG5hbWUpIHtcblx0ICAgICAgdmFyIGVsZW1lbnQ7XG5cdCAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoXCJtZXRhW25hbWU9J2FjdGlvbi1jYWJsZS1cIiArIG5hbWUgKyBcIiddXCIpO1xuXHQgICAgICByZXR1cm4gZWxlbWVudCAhPSBudWxsID8gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpIDogdm9pZCAwO1xuXHQgICAgfSxcblx0ICAgIGNyZWF0ZVdlYlNvY2tldFVSTDogZnVuY3Rpb24gY3JlYXRlV2ViU29ja2V0VVJMKHVybCkge1xuXHQgICAgICB2YXIgYTtcblx0ICAgICAgaWYgKHVybCAmJiAhL153c3M/Oi9pLnRlc3QodXJsKSkge1xuXHQgICAgICAgIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcblx0ICAgICAgICBhLmhyZWYgPSB1cmw7XG5cdCAgICAgICAgYS5ocmVmID0gYS5ocmVmO1xuXHQgICAgICAgIGEucHJvdG9jb2wgPSBhLnByb3RvY29sLnJlcGxhY2UoXCJodHRwXCIsIFwid3NcIik7XG5cdCAgICAgICAgcmV0dXJuIGEuaHJlZjtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gdXJsO1xuXHQgICAgICB9XG5cdCAgICB9LFxuXHQgICAgc3RhcnREZWJ1Z2dpbmc6IGZ1bmN0aW9uIHN0YXJ0RGVidWdnaW5nKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5kZWJ1Z2dpbmcgPSB0cnVlO1xuXHQgICAgfSxcblx0ICAgIHN0b3BEZWJ1Z2dpbmc6IGZ1bmN0aW9uIHN0b3BEZWJ1Z2dpbmcoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmRlYnVnZ2luZyA9IG51bGw7XG5cdCAgICB9LFxuXHQgICAgbG9nOiBmdW5jdGlvbiBsb2coKSB7XG5cdCAgICAgIHZhciBtZXNzYWdlcztcblx0ICAgICAgbWVzc2FnZXMgPSAxIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMCkgOiBbXTtcblx0ICAgICAgaWYgKHRoaXMuZGVidWdnaW5nKSB7XG5cdCAgICAgICAgbWVzc2FnZXMucHVzaChEYXRlLm5vdygpKTtcblx0ICAgICAgICByZXR1cm4gY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgW1wiW0FjdGlvbkNhYmxlXVwiXS5jb25jYXQoc2xpY2UuY2FsbChtZXNzYWdlcykpKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdyAhPT0gbnVsbCkge1xuXHQgICAgd2luZG93LkFjdGlvbkNhYmxlID0gdGhpcy5BY3Rpb25DYWJsZTtcblx0ICB9XG5cdFxuXHQgIGlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZSAhPT0gbnVsbCkge1xuXHQgICAgbW9kdWxlLmV4cG9ydHMgPSB0aGlzLkFjdGlvbkNhYmxlO1xuXHQgIH1cblx0fSkuY2FsbCh3aW5kb3cpO1xuXHQoZnVuY3Rpb24gKCkge1xuXHQgIHZhciBiaW5kID0gZnVuY3Rpb24gYmluZChmbiwgbWUpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdCAgfTtcblx0XG5cdCAgQWN0aW9uQ2FibGUuQ29ubmVjdGlvbk1vbml0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgY2xhbXAsIG5vdywgc2Vjb25kc1NpbmNlO1xuXHRcblx0ICAgIENvbm5lY3Rpb25Nb25pdG9yLnBvbGxJbnRlcnZhbCA9IHtcblx0ICAgICAgbWluOiAzLFxuXHQgICAgICBtYXg6IDMwXG5cdCAgICB9O1xuXHRcblx0ICAgIENvbm5lY3Rpb25Nb25pdG9yLnN0YWxlVGhyZXNob2xkID0gNjtcblx0XG5cdCAgICBmdW5jdGlvbiBDb25uZWN0aW9uTW9uaXRvcihjb25uZWN0aW9uKSB7XG5cdCAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG5cdCAgICAgIHRoaXMudmlzaWJpbGl0eURpZENoYW5nZSA9IGJpbmQodGhpcy52aXNpYmlsaXR5RGlkQ2hhbmdlLCB0aGlzKTtcblx0ICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA9IDA7XG5cdCAgICB9XG5cdFxuXHQgICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKCkpIHtcblx0ICAgICAgICB0aGlzLnN0YXJ0ZWRBdCA9IG5vdygpO1xuXHQgICAgICAgIGRlbGV0ZSB0aGlzLnN0b3BwZWRBdDtcblx0ICAgICAgICB0aGlzLnN0YXJ0UG9sbGluZygpO1xuXHQgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMudmlzaWJpbGl0eURpZENoYW5nZSk7XG5cdCAgICAgICAgcmV0dXJuIEFjdGlvbkNhYmxlLmxvZyhcIkNvbm5lY3Rpb25Nb25pdG9yIHN0YXJ0ZWQuIHBvbGxJbnRlcnZhbCA9IFwiICsgdGhpcy5nZXRQb2xsSW50ZXJ2YWwoKSArIFwiIG1zXCIpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbm5lY3Rpb25Nb25pdG9yLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICBpZiAodGhpcy5pc1J1bm5pbmcoKSkge1xuXHQgICAgICAgIHRoaXMuc3RvcHBlZEF0ID0gbm93KCk7XG5cdCAgICAgICAgdGhpcy5zdG9wUG9sbGluZygpO1xuXHQgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMudmlzaWJpbGl0eURpZENoYW5nZSk7XG5cdCAgICAgICAgcmV0dXJuIEFjdGlvbkNhYmxlLmxvZyhcIkNvbm5lY3Rpb25Nb25pdG9yIHN0b3BwZWRcIik7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLmlzUnVubmluZyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuc3RhcnRlZEF0ICE9IG51bGwgJiYgdGhpcy5zdG9wcGVkQXQgPT0gbnVsbDtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLnJlY29yZFBpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnBpbmdlZEF0ID0gbm93KCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbm5lY3Rpb25Nb25pdG9yLnByb3RvdHlwZS5yZWNvcmRDb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHRzID0gMDtcblx0ICAgICAgdGhpcy5yZWNvcmRQaW5nKCk7XG5cdCAgICAgIGRlbGV0ZSB0aGlzLmRpc2Nvbm5lY3RlZEF0O1xuXHQgICAgICByZXR1cm4gQWN0aW9uQ2FibGUubG9nKFwiQ29ubmVjdGlvbk1vbml0b3IgcmVjb3JkZWQgY29ubmVjdFwiKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLnJlY29yZERpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHRoaXMuZGlzY29ubmVjdGVkQXQgPSBub3coKTtcblx0ICAgICAgcmV0dXJuIEFjdGlvbkNhYmxlLmxvZyhcIkNvbm5lY3Rpb25Nb25pdG9yIHJlY29yZGVkIGRpc2Nvbm5lY3RcIik7XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbm5lY3Rpb25Nb25pdG9yLnByb3RvdHlwZS5zdGFydFBvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHRoaXMuc3RvcFBvbGxpbmcoKTtcblx0ICAgICAgcmV0dXJuIHRoaXMucG9sbCgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBDb25uZWN0aW9uTW9uaXRvci5wcm90b3R5cGUuc3RvcFBvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiBjbGVhclRpbWVvdXQodGhpcy5wb2xsVGltZW91dCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbm5lY3Rpb25Nb25pdG9yLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5wb2xsVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKF90aGlzKSB7XG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIF90aGlzLnJlY29ubmVjdElmU3RhbGUoKTtcblx0ICAgICAgICAgIHJldHVybiBfdGhpcy5wb2xsKCk7XG5cdCAgICAgICAgfTtcblx0ICAgICAgfSh0aGlzKSwgdGhpcy5nZXRQb2xsSW50ZXJ2YWwoKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbm5lY3Rpb25Nb25pdG9yLnByb3RvdHlwZS5nZXRQb2xsSW50ZXJ2YWwgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBpbnRlcnZhbCwgbWF4LCBtaW4sIHJlZjtcblx0ICAgICAgcmVmID0gdGhpcy5jb25zdHJ1Y3Rvci5wb2xsSW50ZXJ2YWwsIG1pbiA9IHJlZi5taW4sIG1heCA9IHJlZi5tYXg7XG5cdCAgICAgIGludGVydmFsID0gNSAqIE1hdGgubG9nKHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgKyAxKTtcblx0ICAgICAgcmV0dXJuIE1hdGgucm91bmQoY2xhbXAoaW50ZXJ2YWwsIG1pbiwgbWF4KSAqIDEwMDApO1xuXHQgICAgfTtcblx0XG5cdCAgICBDb25uZWN0aW9uTW9uaXRvci5wcm90b3R5cGUucmVjb25uZWN0SWZTdGFsZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbklzU3RhbGUoKSkge1xuXHQgICAgICAgIEFjdGlvbkNhYmxlLmxvZyhcIkNvbm5lY3Rpb25Nb25pdG9yIGRldGVjdGVkIHN0YWxlIGNvbm5lY3Rpb24uIHJlY29ubmVjdEF0dGVtcHRzID0gXCIgKyB0aGlzLnJlY29ubmVjdEF0dGVtcHRzICsgXCIsIHBvbGxJbnRlcnZhbCA9IFwiICsgdGhpcy5nZXRQb2xsSW50ZXJ2YWwoKSArIFwiIG1zLCB0aW1lIGRpc2Nvbm5lY3RlZCA9IFwiICsgc2Vjb25kc1NpbmNlKHRoaXMuZGlzY29ubmVjdGVkQXQpICsgXCIgcywgc3RhbGUgdGhyZXNob2xkID0gXCIgKyB0aGlzLmNvbnN0cnVjdG9yLnN0YWxlVGhyZXNob2xkICsgXCIgc1wiKTtcblx0ICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHRzKys7XG5cdCAgICAgICAgaWYgKHRoaXMuZGlzY29ubmVjdGVkUmVjZW50bHkoKSkge1xuXHQgICAgICAgICAgcmV0dXJuIEFjdGlvbkNhYmxlLmxvZyhcIkNvbm5lY3Rpb25Nb25pdG9yIHNraXBwaW5nIHJlb3BlbmluZyByZWNlbnQgZGlzY29ubmVjdFwiKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgQWN0aW9uQ2FibGUubG9nKFwiQ29ubmVjdGlvbk1vbml0b3IgcmVvcGVuaW5nXCIpO1xuXHQgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbi5yZW9wZW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLmNvbm5lY3Rpb25Jc1N0YWxlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgcmVmO1xuXHQgICAgICByZXR1cm4gc2Vjb25kc1NpbmNlKChyZWYgPSB0aGlzLnBpbmdlZEF0KSAhPSBudWxsID8gcmVmIDogdGhpcy5zdGFydGVkQXQpID4gdGhpcy5jb25zdHJ1Y3Rvci5zdGFsZVRocmVzaG9sZDtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLmRpc2Nvbm5lY3RlZFJlY2VudGx5ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5kaXNjb25uZWN0ZWRBdCAmJiBzZWNvbmRzU2luY2UodGhpcy5kaXNjb25uZWN0ZWRBdCkgPCB0aGlzLmNvbnN0cnVjdG9yLnN0YWxlVGhyZXNob2xkO1xuXHQgICAgfTtcblx0XG5cdCAgICBDb25uZWN0aW9uTW9uaXRvci5wcm90b3R5cGUudmlzaWJpbGl0eURpZENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpIHtcblx0ICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoX3RoaXMpIHtcblx0ICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmIChfdGhpcy5jb25uZWN0aW9uSXNTdGFsZSgpIHx8ICFfdGhpcy5jb25uZWN0aW9uLmlzT3BlbigpKSB7XG5cdCAgICAgICAgICAgICAgQWN0aW9uQ2FibGUubG9nKFwiQ29ubmVjdGlvbk1vbml0b3IgcmVvcGVuaW5nIHN0YWxlIGNvbm5lY3Rpb24gb24gdmlzaWJpbGl0eWNoYW5nZS4gdmlzYmlsaXR5U3RhdGUgPSBcIiArIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSk7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNvbm5lY3Rpb24ucmVvcGVuKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfSh0aGlzKSwgMjAwKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBub3cgPSBmdW5jdGlvbiBub3coKSB7XG5cdCAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblx0ICAgIH07XG5cdFxuXHQgICAgc2Vjb25kc1NpbmNlID0gZnVuY3Rpb24gc2Vjb25kc1NpbmNlKHRpbWUpIHtcblx0ICAgICAgcmV0dXJuIChub3coKSAtIHRpbWUpIC8gMTAwMDtcblx0ICAgIH07XG5cdFxuXHQgICAgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChudW1iZXIsIG1pbiwgbWF4KSB7XG5cdCAgICAgIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgbnVtYmVyKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiBDb25uZWN0aW9uTW9uaXRvcjtcblx0ICB9KCk7XG5cdH0pLmNhbGwod2luZG93KTtcblx0KGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgaSxcblx0ICAgICAgbWVzc2FnZV90eXBlcyxcblx0ICAgICAgcHJvdG9jb2xzLFxuXHQgICAgICByZWYsXG5cdCAgICAgIHN1cHBvcnRlZFByb3RvY29scyxcblx0ICAgICAgdW5zdXBwb3J0ZWRQcm90b2NvbCxcblx0ICAgICAgc2xpY2UgPSBbXS5zbGljZSxcblx0ICAgICAgYmluZCA9IGZ1bmN0aW9uIGJpbmQoZm4sIG1lKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHQgIH0sXG5cdCAgICAgIGluZGV4T2YgPSBbXS5pbmRleE9mIHx8IGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICAgIGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG5cdCAgICB9cmV0dXJuIC0xO1xuXHQgIH07XG5cdFxuXHQgIHJlZiA9IEFjdGlvbkNhYmxlLklOVEVSTkFMLCBtZXNzYWdlX3R5cGVzID0gcmVmLm1lc3NhZ2VfdHlwZXMsIHByb3RvY29scyA9IHJlZi5wcm90b2NvbHM7XG5cdFxuXHQgIHN1cHBvcnRlZFByb3RvY29scyA9IDIgPD0gcHJvdG9jb2xzLmxlbmd0aCA/IHNsaWNlLmNhbGwocHJvdG9jb2xzLCAwLCBpID0gcHJvdG9jb2xzLmxlbmd0aCAtIDEpIDogKGkgPSAwLCBbXSksIHVuc3VwcG9ydGVkUHJvdG9jb2wgPSBwcm90b2NvbHNbaSsrXTtcblx0XG5cdCAgQWN0aW9uQ2FibGUuQ29ubmVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIENvbm5lY3Rpb24ucmVvcGVuRGVsYXkgPSA1MDA7XG5cdFxuXHQgICAgZnVuY3Rpb24gQ29ubmVjdGlvbihjb25zdW1lcikge1xuXHQgICAgICB0aGlzLmNvbnN1bWVyID0gY29uc3VtZXI7XG5cdCAgICAgIHRoaXMub3BlbiA9IGJpbmQodGhpcy5vcGVuLCB0aGlzKTtcblx0ICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gdGhpcy5jb25zdW1lci5zdWJzY3JpcHRpb25zO1xuXHQgICAgICB0aGlzLm1vbml0b3IgPSBuZXcgQWN0aW9uQ2FibGUuQ29ubmVjdGlvbk1vbml0b3IodGhpcyk7XG5cdCAgICAgIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcblx0ICAgIH1cblx0XG5cdCAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgaWYgKHRoaXMuaXNPcGVuKCkpIHtcblx0ICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuXHQgICAgICAgIEFjdGlvbkNhYmxlLmxvZyhcIkF0dGVtcHRlZCB0byBvcGVuIFdlYlNvY2tldCwgYnV0IGV4aXN0aW5nIHNvY2tldCBpcyBcIiArIHRoaXMuZ2V0U3RhdGUoKSk7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhpc3RpbmcgY29ubmVjdGlvbiBtdXN0IGJlIGNsb3NlZCBiZWZvcmUgb3BlbmluZ1wiKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBBY3Rpb25DYWJsZS5sb2coXCJPcGVuaW5nIFdlYlNvY2tldCwgY3VycmVudCBzdGF0ZSBpcyBcIiArIHRoaXMuZ2V0U3RhdGUoKSArIFwiLCBzdWJwcm90b2NvbHM6IFwiICsgcHJvdG9jb2xzKTtcblx0ICAgICAgICBpZiAodGhpcy53ZWJTb2NrZXQgIT0gbnVsbCkge1xuXHQgICAgICAgICAgdGhpcy51bmluc3RhbGxFdmVudEhhbmRsZXJzKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMud2ViU29ja2V0ID0gbmV3IFdlYlNvY2tldCh0aGlzLmNvbnN1bWVyLnVybCwgcHJvdG9jb2xzKTtcblx0ICAgICAgICB0aGlzLmluc3RhbGxFdmVudEhhbmRsZXJzKCk7XG5cdCAgICAgICAgdGhpcy5tb25pdG9yLnN0YXJ0KCk7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoYXJnKSB7XG5cdCAgICAgIHZhciBhbGxvd1JlY29ubmVjdCwgcmVmMTtcblx0ICAgICAgYWxsb3dSZWNvbm5lY3QgPSAoYXJnICE9IG51bGwgPyBhcmcgOiB7XG5cdCAgICAgICAgYWxsb3dSZWNvbm5lY3Q6IHRydWVcblx0ICAgICAgfSkuYWxsb3dSZWNvbm5lY3Q7XG5cdCAgICAgIGlmICghYWxsb3dSZWNvbm5lY3QpIHtcblx0ICAgICAgICB0aGlzLm1vbml0b3Iuc3RvcCgpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcblx0ICAgICAgICByZXR1cm4gKHJlZjEgPSB0aGlzLndlYlNvY2tldCkgIT0gbnVsbCA/IHJlZjEuY2xvc2UoKSA6IHZvaWQgMDtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5yZW9wZW4gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBlcnJvciwgZXJyb3IxO1xuXHQgICAgICBBY3Rpb25DYWJsZS5sb2coXCJSZW9wZW5pbmcgV2ViU29ja2V0LCBjdXJyZW50IHN0YXRlIGlzIFwiICsgdGhpcy5nZXRTdGF0ZSgpKTtcblx0ICAgICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICByZXR1cm4gdGhpcy5jbG9zZSgpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuXHQgICAgICAgICAgZXJyb3IgPSBlcnJvcjE7XG5cdCAgICAgICAgICByZXR1cm4gQWN0aW9uQ2FibGUubG9nKFwiRmFpbGVkIHRvIHJlb3BlbiBXZWJTb2NrZXRcIiwgZXJyb3IpO1xuXHQgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICBBY3Rpb25DYWJsZS5sb2coXCJSZW9wZW5pbmcgV2ViU29ja2V0IGluIFwiICsgdGhpcy5jb25zdHJ1Y3Rvci5yZW9wZW5EZWxheSArIFwibXNcIik7XG5cdCAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMub3BlbiwgdGhpcy5jb25zdHJ1Y3Rvci5yZW9wZW5EZWxheSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiB0aGlzLm9wZW4oKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRQcm90b2NvbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIHJlZjE7XG5cdCAgICAgIHJldHVybiAocmVmMSA9IHRoaXMud2ViU29ja2V0KSAhPSBudWxsID8gcmVmMS5wcm90b2NvbCA6IHZvaWQgMDtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuaXNPcGVuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5pc1N0YXRlKFwib3BlblwiKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuaXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmlzU3RhdGUoXCJvcGVuXCIsIFwiY29ubmVjdGluZ1wiKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuaXNQcm90b2NvbFN1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIHJlZjE7XG5cdCAgICAgIHJldHVybiByZWYxID0gdGhpcy5nZXRQcm90b2NvbCgpLCBpbmRleE9mLmNhbGwoc3VwcG9ydGVkUHJvdG9jb2xzLCByZWYxKSA+PSAwO1xuXHQgICAgfTtcblx0XG5cdCAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5pc1N0YXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgcmVmMSwgc3RhdGVzO1xuXHQgICAgICBzdGF0ZXMgPSAxIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMCkgOiBbXTtcblx0ICAgICAgcmV0dXJuIHJlZjEgPSB0aGlzLmdldFN0YXRlKCksIGluZGV4T2YuY2FsbChzdGF0ZXMsIHJlZjEpID49IDA7XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgcmVmMSwgc3RhdGUsIHZhbHVlO1xuXHQgICAgICBmb3IgKHN0YXRlIGluIFdlYlNvY2tldCkge1xuXHQgICAgICAgIHZhbHVlID0gV2ViU29ja2V0W3N0YXRlXTtcblx0ICAgICAgICBpZiAodmFsdWUgPT09ICgocmVmMSA9IHRoaXMud2ViU29ja2V0KSAhPSBudWxsID8gcmVmMS5yZWFkeVN0YXRlIDogdm9pZCAwKSkge1xuXHQgICAgICAgICAgcmV0dXJuIHN0YXRlLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBudWxsO1xuXHQgICAgfTtcblx0XG5cdCAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5pbnN0YWxsRXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGV2ZW50TmFtZSwgaGFuZGxlcjtcblx0ICAgICAgZm9yIChldmVudE5hbWUgaW4gdGhpcy5ldmVudHMpIHtcblx0ICAgICAgICBoYW5kbGVyID0gdGhpcy5ldmVudHNbZXZlbnROYW1lXS5iaW5kKHRoaXMpO1xuXHQgICAgICAgIHRoaXMud2ViU29ja2V0W1wib25cIiArIGV2ZW50TmFtZV0gPSBoYW5kbGVyO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnVuaW5zdGFsbEV2ZW50SGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBldmVudE5hbWU7XG5cdCAgICAgIGZvciAoZXZlbnROYW1lIGluIHRoaXMuZXZlbnRzKSB7XG5cdCAgICAgICAgdGhpcy53ZWJTb2NrZXRbXCJvblwiICsgZXZlbnROYW1lXSA9IGZ1bmN0aW9uICgpIHt9O1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmV2ZW50cyA9IHtcblx0ICAgICAgbWVzc2FnZTogZnVuY3Rpb24gbWVzc2FnZShldmVudCkge1xuXHQgICAgICAgIHZhciBpZGVudGlmaWVyLCBtZXNzYWdlLCByZWYxLCB0eXBlO1xuXHQgICAgICAgIGlmICghdGhpcy5pc1Byb3RvY29sU3VwcG9ydGVkKCkpIHtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmVmMSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSksIGlkZW50aWZpZXIgPSByZWYxLmlkZW50aWZpZXIsIG1lc3NhZ2UgPSByZWYxLm1lc3NhZ2UsIHR5cGUgPSByZWYxLnR5cGU7XG5cdCAgICAgICAgc3dpdGNoICh0eXBlKSB7XG5cdCAgICAgICAgICBjYXNlIG1lc3NhZ2VfdHlwZXMud2VsY29tZTpcblx0ICAgICAgICAgICAgdGhpcy5tb25pdG9yLnJlY29yZENvbm5lY3QoKTtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9ucy5yZWxvYWQoKTtcblx0ICAgICAgICAgIGNhc2UgbWVzc2FnZV90eXBlcy5waW5nOlxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5tb25pdG9yLnJlY29yZFBpbmcoKTtcblx0ICAgICAgICAgIGNhc2UgbWVzc2FnZV90eXBlcy5jb25maXJtYXRpb246XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmlwdGlvbnMubm90aWZ5KGlkZW50aWZpZXIsIFwiY29ubmVjdGVkXCIpO1xuXHQgICAgICAgICAgY2FzZSBtZXNzYWdlX3R5cGVzLnJlamVjdGlvbjpcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9ucy5yZWplY3QoaWRlbnRpZmllcik7XG5cdCAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLm5vdGlmeShpZGVudGlmaWVyLCBcInJlY2VpdmVkXCIsIG1lc3NhZ2UpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAgb3BlbjogZnVuY3Rpb24gb3BlbigpIHtcblx0ICAgICAgICBBY3Rpb25DYWJsZS5sb2coXCJXZWJTb2NrZXQgb25vcGVuIGV2ZW50LCB1c2luZyAnXCIgKyB0aGlzLmdldFByb3RvY29sKCkgKyBcIicgc3VicHJvdG9jb2xcIik7XG5cdCAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcblx0ICAgICAgICBpZiAoIXRoaXMuaXNQcm90b2NvbFN1cHBvcnRlZCgpKSB7XG5cdCAgICAgICAgICBBY3Rpb25DYWJsZS5sb2coXCJQcm90b2NvbCBpcyB1bnN1cHBvcnRlZC4gU3RvcHBpbmcgbW9uaXRvciBhbmQgZGlzY29ubmVjdGluZy5cIik7XG5cdCAgICAgICAgICByZXR1cm4gdGhpcy5jbG9zZSh7XG5cdCAgICAgICAgICAgIGFsbG93UmVjb25uZWN0OiBmYWxzZVxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LFxuXHQgICAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoZXZlbnQpIHtcblx0ICAgICAgICBBY3Rpb25DYWJsZS5sb2coXCJXZWJTb2NrZXQgb25jbG9zZSBldmVudFwiKTtcblx0ICAgICAgICBpZiAodGhpcy5kaXNjb25uZWN0ZWQpIHtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMubW9uaXRvci5yZWNvcmREaXNjb25uZWN0KCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9ucy5ub3RpZnlBbGwoXCJkaXNjb25uZWN0ZWRcIiwge1xuXHQgICAgICAgICAgd2lsbEF0dGVtcHRSZWNvbm5lY3Q6IHRoaXMubW9uaXRvci5pc1J1bm5pbmcoKVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9LFxuXHQgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoKSB7XG5cdCAgICAgICAgcmV0dXJuIEFjdGlvbkNhYmxlLmxvZyhcIldlYlNvY2tldCBvbmVycm9yIGV2ZW50XCIpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiBDb25uZWN0aW9uO1xuXHQgIH0oKTtcblx0fSkuY2FsbCh3aW5kb3cpO1xuXHQoZnVuY3Rpb24gKCkge1xuXHQgIHZhciBzbGljZSA9IFtdLnNsaWNlO1xuXHRcblx0ICBBY3Rpb25DYWJsZS5TdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9ucyhjb25zdW1lcikge1xuXHQgICAgICB0aGlzLmNvbnN1bWVyID0gY29uc3VtZXI7XG5cdCAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuXHQgICAgfVxuXHRcblx0ICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChjaGFubmVsTmFtZSwgbWl4aW4pIHtcblx0ICAgICAgdmFyIGNoYW5uZWwsIHBhcmFtcywgc3Vic2NyaXB0aW9uO1xuXHQgICAgICBjaGFubmVsID0gY2hhbm5lbE5hbWU7XG5cdCAgICAgIHBhcmFtcyA9ICh0eXBlb2YgY2hhbm5lbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGNoYW5uZWwpKSA9PT0gXCJvYmplY3RcIiA/IGNoYW5uZWwgOiB7XG5cdCAgICAgICAgY2hhbm5lbDogY2hhbm5lbFxuXHQgICAgICB9O1xuXHQgICAgICBzdWJzY3JpcHRpb24gPSBuZXcgQWN0aW9uQ2FibGUuU3Vic2NyaXB0aW9uKHRoaXMuY29uc3VtZXIsIHBhcmFtcywgbWl4aW4pO1xuXHQgICAgICByZXR1cm4gdGhpcy5hZGQoc3Vic2NyaXB0aW9uKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3Vic2NyaXB0aW9ucy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuXHQgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuXHQgICAgICB0aGlzLmNvbnN1bWVyLmVuc3VyZUFjdGl2ZUNvbm5lY3Rpb24oKTtcblx0ICAgICAgdGhpcy5ub3RpZnkoc3Vic2NyaXB0aW9uLCBcImluaXRpYWxpemVkXCIpO1xuXHQgICAgICB0aGlzLnNlbmRDb21tYW5kKHN1YnNjcmlwdGlvbiwgXCJzdWJzY3JpYmVcIik7XG5cdCAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG5cdCAgICB9O1xuXHRcblx0ICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcblx0ICAgICAgdGhpcy5mb3JnZXQoc3Vic2NyaXB0aW9uKTtcblx0ICAgICAgaWYgKCF0aGlzLmZpbmRBbGwoc3Vic2NyaXB0aW9uLmlkZW50aWZpZXIpLmxlbmd0aCkge1xuXHQgICAgICAgIHRoaXMuc2VuZENvbW1hbmQoc3Vic2NyaXB0aW9uLCBcInVuc3Vic2NyaWJlXCIpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG5cdCAgICB9O1xuXHRcblx0ICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uIChpZGVudGlmaWVyKSB7XG5cdCAgICAgIHZhciBpLCBsZW4sIHJlZiwgcmVzdWx0cywgc3Vic2NyaXB0aW9uO1xuXHQgICAgICByZWYgPSB0aGlzLmZpbmRBbGwoaWRlbnRpZmllcik7XG5cdCAgICAgIHJlc3VsdHMgPSBbXTtcblx0ICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgc3Vic2NyaXB0aW9uID0gcmVmW2ldO1xuXHQgICAgICAgIHRoaXMuZm9yZ2V0KHN1YnNjcmlwdGlvbik7XG5cdCAgICAgICAgdGhpcy5ub3RpZnkoc3Vic2NyaXB0aW9uLCBcInJlamVjdGVkXCIpO1xuXHQgICAgICAgIHJlc3VsdHMucHVzaChzdWJzY3JpcHRpb24pO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiByZXN1bHRzO1xuXHQgICAgfTtcblx0XG5cdCAgICBTdWJzY3JpcHRpb25zLnByb3RvdHlwZS5mb3JnZXQgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG5cdCAgICAgIHZhciBzO1xuXHQgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzO1xuXHQgICAgICAgIHJlZiA9IHRoaXMuc3Vic2NyaXB0aW9ucztcblx0ICAgICAgICByZXN1bHRzID0gW107XG5cdCAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgICBzID0gcmVmW2ldO1xuXHQgICAgICAgICAgaWYgKHMgIT09IHN1YnNjcmlwdGlvbikge1xuXHQgICAgICAgICAgICByZXN1bHRzLnB1c2gocyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiByZXN1bHRzO1xuXHQgICAgICB9LmNhbGwodGhpcyk7XG5cdCAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG5cdCAgICB9O1xuXHRcblx0ICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLmZpbmRBbGwgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xuXHQgICAgICB2YXIgaSwgbGVuLCByZWYsIHJlc3VsdHMsIHM7XG5cdCAgICAgIHJlZiA9IHRoaXMuc3Vic2NyaXB0aW9ucztcblx0ICAgICAgcmVzdWx0cyA9IFtdO1xuXHQgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICBzID0gcmVmW2ldO1xuXHQgICAgICAgIGlmIChzLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcblx0ICAgICAgICAgIHJlc3VsdHMucHVzaChzKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cdCAgICB9O1xuXHRcblx0ICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLnJlbG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzLCBzdWJzY3JpcHRpb247XG5cdCAgICAgIHJlZiA9IHRoaXMuc3Vic2NyaXB0aW9ucztcblx0ICAgICAgcmVzdWx0cyA9IFtdO1xuXHQgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICBzdWJzY3JpcHRpb24gPSByZWZbaV07XG5cdCAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuc2VuZENvbW1hbmQoc3Vic2NyaXB0aW9uLCBcInN1YnNjcmliZVwiKSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cdCAgICB9O1xuXHRcblx0ICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLm5vdGlmeUFsbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGFyZ3MsIGNhbGxiYWNrTmFtZSwgaSwgbGVuLCByZWYsIHJlc3VsdHMsIHN1YnNjcmlwdGlvbjtcblx0ICAgICAgY2FsbGJhY2tOYW1lID0gYXJndW1lbnRzWzBdLCBhcmdzID0gMiA8PSBhcmd1bWVudHMubGVuZ3RoID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpIDogW107XG5cdCAgICAgIHJlZiA9IHRoaXMuc3Vic2NyaXB0aW9ucztcblx0ICAgICAgcmVzdWx0cyA9IFtdO1xuXHQgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICBzdWJzY3JpcHRpb24gPSByZWZbaV07XG5cdCAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMubm90aWZ5LmFwcGx5KHRoaXMsIFtzdWJzY3JpcHRpb24sIGNhbGxiYWNrTmFtZV0uY29uY2F0KHNsaWNlLmNhbGwoYXJncykpKSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cdCAgICB9O1xuXHRcblx0ICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGFyZ3MsIGNhbGxiYWNrTmFtZSwgaSwgbGVuLCByZXN1bHRzLCBzdWJzY3JpcHRpb24sIHN1YnNjcmlwdGlvbnM7XG5cdCAgICAgIHN1YnNjcmlwdGlvbiA9IGFyZ3VtZW50c1swXSwgY2FsbGJhY2tOYW1lID0gYXJndW1lbnRzWzFdLCBhcmdzID0gMyA8PSBhcmd1bWVudHMubGVuZ3RoID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogW107XG5cdCAgICAgIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9uID09PSBcInN0cmluZ1wiKSB7XG5cdCAgICAgICAgc3Vic2NyaXB0aW9ucyA9IHRoaXMuZmluZEFsbChzdWJzY3JpcHRpb24pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHN1YnNjcmlwdGlvbnMgPSBbc3Vic2NyaXB0aW9uXTtcblx0ICAgICAgfVxuXHQgICAgICByZXN1bHRzID0gW107XG5cdCAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICBzdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb25zW2ldO1xuXHQgICAgICAgIHJlc3VsdHMucHVzaCh0eXBlb2Ygc3Vic2NyaXB0aW9uW2NhbGxiYWNrTmFtZV0gPT09IFwiZnVuY3Rpb25cIiA/IHN1YnNjcmlwdGlvbltjYWxsYmFja05hbWVdLmFwcGx5KHN1YnNjcmlwdGlvbiwgYXJncykgOiB2b2lkIDApO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiByZXN1bHRzO1xuXHQgICAgfTtcblx0XG5cdCAgICBTdWJzY3JpcHRpb25zLnByb3RvdHlwZS5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24sIGNvbW1hbmQpIHtcblx0ICAgICAgdmFyIGlkZW50aWZpZXI7XG5cdCAgICAgIGlkZW50aWZpZXIgPSBzdWJzY3JpcHRpb24uaWRlbnRpZmllcjtcblx0ICAgICAgcmV0dXJuIHRoaXMuY29uc3VtZXIuc2VuZCh7XG5cdCAgICAgICAgY29tbWFuZDogY29tbWFuZCxcblx0ICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyXG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gU3Vic2NyaXB0aW9ucztcblx0ICB9KCk7XG5cdH0pLmNhbGwod2luZG93KTtcblx0KGZ1bmN0aW9uICgpIHtcblx0ICBBY3Rpb25DYWJsZS5TdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgZXh0ZW5kO1xuXHRcblx0ICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihjb25zdW1lciwgcGFyYW1zLCBtaXhpbikge1xuXHQgICAgICB0aGlzLmNvbnN1bWVyID0gY29uc3VtZXI7XG5cdCAgICAgIGlmIChwYXJhbXMgPT0gbnVsbCkge1xuXHQgICAgICAgIHBhcmFtcyA9IHt9O1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuaWRlbnRpZmllciA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG5cdCAgICAgIGV4dGVuZCh0aGlzLCBtaXhpbik7XG5cdCAgICB9XG5cdFxuXHQgICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5wZXJmb3JtID0gZnVuY3Rpb24gKGFjdGlvbiwgZGF0YSkge1xuXHQgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG5cdCAgICAgICAgZGF0YSA9IHt9O1xuXHQgICAgICB9XG5cdCAgICAgIGRhdGEuYWN0aW9uID0gYWN0aW9uO1xuXHQgICAgICByZXR1cm4gdGhpcy5zZW5kKGRhdGEpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5jb25zdW1lci5zZW5kKHtcblx0ICAgICAgICBjb21tYW5kOiBcIm1lc3NhZ2VcIixcblx0ICAgICAgICBpZGVudGlmaWVyOiB0aGlzLmlkZW50aWZpZXIsXG5cdCAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVyLnN1YnNjcmlwdGlvbnMucmVtb3ZlKHRoaXMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBleHRlbmQgPSBmdW5jdGlvbiBleHRlbmQob2JqZWN0LCBwcm9wZXJ0aWVzKSB7XG5cdCAgICAgIHZhciBrZXksIHZhbHVlO1xuXHQgICAgICBpZiAocHJvcGVydGllcyAhPSBudWxsKSB7XG5cdCAgICAgICAgZm9yIChrZXkgaW4gcHJvcGVydGllcykge1xuXHQgICAgICAgICAgdmFsdWUgPSBwcm9wZXJ0aWVzW2tleV07XG5cdCAgICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gb2JqZWN0O1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xuXHQgIH0oKTtcblx0fSkuY2FsbCh3aW5kb3cpO1xuXHQoZnVuY3Rpb24gKCkge1xuXHQgIEFjdGlvbkNhYmxlLkNvbnN1bWVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQ29uc3VtZXIodXJsKSB7XG5cdCAgICAgIHRoaXMudXJsID0gdXJsO1xuXHQgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgQWN0aW9uQ2FibGUuU3Vic2NyaXB0aW9ucyh0aGlzKTtcblx0ICAgICAgdGhpcy5jb25uZWN0aW9uID0gbmV3IEFjdGlvbkNhYmxlLkNvbm5lY3Rpb24odGhpcyk7XG5cdCAgICB9XG5cdFxuXHQgICAgQ29uc3VtZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLnNlbmQoZGF0YSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLm9wZW4oKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29uc3VtZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24uY2xvc2Uoe1xuXHQgICAgICAgIGFsbG93UmVjb25uZWN0OiBmYWxzZVxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29uc3VtZXIucHJvdG90eXBlLmVuc3VyZUFjdGl2ZUNvbm5lY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGlmICghdGhpcy5jb25uZWN0aW9uLmlzQWN0aXZlKCkpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLm9wZW4oKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gQ29uc3VtZXI7XG5cdCAgfSgpO1xuXHR9KS5jYWxsKHdpbmRvdyk7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uLy4uL34vd2VicGFjay9idWlsZGluL21vZHVsZS5qcyAqLyAzMCkobW9kdWxlKSkpXG5cbi8qKiovIH0sXG4vKiAxNiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi9jYWxsYmFja3MuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmNhbGxiYWNrcyA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfZmxhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ZsYXNoICovIDMpO1xuXHRcblx0dmFyIGNhbGxiYWNrcyA9IGV4cG9ydHMuY2FsbGJhY2tzID0ge1xuXHQgIGRlbGV0ZVN1Y2Nlc3M6IGZ1bmN0aW9uIGRlbGV0ZVN1Y2Nlc3MoZGF0YSkge1xuXHQgICAgZnVuY3Rpb24gZGVzdG9yeUFwaUxpKCkge1xuXHQgICAgICB0aGlzLnRhcmdldC5jbG9zZXN0KCcuYXBpLXVsJykucmVtb3ZlQ2hpbGQodGhpcy50YXJnZXQuY2xvc2VzdCgnLmFwaS1saScpKTtcblx0ICAgIH1cblx0ICAgICgwLCBfZmxhc2gucGFyc2VBbmRGbGFzaCkoZGF0YSwgZGVzdG9yeUFwaUxpLmJpbmQodGhpcykpO1xuXHQgIH0sXG5cdCAgc3VjY2VzczogZnVuY3Rpb24gc3VjY2VzcyhkYXRhKSB7fSxcblx0ICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoZGF0YSkge1xuXHQgICAgKDAsIF9mbGFzaC5wYXJzZUFuZEZsYXNoKShkYXRhKTtcblx0ICB9XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxNyAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi9oYW5kbGVNZXRob2QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmhhbmRsZU1ldGhvZCA9IGhhbmRsZU1ldGhvZDtcblx0XG5cdHZhciBfY3NyZiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NvbW1vbi9jc3JmICovIDYpO1xuXHRcblx0LyoqXG5cdCAqIFtoYW5kbGVNZXRob2QgZGVzY3JpcHRpb25dXG5cdCAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBsaW5rIFtkZXNjcmlwdGlvbl1cblx0ICogQHJldHVybiB7W3R5cGVdfSAgICAgIFtkZXNjcmlwdGlvbl1cblx0ICogSGFuZGxlcyBcImRhdGEtbWV0aG9kXCIgb24gbGlua3Mgc3VjaCBhczpcblx0ICogPGEgaHJlZj1cIi91c2Vycy81XCIgZGF0YS1tZXRob2Q9XCJkZWxldGVcIiByZWw9XCJub2ZvbGxvd1wiIGRhdGEtY29uZmlybT1cIkFyZSB5b3Ugc3VyZT9cIj5EZWxldGU8L2E+XG5cdCAqL1xuXHRmdW5jdGlvbiBoYW5kbGVNZXRob2QobGluaykge1xuXHQgIHZhciBvYmogPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXHRcblx0ICB2YXIgaHJlZiA9IGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJyksXG5cdCAgICAgIG1ldGhvZCA9IGxpbmsuZGF0YXNldC5tZXRob2QsXG5cdCAgICAgIHRhcmdldCA9IGxpbmsuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKSxcblx0ICAgICAgY3NyZlRva2VuID0gX2NzcmYucm9yUGFyYW1zLmNzcmZUb2tlbigpLFxuXHQgICAgICBjc3JmUGFyYW0gPSBfY3NyZi5yb3JQYXJhbXMuY3NyZlBhcmFtKCk7XG5cdCAgdmFyIHBhcmFtc09iaiA9IHtcblx0ICAgIGhyZWY6IGhyZWYsXG5cdCAgICBtZXRob2Q6IG1ldGhvZCxcblx0ICAgIHRhcmdldDogdGFyZ2V0LFxuXHQgICAgY3NyZlRva2VuOiBjc3JmVG9rZW4sXG5cdCAgICBjc3JmUGFyYW06IGNzcmZQYXJhbVxuXHQgIH07XG5cdCAgdmFyIGZvcm1FbGUgPSBjcmVhdGVGb3JtKHBhcmFtc09iaiwgb2JqKTtcblx0ICBhcHBlbmRGb3JtVG9Eb20oZm9ybUVsZSk7XG5cdCAgc3VibWl0Rm9ybShmb3JtRWxlKTtcblx0fVxuXHRmdW5jdGlvbiBjcmVhdGVGb3JtKHBhcmFtcywgb2JqKSB7XG5cdCAgdmFyIGYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG5cdCAgZi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHQgIGYuc2V0QXR0cmlidXRlKCdtZXRob2QnLCAncG9zdCcpO1xuXHQgIGYuc2V0QXR0cmlidXRlKCdhY3Rpb24nLCBwYXJhbXMuaHJlZik7XG5cdCAgaWYgKHBhcmFtcy50YXJnZXQpIHtcblx0ICAgIGYuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCBwYXJhbXMudGFyZ2V0KTtcblx0ICB9O1xuXHRcblx0ICB2YXIgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG5cdCAgaS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnaGlkZGVuJyk7XG5cdCAgaS5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAnX21ldGhvZCcpO1xuXHQgIGkuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHBhcmFtcy5tZXRob2QpO1xuXHRcblx0ICB2YXIgcztcblx0ICBpZiAocGFyYW1zLmNzcmZQYXJhbSAhPT0gdW5kZWZpbmVkICYmIHBhcmFtcy5jc3JmVG9rZW4gIT09IHVuZGVmaW5lZCAmJiAhX2NzcmYucm9yUGFyYW1zLmlzQ3Jvc3NEb21haW4ocGFyYW1zLmhyZWYpKSB7XG5cdCAgICBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblx0ICAgIHMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2hpZGRlbicpO1xuXHQgICAgcy5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBwYXJhbXMuY3NyZlBhcmFtKTtcblx0ICAgIHMuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHBhcmFtcy5jc3JmVG9rZW4pO1xuXHQgIH1cblx0ICBmLmFwcGVuZENoaWxkKGkpO1xuXHRcblx0ICAvLyBmb3IgKGxldCBrZXkgaW4gb2JqLmRhdGEpIHtcblx0ICAvLyAgIGlmIChvYmouZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgLy8gICAgIGxldCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblx0ICAvLyAgICAgdC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCdoaWRkZW4nKTtcblx0ICAvLyAgICAgdC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCcnICsgb2JqLm5zICsgJ1snICsga2V5ICsgJ10nKTtcblx0ICAvLyAgICAgdC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJyxvYmouZGF0YVtrZXldKTtcblx0ICAvLyAgICAgZi5hcHBlbmRDaGlsZCh0KTtcblx0ICAvLyAgIH1cblx0ICAvLyB9XG5cdFxuXHQgIGlmIChzKSB7XG5cdCAgICBmLmFwcGVuZENoaWxkKHMpO1xuXHQgIH07XG5cdCAgcmV0dXJuIGY7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFwcGVuZEZvcm1Ub0RvbShmb3JtKSB7XG5cdCAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblx0fVxuXHRmdW5jdGlvbiBzdWJtaXRGb3JtKGZvcm0pIHtcblx0ICBmb3JtLnN1Ym1pdCgpO1xuXHR9XG5cbi8qKiovIH0sXG4vKiAxOCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vaHRtbEVzY2FwZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmh0bWxFc2NhcGUgPSBodG1sRXNjYXBlO1xuXHRmdW5jdGlvbiBodG1sRXNjYXBlKHN0cikge1xuXHQgIHN0ciA9ICcnICsgc3RyOyAvLyBmb3IgbnVtYmVycyBldGMuXG5cdCAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mL2csICcmYW1wOycpIC8vIGZpcnN0IVxuXHQgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKS5yZXBsYWNlKC8nL2csICcmIzM5OycpLnJlcGxhY2UoL2AvZywgJyYjOTY7Jyk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDE5ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL3Njcm9sbC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuc2Nyb2xsQmFySCA9IHNjcm9sbEJhckg7XG5cdFxuXHR2YXIgX3V0aWxpdGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbGl0aWVzICovIDEpO1xuXHRcblx0ZnVuY3Rpb24gZ2VuZXJhdGVTY3JvbGxTdHIoKSB7XG5cdCAgdmFyIHNjcm9sbFN0ciA9ICdcXG4gICAgPGRpdiBjbGFzcz1cIm9wdWktc2Nyb2xsLWN0cmwtc2Nyb2xsXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwib3B1aS1zY3JvbGwtYXhpc1wiPjwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cIm9wdWktc2Nyb2xsLXNsaWRlclwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcHVpLXNjcm9sbC1zLXRvcFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcHVpLXNjcm9sbC1zLWJvdHRvbVwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcHVpLXNjcm9sbC1zLWJsb2NrXCI+PC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgICc7XG5cdCAgcmV0dXJuIHNjcm9sbFN0cjtcblx0fVxuXHRcblx0ZnVuY3Rpb24gc2Nyb2xsQmFySChiKSB7XG5cdCAgcmV0dXJuIG5ldyBhKGIpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhKHgpIHtcblx0ICB2YXIgcSA9IHRoaXM7XG5cdCAgdGhpcy5vcHRpb25zID0geDtcblx0ICB2YXIgbmV3U2Nyb2xsU3RyID0gZ2VuZXJhdGVTY3JvbGxTdHIoKTtcblx0ICB2YXIgbmV3U2Nyb2xsRWxlID0gKDAsIF91dGlsaXRpZXMuc3RyVG9Eb20pKG5ld1Njcm9sbFN0cik7XG5cdCAgdmFyIFkgPSB4LnNjcm9sbGJhciB8fCBuZXdTY3JvbGxFbGUsXG5cdCAgICAgIGogPSB4LmNvbnRlbnQsXG5cdCAgICAgIE4gPSB4Lm92ZXJmbG93RWxlLFxuXHQgICAgICBpID0geC5pbml0UG9zIHx8IDAsXG5cdCAgICAgIE0gPSB4LmluaXREb20gfHwgbnVsbCxcblx0ICAgICAgVSA9IHgubW91c2V3aGVlbCB8fCB0cnVlLFxuXHQgICAgICBsID0geC5tb3VzZXdoZWVsbG9jayB8fCBmYWxzZSxcblx0ICAgICAgSCA9IHgud2hlZWxkZWx0YSB8fCAxLFxuXHQgICAgICB6ID0geC5jdHJsYmxvY2sgfHwgMCxcblx0ICAgICAgSiA9IHguc3RlcCB8fCAwLjEsXG5cdCAgICAgIHIgPSB4Lmxlbmd0aCxcblx0ICAgICAgSSA9IHguc2NhbGUgfHwgMCxcblx0ICAgICAgRyA9IHgudGhlbWUgfHwgJycsXG5cdCAgICAgIGFkID0geC5yZWZyZXNoIHx8IGZhbHNlO1xuXHQgIHZhciBTID0gMCxcblx0ICAgICAgVCA9IDAsXG5cdCAgICAgIGggPSAwLFxuXHQgICAgICBWID0gZnVuY3Rpb24gVihhZykge1xuXHQgICAgdmFyIGFmID0gcGFyc2VJbnQoUyAtIFQpO1xuXHQgICAgaWYgKGFmID4gMCkge1xuXHQgICAgICB2YXIgYWcgPSBhZy52YWx1ZTtcblx0ICAgICAgai5zY3JvbGxMZWZ0ID0gYWYgKiBhZztcblx0ICAgIH1cblx0ICB9LFxuXHQgICAgICB2ID0gbmV3U2Nyb2xsRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ29wdWktc2Nyb2xsLWF4aXMnKVswXSxcblx0ICAgICAgZyA9IG5ld1Njcm9sbEVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdvcHVpLXNjcm9sbC1zbGlkZXInKVswXSxcblx0ICAgICAgdSA9IG5ld1Njcm9sbEVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdvcHVpLXNjcm9sbC1zLXRvcCcpWzBdLFxuXHQgICAgICBGID0gbmV3U2Nyb2xsRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ29wdWktc2Nyb2xsLXMtYm90dG9tJylbMF0sXG5cdCAgICAgIGFlID0gbmV3U2Nyb2xsRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ29wdWktc2Nyb2xsLXMtYmxvY2snKVswXSxcblx0ICAgICAgVyA9IDAsXG5cdCAgICAgIFEgPSB6IHx8IDAsXG5cdCAgICAgIGsgPSAwLFxuXHQgICAgICBSID0gUSxcblx0ICAgICAgbSA9IDAsXG5cdCAgICAgIEMgPSAwLFxuXHQgICAgICBMID0gMCxcblx0ICAgICAgZCA9IDAsXG5cdCAgICAgIHQgPSBudWxsLFxuXHQgICAgICBiID0gbnVsbCxcblx0ICAgICAgYWIsXG5cdCAgICAgIFAsXG5cdCAgICAgIEQ7XG5cdCAgdmFyIHkgPSBmdW5jdGlvbiB5KCkge1xuXHQgICAgWCA9IGZhbHNlO1xuXHQgICAgYyA9IGZhbHNlO1xuXHQgIH07XG5cdCAgaWYgKCF4LnNjcm9sbGJhcikge1xuXHQgICAgeC53cmFwcGVyLmFwcGVuZENoaWxkKG5ld1Njcm9sbEVsZSk7XG5cdCAgfVxuXHQgIGouY2xhc3NMaXN0LmFkZCgnb3B1aS1zY3JvbGwtY3RybC1jb250ZW50Jyk7XG5cdCAgWS5jbGFzc0xpc3QuYWRkKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbCcpO1xuXHQgIHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKGFnKSB7XG5cdCAgICBpZiAoIWFkKSB7XG5cdCAgICAgIGNsZWFySW50ZXJ2YWwoRCk7XG5cdCAgICB9XG5cdCAgICB0cnkge1xuXHQgICAgICBUID0gai5vZmZzZXRXaWR0aDtcblx0ICAgICAgaCA9IFkub2Zmc2V0V2lkdGg7XG5cdCAgICAgIFMgPSBOLm9mZnNldFdpZHRoO1xuXHQgICAgfSBjYXRjaCAoYWgpIHt9XG5cdCAgICBXID0gYWcgfHwgciB8fCBUIC0gMjtcblx0ICAgIFkuc3R5bGUud2lkdGggPSBXICsgJ3B4Jztcblx0ICAgIHYuc3R5bGUud2lkdGggPSBXICsgJ3B4Jztcblx0ICAgIGlmIChXID49IDAgJiYgUyA+PSAwKSB7XG5cdCAgICAgIGlmIChTIDw9IFcgKyAyKSB7XG5cdCAgICAgICAgWS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIFkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKEkgIT0gUyAvIFcpIHtcblx0ICAgICAgICBJID0gUyAvIFc7XG5cdCAgICAgICAgbyhJKTtcblx0ICAgICAgICBaKHEubWVtT2Zmc2V0WCk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGFmID0gMDtcblx0ICAgICAgaWYgKE0pIHtcblx0ICAgICAgICBpZiAoTS5vZmZzZXRMZWZ0ICsgTS5zY3JvbGxXaWR0aCA+PSBTKSB7XG5cdCAgICAgICAgICBhZiA9IDE7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGlmIChNLm9mZnNldExlZnQgKyBNLnNjcm9sbFdpZHRoIDw9IFQpIHtcblx0ICAgICAgICAgICAgYWYgPSAwO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgYWYgPSBNLm9mZnNldExlZnQgLyBTO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zb2xlLmxvZyhhZik7XG5cdCAgICAgICAgWihhZik7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGkpIHtcblx0ICAgICAgICBjb25zb2xlLmxvZyhpKTtcblx0ICAgICAgICBaKGkpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblx0ICBEID0gc2V0SW50ZXJ2YWwodGhpcy5yZW5kZXIsIDUwKTtcblx0ICAvLyBZLmlubmVySFRNTCA9ICcnO1xuXHRcblx0ICBnLm9uRHJhZ3N0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH07XG5cdCAgZy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoKSB7XG5cdCAgICBnLmNsYXNzTGlzdC5hZGQoJ29wdWktc2Nyb2xsLXNsaWRlci1ob3ZlcicpO1xuXHQgICAgWS5jbGFzc0xpc3QuYWRkKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC1ob3ZlcicpO1xuXHQgIH0pO1xuXHQgIGcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKCkge1xuXHQgICAgZy5jbGFzc0xpc3QuYWRkKCdvcHVpLXNjcm9sbC1zbGlkZXItdG91Y2gnKTtcblx0ICAgIFkuY2xhc3NMaXN0LmFkZCgnb3B1aS1zY3JvbGwtY3RybC1zY3JvbGwtdG91Y2gnKTtcblx0ICB9KTtcblx0ICBnLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgZnVuY3Rpb24gKCkge1xuXHQgICAgZy5jbGFzc0xpc3QucmVtb3ZlKCdvcHVpLXNjcm9sbC1zbGlkZXItaG92ZXInKTtcblx0ICB9KTtcblx0ICBnLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICBnLmNsYXNzTGlzdC5yZW1vdmUoJ29wdWktc2Nyb2xsLXNsaWRlci10b3VjaCcpO1xuXHQgIH0pO1xuXHQgIFkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgZnVuY3Rpb24gKCkge1xuXHQgICAgWS5jbGFzc0xpc3QuYWRkKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC1ob3ZlcicpO1xuXHQgIH0pO1xuXHQgIFkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKCkge1xuXHQgICAgWS5jbGFzc0xpc3QuYWRkKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC10b3VjaCcpO1xuXHQgIH0pO1xuXHQgIFkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICBZLmNsYXNzTGlzdC5yZW1vdmUoJ29wdWktc2Nyb2xsLWN0cmwtc2Nyb2xsLWhvdmVyJyk7XG5cdCAgfSk7XG5cdCAgWS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZnVuY3Rpb24gKCkge1xuXHQgICAgWS5jbGFzc0xpc3QucmVtb3ZlKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC10b3VjaCcpO1xuXHQgIH0pO1xuXHQgIHYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzKTtcblx0ICBpZiAoVSAmJiAhdGhpcy5vbndoZWVsKSB7XG5cdCAgICBpZiAoIWouY2xhc3NMaXN0LmNvbnRhaW5zKCdvcHVpLXNjcm9sbC1vbndoZWVsJykpIHtcblx0ICAgICAgai5hZGRFdmVudExpc3RlbmVyKCdET01Nb3VzZVNjcm9sbCcsIHApO1xuXHQgICAgICBqLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCBwKTtcblx0ICAgICAgai5jbGFzc0xpc3QuYWRkKCdvcHVpLXNjcm9sbC1vbndoZWVsJyk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGlmIChqKSB7XG5cdCAgICBqLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgaWYgKCFkKSB7XG5cdCAgICAgICAgWihqLnNjcm9sbExlZnQgLyAoai5zY3JvbGxXaWR0aCAtIGoub2Zmc2V0V2lkdGgpLCAxKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfVxuXHRcblx0ICBnLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uIChhZikge1xuXHQgICAgdCA9IGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQ7XG5cdCAgICBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9O1xuXHQgICAgYiA9IHdpbmRvdy5zZXRJbnRlcnZhbChuLCA0MCk7XG5cdCAgICBOLnN0eWxlWyctbW96LXVzZXItc2VsZWN0J10gPSAnbm9uZSc7XG5cdCAgICBOLnN0eWxlWyctd2Via2l0LXVzZXItc2VsZWN0J10gPSAnbm9uZSc7XG5cdFxuXHQgICAgTCA9IGFmLmNsaWVudFggLSBnLm9mZnNldExlZnQ7XG5cdCAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmKTtcblx0ICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBhYSk7XG5cdCAgICBkID0gMTtcblx0ICAgIGFmLnByZXZlbnREZWZhdWx0KCk7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfSk7XG5cdCAgZnVuY3Rpb24gSyhhZywgYWgsIGFmKSB7XG5cdCAgICBpZiAoYWYpIHtcblx0ICAgICAgYWcgPSBhZyA+IGFmID8gYWYgOiBhZztcblx0ICAgIH1cblx0ICAgIHJldHVybiBhZyA+PSBhaCA/IGFnIDogYWg7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIG4oKSB7XG5cdCAgICBWLmNhbGwod2luZG93LCB7XG5cdCAgICAgIHZhbHVlOiBDLFxuXHQgICAgICBzY2FsZTogSVxuXHQgICAgfSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIE8oKSB7XG5cdCAgICBpZiAoYWIpIHtcblx0ICAgICAgY2xlYXJJbnRlcnZhbChhYik7XG5cdCAgICB9XG5cdCAgICBFKCk7XG5cdCAgICBhYiA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgaWYgKFgpIHtcblx0ICAgICAgICBFKCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgY2xlYXJJbnRlcnZhbChhYik7XG5cdCAgICAgIH1cblx0ICAgIH0sIDEwMCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGFjKCkge1xuXHQgICAgaWYgKFApIHtcblx0ICAgICAgY2xlYXJJbnRlcnZhbChQKTtcblx0ICAgIH1cblx0ICAgIEIoKTtcblx0ICAgIFAgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGlmIChjKSB7XG5cdCAgICAgICAgQigpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGNsZWFySW50ZXJ2YWwoUCk7XG5cdCAgICAgIH1cblx0ICAgIH0sIDEwMCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIEUoKSB7XG5cdCAgICB2YXIgYWYgPSBDIC0gSjtcblx0ICAgIGFmID0gYWYgPCAwID8gMCA6IGFmO1xuXHQgICAgWihhZik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIEIoKSB7XG5cdCAgICB2YXIgYWYgPSBDICsgSjtcblx0ICAgIGFmID0gYWYgPiAxID8gMSA6IGFmO1xuXHQgICAgWihhZik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGYoYWYpIHtcblx0ICAgIGFmID0gd2luZG93LmV2ZW50IHx8IGFmO1xuXHQgICAgdmFyIGFnID0gSyhhZi5jbGllbnRYIC0gTCwgUiwgbSk7XG5cdCAgICBDID0gKGFnIC0gUikgLyAobSAtIFIpO1xuXHQgICAgZy5zdHlsZS5sZWZ0ID0gYWcgKyAncHgnO1xuXHQgICAgcS5tZW1PZmZzZXRYID0gYWc7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGFhKCkge1xuXHQgICAgWS5jbGFzc0xpc3QucmVtb3ZlKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC1ob3ZlcicpO1xuXHQgICAgWS5jbGFzc0xpc3QucmVtb3ZlKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC10b3VjaCcpO1xuXHQgICAgZy5jbGFzc0xpc3QucmVtb3ZlKCdvcHVpLXNjcm9sbC1zbGlkZXItaG92ZXInKTtcblx0ICAgIGcuY2xhc3NMaXN0LnJlbW92ZSgnb3B1aS1zY3JvbGwtc2xpZGVyLXRvdWNoJyk7XG5cdCAgICBOLnN0eWxlWyctbW96LXVzZXItc2VsZWN0J10gPSAnJztcblx0ICAgIE4uc3R5bGVbJy13ZWJraXQtdXNlci1zZWxlY3QnXSA9ICcnO1xuXHQgICAgaWYgKGIpIHtcblx0ICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoYik7XG5cdCAgICB9XG5cdCAgICBpZiAodCkge1xuXHQgICAgICBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmKTtcblx0ICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBhYSk7XG5cdCAgICBnLmNsYXNzTGlzdC5hZGQoJ29wdWktc2Nyb2xsLXNsaWRlcicpO1xuXHQgICAgZCA9IDA7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIHMoYWYpIHtcblx0ICAgIFooKGFmLm9mZnNldFggfHwgYWYubGF5ZXJYKSAvIFcpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBaKGFoLCBhZikge1xuXHQgICAgYWggPSBhaCA8IDAgPyAwIDogYWg7XG5cdCAgICBhaCA9IGFoID4gMSA/IDEgOiBhaDtcblx0ICAgIEMgPSBhaDtcblx0ICAgIHZhciBhZyA9IChtIC0gUikgKiBDICsgUjtcblx0ICAgIGcuc3R5bGUubGVmdCA9IGFnICsgJ3B4Jztcblx0ICAgIHEubWVtT2Zmc2V0WCA9IGFnO1xuXHQgICAgaWYgKCFhZikge1xuXHQgICAgICBuKCk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIHAoYWYpIHtcblx0ICAgIC8vIGFmLnByZXZlbnREZWZhdWx0KCk7XG5cdCAgICAvLyBhZiA9IGFmLm9yaWdpbmFsRXZlbnQ7XG5cdCAgICAvLyBpZiAoYWYpIHtcblx0ICAgIC8vICAgdGhpcy5vbndoZWVsID0gMTtcblx0ICAgIC8vICAgdmFyIGFpID0gKC1hZi53aGVlbERlbHRhIHx8IChhZi5kZXRhaWwgJiYgYWYuZGV0YWlsICogNDApIHx8IDApIC8gSDtcblx0ICAgIC8vICAgdmFyIGFoID0gYWk7XG5cdCAgICAvLyAgIHZhciBhZyA9IGFoID4gMCA/IGouc2Nyb2xsTGVmdCArIDIgOiBqLnNjcm9sbExlZnQgLSAyO1xuXHQgICAgLy8gICBOLnN0eWxlLnpvb20gPSAnMSc7XG5cdCAgICAvLyAgIGlmIChhZyA+IDAgJiYgKGFnIDwgKE4ub2Zmc2V0V2lkdGggLSBqLm9mZnNldFdpZHRoICsgNSkgfHwgKE4ub2Zmc2V0V2lkdGggLSBqLnNjcm9sbFdpZHRoIDwgMCAmJiBhaCA8IDApKSkge1xuXHQgICAgLy8gICAgIGouc2Nyb2xsTGVmdCArPSBhaDtcblx0ICAgIC8vICAgICBDID0gai5zY3JvbGxMZWZ0IC8gKGouc2Nyb2xsV2lkdGggLSBqLm9mZnNldFdpZHRoKTtcblx0ICAgIC8vICAgfSBlbHNlIHtcblx0ICAgIC8vICAgICBpZiAoIWwgfHwgWS5zdHlsZS5kaXNwbGF5ID09ICdub25lJykge1xuXHQgICAgLy8gICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgKz0gYWg7XG5cdCAgICAvLyAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgKz0gYWg7XG5cdCAgICAvLyAgICAgfVxuXHQgICAgLy8gICB9XG5cdCAgICAvLyB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIG8oYWYpIHtcblx0ICAgIEkgPSBhZiA+IDEwID8gMTAgOiBhZjtcblx0ICAgIGlmIChJIDw9IDEpIHtcblx0ICAgICAgZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICBnLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXHQgICAgdmFyIGFnID0gVyAtIDIgKiBRO1xuXHQgICAgayA9IHBhcnNlSW50KGFnIC8gSSk7XG5cdCAgICBrID0gayA8IDE1ID8gMTUgOiBrO1xuXHQgICAgbSA9IFcgLSBRIC0gaztcblx0ICAgIGcuc3R5bGUud2lkdGggPSBrICsgJ3B4Jztcblx0ICB9XG5cdCAgaWYgKEkgPiAxKSB7XG5cdCAgICBvKEkpO1xuXHQgIH1cblx0ICB2YXIgZGVib3VuY2VkV2luZG93UmVzaXplID0gKDAsIF91dGlsaXRpZXMuZGVib3VuY2UpKHJlUmVuZGVyLCAyMDAsIGZhbHNlKTtcblx0ICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VkV2luZG93UmVzaXplKTtcblx0ICBmdW5jdGlvbiByZVJlbmRlcigpIHtcblx0ICAgIHEucmVuZGVyKCk7XG5cdCAgfVxuXHQgIHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGlmICh0KSB7XG5cdCAgICAgIGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQgPSB0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGYpO1xuXHQgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGFhKTtcblx0ICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB5KTtcblx0ICAgIGlmIChiKSB7XG5cdCAgICAgIGNsZWFySW50ZXJ2YWwoYik7XG5cdCAgICB9XG5cdCAgICBpZiAoYWIpIHtcblx0ICAgICAgY2xlYXJJbnRlcnZhbChhYik7XG5cdCAgICB9XG5cdCAgICBpZiAoUCkge1xuXHQgICAgICBjbGVhckludGVydmFsKFApO1xuXHQgICAgfVxuXHQgICAgaWYgKEQpIHtcblx0ICAgICAgY2xlYXJJbnRlcnZhbChEKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9XG5cbi8qKiovIH0sXG4vKiAyMCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi9zZXJpYWxpemUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0ZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5cdC8qKlxuXHQgKiBbc2VyaWFsaXplIGNvbnZlcnRzIHJlY3Vyc2l2ZSBvYmplY3RzXVxuXHQgKiBAcGFyYW0gIHtbdHlwZV19IG9iaiAgICBbZGVzY3JpcHRpb25dXG5cdCAqIEBwYXJhbSAge1t0eXBlXX0gcHJlZml4IFtkZXNjcmlwdGlvbl1cblx0ICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgW2Rlc2NyaXB0aW9uXVxuXHQgKiBjb25zb2xlLmxvZyhzZXJpYWxpemUoe2ZvbzogXCJoaSB0aGVyZVwiLCBiYXI6IHsgYmxhaDogMTIzLCBxdXV4OiBbMSwgMiwgM10gfX0pKTtcblx0ICogZm9vPWhpJTIwdGhlcmUmYmFyJTVCYmxhaCU1RD0xMjMmYmFyJTVCcXV1eCU1RCU1QjAlNUQ9MSZiYXIlNUJxdXV4JTVEJTVCMSU1RD0yJmJhciU1QnF1dXglNUQlNUIyJTVEPTNcblx0ICovXG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZShvYmosIHByZWZpeCkge1xuXHQgIHZhciBzdHIgPSBbXTtcblx0ICBmb3IgKHZhciBwIGluIG9iaikge1xuXHQgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwKSkge1xuXHQgICAgICB2YXIgayA9IHByZWZpeCA/IHByZWZpeCArICdbJyArIHAgKyAnXScgOiBwLFxuXHQgICAgICAgICAgdiA9IG9ialtwXTtcblx0ICAgICAgc3RyLnB1c2goKHR5cGVvZiB2ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2KSkgPT0gJ29iamVjdCcgPyBzZXJpYWxpemUodiwgaykgOiBlbmNvZGVVUklDb21wb25lbnQoaykgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodikpO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gc3RyLmpvaW4oJyYnKTtcblx0fVxuXG4vKioqLyB9LFxuLyogMjEgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi9zbGlkZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5zbGlkZSA9IHNsaWRlO1xuXHRcblx0dmFyIF9wb3B1cCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NvbW1vbi9wb3B1cCAqLyA0KTtcblx0XG5cdGZ1bmN0aW9uIHNsaWRlKGV2LCBwYXJhbXMsIGNhbGxiYWNrKSB7XG5cdCAgdmFyIHNsaWRlRWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdCAgc2xpZGVFbGUuY2xhc3NMaXN0LmFkZCgnc2xpZGUtbGF5ZXInKTtcblx0ICBzbGlkZUVsZS5pbm5lckhUTUwgPSBnZW5lcmF0ZVNsaWRlVHBsKHBhcmFtcy5jb250ZW50KTtcblx0ICBwb3NpdGlvblNsaWRlRWxlKHNsaWRlRWxlLCBldik7XG5cdCAgYmluZFNsaWRlRXZlbnRzKHNsaWRlRWxlLCBldiwgcGFyYW1zLCBjYWxsYmFjayk7XG5cdCAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzbGlkZUVsZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlbmVyYXRlU2xpZGVUcGwoY29udGVudCkge1xuXHQgIHZhciB0cGwgPSAnXFxuICAgIDxkaXYgY2xhc3M9XCJzbGlkZS1zaGFkb3dcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtY29udGVudFwiPlxcblxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XCJzbGlkZS10ZXh0XCI+JyArIGNvbnRlbnQgKyAnPC9kaXY+XFxuXFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cInNsaWRlLWJ0bnNcIj5cXG5cXHRcXHRcXHRcXHRcXHQ8c3BhbiBjbGFzcz1cInNsaWRlLWJ0biBzbGlkZS1jYW5jZWwtYnRuXCI+Y2FuY2VsPC9zcGFuPlxcblxcdFxcdFxcdFxcdFxcdDxzcGFuIGNsYXNzPVwic2xpZGUtYnRuIHNsaWRlLWNvbmZpcm0tYnRuXCI+Y29uZmlybTwvc3Bhbj5cXG5cXHRcXHRcXHRcXHQ8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuXFx0Jztcblx0ICByZXR1cm4gdHBsO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBiaW5kU2xpZGVFdmVudHMoZWxlLCBldiwgcGFyYW1zLCBjYWxsYmFjaykge1xuXHQgIGVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzbGlkZS1jYW5jZWwtYnRuJylbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZVNsaWRlKTtcblx0ICBlbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2xpZGUtc2hhZG93JylbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGlja1NoYWRvdyk7XG5cdCAgZWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NsaWRlLWNvbmZpcm0tYnRuJylbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjb25maXJtLmJpbmQodGhpcywgZXYsIGVsZSwgcGFyYW1zLCBjYWxsYmFjaykpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjb25maXJtKGV2LCBlbGUsIHBhcmFtcywgY2FsbGJhY2spIHtcblx0ICBjYWxsYmFjaygpO1xuXHQgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gcG9zaXRpb25TbGlkZUVsZShlbGUsIGNvb3JkaW5hdGVzKSB7XG5cdCAgLy8gZWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NsaWRlLWNvbnRlbnQnKVswXS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArIGNvb3JkaW5hdGVzLmNsaWVudFggKyAncHgsICcgKyBjb29yZGluYXRlcy5jbGllbnRZICsgJ3B4LCAwKSc7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNsaWNrU2hhZG93KGV2KSB7XG5cdCAgaWYgKGV2LnRhcmdldCAhPT0gZXYuY3VycmVudFRhcmdldCkgcmV0dXJuO1xuXHQgICgwLCBfcG9wdXAucG9wdXApKGV2LCB1bmRlZmluZWQsIGNsb3NlU2xpZGUuYmluZCh0aGlzLCBldikpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjbG9zZVNsaWRlKGV2KSB7XG5cdCAgdmFyIHBvcExheWVyID0gZXYudGFyZ2V0LmNsb3Nlc3QoJy5zbGlkZS1sYXllcicpO1xuXHQgIGlmIChwb3BMYXllcikge1xuXHQgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChwb3BMYXllcik7XG5cdCAgfVxuXHR9XG5cbi8qKiovIH0sXG4vKiAyMiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL3RlbXBsYXRlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmh0bWwgPSBodG1sO1xuXHRcblx0dmFyIF9odG1sRXNjYXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9odG1sRXNjYXBlICovIDE4KTtcblx0XG5cdGZ1bmN0aW9uIGh0bWwobGl0ZXJhbFNlY3Rpb25zKSB7XG5cdCAgLy8gVXNlIHJhdyBsaXRlcmFsIHNlY3Rpb25zOiB3ZSBkb27igJl0IHdhbnRcblx0ICAvLyBiYWNrc2xhc2hlcyAoXFxuIGV0Yy4pIHRvIGJlIGludGVycHJldGVkXG5cdCAgdmFyIHJhdyA9IGxpdGVyYWxTZWN0aW9ucy5yYXc7XG5cdFxuXHQgIHZhciByZXN1bHQgPSAnJztcblx0XG5cdCAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN1YnN0cyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgIHN1YnN0c1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgfVxuXHRcblx0ICBzdWJzdHMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic3QsIGkpIHtcblx0ICAgIC8vIFJldHJpZXZlIHRoZSBsaXRlcmFsIHNlY3Rpb24gcHJlY2VkaW5nXG5cdCAgICAvLyB0aGUgY3VycmVudCBzdWJzdGl0dXRpb25cblx0ICAgIHZhciBsaXQgPSByYXdbaV07XG5cdFxuXHQgICAgLy8gSW4gdGhlIGV4YW1wbGUsIG1hcCgpIHJldHVybnMgYW4gYXJyYXk6XG5cdCAgICAvLyBJZiBzdWJzdGl0dXRpb24gaXMgYW4gYXJyYXkgKGFuZCBub3QgYSBzdHJpbmcpLFxuXHQgICAgLy8gd2UgdHVybiBpdCBpbnRvIGEgc3RyaW5nXG5cdCAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzdCkpIHtcblx0ICAgICAgc3Vic3QgPSBzdWJzdC5qb2luKCcnKTtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBJZiB0aGUgc3Vic3RpdHV0aW9uIGlzIHByZWNlZGVkIGJ5IGEgZG9sbGFyIHNpZ24sXG5cdCAgICAvLyB3ZSBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIGl0XG5cdCAgICBpZiAobGl0LmVuZHNXaXRoKCckJykpIHtcblx0ICAgICAgc3Vic3QgPSAoMCwgX2h0bWxFc2NhcGUuaHRtbEVzY2FwZSkoc3Vic3QpO1xuXHQgICAgICBsaXQgPSBsaXQuc2xpY2UoMCwgLTEpO1xuXHQgICAgfVxuXHQgICAgcmVzdWx0ICs9IGxpdDtcblx0ICAgIHJlc3VsdCArPSBzdWJzdDtcblx0ICB9KTtcblx0ICAvLyBUYWtlIGNhcmUgb2YgbGFzdCBsaXRlcmFsIHNlY3Rpb25cblx0ICAvLyAoTmV2ZXIgZmFpbHMsIGJlY2F1c2UgYW4gZW1wdHkgdGVtcGxhdGUgc3RyaW5nXG5cdCAgLy8gcHJvZHVjZXMgb25lIGxpdGVyYWwgc2VjdGlvbiwgYW4gZW1wdHkgc3RyaW5nKVxuXHQgIHJlc3VsdCArPSByYXdbcmF3Lmxlbmd0aCAtIDFdOyAvLyAoQSlcblx0XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXG4vKioqLyB9LFxuLyogMjMgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vdG9nZ2xlU2Nyb2xsLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kaXNhYmxlU2Nyb2xsID0gZGlzYWJsZVNjcm9sbDtcblx0ZXhwb3J0cy5lbmFibGVTY3JvbGwgPSBlbmFibGVTY3JvbGw7XG5cdC8vIGxlZnQ6IDM3LCB1cDogMzgsIHJpZ2h0OiAzOSwgZG93bjogNDAsXG5cdC8vIHNwYWNlYmFyOiAzMiwgcGFnZXVwOiAzMywgcGFnZWRvd246IDM0LCBlbmQ6IDM1LCBob21lOiAzNlxuXHR2YXIga2V5cyA9IHsgMzc6IDEsIDM4OiAxLCAzOTogMSwgNDA6IDEgfTtcblx0XG5cdGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGUpIHtcblx0ICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG5cdCAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcblx0ICBlLnJldHVyblZhbHVlID0gZmFsc2U7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0Rm9yU2Nyb2xsS2V5cyhlKSB7XG5cdCAgaWYgKGtleXNbZS5rZXlDb2RlXSkge1xuXHQgICAgcHJldmVudERlZmF1bHQoZSk7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBkaXNhYmxlU2Nyb2xsKCkge1xuXHQgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikgLy8gb2xkZXIgRkZcblx0ICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Nb3VzZVNjcm9sbCcsIHByZXZlbnREZWZhdWx0LCBmYWxzZSk7XG5cdCAgd2luZG93Lm9ud2hlZWwgPSBwcmV2ZW50RGVmYXVsdDsgLy8gbW9kZXJuIHN0YW5kYXJkXG5cdCAgd2luZG93Lm9ubW91c2V3aGVlbCA9IGRvY3VtZW50Lm9ubW91c2V3aGVlbCA9IHByZXZlbnREZWZhdWx0OyAvLyBvbGRlciBicm93c2VycywgSUVcblx0ICB3aW5kb3cub250b3VjaG1vdmUgPSBwcmV2ZW50RGVmYXVsdDsgLy8gbW9iaWxlXG5cdCAgZG9jdW1lbnQub25rZXlkb3duID0gcHJldmVudERlZmF1bHRGb3JTY3JvbGxLZXlzO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBlbmFibGVTY3JvbGwoKSB7XG5cdCAgaWYgKHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCBwcmV2ZW50RGVmYXVsdCwgZmFsc2UpO1xuXHQgIHdpbmRvdy5vbm1vdXNld2hlZWwgPSBkb2N1bWVudC5vbm1vdXNld2hlZWwgPSBudWxsO1xuXHQgIHdpbmRvdy5vbndoZWVsID0gbnVsbDtcblx0ICB3aW5kb3cub250b3VjaG1vdmUgPSBudWxsO1xuXHQgIGRvY3VtZW50Lm9ua2V5ZG93biA9IG51bGw7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDI0ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL21vZHVsZXMvYXBpT3BlcmF0aW9uLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJ1xcbiAgICAgIDx1bCBjbGFzcz1cImFwaS11bFwiPlxcbiAgICAgICcsICdcXG4gICAgICA8L3VsPlxcbiAgJ10sIFsnXFxuICAgICAgPHVsIGNsYXNzPVwiYXBpLXVsXCI+XFxuICAgICAgJywgJ1xcbiAgICAgIDwvdWw+XFxuICAnXSksXG5cdCAgICBfdGVtcGxhdGVPYmplY3QyID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJ1xcbiAgICAgICAgJywgJ1xcbiAgICAgICddLCBbJ1xcbiAgICAgICAgJywgJ1xcbiAgICAgICddKTtcblx0XG5cdGV4cG9ydHMuaW5pdFhociA9IGluaXRYaHI7XG5cdFxuXHR2YXIgX2FqYXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9jb21tb24vYWpheCAqLyAyKTtcblx0XG5cdHZhciBfY29uc3RhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9nbG9iYWwvY29uc3RhbnQgKi8gOCk7XG5cdFxuXHR2YXIgX3RlbXBsYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29tbW9uL3RlbXBsYXRlICovIDIyKTtcblx0XG5cdHZhciBfcG9wdXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9jb21tb24vcG9wdXAgKi8gNCk7XG5cdFxuXHR2YXIgX3NsaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29tbW9uL3NsaWRlICovIDIxKTtcblx0XG5cdHZhciBfdXRpbGl0aWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29tbW9uL3V0aWxpdGllcyAqLyAxKTtcblx0XG5cdHZhciBfZmxhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9jb21tb24vZmxhc2ggKi8gMyk7XG5cdFxuXHR2YXIgX3RyZWVEb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9hcGktdHJlZS90cmVlRG9tICovIDEzKTtcblx0XG5cdHZhciBfdHdvV2F5RGF0YUJpbmRpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9jb21tb24vdHdvV2F5RGF0YUJpbmRpbmcgKi8gNyk7XG5cdFxuXHRmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykgeyByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7IHJhdzogeyB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpIH0gfSkpOyB9XG5cdFxuXHR2YXIgcGF5bG9hZCA9IHt9O1xuXHR2YXIgYXBpc0FyciA9IFtdO1xuXHRcblx0dmFyIGNhbGxiYWNrID0ge1xuXHQgIGdldEFwaVN1Y2Nlc3M6IGZ1bmN0aW9uIGdldEFwaVN1Y2Nlc3MoZGF0YSkge1xuXHQgICAgYWRkQXBpVHJlZShKU09OLnBhcnNlKGRhdGEpLCB0aGlzLCBmYWxzZSk7XG5cdCAgfSxcblx0ICBnZXRBbGxBcGlzU3VjY2VzczogZnVuY3Rpb24gZ2V0QWxsQXBpc1N1Y2Nlc3MoZGF0YSkge1xuXHQgICAgdmFyIGRhdGFCYWsgPSBkYXRhO1xuXHQgICAgdmFyIEpTT05CYWsgPSBKU09OLnBhcnNlKGRhdGFCYWspO1xuXHQgICAgaWYgKEpTT05CYWsubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgIG5ld0FwaUJ0bigpO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICByZW5kZXJBbGxBcGlzKGRhdGEpO1xuXHQgICAgYmluZGV2ZW50cygpO1xuXHQgICAgbGlzdGVuQXBpUXVlcnkoKTtcblx0ICB9LFxuXHQgIHBhdGNoU3VjY2VzczogZnVuY3Rpb24gcGF0Y2hTdWNjZXNzKGRhdGEpIHtcblx0ICAgICgwLCBfZmxhc2gucGFyc2VBbmRGbGFzaCkoZGF0YSk7XG5cdCAgfSxcblx0ICBwb3N0U3VjY2VzczogZnVuY3Rpb24gcG9zdFN1Y2Nlc3MoZGF0YSkge1xuXHQgICAgKDAsIF9mbGFzaC5wYXJzZUFuZEZsYXNoKShkYXRhKTtcblx0ICB9LFxuXHQgIGRlbGV0ZVN1Y2Nlc3M6IGZ1bmN0aW9uIGRlbGV0ZVN1Y2Nlc3MoZGF0YSkge1xuXHQgICAgZnVuY3Rpb24gZGVzdG9yeUFwaUxpKCkge1xuXHQgICAgICB0aGlzLnRhcmdldC5jbG9zZXN0KCcuYXBpLXVsJykucmVtb3ZlQ2hpbGQodGhpcy50YXJnZXQuY2xvc2VzdCgnLmFwaS1saScpKTtcblx0ICAgIH1cblx0ICAgICgwLCBfZmxhc2gucGFyc2VBbmRGbGFzaCkoZGF0YSwgZGVzdG9yeUFwaUxpLmJpbmQodGhpcykpO1xuXHQgIH0sXG5cdCAgYXBpUXVlcnlTdWNjZXNzOiBmdW5jdGlvbiBhcGlRdWVyeVN1Y2Nlc3MoZGF0YSkge1xuXHQgICAgdmFyIHNlYXJjaExpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktc2VhcmNoLXJlc3VsdCcpWzBdO1xuXHQgICAgdmFyIGRhdGFPYmogPSBKU09OLnBhcnNlKGRhdGEpO1xuXHQgICAgdmFyIGNvbnRlbnRTdHIgPSAnJztcblx0ICAgIGZvciAodmFyIGkgPSAwLCBMZW4gPSBkYXRhT2JqLmxlbmd0aDsgaSA8IExlbjsgaSsrKSB7XG5cdCAgICAgIGNvbnRlbnRTdHIgKz0gJzxkaXYgY2xhc3M9XFwncGVyLXNlYXJjaC1yZXN1bHRcXCc+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cInBlci1yZXN1bHQtY29sdW1uIHBlci1yZXN1bHQtdXJpXCI+JyArIGRhdGFPYmpbaV0udXJpICsgJzwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1zZWN0aW9uXCI+JyArIGRhdGFPYmpbaV0uc2VjdGlvbiArICc8L3NwYW4+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cInBlci1yZXN1bHQtY29sdW1uIHBlci1yZXN1bHQtbWV0aG9kXCI+JyArIGRhdGFPYmpbaV0ubWV0aG9kICsgJzwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1kZXNjcmlwdGlvblwiPicgKyBkYXRhT2JqW2ldLmRlc2NyaXB0aW9uICsgJzwvc3Bhbj5cXG4gICAgICA8L2Rpdj4nO1xuXHQgICAgfVxuXHQgICAgc2VhcmNoTGlzdC5pbm5lckhUTUwgPSBjb250ZW50U3RyO1xuXHQgICAgZGF0YU9iai5sZW5ndGggPiAwID8gc2VhcmNoTGlzdC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJykgOiBzZWFyY2hMaXN0LmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcblx0ICB9LFxuXHQgIHN1Y2Nlc3M6IGZ1bmN0aW9uIHN1Y2Nlc3MoZGF0YSkge1xuXHQgICAgY29uc29sZS5sb2coZGF0YSk7XG5cdCAgfSxcblx0ICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoZGF0YSkge1xuXHQgICAgaWYgKCFkYXRhLmRhdGEpIHtcblx0ICAgICAgbmV3QXBpQnRuKCk7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgICgwLCBfZmxhc2gucGFyc2VBbmRGbGFzaCkoZGF0YSk7XG5cdCAgfVxuXHR9O1xuXHRmdW5jdGlvbiBpbml0WGhyKCkge1xuXHQgIGdldEFsbEFwaXMoKTtcblx0fVxuXHRcblx0dmFyIGRlYm91bmNlZEFwaVF1ZXJ5SW5wdXQgPSAoMCwgX3V0aWxpdGllcy5kZWJvdW5jZSkoYXBpUXVlcnksIDEwMCwgZmFsc2UpO1xuXHRmdW5jdGlvbiBsaXN0ZW5BcGlRdWVyeSgpIHtcblx0ICB2YXIgYXBpUXVlcnlJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS1xdWVyeScpWzBdO1xuXHQgIHZhciBpbldyYXBwZXIgPSBmYWxzZTtcblx0ICBhcGlRdWVyeUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZGVib3VuY2VkQXBpUXVlcnlJbnB1dCk7XG5cdCAgYXBpUXVlcnlJbnB1dC5wYXJlbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoZXYpIHtcblx0ICAgIGlmICghY2hlY2tJZkZvY3VzLmFwcGx5KGFwaVF1ZXJ5SW5wdXQsIGV2KSkge1xuXHQgICAgICBjbGVhclNlYXJjaFJlc3VsdCgpO1xuXHQgICAgfTtcblx0ICAgIGluV3JhcHBlciA9IGZhbHNlO1xuXHQgIH0pO1xuXHQgIGFwaVF1ZXJ5SW5wdXQucGFyZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGV2KSB7XG5cdCAgICBpbldyYXBwZXIgPSB0cnVlO1xuXHQgIH0pO1xuXHQgIGFwaVF1ZXJ5SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uIChldikge1xuXHQgICAgaWYgKCFpbldyYXBwZXIpIGNsZWFyU2VhcmNoUmVzdWx0KCk7XG5cdCAgfSk7XG5cdCAgYXBpUXVlcnlJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGFwaVF1ZXJ5KTtcblx0fVxuXHRmdW5jdGlvbiBjaGVja0lmRm9jdXMoZXYpIHtcblx0ICByZXR1cm4gdGhpcyA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fVxuXHRmdW5jdGlvbiBhcGlRdWVyeShldikge1xuXHQgIGlmIChldi50YXJnZXQudmFsdWUubGVuZ3RoIDw9IDApIHtcblx0ICAgIGNsZWFyU2VhcmNoUmVzdWx0KCk7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIHBheWxvYWQgPSB7IHE6IGV2LnRhcmdldC52YWx1ZSB9O1xuXHQgICgwLCBfYWpheC4kaHR0cCkod2luZG93LmxvY2F0aW9uLm9yaWdpbiArICcvaW5zdGFudHNlYXJjaCcpLmdldChwYXlsb2FkKS50aGVuKGNhbGxiYWNrLmFwaVF1ZXJ5U3VjY2Vzcy5iaW5kKGV2KSkuY2F0Y2goY2FsbGJhY2suZXJyb3IpO1xuXHR9XG5cdGZ1bmN0aW9uIGNsZWFyU2VhcmNoUmVzdWx0KCkge1xuXHQgIHZhciBhcGlTZWFyY2hSZXN1bHRFbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktc2VhcmNoLXJlc3VsdCcpWzBdO1xuXHQgIGFwaVNlYXJjaFJlc3VsdEVsZS5pbm5lckhUTUwgPSAnJztcblx0ICBhcGlTZWFyY2hSZXN1bHRFbGUuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuXHR9XG5cdGZ1bmN0aW9uIHRvZ2dsZUZvbGRMaShjb250ZXh0LCBldikge1xuXHQgIGlmICghZXYpIHtcblx0ICAgIGNvbnRleHQuY2xhc3NMaXN0LnRvZ2dsZSgndW5mb2xkJyk7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIGlmICghZXYudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYXBpLWxpLXdpa2knKSkge1xuXHQgICAgY29udGV4dC5jbGFzc0xpc3QudG9nZ2xlKCd1bmZvbGQnKTtcblx0ICB9XG5cdH1cblx0ZnVuY3Rpb24gYmluZEV2ZW50VG9BcGlMaURlc2NyaXB0aW9uKGV2KSB7XG5cdCAgdG9nZ2xlRm9sZExpKHRoaXMsIGV2KTtcblx0ICBpZiAodGhpcy5uZXh0RWxlbWVudFNpYmxpbmcpIHtcblx0ICAgIHJldHVybjtcblx0ICB9O1xuXHQgICgwLCBfYWpheC4kaHR0cCkoX2NvbnN0YW50LnJvb3RBUEkgKyAnLycgKyB0aGlzLnBhcmVudE5vZGUuZGF0YXNldC5hcGlJZCkuZ2V0KHBheWxvYWQpLnRoZW4oY2FsbGJhY2suZ2V0QXBpU3VjY2Vzcy5iaW5kKHRoaXMucGFyZW50Tm9kZSkpLmNhdGNoKGNhbGxiYWNrLmVycm9yKTtcblx0fVxuXHRmdW5jdGlvbiBiaW5kZXZlbnRzKCkge1xuXHQgIHZhciBhcGlMaXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktbGktc3VtbWFyeScpO1xuXHQgIFtdLnNsaWNlLmNhbGwoYXBpTGlzKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCkge1xuXHQgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldikge1xuXHQgICAgICBiaW5kRXZlbnRUb0FwaUxpRGVzY3JpcHRpb24uY2FsbCh0aGlzLCBldik7XG5cdCAgICB9KTtcblx0ICB9KTtcblx0fVxuXHRmdW5jdGlvbiBhZGRBcGlUcmVlKCkge1xuXHQgIHZhciBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblx0ICB2YXIgY29udGFpbmVyTm9kZSA9IGFyZ3VtZW50c1sxXTtcblx0ICB2YXIgaXNOZXdBcGkgPSBhcmd1bWVudHNbMl07XG5cdFxuXHQgIHZhciBuZXdBcGkgPSBuZXcgX3RyZWVEb20uQXBpRG9tKGRhdGEsIGNvbnRhaW5lck5vZGUsIGlzTmV3QXBpKTtcblx0ICBhcGlzQXJyLnB1c2gobmV3QXBpKTtcblx0fVxuXHRcblx0dmFyIGRlYm91bmNlZE5ld0FwaUJ0biA9ICgwLCBfdXRpbGl0aWVzLmRlYm91bmNlKShwcm9jZXNzTmV3QXBpQ2xpY2ssIDUwMCwgdHJ1ZSk7XG5cdHZhciBkZWJvdW5jZWRFbnZCdG4gPSAoMCwgX3V0aWxpdGllcy5kZWJvdW5jZSkocHJvY2Vzc09wZW5FbnZTZXR0aW5ncywgNTAwLCB0cnVlKTtcblx0ZnVuY3Rpb24gcHJvY2Vzc09wZW5FbnZTZXR0aW5ncyhldiwgZWwpIHtcblx0ICB2YXIgcGFyYW1zID0ge1xuXHQgICAgY29udGVudDogc2xpZGVDb250ZW50KClcblx0ICB9O1xuXHQgICgwLCBfc2xpZGUuc2xpZGUpKGV2LCBwYXJhbXMpO1xuXHR9XG5cdGZ1bmN0aW9uIHNsaWRlQ29udGVudCgpIHtcblx0ICB2YXIgdHBsU3RyID0gJ1xcbiAgICA8dWw+XFxuICAgICAgPGxpPlxcbiAgICAgICAgPGxhYmVsPmhvc3Q6PC9sYWJlbD5cXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cImMtaW5wdXRcIiB0eXBlPVwidGV4dFwiIC8+XFxuICAgICAgICA8bGFiZWw+YWNjb3VudDo8L2xhYmVsPlxcbiAgICAgICAgPGlucHV0IGNsYXNzPVwiYy1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgLz5cXG4gICAgICAgIDxsYWJlbD5sYWJlbDo8L2xhYmVsPlxcbiAgICAgICAgPGlucHV0IGNsYXNzPVwiYy1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgLz5cXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cIlwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNoZWNrIGF2YWlsYWJpbGl0eVwiIC8+XFxuICAgICAgPC9saT5cXG4gICAgPC91bD5cXG4gICc7XG5cdCAgcmV0dXJuIHRwbFN0cjtcblx0fVxuXHRmdW5jdGlvbiBwcm9jZXNzTmV3QXBpQ2xpY2soKSB7XG5cdCAgdmFyIGFwaVVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXVsJylbMF07XG5cdCAgaWYgKCFhcGlVbCkge1xuXHQgICAgY3JlYXRlQXBpVWwoKTtcblx0ICAgIGFwaVVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXVsJylbMF07XG5cdCAgfVxuXHQgIHZhciBiYXNlQXBpTGkgPSAoMCwgX3V0aWxpdGllcy5zdHJUb0RvbSkobmV3QXBpTGlUcGwoKSk7XG5cdCAgYXBpVWwuaW5zZXJ0QmVmb3JlKGJhc2VBcGlMaSwgYXBpVWwuZmlyc3RDaGlsZCk7XG5cdCAgYWRkQXBpVHJlZSh7fSwgYmFzZUFwaUxpLCB0cnVlKTtcblx0ICB0b2dnbGVGb2xkTGkoYmFzZUFwaUxpLmNoaWxkcmVuWzBdKTtcblx0ICBiYXNlQXBpTGkuY2hpbGRyZW5bMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXYpIHtcblx0ICAgIGJpbmRFdmVudFRvQXBpTGlEZXNjcmlwdGlvbi5jYWxsKHRoaXMsIGV2KTtcblx0ICB9KTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gY3JlYXRlQXBpVWwoKSB7XG5cdCAgdmFyIGFwaUxpc3RFbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICB2YXIgYXBpVWxFbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuXHQgIHZhciBuZXdBcGlEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktYWRkLXF1ZXJ5JylbMF07XG5cdCAgYXBpTGlzdEVsZS5jbGFzc0xpc3QuYWRkKCdhcGktdWwtd3JhcHBlcicpO1xuXHQgIGFwaVVsRWxlLmNsYXNzTGlzdC5hZGQoJ2FwaS11bCcpO1xuXHQgIGFwaUxpc3RFbGUuYXBwZW5kQ2hpbGQoYXBpVWxFbGUpO1xuXHQgICgwLCBfdXRpbGl0aWVzLmluc2VydEFmdGVyKShhcGlMaXN0RWxlLCBuZXdBcGlEaXYpO1xuXHR9XG5cdGZ1bmN0aW9uIG5ld0FwaUJ0bigpIHtcblx0ICB2YXIgbmV3QXBpRGl2ID0gdm9pZCAwO1xuXHQgIHZhciBoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZGVyJylbMF07XG5cdCAgdmFyIG5ld0FwaVN0ciA9ICdcXG4gICAgPGRpdiBjbGFzcz1cImFwaS1hZGQtcXVlcnlcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImFkZC1hcGktYnRuXCI+bmV3IEFQSTwvc3Bhbj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiYXBpLXNlYXJjaC13cmFwcGVyXCI+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJhcGktcXVlcnlcIiB0eXBlPVwic2VhcmNoXCIgcGxhY2Vob2xkZXI9XCJzZWFyY2hcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhcGktc2VhcmNoLXJlc3VsdCBoaWRlXCI+PC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGEgY2xhc3M9XCJjLWhpZGUgaWNvbi10ZXh0LWxpbmsgYy1mbG9hdC1yaWdodCBkZXYtZW52LXNldHRpbmdzXCIgaHJlZj1cImphdmFzY3JpcHQ6O1wiPjxzcGFuIGNsYXNzPVwiaWNvbi10ZXh0LWljb25cIj48c3ZnIGNsYXNzPVwiaWNvbiBpY29uLXNldHRpbmdzIGljb24tZml0XCI+PHVzZSB4bGluazpocmVmPVwiI2ljb24tc2V0dGluZ3NcIj48L3VzZT48L3N2Zz48L3NwYW4+PHNwYW4gY2xhc3M9XCJpY29uLXRleHQtdGV4dFwiPlxcdTczQUZcXHU1ODgzXFx1NTQwQ1xcdTZCNjVcXHU2NTcwXFx1NjM2RVxcdTkxNERcXHU3RjZFPC9zcGFuPjwvYT5cXG4gICAgPC9kaXY+XFxuICAnO1xuXHQgIG5ld0FwaURpdiA9ICgwLCBfdXRpbGl0aWVzLnN0clRvRG9tKShuZXdBcGlTdHIpO1xuXHQgIG5ld0FwaURpdi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhZGQtYXBpLWJ0bicpWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGVib3VuY2VkTmV3QXBpQnRuKTtcblx0ICBuZXdBcGlEaXYuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZGV2LWVudi1zZXR0aW5ncycpWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGVib3VuY2VkRW52QnRuKTtcblx0ICAoMCwgX3V0aWxpdGllcy5pbnNlcnRBZnRlcikobmV3QXBpRGl2LCBoZWFkZXIpO1xuXHQgIHJldHVybiBuZXdBcGlEaXY7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIG5ld0FwaUxpVHBsKCkge1xuXHQgIHZhciBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblx0XG5cdCAgdmFyIHRwbCA9ICdcXG4gICAgPGxpIGNsYXNzPVwiYXBpLWxpXCIgZGF0YS1hcGktaWQ9XCInICsgKGRhdGEuaWQgfHwgbnVsbCkgKyAnXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cImFwaS1saS1zdW1tYXJ5XCI+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cImFwaS1saS1jb2xsYXBzZVwiPjxzdmcgY2xhc3M9XCJpY29uIGljb24tZG93blwiPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uLWRvd25cIj48L3VzZT48L3N2Zz48L3NwYW4+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cImFwaS1saS11cmlcIiBiaW5kPVwidXJpXCI+JyArIChkYXRhLnVyaSB8fCAnKE5vIHVyaSknKSArICc8L3NwYW4+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cImFwaS1saS1kZXNcIiBiaW5kPVwiZGVzY3JpcHRpb25cIj4nICsgKGRhdGEuZGVzY3JpcHRpb24gPyBkYXRhLmRlc2NyaXB0aW9uIDogJyhObyBkZXNjcmlwdGlvbiknKSArICc8L3NwYW4+XFxuICAgICAgICA8YSBocmVmPVwiJyArIGRhdGEud2lraUxpbmsgKyAnXCIgY2xhc3M9XCJhcGktbGktd2lraVwiIGJpbmQtYXR0ci1ocmVmPVwid2lraUxpbmtcIiBiaW5kPVwid2lraUxpbmtcIiB0YXJnZXQ9XCJfYmxhbmtcIj4nICsgKGRhdGEud2lraUxpbmsgPyBkYXRhLndpa2lMaW5rIDogJyhObyB3aWtpTGluayknKSArICc8L2E+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvbGk+XFxuICAnO1xuXHQgIHJldHVybiB0cGw7XG5cdH1cblx0ZnVuY3Rpb24gcmVuZGVyQWxsQXBpcyhkYXRhKSB7XG5cdCAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdCAgdmFyIHRtcGwgPSBmdW5jdGlvbiB0bXBsKGRhdGEpIHtcblx0ICAgIHJldHVybiAoMCwgX3RlbXBsYXRlLmh0bWwpKF90ZW1wbGF0ZU9iamVjdCwgZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgcmV0dXJuICgwLCBfdGVtcGxhdGUuaHRtbCkoX3RlbXBsYXRlT2JqZWN0MiwgbmV3QXBpTGlUcGwoaXRlbSkpO1xuXHQgICAgfSkpO1xuXHQgIH07XG5cdCAgdmFyIGFwaUxpc3RFbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICBhcGlMaXN0RWxlLmNsYXNzTGlzdC5hZGQoJ2FwaS11bC13cmFwcGVyJyk7XG5cdCAgYXBpTGlzdEVsZS5pbm5lckhUTUwgPSB0bXBsKGRhdGEpO1xuXHQgICgwLCBfdXRpbGl0aWVzLmluc2VydEFmdGVyKShhcGlMaXN0RWxlLCBuZXdBcGlCdG4oKSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldEFsbEFwaXMoKSB7XG5cdCAgKDAsIF9hamF4LiRodHRwKShfY29uc3RhbnQucm9vdEFQSSkuZ2V0KHBheWxvYWQpLnRoZW4oY2FsbGJhY2suZ2V0QWxsQXBpc1N1Y2Nlc3MpLmNhdGNoKGNhbGxiYWNrLmVycm9yKTtcblx0fVxuXG4vKioqLyB9LFxuLyogMjUgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvbW9kdWxlcy9kYXRhTGlua3MuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kYXRhTGlua3MgPSBkYXRhTGlua3M7XG5cdFxuXHR2YXIgX2hhbmRsZU1ldGhvZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NvbW1vbi9oYW5kbGVNZXRob2QgKi8gMTcpO1xuXHRcblx0ZnVuY3Rpb24gZGF0YUxpbmtzKCkge1xuXHQgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcHJvY2Vzc0RhdGFMaW5rLCBmYWxzZSk7XG5cdH1cblx0ZnVuY3Rpb24gcHJvY2Vzc0RhdGFMaW5rKGUpIHtcblx0ICB2YXIgZSA9IHdpbmRvdy5lIHx8IGU7XG5cdFxuXHQgIGlmIChlLnRhcmdldC50YWdOYW1lICE9PSAnQScpIHJldHVybjtcblx0XG5cdCAgLy8gRG8gc29tZXRoaW5nXG5cdCAgaWYgKGUudGFyZ2V0LmRhdGFzZXQubWV0aG9kID09PSAnZGVsZXRlJykge1xuXHQgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgKDAsIF9oYW5kbGVNZXRob2QuaGFuZGxlTWV0aG9kKShlLnRhcmdldCk7XG5cdCAgfVxuXHQgIGlmIChlLnRhcmdldC5kYXRhc2V0Lm1ldGhvZCA9PT0gJ1BBVENIJykge1xuXHQgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgKDAsIF9oYW5kbGVNZXRob2QuaGFuZGxlTWV0aG9kKShlLnRhcmdldCk7XG5cdCAgfVxuXHQgIC8vIGlmIChlLnRhcmdldC5kYXRhc2V0Lm1ldGhvZCA9PT0gJ3BhdGNoJykge1xuXHQgIC8vICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgIC8vICAgaGFuZGxlTWV0aG9kKGUudGFyZ2V0LCB7XG5cdCAgLy8gICAgIG5zOiAnYXBpJyxcblx0ICAvLyAgICAgZGF0YToge1xuXHQgIC8vICAgICAgIHNlY3Rpb246ICd3aXNlJyxcblx0ICAvLyAgICAgICBpZDogJzInXG5cdCAgLy8gICAgIH1cblx0ICAvLyAgIH0pO1xuXHQgIC8vIH1cblx0fVxuXG4vKioqLyB9LFxuLyogMjYgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvbW9kdWxlcy9maXNDaVBsdWdpbnMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5mY3AgPSBmY3A7XG5cdFxuXHR2YXIgX2FqYXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9jb21tb24vYWpheCAqLyAyKTtcblx0XG5cdHZhciBfdnVlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdnVlICovIDkpO1xuXHRcblx0dmFyIF92dWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdnVlKTtcblx0XG5cdHZhciBfdXRpbGl0aWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29tbW9uL3V0aWxpdGllcyAqLyAxKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgcGF5bG9hZCA9IHt9O1xuXHR2YXIgY2FsbGJhY2sgPSB7XG5cdCAgYXBpUXVlcnlTdWNjZXNzOiBmdW5jdGlvbiBhcGlRdWVyeVN1Y2Nlc3MoZGF0YSkge1xuXHQgICAgdmFyIHNlYXJjaExpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktc2VhcmNoLXJlc3VsdCcpWzBdO1xuXHQgICAgdmFyIGRhdGFPYmogPSBKU09OLnBhcnNlKGRhdGEpO1xuXHQgICAgdmFyIGNvbnRlbnRTdHIgPSAnJztcblx0ICAgIHZhciBoZWFkU3RyID0gJ1xcbiAgICA8ZGl2IGNsYXNzPVwicmVzdWx0LWhlYWRcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cInBlci1yZXN1bHQtY29sdW1uIHBlci1yZXN1bHQtaW5wdXRcIj5pbnB1dDwvc3Bhbj5cXG4gICAgICA8c3BhbiBjbGFzcz1cInBlci1yZXN1bHQtY29sdW1uIHBlci1yZXN1bHQtcGFja2FnZVZlcnNpb25cIj5wYWNrYWdlVmVyc2lvbjwvc3Bhbj5cXG4gICAgICA8c3BhbiBjbGFzcz1cInBlci1yZXN1bHQtY29sdW1uIHBlci1yZXN1bHQtY2lQYWNrYWdlTmFtZVwiPmNpUGFja2FnZU5hbWU8L3NwYW4+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJwZXItcmVzdWx0LWNvbHVtbiBwZXItcmVzdWx0LWNpUGFja2FnZVZlcnNpb25cIj5jaVBhY2thZ2VWZXJzaW9uPC9zcGFuPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1zdGF0dXNcIj5zdGF0dXM8L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgICAnO1xuXHQgICAgY29udGVudFN0ciArPSBoZWFkU3RyO1xuXHQgICAgZm9yICh2YXIgaSA9IDAsIExlbiA9IGRhdGFPYmoubGVuZ3RoOyBpIDwgTGVuOyBpKyspIHtcblx0ICAgICAgY29udGVudFN0ciArPSAnPGRpdiBjbGFzcz1cXCdwZXItc2VhcmNoLXJlc3VsdFxcJz5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1pbnB1dFwiPicgKyBkYXRhT2JqW2ldLmlucHV0ICsgJzwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1wYWNrYWdlVmVyc2lvblwiPicgKyBkYXRhT2JqW2ldLnBhY2thZ2VWZXJzaW9uICsgJzwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1jaVBhY2thZ2VOYW1lXCI+JyArIGRhdGFPYmpbaV0uY2lQYWNrYWdlTmFtZSArICc8L3NwYW4+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cInBlci1yZXN1bHQtY29sdW1uIHBlci1yZXN1bHQtY2lQYWNrYWdlVmVyc2lvblwiPicgKyBkYXRhT2JqW2ldLmNpUGFja2FnZVZlcnNpb24gKyAnPC9zcGFuPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJwZXItcmVzdWx0LWNvbHVtbiBwZXItcmVzdWx0LXN0YXR1c1wiPicgKyBkYXRhT2JqW2ldLnN0YXR1cyArICc8L3NwYW4+XFxuICAgICAgPC9kaXY+Jztcblx0ICAgIH1cblx0ICAgIHNlYXJjaExpc3QuaW5uZXJIVE1MID0gY29udGVudFN0cjtcblx0ICAgIGRhdGFPYmoubGVuZ3RoID4gMCA/IHNlYXJjaExpc3QuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpIDogc2VhcmNoTGlzdC5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG5cdCAgfVxuXHR9O1xuXHRcblx0dmFyIGRlYm91bmNlZEFwaVF1ZXJ5SW5wdXQgPSAoMCwgX3V0aWxpdGllcy5kZWJvdW5jZSkoYXBpUXVlcnksIDEwMCwgZmFsc2UpO1xuXHRmdW5jdGlvbiBsaXN0ZW5BcGlRdWVyeSgpIHtcblx0ICB2YXIgYXBpUXVlcnlJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NlYXJjaC1pbnB1dCcpWzBdO1xuXHQgIHZhciBpbldyYXBwZXIgPSBmYWxzZTtcblx0ICBhcGlRdWVyeUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZGVib3VuY2VkQXBpUXVlcnlJbnB1dCk7XG5cdCAgYXBpUXVlcnlJbnB1dC5wYXJlbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoZXYpIHtcblx0ICAgIGlmICghY2hlY2tJZkZvY3VzLmFwcGx5KGFwaVF1ZXJ5SW5wdXQsIGV2KSkge1xuXHQgICAgICBjbGVhclNlYXJjaFJlc3VsdCgpO1xuXHQgICAgfTtcblx0ICAgIGluV3JhcHBlciA9IGZhbHNlO1xuXHQgIH0pO1xuXHQgIGFwaVF1ZXJ5SW5wdXQucGFyZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGV2KSB7XG5cdCAgICBpbldyYXBwZXIgPSB0cnVlO1xuXHQgIH0pO1xuXHQgIGFwaVF1ZXJ5SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uIChldikge1xuXHQgICAgaWYgKCFpbldyYXBwZXIpIGNsZWFyU2VhcmNoUmVzdWx0KCk7XG5cdCAgfSk7XG5cdCAgYXBpUXVlcnlJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGFwaVF1ZXJ5KTtcblx0fVxuXHRmdW5jdGlvbiBjaGVja0lmRm9jdXMoZXYpIHtcblx0ICByZXR1cm4gdGhpcyA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fVxuXHRmdW5jdGlvbiBhcGlRdWVyeShldikge1xuXHQgIGlmIChldi50YXJnZXQudmFsdWUubGVuZ3RoIDw9IDApIHtcblx0ICAgIGNsZWFyU2VhcmNoUmVzdWx0KCk7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIHBheWxvYWQgPSB7IHE6IGV2LnRhcmdldC52YWx1ZSB9O1xuXHQgICgwLCBfYWpheC4kaHR0cCkod2luZG93LmxvY2F0aW9uLm9yaWdpbiArICcvcGx1Z2luc19pbnN0YW50c2VhcmNoJykuZ2V0KHBheWxvYWQpLnRoZW4oY2FsbGJhY2suYXBpUXVlcnlTdWNjZXNzLmJpbmQoZXYpKS5jYXRjaChjYWxsYmFjay5lcnJvcik7XG5cdH1cblx0ZnVuY3Rpb24gY2xlYXJTZWFyY2hSZXN1bHQoKSB7XG5cdCAgdmFyIGFwaVNlYXJjaFJlc3VsdEVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS1zZWFyY2gtcmVzdWx0JylbMF07XG5cdCAgYXBpU2VhcmNoUmVzdWx0RWxlLmlubmVySFRNTCA9ICcnO1xuXHQgIGFwaVNlYXJjaFJlc3VsdEVsZS5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGZjcCgpIHtcblx0ICB2YXIgQXBwID0ge307XG5cdFxuXHQgIEFwcC5jYWJsZSA9IEFjdGlvbkNhYmxlLmNyZWF0ZUNvbnN1bWVyKCk7XG5cdFxuXHQgIF92dWUyLmRlZmF1bHQuY29tcG9uZW50KCdwbHVnaW4taXRlbScsIHtcblx0ICAgIHByb3BzOiBbJ3BsdWdpbnMnXSxcblx0ICAgIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgcGx1Z2luc0lucHV0OiBnYyxcblx0ICAgICAgICBzaG93TG9nczogZmFsc2Vcblx0ICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICB0ZW1wbGF0ZTogJ1xcbiAgICAgICAgPGRpdiBjbGFzcz1cInBsdWdpbnMtd3JhcFwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicGx1Z2luLXdyYXBcIiB2LWZvcj1cIihwZXJwbHVnaW4saW5kZXgpIGluIHBsdWdpbnNJbnB1dFwiPlxcblxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwZXItcm93LXBsdWdpbiBjLWdyaWQtcm93IGMtZ2FwLXRvcCBjLXBhZC1sZWZ0XCI+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImMtZ3JpZC1zcGFuMTAgcGFja2FnZS1uYW1lXCI+e3sgcGVycGx1Z2luLnBhY2thZ2VOYW1lIH19PC9zcGFuPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjLWdyaWQtc3BhbjYgcGFja2FnZS12ZXJzaW9uXCI+e3sgcGVycGx1Z2luLnBhY2thZ2VWZXJzaW9uIH19PC9zcGFuPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjLWdyaWQtc3BhbjEwIHBhY2thZ2UtY2ktcGFja2FnZS1uYW1lXCI+e3sgcGVycGx1Z2luLmNpUGFja2FnZU5hbWUgfX08L3NwYW4+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYy1ncmlkLXNwYW42XCI+e3sgcGVycGx1Z2luLmNpUGFja2FnZVZlcnNpb24gfX08L2Rpdj5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjLWdyaWQtc3BhbjhcIj57eyBwZXJwbHVnaW4uY2lQYWNrYWdlVmVyc2lvblBhdGNoIH19PC9kaXY+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImMtZ3JpZC1zcGFuNSBwYWNrYWdlLXN0YXR1c1wiPnt7IHBlcnBsdWdpbi5zdGF0dXMgfX08L3NwYW4+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImMtZ3JpZC1zcGFuMyBwYWNrYWdlLWxvZyBjLWNlbnRlclwiPjxzdmcgY2xhc3M9XCJpY29uIGljb24tbW9yZVwiIEBjbGljaz1cInRvZ2dsZUxvZyhwZXJwbHVnaW4pXCI+PHVzZSB4bGluazpocmVmPVwiI2ljb24tbW9yZVwiPjwvdXNlPjwvc3ZnPjwvc3Bhbj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFja2FnZS1sb2dcIiB2LWlmPVwicGVycGx1Z2luLnNob3dMb2dzXCI+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9hZGluZy1wbGFjZWhvbGRlciBjLWNlbnRlciBjLXBhZC10b3BcIiB2LWlmPVwiIXBlcnBsdWdpbi5sb2dcIj5wcm9jZXNzaW5nPC9kaXY+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGVyLXBoYXNlLWxvZ1wiIHYtZm9yPVwiKHZhbCwga2V5KSBpbiBwZXJwbHVnaW4ubG9nXCI+XFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwicGFja2FnZS1sb2ctaGVhZFwiPnt7IGtleSB9fTwvcD5cXG4gICAgICAgICAgICAgICAgPHByZSBjbGFzcz1cInBhY2thZ2UtbG9nLXByZVwiIHYtaHRtbD1cXCd2YWwuZGV0YWlsXFwnPjwvcHJlPlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+Jyxcblx0ICAgIG1ldGhvZHM6IHtcblx0ICAgICAgdG9nZ2xlTG9nOiBmdW5jdGlvbiB0b2dnbGVMb2coaXRlbSkge1xuXHQgICAgICAgIGlmICghaXRlbS5zaG93TG9ncykge1xuXHQgICAgICAgICAgaXRlbS5nYyA9IEFwcC5jYWJsZS5zdWJzY3JpcHRpb25zLmNyZWF0ZSh7XG5cdCAgICAgICAgICAgICdjaGFubmVsJzogXCJDaVBsdWdpbkxvZ3NDaGFubmVsXCIsXG5cdCAgICAgICAgICAgICdwbHVnaW5faWQnOiBpdGVtLmlkXG5cdCAgICAgICAgICB9LCB7XG5cdCAgICAgICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24gY29ubmVjdGVkKCkge1xuXHQgICAgICAgICAgICAgIHRoaXMucGVyZm9ybSgnc2VuZF9jdXJyZW50X2xvZycsIHtcblx0ICAgICAgICAgICAgICAgIHBsdWdpbl9pZDogaXRlbS5pZFxuXHQgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICByZWNlaXZlZDogZnVuY3Rpb24gcmVjZWl2ZWQoZGF0YSkge1xuXHQgICAgICAgICAgICAgIGl0ZW0ubG9nID0gZGF0YTtcblx0ICAgICAgICAgICAgICBpZiAoaXRlbS5zdGF0dXMgPT09ICdmYWlsZWQnIHx8IGl0ZW0uc3RhdHVzID09PSAnc3VjY2VzcycpIHtcblx0ICAgICAgICAgICAgICAgIGl0ZW0uZ2MudW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpZiAoaXRlbS5zdGF0dXMgPT09ICdmYWlsZWQnIHx8IGl0ZW0uc3RhdHVzID09PSAnc3VjY2VzcycpIHt9IGVsc2Uge1xuXHQgICAgICAgICAgICBpdGVtLmdjLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGl0ZW0uc2hvd0xvZ3MgPSAhaXRlbS5zaG93TG9ncztcblx0ICAgICAgfSxcblx0ICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoaWQpIHt9XG5cdCAgICB9XG5cdFxuXHQgIH0pO1xuXHRcblx0ICB2YXIgYXBwID0gbmV3IF92dWUyLmRlZmF1bHQoe1xuXHQgICAgZWw6ICcjYXBwJyxcblx0XG5cdCAgICBjb21wdXRlZDoge31cblx0XG5cdCAgfSk7XG5cdFxuXHQgIC8qIHVzZSBBY3Rpb25DYWJsZSB0byB1cGRhdGUgc3RhdHVzIG9mIHBlbmRpbmcgcGx1Z2luICovXG5cdFxuXHQgIGlmIChnYy5sZW5ndGggPiAwKSB7XG5cdCAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpLCBsZW5ndGgxKSB7XG5cdCAgICAgIGlmIChnY1tpXVsnc3RhdHVzJ10gIT09ICdmYWlsZWQnICYmIGdjW2ldWydzdGF0dXMnXSAhPT0gJ3N1Y2Nlc3MnKSB7XG5cdCAgICAgICAgZ2NbaV1bJ2djcCddID0gQXBwLmNhYmxlLnN1YnNjcmlwdGlvbnMuY3JlYXRlKHtcblx0ICAgICAgICAgICdjaGFubmVsJzogXCJDaVBsdWdpblN0YXR1c0NoYW5uZWxcIixcblx0ICAgICAgICAgICdwbHVnaW5faWQnOiBnY1tpXVsnaWQnXVxuXHQgICAgICAgIH0sIHtcblx0ICAgICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24gY29ubmVjdGVkKCkge1xuXHQgICAgICAgICAgICB0aGlzLnBlcmZvcm0oJ3NlbmRfY3VycmVudF9zdGF0dXMnLCB7XG5cdCAgICAgICAgICAgICAgcGx1Z2luX2lkOiBnY1tpXVsnaWQnXVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgIH0sXG5cdCAgICAgICAgICByZWNlaXZlZDogZnVuY3Rpb24gcmVjZWl2ZWQoZGF0YSkge1xuXHQgICAgICAgICAgICBnY1tpXVsnc3RhdHVzJ10gPSBkYXRhLnBsdWdpbl9zdGF0dXM7XG5cdCAgICAgICAgICAgIGlmIChkYXRhLnBsdWdpbl9zdGF0dXMgPT09ICdmYWlsZWQnIHx8IGRhdGEucGx1Z2luX3N0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG5cdCAgICAgICAgICAgICAgZ2NbaV1bJ2djcCddLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoMSA9IGdjLmxlbmd0aDsgaSA8IGxlbmd0aDE7IGkrKykge1xuXHQgICAgICBfbG9vcChpLCBsZW5ndGgxKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGxpc3RlbkFwaVF1ZXJ5KCk7XG5cdFxuXHQgIC8vIEFwcC5jaV9wbHVnaW5fbG9ncyA9IEFwcC5jYWJsZS5zdWJzY3JpcHRpb25zLmNyZWF0ZShcIkNpUGx1Z2luTG9nc0NoYW5uZWxcIiwge1xuXHQgIC8vICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcblx0ICAvLyAgICAgLy8gQ2FsbGVkIHdoZW4gdGhlIHN1YnNjcmlwdGlvbiBpcyByZWFkeSBmb3IgdXNlIG9uIHRoZSBzZXJ2ZXJcblx0ICAvLyAgICAgbGV0IHRoYXQgPSB0aGlzO1xuXHQgIC8vICAgICB0aGF0LnBlcmZvcm0oJ2ZvbGxvdycsIHtcblx0ICAvLyAgICAgICAncGx1Z2luX2lkJzpcblx0ICAvLyAgICAgfSlcblx0ICAvLyAgIH0sXG5cdFxuXHQgIC8vICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcblx0ICAvLyAgICAgLy8gQ2FsbGVkIHdoZW4gdGhlIHN1YnNjcmlwdGlvbiBoYXMgYmVlbiB0ZXJtaW5hdGVkIGJ5IHRoZSBzZXJ2ZXJcblx0ICAvLyAgIH0sXG5cdFxuXHQgIC8vICAgcmVjZWl2ZWQ6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAvLyAgICAgLy8gQ2FsbGVkIHdoZW4gdGhlcmUncyBpbmNvbWluZyBkYXRhIG9uIHRoZSB3ZWJzb2NrZXQgZm9yIHRoaXMgY2hhbm5lbFxuXHQgIC8vICAgICBjb25zb2xlLmxvZyhkYXRhKTtcblx0ICAvLyAgIH1cblx0ICAvLyB9KTtcblx0XG5cdCAgLy8gQXBwLmNvbW1lbnRzID0gQXBwLmNhYmxlLnN1YnNjcmlwdGlvbnMuY3JlYXRlKFwiQ29tbWVudHNDaGFubmVsXCIsIHtcblx0ICAvLyAgIGNvbGxlY3Rpb246IGZ1bmN0aW9uKCkge1xuXHQgIC8vICAgICByZXR1cm4gJChcIltkYXRhLWNoYW5uZWw9J2NvbW1lbnRzJ11cIik7XG5cdCAgLy8gICB9LFxuXHQgIC8vICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcblx0ICAvLyAgICAgY29uc29sZS5sb2coJ2Nvbm5lY3RlZCcpO1xuXHQgIC8vICAgICByZXR1cm4gc2V0VGltZW91dCgoZnVuY3Rpb24oX3RoaXMpIHtcblx0ICAvLyAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgLy8gICAgICAgICBfdGhpcy5mb2xsb3dDdXJyZW50TWVzc2FnZSgpO1xuXHQgIC8vICAgICAgICAgcmV0dXJuIF90aGlzLmluc3RhbGxQYWdlQ2hhbmdlQ2FsbGJhY2soKTtcblx0ICAvLyAgICAgICB9O1xuXHQgIC8vICAgICB9KSh0aGlzKSwgMTAwMCk7XG5cdCAgLy8gICB9LFxuXHQgIC8vICAgcmVjZWl2ZWQ6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAvLyAgICAgaWYgKCF0aGlzLnVzZXJJc0N1cnJlbnRVc2VyKGRhdGEuY29tbWVudCkpIHtcblx0ICAvLyAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uKCkuYXBwZW5kKGRhdGEuY29tbWVudCk7XG5cdCAgLy8gICAgIH1cblx0ICAvLyAgIH0sXG5cdCAgLy8gICB1c2VySXNDdXJyZW50VXNlcjogZnVuY3Rpb24oY29tbWVudCkge1xuXHQgIC8vICAgICByZXR1cm4gJChjb21tZW50KS5hdHRyKCdkYXRhLXVzZXItaWQnKSA9PT0gJCgnbWV0YVtuYW1lPWN1cnJlbnQtdXNlcl0nKS5hdHRyKCdpZCcpO1xuXHQgIC8vICAgfSxcblx0ICAvLyAgIGZvbGxvd0N1cnJlbnRNZXNzYWdlOiBmdW5jdGlvbigpIHtcblx0ICAvLyAgICAgdmFyIG1lc3NhZ2VJZDtcblx0ICAvLyAgICAgaWYgKG1lc3NhZ2VJZCA9IHRoaXMuY29sbGVjdGlvbigpLmRhdGEoJ21lc3NhZ2UtaWQnKSkge1xuXHQgIC8vICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm0oJ2ZvbGxvdycsIHtcblx0ICAvLyAgICAgICAgIG1lc3NhZ2VfaWQ6IG1lc3NhZ2VJZFxuXHQgIC8vICAgICAgIH0pO1xuXHQgIC8vICAgICB9IGVsc2Uge1xuXHQgIC8vICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm0oJ3VuZm9sbG93Jyk7XG5cdCAgLy8gICAgIH1cblx0ICAvLyAgIH0sXG5cdCAgLy8gICBpbnN0YWxsUGFnZUNoYW5nZUNhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0ICAvLyAgICAgaWYgKCF0aGlzLmluc3RhbGxlZFBhZ2VDaGFuZ2VDYWxsYmFjaykge1xuXHQgIC8vICAgICAgIHRoaXMuaW5zdGFsbGVkUGFnZUNoYW5nZUNhbGxiYWNrID0gdHJ1ZTtcblx0ICAvLyAgICAgICByZXR1cm4gJChkb2N1bWVudCkub24oJ3R1cmJvbGlua3M6bG9hZCcsIGZ1bmN0aW9uKCkge1xuXHQgIC8vICAgICAgICAgcmV0dXJuIEFwcC5jb21tZW50cy5mb2xsb3dDdXJyZW50TWVzc2FnZSgpO1xuXHQgIC8vICAgICAgIH0pO1xuXHQgIC8vICAgICB9XG5cdCAgLy8gICB9XG5cdCAgLy8gfSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDI3ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvbW9kdWxlcy9ob21lcGFnZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdFx0dmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuaG9tZSA9IGhvbWU7XG5cdFxuXHR2YXIgX3R3ZWV0Qm94ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90d2VldEJveCAqLyAyOSk7XG5cdFxuXHRmdW5jdGlvbiBob21lKCkge1xuXHRcdCgwLCBfdHdlZXRCb3gudHdlZXRCb3gpKCk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDI4ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL21vZHVsZXMvbmV3Q2lQbHVnaW5zLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMubmV3Q2lQbHVnaW5zID0gbmV3Q2lQbHVnaW5zO1xuXHRcblx0dmFyIF92dWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB2dWUgKi8gOSk7XG5cdFxuXHR2YXIgX3Z1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92dWUpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIG5ld0NpUGx1Z2lucygpIHtcblx0XG5cdCAgX3Z1ZTIuZGVmYXVsdC5jb21wb25lbnQoJ25ldy1wbHVnaW5zJywge1xuXHQgICAgcHJvcHM6IFsndGV4dGFyZWFJbnB1dCddLFxuXHQgICAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICBwbHVnaW5zSW5wdXQ6IHVuZGVmaW5lZCxcblx0ICAgICAgICBjYW5TdWJtaXQ6IHRydWUsXG5cdCAgICAgICAgcHJvY2Vzc2VkOiAwLFxuXHQgICAgICAgIGluaXRQYXRjaENpUGFja2FnZVZlcnNpb246IDAsXG5cdCAgICAgICAgcHJvY2Vzc2VkUGx1Z2luc0lucHV0RGF0YTogbnVsbFxuXHQgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIHRlbXBsYXRlOiAnXFxuICAgICAgPGRpdiBjbGFzcz1cIm5ldy1wbHVnaW5zLXdyYXBcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjLWdyaWQtcm93XCI+XFxuXFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwbHVnaW5zSW5wdXQgYy1ncmlkLXNwYW4xMFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoaW50XCI+Zm9ybWF0OiBwYWNrYWdlTmFtZUB2ZXJzaW9uPC9kaXY+XFxuICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwicGx1Z2lucy1pbnB1dC1hcmVhXCIgbmFtZT1cInRleHRhcmVhXCIgcm93cz1cIjE2XCIgcGxhY2Vob2xkZXI9XCJcXHU2REZCXFx1NTJBMHBsdWdpbnNcIiB2LW1vZGVsPVwicGx1Z2luc0lucHV0XCI+PC90ZXh0YXJlYT5cXG4gICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwbHVnaW5zIGMtZ3JpZC1zcGFuMzhcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGx1Z2lucy13cmFwXCI+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGx1Z2lucy1ocmVhZCBjLWdyaWQtcm93XCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjLWdyaWQtc3BhbjEwXCI+cGFja2FnZU5hbWU8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImMtZ3JpZC1zcGFuNlwiPnZlcnNpb248L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImMtZ3JpZC1zcGFuMTRcIj5DSS1wYWNrYWdlTmFtZTwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYy1ncmlkLXNwYW44XCI+Q0ktcGFja2FnZVZlcnNpb248L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImMtZ3JpZC1zcGFuMTBcIj5DSS1wYWNrYWdlVmVyc2lvblBhdGNoPC9kaXY+XFxuICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwZXItcm93LXBsdWdpbiBjLWdyaWQtcm93IGMtZ2FwLXRvcFwiIHYtZm9yPVwiKGl0ZW0sIGlkeCkgaW4gcHJvY2Vzc2VkUGx1Z2luc0lucHV0RGF0YVwiPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImMtZ3JpZC1zcGFuMTAgcGFja2FnZS1uYW1lXCI+e3sgaXRlbS5wYWNrYWdlTmFtZSB9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjLWdyaWQtc3BhbjYgcGFja2FnZS12ZXJzaW9uXCI+e3sgaXRlbS5wYWNrYWdlVmVyc2lvbiB9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjLWdyaWQtc3BhbjE0IHBhY2thZ2UtY2ktcGFja2FnZS1uYW1lXCI+e3sgaXRlbS5jaVBhY2thZ2VOYW1lIH19PC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImMtZ3JpZC1zcGFuOCBwYWNrYWdlLWNpLXBhY2thZ2UtdmVyc2lvblwiPnt7IGl0ZW0uY2lQYWNrYWdlVmVyc2lvbiB9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjLWdyaWQtc3BhbjEwIHBhY2thZ2UtY2ktcGFja2FnZS12ZXJzaW9uLXBhdGNoXCIgdi1pZj1cIml0ZW0uY2lQYWNrYWdlVmVyc2lvblwiPlxcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWludXMtcGF0Y2hcIiBAY2xpY2s9XCJtaW51c1BhdGNoVmVyc2lvbihpdGVtLCBpZHgpXCI+LTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBhdGNoLXZlcnNpb25cIj57eyBpdGVtLmNpUGFja2FnZVZlcnNpb25QYXRjaCB9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBsdXMtcGF0Y2hcIiBAY2xpY2s9XCJwbHVzUGF0Y2hWZXJzaW9uKGl0ZW0sIGlkeClcIj4rPC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjLWhpZGVcIiB2LWlmPVwicHJvY2Vzc2VkUGx1Z2luc0lucHV0XCI+e3sgcHJvY2Vzc2VkUGx1Z2luc0lucHV0IH19PC9kaXY+XFxuXFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICA8ZGl2IGNsYXNzPVwic3VibWl0LXJvdyBjLWNlbnRlciBjLWdhcC10b3AgYy1nYXAtYm90dG9tXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjLWJ0blwiIEBjbGljaz1cInN1Ym1pdFwiPkluc3RhbGwgb24gQnVpbGRDbG91ZCBjb21waWxlIG1hY2hpbmVzPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj4nLFxuXHQgICAgY29tcHV0ZWQ6IHtcblx0ICAgICAgcHJvY2Vzc2VkUGx1Z2luc0lucHV0OiB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICB2YXIgYXJyID0gW107XG5cdCAgICAgICAgICB2YXIgdmFsO1xuXHQgICAgICAgICAgdmFyIHNwbGl0QXJyID0gW107XG5cdCAgICAgICAgICB0aGlzLnByb2Nlc3NlZCArPSAxO1xuXHQgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbnNJbnB1dCkgcmV0dXJuIGFycjtcblx0ICAgICAgICAgIHZhciBsaW5lcyA9IHRoaXMucGx1Z2luc0lucHV0LnNwbGl0KCdcXG4nKTtcblx0ICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgaWYgKGxpbmVzW2ldLnRyaW0oKS5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgICAgdmFsID0gbGluZXNbaV0udHJpbSgpLnJlcGxhY2UoL15cXFwifF5cXCd8XFwnJHxcXFwiJC9nLCAnJyk7XG5cdCAgICAgICAgICAgICAgc3BsaXRBcnIgPSB2YWwuc3BsaXQoJ0AnKTtcblx0ICAgICAgICAgICAgICBhcnIucHVzaCh7XG5cdCAgICAgICAgICAgICAgICBpbnB1dDogdmFsLFxuXHQgICAgICAgICAgICAgICAgcGFja2FnZU5hbWU6IHNwbGl0QXJyWzBdLFxuXHQgICAgICAgICAgICAgICAgcGFja2FnZVZlcnNpb246IHNwbGl0QXJyWzFdIHx8ICcnLFxuXHQgICAgICAgICAgICAgICAgY2lQYWNrYWdlTmFtZTogc3BsaXRBcnJbMV0gPyAnJyArIHNwbGl0QXJyWzBdICsgJ18nICsgc3BsaXRBcnJbMV0uc3BsaXQoJy4nKS5qb2luKCdfJykgOiAnJyxcblx0ICAgICAgICAgICAgICAgIGNpUGFja2FnZVZlcnNpb246IHNwbGl0QXJyWzFdIHx8ICcnLFxuXHQgICAgICAgICAgICAgICAgY2lQYWNrYWdlVmVyc2lvblBhdGNoOiAwLFxuXHQgICAgICAgICAgICAgICAgY2lQYWNrYWdlTmFtZVByZWZpeDogJ2Zpcy1tc3ByZC0nXG5cdCAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHRoaXMucHJvY2Vzc2VkUGx1Z2luc0lucHV0RGF0YSA9IGFycjtcblx0ICAgICAgICAgIHJldHVybiBhcnI7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCgpIHt9XG5cdFxuXHQgICAgICB9XG5cdCAgICB9LFxuXHQgICAgbWV0aG9kczoge1xuXHQgICAgICBzdWJtaXQ6IGZ1bmN0aW9uIHN1Ym1pdCgpIHtcblx0ICAgICAgICB0aGlzLmNhblN1Ym1pdCA9IHRydWU7XG5cdCAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXHQgICAgICAgIHZhciBzdWJtaXRGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZmlzLWNpLXBsZ2lucy1mb3JtJylbMF07XG5cdCAgICAgICAgdmFyIHN1Ym1pdEVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Zpcy1jaS1wbGdpbnMtZm9ybS1zdWJtaXQtYnRuJylbMF07XG5cdCAgICAgICAgdmFyIHBsdWdpbklucHV0RWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncGx1Z2luLWlucHV0JylbMF07XG5cdCAgICAgICAgdmFyIHRtcEZvcm1FbGU7XG5cdCAgICAgICAgaWYgKHRoYXQucHJvY2Vzc2VkUGx1Z2luc0lucHV0Lmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgYWxlcnQoJzAnKTtyZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghdGhhdC5jaGVja1ZhbGlkYXRpb24odGhhdC5wcm9jZXNzZWRQbHVnaW5zSW5wdXQpKSB7XG5cdCAgICAgICAgICBhbGVydChcIuWMheWQjeS4jeiDveS7pWZpc+W8gOWktFxcbuW/hemhu+W4puato+ehrueahOeJiOacrOWPt1xcbueJiOacrOWPt+S4jeiDveW4puacieKAmO+8neKAmSzigJjvvZ7igJks4oCYPOKAmSwnPD0nLCc+JywnPj0nLCdeJ+etieagh+iusOOAglwiKTtyZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoYXQucHJvY2Vzc2VkUGx1Z2luc0lucHV0LmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XG5cdCAgICAgICAgICBmb3IgKHZhciBlbCBpbiBlbGVtZW50KSB7XG5cdCAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc093blByb3BlcnR5KGVsKSkge1xuXHQgICAgICAgICAgICAgIHRtcEZvcm1FbGUgPSB0aGF0LmNyZWF0ZUZvcm1FbGUoJ2NpX3BsdWdpbnNbXVsnICsgZWwgKyAnXScsIGVsZW1lbnRbZWxdKTtcblx0ICAgICAgICAgICAgICBzdWJtaXRGb3JtLmFwcGVuZENoaWxkKHRtcEZvcm1FbGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgaWYgKHRoYXQuY2FuU3VibWl0KSB7XG5cdCAgICAgICAgICBzdWJtaXRFbGUuY2xpY2soKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIGNoZWNrVmFsaWRhdGlvbjogZnVuY3Rpb24gY2hlY2tWYWxpZGF0aW9uKGFycikge1xuXHQgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblx0ICAgICAgICB2YXIgc3RyID0gSlNPTi5zdHJpbmdpZnkoYXJyKTtcblx0ICAgICAgICB2YXIgb2JqQXJyID0gSlNPTi5wYXJzZShzdHIpO1xuXHQgICAgICAgIHZhciBlbGU7XG5cdCAgICAgICAgdmFyIHJlID0gL1teQS1aYS16MC05QFxcLlxcLV9dL2c7XG5cdCAgICAgICAgY29uc29sZS5sb2cob2JqQXJyKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoMSA9IG9iakFyci5sZW5ndGg7IGkgPCBsZW5ndGgxOyBpKyspIHtcblx0ICAgICAgICAgIGVsZSA9IG9iakFycltpXTtcblx0XG5cdCAgICAgICAgICBpZiAoZWxlLmhhc093blByb3BlcnR5KCdpbnB1dCcpKSB7XG5cdFxuXHQgICAgICAgICAgICBpZiAoZWxlLmlucHV0LmluZGV4T2YoJ2ZpcycpID09PSAwIHx8IGVsZS5pbnB1dC5zcGxpdCgnQCcpLmxlbmd0aCA9PT0gMSB8fCBlbGUuaW5wdXQuaW5kZXhPZignQCcpID09PSBlbGUuaW5wdXQubGVuZ3RoIC0gMSkge1xuXHQgICAgICAgICAgICAgIHRoYXQuY2FuU3VibWl0ID0gZmFsc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY29uc29sZS5sb2coZWxlLmlucHV0KTtcblx0ICAgICAgICAgICAgaWYgKHJlLmV4ZWMoZWxlLmlucHV0KSkge1xuXHQgICAgICAgICAgICAgIHRoYXQuY2FuU3VibWl0ID0gZmFsc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiB0aGF0LmNhblN1Ym1pdDtcblx0ICAgICAgfSxcblx0ICAgICAgY3JlYXRlRm9ybUVsZTogZnVuY3Rpb24gY3JlYXRlRm9ybUVsZShuYW1lLCB2YWx1ZSkge1xuXHQgICAgICAgIHZhciBpbnB1dEVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0ICAgICAgICBpbnB1dEVsZS5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBuYW1lKTtcblx0ICAgICAgICBpbnB1dEVsZS52YWx1ZSA9IHZhbHVlO1xuXHQgICAgICAgIHJldHVybiBpbnB1dEVsZTtcblx0ICAgICAgfSxcblx0ICAgICAgZ2V0UGF0Y2hDaVBhY2thZ2VWZXJzaW9uOiBmdW5jdGlvbiBnZXRQYXRjaENpUGFja2FnZVZlcnNpb24oaXRlbSkge1xuXHQgICAgICAgIHZhciB2ZXJzaW9uID0gaXRlbS5wYWNrYWdlVmVyc2lvbjtcblx0ICAgICAgICB2YXIgdmVyQXJyID0gdmVyc2lvbi5zcGxpdCgnLScpO1xuXHQgICAgICAgIHZhciB2ZXJBcnJMZW4gPSB2b2lkIDA7XG5cdCAgICAgICAgdmFyIHNlY1BhcnRBcnIgPSB2b2lkIDA7XG5cdCAgICAgICAgdmFyIGZpcnN0UGFydEFyciA9IHZvaWQgMDtcblx0ICAgICAgICBpZiAodmVyQXJyLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgICAgZmlyc3RQYXJ0QXJyID0gdmVyc2lvbi5zcGxpdCgnLicpO1xuXHQgICAgICAgICAgdmVyQXJyTGVuID0gZmlyc3RQYXJ0QXJyLmxlbmd0aDtcblx0ICAgICAgICAgIGlmICh2ZXJBcnJMZW4gPT09IDIpIGZpcnN0UGFydEFyclsyXSA9IDA7XG5cdCAgICAgICAgICBpZiAodmVyQXJyTGVuID09PSAxKSB7XG5cdCAgICAgICAgICAgIGZpcnN0UGFydEFyclsxXSA9IDA7Zmlyc3RQYXJ0QXJyWzJdID0gMDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHZlckFyckxlbiA9IGZpcnN0UGFydEFyci5sZW5ndGg7XG5cdCAgICAgICAgICBmaXJzdFBhcnRBcnJbdmVyQXJyTGVuIC0gMV0gPSArZmlyc3RQYXJ0QXJyW3ZlckFyckxlbiAtIDFdICsgaXRlbS5jaVBhY2thZ2VWZXJzaW9uUGF0Y2g7XG5cdCAgICAgICAgICBpdGVtLmNpUGFja2FnZVZlcnNpb24gPSBmaXJzdFBhcnRBcnIuam9pbignLicpO1xuXHQgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodmVyQXJyLmxlbmd0aCA9PT0gMikge1xuXHQgICAgICAgICAgc2VjUGFydEFyciA9IHZlckFyclsxXS5zcGxpdCgnLicpO1xuXHQgICAgICAgICAgaWYgKHNlY1BhcnRBcnIubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgICAgICAgIHZlckFyclsxXSA9IHZlckFyclsxXSArICcuJyArIGl0ZW0uY2lQYWNrYWdlVmVyc2lvblBhdGNoO1xuXHQgICAgICAgICAgICBpdGVtLmNpUGFja2FnZVZlcnNpb24gPSB2ZXJBcnIuam9pbignLScpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBzZWNQYXJ0QXJyWzFdID0gK3NlY1BhcnRBcnJbMV0gKyBpdGVtLmNpUGFja2FnZVZlcnNpb25QYXRjaDtcblx0ICAgICAgICAgICAgdmVyQXJyWzFdID0gc2VjUGFydEFyci5qb2luKCcuJyk7XG5cdCAgICAgICAgICAgIGl0ZW0uY2lQYWNrYWdlVmVyc2lvbiA9IHZlckFyci5qb2luKCctJyk7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIG1pbnVzUGF0Y2hWZXJzaW9uOiBmdW5jdGlvbiBtaW51c1BhdGNoVmVyc2lvbihpdGVtLCBpZHgpIHtcblx0ICAgICAgICBpdGVtLmNpUGFja2FnZVZlcnNpb25QYXRjaCA9IGl0ZW0uY2lQYWNrYWdlVmVyc2lvblBhdGNoID09PSAwID8gMCA6IGl0ZW0uY2lQYWNrYWdlVmVyc2lvblBhdGNoIC0gMTtcblx0ICAgICAgICB0aGlzLmdldFBhdGNoQ2lQYWNrYWdlVmVyc2lvbihpdGVtKTtcblx0ICAgICAgfSxcblx0ICAgICAgcGx1c1BhdGNoVmVyc2lvbjogZnVuY3Rpb24gcGx1c1BhdGNoVmVyc2lvbihpdGVtLCBpZHgpIHtcblx0ICAgICAgICBpdGVtLmNpUGFja2FnZVZlcnNpb25QYXRjaCA9IGl0ZW0uY2lQYWNrYWdlVmVyc2lvblBhdGNoID09PSA1ID8gNSA6IGl0ZW0uY2lQYWNrYWdlVmVyc2lvblBhdGNoICsgMTtcblx0ICAgICAgICB0aGlzLmdldFBhdGNoQ2lQYWNrYWdlVmVyc2lvbihpdGVtKTtcblx0ICAgICAgfVxuXHRcblx0ICAgIH1cblx0XG5cdCAgfSk7XG5cdFxuXHQgIHZhciBhcHAgPSBuZXcgX3Z1ZTIuZGVmYXVsdCh7XG5cdCAgICBlbDogJyNhcHAnXG5cdCAgfSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDI5ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvbW9kdWxlcy90d2VldEJveC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMudHdlZXRCb3ggPSB0d2VldEJveDtcblx0ZnVuY3Rpb24gc2V0Rm9jdXMoZWwpIHtcblx0ICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXHQgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cdCAgcmFuZ2Uuc2V0U3RhcnQoZWwsIDApO1xuXHQgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuXHQgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcblx0ICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuXHR9XG5cdGZ1bmN0aW9uIHR3ZWV0Qm94KCkge1xuXHQgIHZhciBkb2MgPSBkb2N1bWVudDtcblx0ICB2YXIgdGIgPSBkb2MuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndHdlZXQtYm94JylbMF07XG5cdCAgaWYgKCF0YikgcmV0dXJuIG51bGw7XG5cdCAgdmFyIHRiZCA9IHRiLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKVswXTtcblx0ICB2YXIgdGJkU3RyaW5nID0gJzxkaXY+PGJyPjwvZGl2Pic7XG5cdFxuXHQgIHRiLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZnVuY3Rpb24gKGV2KSB7XG5cdCAgICB0Yi5jbGFzc0xpc3QucmVtb3ZlKCdjb25kZW5zZWQnKTtcblx0ICAgIGlmICh0Yi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JykgJiYgdGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpWzBdLmlubmVyVGV4dC50cmltKCkubGVuZ3RoKSB7XG5cdFxuXHQgICAgICB0Yi5jbGFzc0xpc3QucmVtb3ZlKCdzaG93UGxhY2Vob2xkZXInKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRiLmNsYXNzTGlzdC5hZGQoJ3Nob3dQbGFjZWhvbGRlcicpO1xuXHQgICAgfVxuXHQgICAgaWYgKHRiZC5pbm5lckhUTUwgPT09ICdXaGF0XFwncyBoYXBwZW5pbmc/Jykge1xuXHRcblx0ICAgICAgdGJkLmlubmVySFRNTCA9ICc8YnI+Jztcblx0ICAgIH1cblx0ICB9KTtcblx0ICB0Yi5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIChldikge1xuXHQgICAgaWYgKHRiLmlubmVySFRNTCkge1xuXHQgICAgICBpZiAodGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpWzBdICYmIHRiLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKVswXS50ZXh0Q29udGVudCkge1xuXHQgICAgICAgIHRiLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3dQbGFjZWhvbGRlcicpO1xuXHQgICAgICB9IGVsc2Uge307XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0Yi5pbm5lckhUTUwgPSB0YmRTdHJpbmc7XG5cdCAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcblx0ICAgICAgICBzZXRGb2N1cyh0Yi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JylbMF0pO1xuXHQgICAgICB9LCAwKTtcblx0ICAgIH07XG5cdCAgfSk7XG5cdFxuXHQgIHRiLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXYpIHtcblx0ICAgIGlmICh0Yi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JylbMF0gJiYgdGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpWzBdLnRleHRDb250ZW50KSB7XG5cdCAgICAgIHRiLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3dQbGFjZWhvbGRlcicpO1xuXHQgICAgfTtcblx0ICAgIGlmICh0Yi5pbm5lckhUTUwgPT09ICc8YnI+Jykge1xuXHQgICAgICB0Yi5pbm5lckhUTUwgPSB0YmRTdHJpbmc7XG5cdCAgICAgIHNldEZvY3VzKHRiLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKVswXSk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDMwICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtb2R1bGUpIHtcblx0XHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHRcdH1cblx0XHRyZXR1cm4gbW9kdWxlO1xuXHR9O1xuXG4vKioqLyB9XG4vKioqKioqLyBdKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gYXBwbGljYXRpb24uanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBiMDc5MWIzZTU4M2FmNzhmN2E5OSIsImltcG9ydCB7QWN0aW9uQ2FibGV9IGZyb20gJy4vY29tbW9uL0FjdGlvbkNhYmxlJztcbmltcG9ydCB7ZGF0YUxpbmtzfSBmcm9tICcuL21vZHVsZXMvZGF0YUxpbmtzJztcbmltcG9ydCB7aG9tZX0gZnJvbSAnLi9tb2R1bGVzL2hvbWVwYWdlJztcblxuaW1wb3J0IHtpbml0WGhyfSBmcm9tICcuL21vZHVsZXMvYXBpT3BlcmF0aW9uJztcbmRhdGFMaW5rcygpO1xuaW1wb3J0IHtmY3B9IGZyb20gJy4vbW9kdWxlcy9maXNDaVBsdWdpbnMnO1xuaW1wb3J0IHtuZXdDaVBsdWdpbnMgYXMgbmNwfSBmcm9tICcuL21vZHVsZXMvbmV3Q2lQbHVnaW5zJztcbi8vIGFwaVRyZWUoKTtcbi8vIHZhciBwID0gbmV3IGRhd25TVkcoKTtcbi8vIHAuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFpbnRlci10YXJnZXQnKSk7XG4vLyBwLnN0YXJ0KCk7XG5cbigoKSA9PiB7XG4gIGxldCByb3V0ZXMgPSB7XG4gICAgJy8nOiBob21lLFxuICAgICcvZGV2JzogW2luaXRYaHJdLFxuICAgICcvY2lfcGx1Z2lucy9uZXcnOiBuY3AsXG4gICAgJy9jaV9wbHVnaW5zJzogZmNwXG4gIH07XG4gIGxldCBwYXRoTmFtZSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgaWYgKHJvdXRlcy5oYXNPd25Qcm9wZXJ0eShwYXRoTmFtZSkpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHJvdXRlc1twYXRoTmFtZV0pID09PSAnW29iamVjdCBBcnJheV0nICYmXG4gICAgICByb3V0ZXNbcGF0aE5hbWVdLmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNbcGF0aE5hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJvdXRlc1twYXRoTmFtZV1baV0uYXBwbHkobnVsbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlc1twYXRoTmFtZV0uYXBwbHkobnVsbCk7XG4gICAgfVxuICB9XG5cbn0pKCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBwbGljYXRpb24uanMiLCJleHBvcnQgZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lT2JqKG9iaikge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbn1cbi8qIGNvbnNpZGVyIE9iamVjdC5hc3NpZ24odGFyZ2V0LCAuLi5zb3VyY2VzKSAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlT2JqKG9iajEgPSB7fSwgb2JqMikge1xuICBsZXQgbmV3T2JqID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmoxKSk7XG4gIGZvciAobGV0IGtleSBpbiBvYmoyKSB7XG4gICAgaWYgKG9iajIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgbmV3T2JqW2tleV0gPSBvYmoyW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdPYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkUHJlZml4VG9PYmoob2JqLCBwcmVmaXgpIHtcbiAgaWYgKCFwcmVmaXgpIHJldHVybiBvYmo7XG4gIGxldCBuZXdPYmogPSB7fTtcbiAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgbmV3T2JqWycnICsgcHJlZml4ICsgJ1snICsga2V5ICsgJ10nXSA9IG9ialtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3T2JqO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBPYmoob2JqLCB3cmFwcGVyKSB7XG4gIGlmICghd3JhcHBlcikgcmV0dXJuIG9iajtcbiAgdmFyIG5ld09iaiA9IHt9O1xuICBuZXdPYmpbd3JhcHBlcl0gPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgbmV3T2JqW3dyYXBwZXJdW2tleV0gPSBvYmpba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld09iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0clRvRG9tKHN0cikge1xuICBsZXQgdG1wRWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRtcEVsZS5pbm5lckhUTUwgPSBzdHI7XG4gIGxldCByZXR1cm5Eb20gPSB0bXBFbGUuY2hpbGRyZW5bMF07XG4gIHJldHVybiByZXR1cm5Eb207XG59XG4vKipcbiAqIFtpbnNlcnRBZnRlciBkZXNjcmlwdGlvbjogQWNjb3JkaW5nIHRvIE1ETiBpZiB0aGUgZWxlbWVudCBpcyBsYXN0IChhbmQgc28gbmV4dFNpYmxpbmcgaXMgbnVsbCkgdGhlIG5ld05vZGUgd2lsbCBiZSBhcHBlbmRlZCBhcyBleHBlY3RlZF1cbiAqIEBwYXJhbSAge1t0eXBlXX0gbmV3Tm9kZSAgICAgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlwZV19IHJlZmVyZW5jZU5vZGUgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7dW5kZWZpbmVkfSAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc2VydEFmdGVyKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcmVmZXJlbmNlTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlLm5leHRTaWJsaW5nKTtcbn1cblxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdFxuLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4vLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLlxuLypcbnZhciBteUVmZmljaWVudEZuID0gZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gIC8vIEFsbCB0aGUgdGF4aW5nIHN0dWZmIHlvdSBkb1xufSwgMjUwKTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG15RWZmaWNpZW50Rm4pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gIHZhciB0aW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICBpZiAoIWltbWVkaWF0ZSkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9O1xuICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgaWYgKGNhbGxOb3cpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gIH07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpY3RNb2RlKCkge1xuICB2YXIgaXNTdHJpY3QgPSAoZnVuY3Rpb24oKSB7IHJldHVybiAhdGhpczsgfSkoKTtcbiAgcmV0dXJuIGlzU3RyaWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xuICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgbGV0IHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL3V0aWxpdGllcy5qcyIsIi8qKlxuLy8gQi0+IEhlcmUgeW91IGRlZmluZSBpdHMgZnVuY3Rpb25zIGFuZCBpdHMgcGF5bG9hZFxudmFyIG1kbkFQSSA9ICdodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9zZWFyY2guanNvbic7XG52YXIgcGF5bG9hZCA9IHtcbiAgJ3RvcGljJyA6ICdqcycsXG4gICdxJyAgICAgOiAnUHJvbWlzZSdcbn07XG52YXIgY2FsbGJhY2sgPSB7XG4gIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgY29uc29sZS5sb2coMSwgJ3N1Y2Nlc3MnLCBKU09OLnBhcnNlKGRhdGEpKTtcbiAgfSxcbiAgZXJyb3IgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgY29uc29sZS5sb2coMiwgJ2Vycm9yJywgSlNPTi5wYXJzZShkYXRhKSk7XG4gIH1cbn07XG4vLyBFbmQgQlxuLy8gRXhlY3V0ZXMgdGhlIG1ldGhvZCBjYWxsXG4kaHR0cChtZG5BUEkpXG4gIC5nZXQocGF5bG9hZClcbiAgLnRoZW4oY2FsbGJhY2suc3VjY2VzcylcbiAgLmNhdGNoKGNhbGxiYWNrLmVycm9yKTtcbi8vIEV4ZWN1dGVzIHRoZSBtZXRob2QgY2FsbCBidXQgYW4gYWx0ZXJuYXRpdmUgd2F5ICgxKSB0byBoYW5kbGUgUHJvbWlzZSBSZWplY3QgY2FzZVxuJGh0dHAobWRuQVBJKVxuICAuZ2V0KHBheWxvYWQpXG4gIC50aGVuKGNhbGxiYWNrLnN1Y2Nlc3MsIGNhbGxiYWNrLmVycm9yKTtcbi8vIEV4ZWN1dGVzIHRoZSBtZXRob2QgY2FsbCBidXQgYW4gYWx0ZXJuYXRpdmUgd2F5ICgyKSB0byBoYW5kbGUgUHJvbWlzZSBSZWplY3QgY2FzZVxuJGh0dHAobWRuQVBJKVxuICAuZ2V0KHBheWxvYWQpXG4gIC50aGVuKGNhbGxiYWNrLnN1Y2Nlc3MpXG4gIC50aGVuKHVuZGVmaW5lZCwgY2FsbGJhY2suZXJyb3IpO1xuICovXG4vLyBBLT4gJGh0dHAgZnVuY3Rpb24gaXMgaW1wbGVtZW50ZWQgaW4gb3JkZXIgdG8gZm9sbG93IHRoZSBzdGFuZGFyZCBBZGFwdGVyIHBhdHRlcm5cbmltcG9ydCB7c2VyaWFsaXplfSBmcm9tICcuL3NlcmlhbGl6ZSc7XG5pbXBvcnQge2lzRW1wdHksIG1lcmdlT2JqLCBhZGRQcmVmaXhUb09iaiwgd3JhcE9ian0gZnJvbSAnLi91dGlsaXRpZXMnO1xuaW1wb3J0IHtyb3JQYXJhbXMgYXMgUlBzfSBmcm9tICcuL2NzcmYnO1xuXG5leHBvcnQgZnVuY3Rpb24gJGh0dHAodXJsKSB7XG4gIC8vIEEgc21hbGwgZXhhbXBsZSBvZiBvYmplY3RcbiAgdmFyIGNvcmUgPSB7XG5cbiAgICAvLyBNZXRob2QgdGhhdCBwZXJmb3JtcyB0aGUgYWpheCByZXF1ZXN0XG4gICAgYWpheDogZnVuY3Rpb24obWV0aG9kLCB1cmwsIGFyZ3MgPSB7fSwgcHJlZml4KSB7XG4gICAgICAvLyBmb3IgUmFpbHNcbiAgICAgIC8vIHVybCA9IHVybCArICcuanNvbic7XG4gICAgICAvLyBDcmVhdGluZyBhIHByb21pc2VcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgLy8gSW5zdGFudGlhdGVzIHRoZSBYTUxIdHRwUmVxdWVzdFxuICAgICAgICB2YXIgY2xpZW50ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ1BPU1QnIHx8IG1ldGhvZCA9PT0gJ1BVVCcgfHwgbWV0aG9kID09PSAnUEFUQ0gnIHx8IG1ldGhvZCA9PT0gJ0RFTEVURScpIHtcbiAgICAgICAgICBsZXQgdXJpID0gSlNPTi5zdHJpbmdpZnkoZXh0ZW5kR2VuZXJhbFBhcmFtcyh3cmFwT2JqKGFyZ3MsIHByZWZpeCkpKTtcbiAgICAgICAgICBjbGllbnQub3BlbihtZXRob2QsIHVybCk7XG4gICAgICAgICAgLy8gY2xpZW50LnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcbiAgICAgICAgICBjbGllbnQuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgICBjbGllbnQuc2VuZCh1cmkpO1xuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgICAgICBsZXQgdXJpID0gc2VyaWFsaXplKGV4dGVuZEdlbmVyYWxQYXJhbXMoYWRkUHJlZml4VG9PYmooYXJncywgcHJlZml4KSkpO1xuICAgICAgICAgIGNsaWVudC5vcGVuKG1ldGhvZCwgdXJsICsgJz8nICsgdXJpKTtcbiAgICAgICAgICBjbGllbnQuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgICBjbGllbnQuc2VuZCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNsaWVudC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgICAvLyBQZXJmb3JtcyB0aGUgZnVuY3Rpb24gXCJyZXNvbHZlXCIgd2hlbiB0aGlzLnN0YXR1cyBpcyBlcXVhbCB0byAyeHhcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFBlcmZvcm1zIHRoZSBmdW5jdGlvbiBcInJlamVjdFwiIHdoZW4gdGhpcy5zdGF0dXMgaXMgZGlmZmVyZW50IHRoYW4gMnh4XG4gICAgICAgICAgICByZWplY3QodGhpcy5yZXNwb25zZVRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY2xpZW50Lm9uZXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICByZWplY3QodGhpcy5yZXNwb25zZVRleHQpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFJldHVybiB0aGUgcHJvbWlzZVxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICB9O1xuICAvLyBBZGFwdGVyIHBhdHRlcm5cbiAgcmV0dXJuIHtcbiAgICAnZ2V0JzogZnVuY3Rpb24oYXJncywgcHJlZml4KSB7XG4gICAgICByZXR1cm4gY29yZS5hamF4KCdHRVQnLCB1cmwsIGFyZ3MsIHByZWZpeCk7XG4gICAgfSxcbiAgICAncG9zdCc6IGZ1bmN0aW9uKGFyZ3MsIHByZWZpeCkge1xuICAgICAgcmV0dXJuIGNvcmUuYWpheCgnUE9TVCcsIHVybCwgYXJncywgcHJlZml4KTtcbiAgICB9LFxuICAgICdwdXQnOiBmdW5jdGlvbihhcmdzLCBwcmVmaXgpIHtcbiAgICAgIHJldHVybiBjb3JlLmFqYXgoJ1BVVCcsIHVybCwgYXJncywgcHJlZml4KTtcbiAgICB9LFxuICAgICdwYXRjaCc6IGZ1bmN0aW9uKGFyZ3MsIHByZWZpeCkge1xuICAgICAgcmV0dXJuIGNvcmUuYWpheCgnUEFUQ0gnLCB1cmwsIGFyZ3MsIHByZWZpeCk7XG4gICAgfSxcbiAgICAnZGVsZXRlJzogZnVuY3Rpb24oYXJncywgcHJlZml4KSB7XG4gICAgICByZXR1cm4gY29yZS5hamF4KCdERUxFVEUnLCB1cmwsIGFyZ3MsIHByZWZpeCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBleHRlbmRHZW5lcmFsUGFyYW1zKG9iaikge1xuICBsZXQgY3NyZlBhcmFtID0gUlBzLmNzcmZQYXJhbSgpO1xuICBsZXQgY3NyZlRva2VuID0gUlBzLmNzcmZUb2tlbigpO1xuICBsZXQgZ2VuZXJhbE9iaiA9IHt9O1xuICBnZW5lcmFsT2JqLnV0ZjggPSAn4pyTJztcbiAgZ2VuZXJhbE9iai5mb3JtYXQgPSAnanNvbic7XG4gIGdlbmVyYWxPYmpbY3NyZlBhcmFtXSA9IGNzcmZUb2tlbjtcbiAgcmV0dXJuIG1lcmdlT2JqKG9iaiwgZ2VuZXJhbE9iaik7XG59XG4vLyBFbmQgQVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL2FqYXguanMiLCJpbXBvcnQge2luc2VydEFmdGVyLCBzdHJUb0RvbX0gZnJvbSAnLi91dGlsaXRpZXMnO1xuZXhwb3J0IGZ1bmN0aW9uIGZsYXNoKGRhdGEsIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7fSkge1xuICBsZXQgZmxhc2hFbGUgPSBzdHJUb0RvbShmbGFzaFRwbChkYXRhKSk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZmxhc2hFbGUpO1xuICBzZXRUaW1lb3V0KGRlc3RvcnkuYmluZChudWxsLCBmbGFzaEVsZSwgY2FsbGJhY2spLCAyMDAwKTtcbn1cblxuZnVuY3Rpb24gZmxhc2hUcGwoZGF0YSkge1xuICBsZXQgc3RyID0gYFxuXHRcdDxkaXYgY2xhc3M9XCJmbGFzaC1sYXllciAke2RhdGEuZXJyb3IgPyAnZXJyb3InIDogJ3N1Y2Nlc3MnfVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cIm1lc3NhZ2VcIj4ke2RhdGEuZXJyb3IgfHwgZGF0YS5tZXNzYWdlfTwvZGl2PlxuXHRcdDwvZGl2PlxuXHRgICA7XG4gIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGRlc3RvcnkoZWxlLCBjYWxsYmFjaykge1xuICBlbGUuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGUpO1xuICB9KTtcbiAgZWxlLmNsYXNzTGlzdC5hZGQoJ2JsaW5rJyk7XG4gIGNhbGxiYWNrKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUFuZEZsYXNoKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGxldCBqc29uRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gIGZsYXNoKGpzb25EYXRhLCBjYWxsYmFjayk7XG4gIHJldHVybiBqc29uRGF0YTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL2ZsYXNoLmpzIiwiaW1wb3J0IHtkaXNhYmxlU2Nyb2xsLCBlbmFibGVTY3JvbGx9IGZyb20gJy4vdG9nZ2xlU2Nyb2xsJztcbmV4cG9ydCBmdW5jdGlvbiBwb3B1cChldiwgcGFyYW1zLCBjYWxsYmFjaykge1xuICBsZXQgcG9wdXBFbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcG9wdXBFbGUuY2xhc3NMaXN0LmFkZCgncG9wdXAtbGF5ZXInKTtcbiAgcG9wdXBFbGUuaW5uZXJIVE1MID0gZ2VuZXJhdGVQb3B1cFRwbCgpO1xuICBwb3NpdGlvblBvcHVwRWxlKHBvcHVwRWxlLCBldik7XG4gIGJpbmRQb3B1cEV2ZW50cyhwb3B1cEVsZSwgZXYsIHBhcmFtcywgY2FsbGJhY2spO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBvcHVwRWxlKTtcbiAgZGlzYWJsZVNjcm9sbCgpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBvcHVwVHBsKGRhdGEpIHtcbiAgbGV0IHRwbCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwicG9wdXAtc2hhZG93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicG9wdXAtY29udGVudFwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwicG9wdXAtdGV4dFwiPkFyZSB5b3Ugc3VyZSB0byBkZWxldGUgdGhpcyBBUEk/PC9kaXY+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJwb3B1cC1idG5zXCI+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJwb3B1cC1idG4gcG9wdXAtY2FuY2VsLWJ0blwiPmNhbmNlbDwvc3Bhbj5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cInBvcHVwLWJ0biBwb3B1cC1jb25maXJtLWJ0blwiPmNvbmZpcm08L3NwYW4+XG5cdFx0XHRcdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cdGA7XG4gIHJldHVybiB0cGw7XG59XG5cbmZ1bmN0aW9uIGJpbmRQb3B1cEV2ZW50cyhlbGUsIGV2LCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIGVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwb3B1cC1jYW5jZWwtYnRuJylbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZVBvcHVwKTtcbiAgZWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3BvcHVwLXNoYWRvdycpWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VQb3B1cCk7XG4gIGVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwb3B1cC1jb25maXJtLWJ0bicpWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY29uZmlybS5iaW5kKHRoaXMsIGV2LCBlbGUsIHBhcmFtcywgY2FsbGJhY2spKTtcbn1cblxuZnVuY3Rpb24gY29uZmlybShldiwgZWxlLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlKTtcbn1cblxuZnVuY3Rpb24gcG9zaXRpb25Qb3B1cEVsZShlbGUsIGNvb3JkaW5hdGVzKSB7XG4gIGVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwb3B1cC1jb250ZW50JylbMF0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKCcgKyBjb29yZGluYXRlcy5jbGllbnRYICsgJ3B4LCAnICsgY29vcmRpbmF0ZXMuY2xpZW50WSArICdweCwgMCknO1xufVxuXG5mdW5jdGlvbiBjbG9zZVBvcHVwKGV2KSB7XG4gIGlmIChldi50YXJnZXQgIT09IGV2LmN1cnJlbnRUYXJnZXQpIHJldHVybjtcbiAgbGV0IHBvcExheWVyID0gZXYudGFyZ2V0LmNsb3Nlc3QoJy5wb3B1cC1sYXllcicpO1xuICBpZiAocG9wTGF5ZXIpIHtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHBvcExheWVyKTtcbiAgICBlbmFibGVTY3JvbGwoKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi9wb3B1cC5qcyIsIi8qKlxuICogW1RyZWUgZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0ge1t0eXBlXX0gZGF0YSBbZGVzY3JpcHRpb25dXG4gKlxuICogX3Jvb3QgcG9pbnRzIHRvIHRoZSByb290IG5vZGUgb2YgYSB0cmVlLlxuICogdHJhdmVyc2VERihjYWxsYmFjaykgdHJhdmVyc2VzIG5vZGVzIG9mIGEgdHJlZSB3aXRoIERGUy5cbiAqIHRyYXZlcnNlQkYoY2FsbGJhY2spIHRyYXZlcnNlcyBub2RlcyBvZiBhIHRyZWUgd2l0aCBCRlMuXG4gKiBjb250YWlucyhkYXRhLCB0cmF2ZXJzYWwpIHNlYXJjaGVzIGZvciBhIG5vZGUgaW4gYSB0cmVlLlxuICogYWRkKGRhdGEsIHRvRGF0YSwgdHJhdmVyc2UpIGFkZHMgYSBub2RlIHRvIGEgdHJlZS5cbiAqIHJlbW92ZShjaGlsZCwgcGFyZW50KSByZW1vdmVzIGEgbm9kZSBpbiBhIHRyZWUuXG4gKlxuICovXG5pbXBvcnQge1F1ZXVlfSBmcm9tICcuL3F1ZXVlJztcbmV4cG9ydCBmdW5jdGlvbiBUcmVlKGRhdGEpIHtcbiAgdmFyIG5vZGUgPSBuZXcgTm9kZShkYXRhKTtcbiAgdGhpcy5fcm9vdCA9IG5vZGU7XG59XG5cbmZ1bmN0aW9uIE5vZGUoZGF0YSkge1xuICB0aGlzLm5vZGVJZCA9IGRhdGEubm9kZUlkOyAvLyBsZWFmIGluZGV4LCBzdGFydHMgZnJvbSAwKHJvb3Qgbm9kZSlcbiAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICB0aGlzLmNoaWxkcmVuID0gW107XG4gIC8vIGFkZGVkIGxhdGVyXG4gIHRoaXMuY2hpbGRyZW5sZXZlbCA9IDE7IC8vIHJvd3Mgb2YgZGVzY2VuZGFudHMgb2YgY3VycmVudCBub2RlXG4gIHRoaXMuY29sdW1uID0gMDsgLy8gd2hpY2ggY29sdW1uIHRoZSBjdXJyZW50IG5vZGUgc2l0cyBpbiwgc3RhcnRzIGZyb20gMCggcm9vdCBub2RlIHNpdHMgaW4pXG4gIHRoaXMudG90YWxvZmZzZXR5bGV2ZWwgPSAwOyAvLyB0b3RhbCB2ZXJ0aWNhbCBvZmZzZXQgdG8gdGhlIGN1cnJlbnQgdHJlZSBcbiAgdGhpcy5kYXRhID0gZGF0YS5kYXRhIHx8IHt9O1xufVxuXG5UcmVlLnByb3RvdHlwZS50cmF2ZXJzZURGID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICAvLyB0aGlzIGlzIGEgcmVjdXJzZSBhbmQgaW1tZWRpYXRlbHktaW52b2tpbmcgZnVuY3Rpb25cbiAgKGZ1bmN0aW9uIHJlY3Vyc2UoY3VycmVudE5vZGUpIHtcbiAgICAvLyBzdGVwIDJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gY3VycmVudE5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIHN0ZXAgM1xuICAgICAgcmVjdXJzZShjdXJyZW50Tm9kZS5jaGlsZHJlbltpXSk7XG4gICAgfVxuXG4gICAgLy8gc3RlcCA0XG4gICAgY2FsbGJhY2soY3VycmVudE5vZGUpO1xuXG4gICAgLy8gc3RlcCAxXG4gIH0pKHRoaXMuX3Jvb3QpO1xuXG59O1xuXG4vLyBmb3IgdGhvc2Ugbm9kZXMgd2hvIGhhdmUgY2hpbGRyZW5cbmZ1bmN0aW9uIGNhbGNDaGlsZHJlbkxldmVscyhub2RlKSB7XG4gIHZhciB0b3RhbENoaWxkcmVuTGV2ZWxzID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgdG90YWxDaGlsZHJlbkxldmVscyArPSBub2RlLmNoaWxkcmVuW2ldLmNoaWxkcmVubGV2ZWw7XG4gIH07XG4gIHJldHVybiB0b3RhbENoaWxkcmVuTGV2ZWxzO1xufVxuVHJlZS5wcm90b3R5cGUuY2FsY0NoaWxkcmVuTGV2ZWwgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24obm9kZSkge1xuICAgIG5vZGUuY2hpbGRyZW5sZXZlbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IGNhbGNDaGlsZHJlbkxldmVscyhub2RlKSA6IDE7XG4gICAgbm9kZS5jb2x1bW4gPSBub2RlLnBhcmVudCA/IChub2RlLnBhcmVudC5jb2x1bW4gKyAxKSA6IDA7XG4gIH07XG5cbiAgdGhpcy50cmF2ZXJzZURGKGNhbGxiYWNrKTtcbn07XG5cbmZ1bmN0aW9uIGNhbGNPZmZZKGFyciwgZGF0YSkge1xuICB2YXIgbm9kZUlkeCA9IGZpbmRJbmRleChhcnIsIGRhdGEpO1xuICB2YXIgdG90YWxZID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlSWR4OyBpKyspIHtcbiAgICB0b3RhbFkgKz0gYXJyW2ldLmNoaWxkcmVubGV2ZWw7XG4gIH07XG4gIHJldHVybiB0b3RhbFk7XG59XG5cblRyZWUucHJvdG90eXBlLmNhbGNUb3RhbE9mZnNldFlMZXZlbCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbGV2ZWxnYXAgPSAwO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUucGFyZW50KSB7XG4gICAgICBub2RlLnRvdGFsb2Zmc2V0eWxldmVsID0gbm9kZS5wYXJlbnQudG90YWxvZmZzZXR5bGV2ZWwgKyBjYWxjT2ZmWShub2RlLnBhcmVudC5jaGlsZHJlbiwgbm9kZS5ub2RlSWQpO1xuICAgIH0gZWxzZSBpZiAobm9kZS5wYXJlbnQgPT09IG51bGwpIHtcblxuICAgIH07XG4gIH07XG5cbiAgdGhpcy50cmF2ZXJzZUJGKGNhbGxiYWNrKTtcblxufTtcblxuVHJlZS5wcm90b3R5cGUudHJhdmVyc2VCRiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBxdWV1ZSA9IG5ldyBRdWV1ZSgpO1xuXG4gIHF1ZXVlLmVucXVldWUodGhpcy5fcm9vdCk7XG5cbiAgdmFyIGN1cnJlbnRUcmVlID0gcXVldWUuZGVxdWV1ZSgpO1xuXG4gIHdoaWxlIChjdXJyZW50VHJlZSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjdXJyZW50VHJlZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcXVldWUuZW5xdWV1ZShjdXJyZW50VHJlZS5jaGlsZHJlbltpXSk7XG4gICAgfVxuXG4gICAgY2FsbGJhY2soY3VycmVudFRyZWUpO1xuICAgIGN1cnJlbnRUcmVlID0gcXVldWUuZGVxdWV1ZSgpO1xuICB9XG59O1xuXG5UcmVlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0cmF2ZXJzYWwpIHtcbiAgdHJhdmVyc2FsLmNhbGwodGhpcywgY2FsbGJhY2spO1xufTtcblxuVHJlZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oZGF0YSwgdG9EYXRhLCB0cmF2ZXJzYWwpIHtcbiAgdmFyIGNoaWxkID0gbmV3IE5vZGUoZGF0YSksXG4gICAgICBwYXJlbnQgPSBudWxsLFxuICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIGlmIChub2RlLm5vZGVJZCA9PT0gdG9EYXRhKSB7XG4gICAgICAgICAgcGFyZW50ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICB0aGlzLmNvbnRhaW5zKGNhbGxiYWNrLCB0cmF2ZXJzYWwpO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgY2hpbGQucGFyZW50ID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFkZCBub2RlIHRvIGEgbm9uLWV4aXN0ZW50IHBhcmVudC4nKTtcbiAgfVxuXG4gIHRoaXMuY2FsY0NoaWxkcmVuTGV2ZWwoKTtcbiAgdGhpcy5jYWxjVG90YWxPZmZzZXRZTGV2ZWwoKTtcbiAgdGhpcy5jaGVja0RhdGFIYXNDaGlsZCgpO1xuICByZXR1cm4gY2hpbGRcbn07XG5cblRyZWUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGRhdGEsIGZyb21EYXRhLCB0cmF2ZXJzYWwpIHtcbiAgdmFyIHRyZWUgPSB0aGlzLFxuICAgICAgcGFyZW50ID0gbnVsbCxcbiAgICAgIGNoaWxkVG9SZW1vdmUgPSBudWxsLFxuICAgICAgaW5kZXg7XG5cbiAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlLm5vZGVJZCA9PT0gZnJvbURhdGEpIHtcbiAgICAgIHBhcmVudCA9IG5vZGU7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuY29udGFpbnMoY2FsbGJhY2ssIHRyYXZlcnNhbCk7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIGluZGV4ID0gZmluZEluZGV4KHBhcmVudC5jaGlsZHJlbiwgZGF0YSk7XG5cbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb2RlIHRvIHJlbW92ZSBkb2VzIG5vdCBleGlzdC4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGRUb1JlbW92ZSA9IHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcmVudCBkb2VzIG5vdCBleGlzdC4nKTtcbiAgfVxuXG4gIHRoaXMuY2FsY0NoaWxkcmVuTGV2ZWwoKTtcbiAgdGhpcy5jYWxjVG90YWxPZmZzZXRZTGV2ZWwoKTtcbiAgdGhpcy5jaGVja0RhdGFIYXNDaGlsZCgpO1xuICByZXR1cm4gY2hpbGRUb1JlbW92ZTtcbn07XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIGRhdGEpIHtcbiAgdmFyIGluZGV4O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXS5ub2RlSWQgPT09IGRhdGEpIHtcbiAgICAgIGluZGV4ID0gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59XG5cbi8qIHRyZWUgYWRkb24qL1xuXG5UcmVlLnByb3RvdHlwZS50cmF2ZXJzZURpcmVjdENoaWxkID0gZnVuY3Rpb24obm9kZWRhdGEpIHtcbiAgdmFyIHF1ZXVlID0gbmV3IFF1ZXVlKCksXG4gIHBhcmVudCA9IG51bGwsXG4gICAgY2FsbGJhY2sgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5ub2RlSWQgPT09IG5vZGVkYXRhKSB7XG4gICAgICAgIHBhcmVudCA9IG5vZGU7XG4gICAgICB9XG4gICAgfTtcblxuICB0aGlzLmNvbnRhaW5zKGNhbGxiYWNrLCB0aGlzLnRyYXZlcnNlQkYpO1xuXG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcGFyZW50LmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBxdWV1ZS5lbnF1ZXVlKHBhcmVudC5jaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxiYWNrKHBhcmVudCk7XG4gICAgcGFyZW50ID0gbnVsbDtcbiAgfVxuICByZXR1cm4gcXVldWU7XG59O1xuVHJlZS5wcm90b3R5cGUuYXBwbHlTdHlsZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3R5bGVPYmogPSB7fTtcbiAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHN0eWxlT2JqW25vZGUubm9kZUlkXSA9IG5vZGUudG90YWxvZmZzZXR5bGV2ZWw7XG4gIH07XG4gIHRoaXMudHJhdmVyc2VCRihjYWxsYmFjayk7XG5cbiAgcmV0dXJuIHN0eWxlT2JqO1xufTtcblxuLyoqXG4gKiBbdHJhdmVyc2VEZXNjZW5kYW50cyBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1tpbnRlZ2VyXX0gbm9kZURhdGEgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W2FycmF5XX0gICAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cblRyZWUucHJvdG90eXBlLnRyYXZlcnNlRGVzY2VuZGFudHMgPSBmdW5jdGlvbihub2RlRGF0YSkge1xuICB2YXIgcXVldWUgPSBuZXcgUXVldWUoKSxcbiAgICAgIHBhcmVudCA9IG51bGwsXG4gICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLm5vZGVJZCA9PT0gbm9kZURhdGEpIHtcbiAgICAgICAgICAgIHBhcmVudCA9IG5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gIHRoaXMuY29udGFpbnMoY2FsbGJhY2ssIHRoaXMudHJhdmVyc2VCRik7XG5cbiAgcXVldWUuZW5xdWV1ZShwYXJlbnQpO1xuXG4gIHZhciBjdXJyZW50VHJlZSA9IHF1ZXVlLmRlcXVldWUoKTtcbiAgdmFyIGRlc2NlbmRhbnRzQXJyID0gW107XG5cbiAgd2hpbGUgKGN1cnJlbnRUcmVlKSB7XG4gICAgZGVzY2VuZGFudHNBcnIucHVzaChjdXJyZW50VHJlZSk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGN1cnJlbnRUcmVlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBxdWV1ZS5lbnF1ZXVlKGN1cnJlbnRUcmVlLmNoaWxkcmVuW2ldKTtcbiAgICB9XG5cbiAgICBjdXJyZW50VHJlZSA9IHF1ZXVlLmRlcXVldWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXNjZW5kYW50c0Fycjtcbn07XG5cblRyZWUucHJvdG90eXBlLmNoZWNrRGF0YUhhc0NoaWxkID0gZnVuY3Rpb24oKSB7XG4gIGxldCBjYWxsYmFjayA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2RlLmRhdGEuaGFzQ2hpbGQgPSBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7XG4gIH07XG4gIHRoaXMudHJhdmVyc2VCRihjYWxsYmFjayk7XG59O1xuXG4vKiBnZXQgTWF4IG5vZGVJZCBmcm9tIHRyZWUgKi9cblRyZWUucHJvdG90eXBlLm1heElkID0gZnVuY3Rpb24oKSB7XG4gIGxldCBtYXhOb2RlSWQgPSAwO1xuICBsZXQgY2FsbGJhY2sgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZUlkID4gbWF4Tm9kZUlkKSBtYXhOb2RlSWQgPSBub2RlLm5vZGVJZDtcbiAgfTtcbiAgdGhpcy50cmF2ZXJzZUJGKGNhbGxiYWNrKTtcbiAgcmV0dXJuIG1heE5vZGVJZDtcbn07XG5cbi8qIHRyZWUgZGVwdGggKi9cblRyZWUucHJvdG90eXBlLmRlcHRoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkZXB0aEFyciA9IFtdO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgbGV0IGRlcHRoID0gMDtcbiAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgIHdoaWxlIChub2RlLnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICBkZXB0aCArPSAxO1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgICB9XG4gICAgICBkZXB0aEFyci5wdXNoKGRlcHRoKTtcbiAgICB9XG4gIH07XG4gIHRoaXMudHJhdmVyc2VERihjYWxsYmFjayk7XG4gIHJldHVybiBkZXB0aEFycjtcbn07XG5cblRyZWUucHJvdG90eXBlLmRpbWVuc2lvbnMgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGhvcmlNYXgsIHZlcnRpY2FsTWF4LCBob3JpQXJyID0gW107XG4gIGhvcmlBcnIgPSB0aGlzLmRlcHRoKCk7XG4gIGhvcmlNYXggPSBNYXRoLm1heC5hcHBseShudWxsLCBob3JpQXJyKTtcbiAgdmVydGljYWxNYXggPSB0aGlzLl9yb290LmNoaWxkcmVubGV2ZWw7XG4gIHJldHVybiBbaG9yaU1heCwgdmVydGljYWxNYXhdO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBpLXRyZWUvdHJlZS5qcyIsImV4cG9ydCBsZXQgcm9yUGFyYW1zID0ge1xuICAvLyBVcC10by1kYXRlIENyb3NzLVNpdGUgUmVxdWVzdCBGb3JnZXJ5IHRva2VuXG4gIGNzcmZUb2tlbjogKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPWNzcmYtdG9rZW5dJykuZ2V0QXR0cmlidXRlKCdjb250ZW50JyksXG4gIC8vIFVSTCBwYXJhbSB0aGF0IG11c3QgY29udGFpbiB0aGUgQ1NSRiB0b2tlblxuICBjc3JmUGFyYW06ICgpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1jc3JmLXBhcmFtXScpLmdldEF0dHJpYnV0ZSgnY29udGVudCcpLFxuICAvLyBEZXRlcm1pbmVzIGlmIHRoZSByZXF1ZXN0IGlzIGEgY3Jvc3MgZG9tYWluIHJlcXVlc3QuXG4gIGlzQ3Jvc3NEb21haW46IHVybCA9PiB7XG4gICAgbGV0IG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG4gICAgbGV0IHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICAgIHRyeSB7XG4gICAgICB1cmxBbmNob3IuaHJlZiA9IHVybDtcbiAgICAgIC8vIFRoaXMgaXMgYSB3b3JrYXJvdW5kIHRvIGEgSUUgYnVnLlxuICAgICAgdXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblxuICAgICAgLy8gSWYgVVJMIHByb3RvY29sIGlzIGZhbHNlIG9yIGlzIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzaW5nbGUgY29sb25cbiAgICAgIC8vICphbmQqIGhvc3QgYXJlIGZhbHNlLCBhc3N1bWUgaXQgaXMgbm90IGEgY3Jvc3MtZG9tYWluIHJlcXVlc3RcbiAgICAgIC8vIChzaG91bGQgb25seSBiZSB0aGUgY2FzZSBmb3IgSUU3IGFuZCBJRSBjb21wYXRpYmlsaXR5IG1vZGUpLlxuICAgICAgLy8gT3RoZXJ3aXNlLCBldmFsdWF0ZSBwcm90b2NvbCBhbmQgaG9zdCBvZiB0aGUgVVJMIGFnYWluc3QgdGhlIG9yaWdpblxuICAgICAgLy8gcHJvdG9jb2wgYW5kIGhvc3QuXG4gICAgICByZXR1cm4gISgoKCF1cmxBbmNob3IucHJvdG9jb2wgfHwgdXJsQW5jaG9yLnByb3RvY29sID09PSAnOicpICYmICF1cmxBbmNob3IuaG9zdCkgfHxcbiAgICAgICAgKG9yaWdpbkFuY2hvci5wcm90b2NvbCArICcvLycgKyBvcmlnaW5BbmNob3IuaG9zdCA9PT1cbiAgICAgICAgICB1cmxBbmNob3IucHJvdG9jb2wgKyAnLy8nICsgdXJsQW5jaG9yLmhvc3QpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbi5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vY3NyZi5qcyIsImV4cG9ydCBmdW5jdGlvbiB0d29XYXlEYXRhQmluZGluZyhkYXRhLCBkb21Db250ZXh0KSB7XG4gIC8qIEluc3RhdGlhdGUgYW4gZW1wdHkgYG1vZGVsYCBvYmplY3QuICovXG4gIHZhciBtb2RlbCA9IHt9O1xuICAvKiBJdGVyYXRlIG92ZXIgdGhlIGtleXMgb2YgdGhlIHN1cHBsaWVkIGBkYXRhYCBvYmplY3QuICovXG4gIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgLyogU3RvcmUgb3VyIHZhbHVlIGluc2lkZSB0aGUgYGZvckVhY2hgIGNsb3N1cmUuICovXG4gICAgdmFyIHZhbHVlID0gZGF0YVtrZXldO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2RlbCwga2V5LCB7XG4gICAgICAvKiBXZSB3YW50IG91ciBwcm9wZXJ0eSB0byBhcHBlYXIgaW4gYGZvci4uaW5gIGxvb3BzLiAqL1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8qIFRoaXMgZG9lc24ndCBuZWVkIHRvIGRvIG11Y2gsIG9ubHkgcmV0dXJuIHRoZSBgdmFsdWVgIGZyb20gb3VyIGNsb3N1cmUuICovXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAvKiBPdmVyd3JpdGUgb3VyIGNsb3N1cmVzIGB2YWx1ZWAgd2l0aCB0aGUgbmV3IGB2YWxgLiAqL1xuICAgICAgICB2YWx1ZSA9IHZhbDtcbiAgICAgICAgLyogU2VsZWN0IGFsbCBub2RlcyB3aXRoIGBiaW5kYCBhbmQgYG1vZGVsYCBhdHRyaWJ1dGVzLiAqL1xuICAgICAgICBzZWxlY3RvclRvQXJyYXkoJ1tiaW5kPScgKyBrZXkgKyAnXScsIGRvbUNvbnRleHQpLmNvbmNhdChzZWxlY3RvclRvQXJyYXkoJ1ttb2RlbD0nICsga2V5ICsgJ10nLCBkb21Db250ZXh0KSkuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuICAgICAgICAgIC8qIElmIGVsZW1lbnQgaGFzIGBiaW5kYCBhdHRyaWJ1dGUsIHNldCBpdCdzIGB0ZXh0Q29udGVudGAuICovXG4gICAgICAgICAgaWYgKGVsLmdldEF0dHJpYnV0ZSgnYmluZCcpICYmICFlbC5oYXNBdHRyaWJ1dGUoJ2JpbmQtdG9nZ2xlLWNsYXNzJykpIGVsLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSgnYmluZC10b2dnbGUtY2xhc3MnKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCd0b2dnbGUtdHJ1ZScpOyBcbiAgICAgICAgICAgIH1lbHNlIGlmKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3RvZ2dsZS10cnVlJyk7XG4gICAgICAgICAgICB9ZWxzZSBpZih2YWx1ZSAmJiAoJycgKyB2YWx1ZSkubGVuZ3RoID4gMCAmJiAhaGFzQWN0aXZlRWxlKGVsQW5kRGVzY2VuZGFudHMoZWwpKSkge1xuICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCd0b2dnbGUtdHJ1ZScpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSgnYmluZC1hdHRyLWhyZWYnKSkge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdocmVmJywgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvKiBJZiBlbGVtZW50IGhhcyBgbW9kZWxgIGF0dHJpYnV0ZSwgc2V0IGl0J3MgYHZhbHVlYC4gKi9cblxuICAgICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ21vZGVsJykgJiYgZWwgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvKiBTZXQgb3VyIG1vZGVsIG9iamVjdHMgcHJvcGVydHkgdmFsdWUgdG8gdGhlIHNhbWUgdmFsdWUuICovXG4gICAgbW9kZWxba2V5XSA9IHZhbHVlO1xuICAgIC8qIEFkZCBjaGFuZ2UgaGFuZGxlcnMgdG8gaW5wdXRzIG9uIHRoZSBwYWdlLiAqL1xuICAgIHNlbGVjdG9yVG9BcnJheSgnW21vZGVsPScgKyBrZXkgKyAnXScsIGRvbUNvbnRleHQpLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcbiAgICAgIC8qIE91ciBoYW5kbGVyIHNpbXBseSBzZXRzIG91ciBtb2RlbHMgYGtleWAgdG8gdGhlIGVsZW1lbnQncyB2YWx1ZS4gKi9cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgIG1vZGVsW2tleV0gPSBlbC52YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8qIEJpbmQgYSBga2V5dXBgIGhhbmRsZXIgc28gd2UgZ2V0IGxpdmUgZmVlZGJhY2sgb24gZWFjaCBrZXkgcHJlc3MuICovXG4gICAgICAvLyBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGhhbmRsZXIpO1xuICAgICAgLyogQmluZCBhIGBjaGFuZ2VgIGhhbmRsZXIgd2hpY2ggaXMgZmlyZWQgd2hlbiB0aGUgZWxlbWVudCBpcyBibHVycmVkLiAqL1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBoYW5kbGVyKTtcbiAgICB9KTtcbiAgfSk7XG4gIC8qIFJldHVybiBvdXIgbmV3IG1vZGVsIG9iamVjdC4gKi9cbiAgcmV0dXJuIG1vZGVsO1xufVxuXG4vKiBpbmNsdWRlIGRvbUNvbnRleHQgaXRzc2VsZiAqL1xuZnVuY3Rpb24gc2VsZWN0b3JUb0FycmF5KHNlbGVjdG9yLCBkb21Db250ZXh0KSB7XG4gIGxldCBhcnIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb21Db250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgaWYgKGRvbUNvbnRleHQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICBhcnIucHVzaChkb21Db250ZXh0KTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBlbEFuZERlc2NlbmRhbnRzKGVsKSB7XG4gIGxldCByZXN1bHRBcnIgPSBbXTtcbiAgKGZ1bmN0aW9uIGxvb3AoZWxlKSB7XG4gICAgbGV0IGNoaWxkcmVuRWxlcyA9IGVsZS5jaGlsZHJlbjtcbiAgICBpZiAoZWxlLmNoaWxkRWxlbWVudENvdW50KSB7XG4gICAgICBmb3IgKHZhciBpID0gY2hpbGRyZW5FbGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGxvb3AoY2hpbGRyZW5FbGVzW2ldKVxuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHRBcnIucHVzaChlbGUpO1xuICB9KShlbCk7XG4gIHJldHVybiByZXN1bHRBcnI7XG59XG5mdW5jdGlvbiBoYXNBY3RpdmVFbGUoYXJyKSB7XG4gIGxldCBib2wgPSBmYWxzZTtcbiAgaWYgKGFyci5sZW5ndGggPT09IDApIHJldHVybjtcbiAgZm9yICh2YXIgaSA9IGFyci5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChib2wgPT09IHRydWUpIGJyZWFrO1xuICAgIGJvbCA9IGFycltpXSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA/IHRydWUgOiBmYWxzZTtcbiAgfVxuICByZXR1cm4gYm9sO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vdHdvV2F5RGF0YUJpbmRpbmcuanMiLCJleHBvcnQgY29uc3Qgcm9vdEFQSSA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyAnL2FwaXMnO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9nbG9iYWwvY29uc3RhbnQuanMiLCIvKiFcbiAqIFZ1ZS5qcyB2Mi4xLjhcbiAqIChjKSAyMDE0LTIwMTYgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gX3RvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogdHlwZW9mIHZhbCA9PT0gJ29iamVjdCdcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsLCAxMCk7XG4gIHJldHVybiAobiB8fCBuID09PSAwKSA/IG4gOiB2YWxcbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXlcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlJDEgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbG1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gLyhbXi1dKShbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpXG4gICAgLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpXG4gICAgLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kLCBmYXN0ZXIgdGhhbiBuYXRpdmVcbiAqL1xuZnVuY3Rpb24gYmluZCQxIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIGZuIGxlbmd0aFxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIE9CSkVDVF9TVFJJTkcgPSAnW29iamVjdCBPYmplY3RdJztcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSBPQkpFQ1RfU1RSSU5HXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKipcbiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICovXG5mdW5jdGlvbiBub29wICgpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qKlxuICogUmV0dXJuIHNhbWUgdmFsdWVcbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzdGF0aWMga2V5cyBzdHJpbmcgZnJvbSBjb21waWxlciBtb2R1bGVzLlxuICovXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzIChtb2R1bGVzKSB7XG4gIHJldHVybiBtb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAoa2V5cywgbSkge1xuICAgIHJldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXMgfHwgW10pXG4gIH0sIFtdKS5qb2luKCcsJylcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYSkgPT09IEpTT04uc3RyaW5naWZ5KGIpXG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qICAqL1xuXG52YXIgY29uZmlnID0ge1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGFzc2V0IHR5cGVzIHRoYXQgYSBjb21wb25lbnQgY2FuIG93bi5cbiAgICovXG4gIF9hc3NldFR5cGVzOiBbXG4gICAgJ2NvbXBvbmVudCcsXG4gICAgJ2RpcmVjdGl2ZScsXG4gICAgJ2ZpbHRlcidcbiAgXSxcblxuICAvKipcbiAgICogTGlzdCBvZiBsaWZlY3ljbGUgaG9va3MuXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IFtcbiAgICAnYmVmb3JlQ3JlYXRlJyxcbiAgICAnY3JlYXRlZCcsXG4gICAgJ2JlZm9yZU1vdW50JyxcbiAgICAnbW91bnRlZCcsXG4gICAgJ2JlZm9yZVVwZGF0ZScsXG4gICAgJ3VwZGF0ZWQnLFxuICAgICdiZWZvcmVEZXN0cm95JyxcbiAgICAnZGVzdHJveWVkJyxcbiAgICAnYWN0aXZhdGVkJyxcbiAgICAnZGVhY3RpdmF0ZWQnXG4gIF0sXG5cbiAgLyoqXG4gICAqIE1heCBjaXJjdWxhciB1cGRhdGVzIGFsbG93ZWQgaW4gYSBzY2hlZHVsZXIgZmx1c2ggY3ljbGUuXG4gICAqL1xuICBfbWF4VXBkYXRlQ291bnQ6IDEwMFxufTtcblxuLyogICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gL1teXFx3LiRdLztcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfSBlbHNlIHtcbiAgICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG4vKiBnbG9iYWxzIE11dGF0aW9uT2JzZXJ2ZXIgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMDtcbnZhciBpc0lPUyA9IFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSk7XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbi8qKlxuICogRGVmZXIgYSB0YXNrIHRvIGV4ZWN1dGUgaXQgYXN5bmNocm9ub3VzbHkuXG4gKi9cbnZhciBuZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsYmFja3MgPSBbXTtcbiAgdmFyIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIHRpbWVyRnVuYztcblxuICBmdW5jdGlvbiBuZXh0VGlja0hhbmRsZXIgKCkge1xuICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb3BpZXNbaV0oKTtcbiAgICB9XG4gIH1cblxuICAvLyB0aGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuICAvLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbiAgLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4gIC8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4gIC8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbiAgLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICAgIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgdmFyIGxvZ0Vycm9yID0gZnVuY3Rpb24gKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IH07XG4gICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgcC50aGVuKG5leHRUaWNrSGFuZGxlcikuY2F0Y2gobG9nRXJyb3IpO1xuICAgICAgLy8gaW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgICAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LnhcbiAgICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4gICkpIHtcbiAgICAvLyB1c2UgTXV0YXRpb25PYnNlcnZlciB3aGVyZSBuYXRpdmUgUHJvbWlzZSBpcyBub3QgYXZhaWxhYmxlLFxuICAgIC8vIGUuZy4gUGhhbnRvbUpTIElFMTEsIGlPUzcsIEFuZHJvaWQgNC40XG4gICAgdmFyIGNvdW50ZXIgPSAxO1xuICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKG5leHRUaWNrSGFuZGxlcik7XG4gICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvdW50ZXIpKTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gICAgfSk7XG4gICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgICAgdGV4dE5vZGUuZGF0YSA9IFN0cmluZyhjb3VudGVyKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrIHRvIHNldFRpbWVvdXRcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFRpbWVvdXQobmV4dFRpY2tIYW5kbGVyLCAwKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHF1ZXVlTmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGNiKSB7IGNiLmNhbGwoY3R4KTsgfVxuICAgICAgaWYgKF9yZXNvbHZlKSB7IF9yZXNvbHZlKGN0eCk7IH1cbiAgICB9KTtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgICAgdGltZXJGdW5jKCk7XG4gICAgfVxuICAgIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSlcbiAgICB9XG4gIH1cbn0pKCk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxudmFyIHdhcm4gPSBub29wO1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIFwiIFwiICsgKFxuICAgICAgICB2bSA/IGZvcm1hdExvY2F0aW9uKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAncm9vdCBpbnN0YW5jZSdcbiAgICB9XG4gICAgdmFyIG5hbWUgPSB2bS5faXNWdWVcbiAgICAgID8gdm0uJG9wdGlvbnMubmFtZSB8fCB2bS4kb3B0aW9ucy5fY29tcG9uZW50VGFnXG4gICAgICA6IHZtLm5hbWU7XG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gKFwiY29tcG9uZW50IDxcIiArIG5hbWUgKyBcIj5cIikgOiBcImFub255bW91cyBjb21wb25lbnRcIikgK1xuICAgICAgKHZtLl9pc1Z1ZSAmJiB2bS4kb3B0aW9ucy5fX2ZpbGUgPyAoXCIgYXQgXCIgKyAodm0uJG9wdGlvbnMuX19maWxlKSkgOiAnJylcbiAgICApXG4gIH07XG5cbiAgdmFyIGZvcm1hdExvY2F0aW9uID0gZnVuY3Rpb24gKHN0cikge1xuICAgIGlmIChzdHIgPT09ICdhbm9ueW1vdXMgY29tcG9uZW50Jykge1xuICAgICAgc3RyICs9IFwiIC0gdXNlIHRoZSBcXFwibmFtZVxcXCIgb3B0aW9uIGZvciBiZXR0ZXIgZGVidWdnaW5nIG1lc3NhZ2VzLlwiO1xuICAgIH1cbiAgICByZXR1cm4gKFwiXFxuKGZvdW5kIGluIFwiICsgc3RyICsgXCIpXCIpXG4gIH07XG59XG5cbi8qICAqL1xuXG5cbnZhciB1aWQkMSA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCQxKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUkMSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gdGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gdGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvbmx5IG9uZVxuLy8gd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQgYXQgYW55IHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0IChfdGFyZ2V0KSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7IHRhcmdldFN0YWNrLnB1c2goRGVwLnRhcmdldCk7IH1cbiAgRGVwLnRhcmdldCA9IF90YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFjay5wb3AoKTtcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dXG4uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgLy8gYXZvaWQgbGVha2luZyBhcmd1bWVudHM6XG4gICAgLy8gaHR0cDovL2pzcGVyZi5jb20vY2xvc3VyZS13aXRoLWFyZ3VtZW50c1xuICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShpKTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzJDFbaV07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogQnkgZGVmYXVsdCwgd2hlbiBhIHJlYWN0aXZlIHByb3BlcnR5IGlzIHNldCwgdGhlIG5ldyB2YWx1ZSBpc1xuICogYWxzbyBjb252ZXJ0ZWQgdG8gYmVjb21lIHJlYWN0aXZlLiBIb3dldmVyIHdoZW4gcGFzc2luZyBkb3duIHByb3BzLFxuICogd2UgZG9uJ3Qgd2FudCB0byBmb3JjZSBjb252ZXJzaW9uIGJlY2F1c2UgdGhlIHZhbHVlIG1heSBiZSBhIG5lc3RlZCB2YWx1ZVxuICogdW5kZXIgYSBmcm96ZW4gZGF0YSBzdHJ1Y3R1cmUuIENvbnZlcnRpbmcgaXQgd291bGQgZGVmZWF0IHRoZSBvcHRpbWl6YXRpb24uXG4gKi9cbnZhciBvYnNlcnZlclN0YXRlID0ge1xuICBzaG91bGRDb252ZXJ0OiB0cnVlLFxuICBpc1NldHRpbmdQcm9wczogZmFsc2Vcbn07XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBhcmUgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoZXMgdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB2YXIgYXVnbWVudCA9IGhhc1Byb3RvXG4gICAgICA/IHByb3RvQXVnbWVudFxuICAgICAgOiBjb3B5QXVnbWVudDtcbiAgICBhdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGVhY2ggcHJvcGVydHkgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSwgb2JqW2tleXNbaV1dKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXJcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG5cbiAgdmFyIGNoaWxkT2IgPSBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCQxIChvYmosIGtleSwgdmFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBvYmoubGVuZ3RoID0gTWF0aC5tYXgob2JqLmxlbmd0aCwga2V5KTtcbiAgICBvYmouc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGhhc093bihvYmosIGtleSkpIHtcbiAgICBvYmpba2V5XSA9IHZhbDtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSBvYmouX19vYl9fO1xuICBpZiAob2JqLl9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIG9ialtrZXldID0gdmFsO1xuICAgIHJldHVyblxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAob2JqLCBrZXkpIHtcbiAgdmFyIG9iID0gb2JqLl9fb2JfXztcbiAgaWYgKG9iai5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKG9iaiwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSBvYmpba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJvbSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCQxKHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiYgaXNQbGFpbk9iamVjdChmcm9tVmFsKSkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgY2hpbGRWYWwuY2FsbCh0aGlzKSxcbiAgICAgICAgcGFyZW50VmFsLmNhbGwodGhpcylcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyZW50VmFsIHx8IGNoaWxkVmFsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcGFyYW0gYXR0cmlidXRlcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHJldHVybiBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWxcbn1cblxuY29uZmlnLl9saWZlY3ljbGVIb29rcy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIHJldHVybiBjaGlsZFZhbFxuICAgID8gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gICAgOiByZXNcbn1cblxuY29uZmlnLl9hc3NldFR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIHBhcmVudFZhbCB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5IGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXldO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBwYXJlbnRWYWwgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZXh0ZW5kKHJldCwgY2hpbGRWYWwpO1xuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YXIgbG93ZXIgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoaXNCdWlsdEluVGFnKGxvd2VyKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhsb3dlcikpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgICAnaWQ6ICcgKyBrZXlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucykge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQpO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcbiAgdmFyIGV4dGVuZHNGcm9tID0gY2hpbGQuZXh0ZW5kcztcbiAgaWYgKGV4dGVuZHNGcm9tKSB7XG4gICAgcGFyZW50ID0gdHlwZW9mIGV4dGVuZHNGcm9tID09PSAnZnVuY3Rpb24nXG4gICAgICA/IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGV4dGVuZHNGcm9tLm9wdGlvbnMsIHZtKVxuICAgICAgOiBtZXJnZU9wdGlvbnMocGFyZW50LCBleHRlbmRzRnJvbSwgdm0pO1xuICB9XG4gIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBtaXhpbiA9IGNoaWxkLm1peGluc1tpXTtcbiAgICAgIGlmIChtaXhpbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBWdWUkMykge1xuICAgICAgICBtaXhpbiA9IG1peGluLm9wdGlvbnM7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBtaXhpbiwgdm0pO1xuICAgIH1cbiAgfVxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBoYW5kbGUgYm9vbGVhbiBwcm9wc1xuICBpZiAoaXNUeXBlKEJvb2xlYW4sIHByb3AudHlwZSkpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFpc1R5cGUoU3RyaW5nLCBwcm9wLnR5cGUpICYmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSkge1xuICAgICAgdmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZENvbnZlcnQgPSBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQ7XG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBwcmV2U2hvdWxkQ29udmVydDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAoaXNPYmplY3QoZGVmKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdm1ba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIHByb3AudHlwZSAhPT0gRnVuY3Rpb25cbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcbiAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgIH1cbiAgfVxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyArXG4gICAgICAnIEV4cGVjdGVkICcgKyBleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpICtcbiAgICAgICcsIGdvdCAnICsgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkgKyAnLicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB0aGUgdHlwZSBvZiBhIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChleHBlY3RlZFR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgdmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09IChleHBlY3RlZFR5cGUgPSAnc3RyaW5nJyk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnTnVtYmVyJykge1xuICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSAoZXhwZWN0ZWRUeXBlID0gJ251bWJlcicpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0Jvb2xlYW4nKSB7XG4gICAgdmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09IChleHBlY3RlZFR5cGUgPSAnYm9vbGVhbicpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0Z1bmN0aW9uJykge1xuICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSAoZXhwZWN0ZWRUeXBlID0gJ2Z1bmN0aW9uJyk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXVxufVxuXG5mdW5jdGlvbiBpc1R5cGUgKHR5cGUsIGZuKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShmbikpIHtcbiAgICByZXR1cm4gZ2V0VHlwZShmbikgPT09IGdldFR5cGUodHlwZSlcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZm4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZ2V0VHlwZShmbltpXSkgPT09IGdldFR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG5cblxudmFyIHV0aWwgPSBPYmplY3QuZnJlZXplKHtcblx0ZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxLFxuXHRfdG9TdHJpbmc6IF90b1N0cmluZyxcblx0dG9OdW1iZXI6IHRvTnVtYmVyLFxuXHRtYWtlTWFwOiBtYWtlTWFwLFxuXHRpc0J1aWx0SW5UYWc6IGlzQnVpbHRJblRhZyxcblx0cmVtb3ZlOiByZW1vdmUkMSxcblx0aGFzT3duOiBoYXNPd24sXG5cdGlzUHJpbWl0aXZlOiBpc1ByaW1pdGl2ZSxcblx0Y2FjaGVkOiBjYWNoZWQsXG5cdGNhbWVsaXplOiBjYW1lbGl6ZSxcblx0Y2FwaXRhbGl6ZTogY2FwaXRhbGl6ZSxcblx0aHlwaGVuYXRlOiBoeXBoZW5hdGUsXG5cdGJpbmQ6IGJpbmQkMSxcblx0dG9BcnJheTogdG9BcnJheSxcblx0ZXh0ZW5kOiBleHRlbmQsXG5cdGlzT2JqZWN0OiBpc09iamVjdCxcblx0aXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcblx0dG9PYmplY3Q6IHRvT2JqZWN0LFxuXHRub29wOiBub29wLFxuXHRubzogbm8sXG5cdGlkZW50aXR5OiBpZGVudGl0eSxcblx0Z2VuU3RhdGljS2V5czogZ2VuU3RhdGljS2V5cyxcblx0bG9vc2VFcXVhbDogbG9vc2VFcXVhbCxcblx0bG9vc2VJbmRleE9mOiBsb29zZUluZGV4T2YsXG5cdGlzUmVzZXJ2ZWQ6IGlzUmVzZXJ2ZWQsXG5cdGRlZjogZGVmLFxuXHRwYXJzZVBhdGg6IHBhcnNlUGF0aCxcblx0aGFzUHJvdG86IGhhc1Byb3RvLFxuXHRpbkJyb3dzZXI6IGluQnJvd3Nlcixcblx0VUE6IFVBLFxuXHRpc0lFOiBpc0lFLFxuXHRpc0lFOTogaXNJRTksXG5cdGlzRWRnZTogaXNFZGdlLFxuXHRpc0FuZHJvaWQ6IGlzQW5kcm9pZCxcblx0aXNJT1M6IGlzSU9TLFxuXHRpc1NlcnZlclJlbmRlcmluZzogaXNTZXJ2ZXJSZW5kZXJpbmcsXG5cdGRldnRvb2xzOiBkZXZ0b29scyxcblx0bmV4dFRpY2s6IG5leHRUaWNrLFxuXHRnZXQgX1NldCAoKSB7IHJldHVybiBfU2V0OyB9LFxuXHRtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcblx0cmVzb2x2ZUFzc2V0OiByZXNvbHZlQXNzZXQsXG5cdGdldCB3YXJuICgpIHsgcmV0dXJuIHdhcm47IH0sXG5cdGdldCBmb3JtYXRDb21wb25lbnROYW1lICgpIHsgcmV0dXJuIGZvcm1hdENvbXBvbmVudE5hbWU7IH0sXG5cdHZhbGlkYXRlUHJvcDogdmFsaWRhdGVQcm9wXG59KTtcblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgXCJyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0byBkZWNsYXJlIHJlYWN0aXZlIGRhdGEgXCIgK1xuICAgICAgXCJwcm9wZXJ0aWVzIGluIHRoZSBkYXRhIG9wdGlvbi5cIixcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgUHJveHkudG9TdHJpbmcoKS5tYXRjaCgvbmF0aXZlIGNvZGUvKTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhJyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fCBrZXkuY2hhckF0KDApID09PSAnXyc7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxuXG52YXIgcXVldWUgPSBbXTtcbnZhciBoYXMkMSA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIHF1ZXVlLmxlbmd0aCA9IDA7XG4gIGhhcyQxID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhcyQxW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzJDFbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IGNvbmZpZy5fbWF4VXBkYXRlQ291bnQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXMkMVtpZF0gPT0gbnVsbCkge1xuICAgIGhhcyQxW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID49IDAgJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShNYXRoLm1heChpLCBpbmRleCkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gZnVuY3Rpb24gKCkge307XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIiArIGV4cE9yRm4gKyBcIlxcXCIgXCIgK1xuICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiB0aGlzLmdldCgpO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gIHB1c2hUYXJnZXQodGhpcyk7XG4gIHZhciB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodGhpcy52bSwgdGhpcy52bSk7XG4gIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgaWYgKHRoaXMuZGVlcCkge1xuICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbiAgdGhpcy5jbGVhbnVwRGVwcygpO1xuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcyQxLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzJDEubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMkMSk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgICBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZSwgdGhpcy52bSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgICAgICAgKFwiRXJyb3IgaW4gd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSxcbiAgICAgICAgICAgICAgdGhpcy52bVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRocm93IGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzJDEuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlJDEodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcyQxLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMkMSk7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gIH1cbn07XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8ICFPYmplY3QuaXNFeHRlbnNpYmxlKHZhbCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCkgeyBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpOyB9XG59XG5cbnZhciBpc1Jlc2VydmVkUHJvcCA9IHsga2V5OiAxLCByZWY6IDEsIHNsb3Q6IDEgfTtcblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHMpIHtcbiAgdmFyIHByb3BzRGF0YSA9IHZtLiRvcHRpb25zLnByb3BzRGF0YSB8fCB7fTtcbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBPYmplY3Qua2V5cyhwcm9wcyk7XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IGlzUm9vdDtcbiAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGkgKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wW2tleV0pIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgdmFsaWRhdGVQcm9wKGtleSwgcHJvcHMsIHByb3BzRGF0YSwgdm0pLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS4kcGFyZW50ICYmICFvYnNlcnZlclN0YXRlLmlzU2V0dGluZ1Byb3BzKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHZhbGlkYXRlUHJvcChrZXksIHByb3BzLCBwcm9wc0RhdGEsIHZtKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgbG9vcCggaSApO1xuICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZGF0YS5jYWxsKHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXlzW2ldKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIChrZXlzW2ldKSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3h5KHZtLCBrZXlzW2ldKTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxudmFyIGNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5IGluIHZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImV4aXN0aW5nIGluc3RhbmNlIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3aWxsIGJlIFwiICtcbiAgICAgICAgXCJvdmVyd3JpdHRlbiBieSBhIGNvbXB1dGVkIHByb3BlcnR5IHdpdGggdGhlIHNhbWUgbmFtZS5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbi5nZXQgPSBtYWtlQ29tcHV0ZWRHZXR0ZXIodXNlckRlZiwgdm0pO1xuICAgICAgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgICA/IHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgICAgPyBtYWtlQ29tcHV0ZWRHZXR0ZXIodXNlckRlZi5nZXQsIHZtKVxuICAgICAgICAgIDogYmluZCQxKHVzZXJEZWYuZ2V0LCB2bSlcbiAgICAgICAgOiBub29wO1xuICAgICAgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0XG4gICAgICAgID8gYmluZCQxKHVzZXJEZWYuc2V0LCB2bSlcbiAgICAgICAgOiBub29wO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodm0sIGtleSwgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlQ29tcHV0ZWRHZXR0ZXIgKGdldHRlciwgb3duZXIpIHtcbiAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcihvd25lciwgZ2V0dGVyLCBub29wLCB7XG4gICAgbGF6eTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgIH1cbiAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICB2bVtrZXldID0gbWV0aG9kc1trZXldID09IG51bGwgPyBub29wIDogYmluZCQxKG1ldGhvZHNba2V5XSwgdm0pO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG1ldGhvZHNba2V5XSA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFuIHVuZGVmaW5lZCB2YWx1ZSBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAodm0sIGtleSwgaGFuZGxlcikge1xuICB2YXIgb3B0aW9ucztcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgdm0uJHdhdGNoKGtleSwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFcbiAgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uIChuZXdEYXRhKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldCQxO1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwcm94eSAodm0sIGtleSkge1xuICBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2bSwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgICAgIHJldHVybiB2bS5fZGF0YVtrZXldXG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgICAgIHZtLl9kYXRhW2tleV0gPSB2YWw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zXG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZnVuY3Rpb25hbENvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jaGlsZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG59O1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gJyc7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIHZub2RlLmNoaWxkcmVuLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9uc1xuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuZnVuY3Rpb24gY2xvbmVWTm9kZXMgKHZub2Rlcykge1xuICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHJlc1tpXSA9IGNsb25lVk5vZGUodm5vZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rLCBrZXkpIHtcbiAga2V5ID0ga2V5ICsgaG9va0tleTtcbiAgdmFyIGluamVjdGVkSGFzaCA9IGRlZi5fX2luamVjdGVkIHx8IChkZWYuX19pbmplY3RlZCA9IHt9KTtcbiAgaWYgKCFpbmplY3RlZEhhc2hba2V5XSkge1xuICAgIGluamVjdGVkSGFzaFtrZXldID0gdHJ1ZTtcbiAgICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcbiAgICBpZiAob2xkSG9vaykge1xuICAgICAgZGVmW2hvb2tLZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBvbGRIb29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZltob29rS2V5XSA9IGhvb2s7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBjdXIsIG9sZCwgZm4sIGV2ZW50LCBjYXB0dXJlLCBvbmNlO1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBpZiAoIWN1cikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIW9sZCkge1xuICAgICAgb25jZSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgICAgIGV2ZW50ID0gb25jZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICAgICAgY2FwdHVyZSA9IGV2ZW50LmNoYXJBdCgwKSA9PT0gJyEnO1xuICAgICAgZXZlbnQgPSBjYXB0dXJlID8gZXZlbnQuc2xpY2UoMSkgOiBldmVudDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cikpIHtcbiAgICAgICAgYWRkKGV2ZW50LCAoY3VyLmludm9rZXIgPSBhcnJJbnZva2VyKGN1cikpLCBvbmNlLCBjYXB0dXJlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghY3VyLmludm9rZXIpIHtcbiAgICAgICAgICBmbiA9IGN1cjtcbiAgICAgICAgICBjdXIgPSBvbltuYW1lXSA9IHt9O1xuICAgICAgICAgIGN1ci5mbiA9IGZuO1xuICAgICAgICAgIGN1ci5pbnZva2VyID0gZm5JbnZva2VyKGN1cik7XG4gICAgICAgIH1cbiAgICAgICAgYWRkKGV2ZW50LCBjdXIuaW52b2tlciwgb25jZSwgY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2xkKSkge1xuICAgICAgICBvbGQubGVuZ3RoID0gY3VyLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGQubGVuZ3RoOyBpKyspIHsgb2xkW2ldID0gY3VyW2ldOyB9XG4gICAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2xkLmZuID0gY3VyO1xuICAgICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKCFvbltuYW1lXSkge1xuICAgICAgb25jZSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgICAgIGV2ZW50ID0gb25jZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICAgICAgY2FwdHVyZSA9IGV2ZW50LmNoYXJBdCgwKSA9PT0gJyEnO1xuICAgICAgZXZlbnQgPSBjYXB0dXJlID8gZXZlbnQuc2xpY2UoMSkgOiBldmVudDtcbiAgICAgIHJlbW92ZSQkMShldmVudCwgb2xkT25bbmFtZV0uaW52b2tlciwgY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFyckludm9rZXIgKGFycikge1xuICByZXR1cm4gZnVuY3Rpb24gKGV2KSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIHNpbmdsZSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNpbmdsZSA/IGFycltpXShldikgOiBhcnJbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzJDEpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmbkludm9rZXIgKG8pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChldikge1xuICAgIHZhciBzaW5nbGUgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxO1xuICAgIHNpbmdsZSA/IG8uZm4oZXYpIDogby5mbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICB9XG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9tcmFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJjdXRzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChjID09IG51bGwgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdCA9IHJlc1tyZXMubGVuZ3RoIC0gMV07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICByZXMucHVzaC5hcHBseShyZXMsIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKSk7XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGxhc3QgJiYgbGFzdC50ZXh0KSB7XG4gICAgICAgIGxhc3QudGV4dCArPSBTdHJpbmcoYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjLnRleHQgJiYgbGFzdCAmJiBsYXN0LnRleHQpIHtcbiAgICAgICAgcmVzW3Jlcy5sZW5ndGggLSAxXSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGMudGFnICYmIGMua2V5ID09IG51bGwgJiYgbmVzdGVkSW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYyAmJiBjLmNvbXBvbmVudE9wdGlvbnM7IH0pWzBdXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkJDEgKGV2ZW50LCBmbiwgb25jZSkge1xuICBpZiAob25jZSkge1xuICAgIHRhcmdldC4kb25jZShldmVudCwgZm4pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCQxLCByZW1vdmUkMiwgdm0pO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpczsodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjYnNbaV0uYXBwbHkodm0sIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fbW91bnQgPSBmdW5jdGlvbiAoXG4gICAgZWwsXG4gICAgaHlkcmF0aW5nXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uJGVsID0gZWw7XG4gICAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLnRlbXBsYXRlICYmIHZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSAhPT0gJyMnKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdZb3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQgb2YgVnVlIHdoZXJlIHRoZSB0ZW1wbGF0ZSAnICtcbiAgICAgICAgICAgICdvcHRpb24gaXMgbm90IGF2YWlsYWJsZS4gRWl0aGVyIHByZS1jb21waWxlIHRoZSB0ZW1wbGF0ZXMgaW50byAnICtcbiAgICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdGYWlsZWQgdG8gbW91bnQgY29tcG9uZW50OiB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24gbm90IGRlZmluZWQuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG4gICAgdm0uX3dhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfSwgbm9vcCk7XG4gICAgaHlkcmF0aW5nID0gZmFsc2U7XG4gICAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgICAvLyBtb3VudGVkIGlzIGNhbGxlZCBmb3IgcmVuZGVyLWNyZWF0ZWQgY2hpbGQgY29tcG9uZW50cyBpbiBpdHMgaW5zZXJ0ZWQgaG9va1xuICAgIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgIH1cbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICAgIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18oXG4gICAgICAgIHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudEVsbSxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3JlZkVsbVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlRnJvbVBhcmVudCA9IGZ1bmN0aW9uIChcbiAgICBwcm9wc0RhdGEsXG4gICAgbGlzdGVuZXJzLFxuICAgIHBhcmVudFZub2RlLFxuICAgIHJlbmRlckNoaWxkcmVuXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIGhhc0NoaWxkcmVuID0gISEodm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8IHJlbmRlckNoaWxkcmVuKTtcbiAgICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuICAgIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgICB9XG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG4gICAgLy8gdXBkYXRlIHByb3BzXG4gICAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gZmFsc2U7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBvYnNlcnZlclN0YXRlLmlzU2V0dGluZ1Byb3BzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgICB2bVtrZXldID0gdmFsaWRhdGVQcm9wKGtleSwgdm0uJG9wdGlvbnMucHJvcHMsIHByb3BzRGF0YSwgdm0pO1xuICAgICAgfVxuICAgICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIG9ic2VydmVyU3RhdGUuaXNTZXR0aW5nUHJvcHMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgICB9XG4gICAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuICAgIH1cbiAgICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICAgIGlmIChoYXNDaGlsZHJlbikge1xuICAgICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUkMShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGhhbmRsZXJzW2ldLmNhbGwodm0pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGhvb2tzID0geyBpbml0OiBpbml0LCBwcmVwYXRjaDogcHJlcGF0Y2gsIGluc2VydDogaW5zZXJ0LCBkZXN0cm95OiBkZXN0cm95JDEgfTtcbnZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhob29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoIUN0b3IpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIGlmICghQ3Rvci5jaWQpIHtcbiAgICBpZiAoQ3Rvci5yZXNvbHZlZCkge1xuICAgICAgQ3RvciA9IEN0b3IucmVzb2x2ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoQ3RvciwgYmFzZUN0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gaXQncyBvayB0byBxdWV1ZSB0aGlzIG9uIGV2ZXJ5IHJlbmRlciBiZWNhdXNlXG4gICAgICAgIC8vICRmb3JjZVVwZGF0ZSBpcyBidWZmZXJlZCBieSB0aGUgc2NoZWR1bGVyLlxuICAgICAgICBjb250ZXh0LiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIUN0b3IpIHtcbiAgICAgICAgLy8gcmV0dXJuIG5vdGhpbmcgaWYgdGhpcyBpcyBpbmRlZWQgYW4gYXN5bmMgY29tcG9uZW50XG4gICAgICAgIC8vIHdhaXQgZm9yIHRoZSBjYWxsYmFjayB0byB0cmlnZ2VyIHBhcmVudCB1cGRhdGUuXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzKGRhdGEsIEN0b3IpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzXG4gICAgZGF0YSA9IHt9O1xuICB9XG5cbiAgLy8gbWVyZ2UgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBtZXJnZUhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH1cbiAgKTtcbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKHByb3BPcHRpb25zKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSk7XG4gICAgfVxuICB9XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgX2NvbnRleHQgPSBPYmplY3QuY3JlYXRlKGNvbnRleHQpO1xuICB2YXIgaCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KF9jb250ZXh0LCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcbiAgdmFyIHZub2RlID0gQ3Rvci5vcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIGgsIHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgZGF0YTogZGF0YSxcbiAgICBwYXJlbnQ6IGNvbnRleHQsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHNsb3RzOiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlU2xvdHMoY2hpbGRyZW4sIGNvbnRleHQpOyB9XG4gIH0pO1xuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHZub2RlLmZ1bmN0aW9uYWxDb250ZXh0ID0gY29udGV4dDtcbiAgICBpZiAoZGF0YS5zbG90KSB7XG4gICAgICAodm5vZGUuZGF0YSB8fCAodm5vZGUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCwgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4gIHBhcmVudEVsbSxcbiAgcmVmRWxtXG4pIHtcbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBwcm9wc0RhdGE6IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGEsXG4gICAgX2NvbXBvbmVudFRhZzogdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZyxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIF9wYXJlbnRMaXN0ZW5lcnM6IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnMsXG4gICAgX3JlbmRlckNoaWxkcmVuOiB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW4sXG4gICAgX3BhcmVudEVsbTogcGFyZW50RWxtIHx8IG51bGwsXG4gICAgX3JlZkVsbTogcmVmRWxtIHx8IG51bGxcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlubGluZVRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZUNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbml0IChcbiAgdm5vZGUsXG4gIGh5ZHJhdGluZyxcbiAgcGFyZW50RWxtLFxuICByZWZFbG1cbikge1xuICBpZiAoIXZub2RlLmNoaWxkIHx8IHZub2RlLmNoaWxkLl9pc0Rlc3Ryb3llZCkge1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgIHZub2RlLFxuICAgICAgYWN0aXZlSW5zdGFuY2UsXG4gICAgICBwYXJlbnRFbG0sXG4gICAgICByZWZFbG1cbiAgICApO1xuICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gIH0gZWxzZSBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGF0Y2ggKFxuICBvbGRWbm9kZSxcbiAgdm5vZGVcbikge1xuICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkID0gb2xkVm5vZGUuY2hpbGQ7XG4gIGNoaWxkLl91cGRhdGVGcm9tUGFyZW50KFxuICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICApO1xufVxuXG5mdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gIGlmICghdm5vZGUuY2hpbGQuX2lzTW91bnRlZCkge1xuICAgIHZub2RlLmNoaWxkLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZub2RlLmNoaWxkLCAnbW91bnRlZCcpO1xuICB9XG4gIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgIHZub2RlLmNoaWxkLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGNhbGxIb29rKHZub2RlLmNoaWxkLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVzdHJveSQxICh2bm9kZSkge1xuICBpZiAoIXZub2RlLmNoaWxkLl9pc0Rlc3Ryb3llZCkge1xuICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIHZub2RlLmNoaWxkLiRkZXN0cm95KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmNoaWxkLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgICBjYWxsSG9vayh2bm9kZS5jaGlsZCwgJ2RlYWN0aXZhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yLFxuICBjYlxuKSB7XG4gIGlmIChmYWN0b3J5LnJlcXVlc3RlZCkge1xuICAgIC8vIHBvb2wgY2FsbGJhY2tzXG4gICAgZmFjdG9yeS5wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2IpO1xuICB9IGVsc2Uge1xuICAgIGZhY3RvcnkucmVxdWVzdGVkID0gdHJ1ZTtcbiAgICB2YXIgY2JzID0gZmFjdG9yeS5wZW5kaW5nQ2FsbGJhY2tzID0gW2NiXTtcbiAgICB2YXIgc3luYyA9IHRydWU7XG5cbiAgICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICAgIHJlcyA9IGJhc2VDdG9yLmV4dGVuZChyZXMpO1xuICAgICAgfVxuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSByZXM7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBjYnNbaV0ocmVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIC8vIGhhbmRsZSBwcm9taXNlXG4gICAgaWYgKHJlcyAmJiB0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicgJiYgIWZhY3RvcnkucmVzb2x2ZWQpIHtcbiAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wcyAoZGF0YSwgQ3Rvcikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wT3B0aW9ucykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgdmFyIGRvbVByb3BzID0gZGF0YS5kb21Qcm9wcztcbiAgaWYgKGF0dHJzIHx8IHByb3BzIHx8IGRvbVByb3BzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXkpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBkb21Qcm9wcywga2V5LCBhbHRLZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGhhc2gpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2tzIChkYXRhKSB7XG4gIGlmICghZGF0YS5ob29rKSB7XG4gICAgZGF0YS5ob29rID0ge307XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBmcm9tUGFyZW50ID0gZGF0YS5ob29rW2tleV07XG4gICAgdmFyIG91cnMgPSBob29rc1trZXldO1xuICAgIGRhdGEuaG9va1trZXldID0gZnJvbVBhcmVudCA/IG1lcmdlSG9vayQxKG91cnMsIGZyb21QYXJlbnQpIDogb3VycztcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAob25lLCB0d28pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgb25lKGEsIGIsIGMsIGQpO1xuICAgIHR3byhhLCBiLCBjLCBkKTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoYWx3YXlzTm9ybWFsaXplKSB7IG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTsgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoZGF0YSAmJiBkYXRhLl9fb2JfXykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmICh2bm9kZSkge1xuICAgIGlmIChucykgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIHJldHVyblxuICB9XG4gIGlmICh2bm9kZS5jaGlsZHJlbikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChjaGlsZC50YWcgJiYgIWNoaWxkLm5zKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLiR2bm9kZSA9IG51bGw7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlXG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHModm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0ge307XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcbiAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgc3RhdGljUmVuZGVyRm5zID0gcmVmLnN0YXRpY1JlbmRlckZucztcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICAvLyBjbG9uZSBzbG90IG5vZGVzIG9uIHJlLXJlbmRlcnNcbiAgICAgIGZvciAodmFyIGtleSBpbiB2bS4kc2xvdHMpIHtcbiAgICAgICAgdm0uJHNsb3RzW2tleV0gPSBjbG9uZVZOb2Rlcyh2bS4kc2xvdHNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSAmJiBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cykge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRpY1JlbmRlckZucyAmJiAhdm0uX3N0YXRpY1RyZWVzKSB7XG4gICAgICB2bS5fc3RhdGljVHJlZXMgPSBbXTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICAgICAgY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGUsIHZtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJFcnJvciB3aGVuIHJlbmRlcmluZyBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIjpcIikpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcblxuICAvLyB0b1N0cmluZyBmb3IgbXVzdGFjaGVzXG4gIFZ1ZS5wcm90b3R5cGUuX3MgPSBfdG9TdHJpbmc7XG4gIC8vIGNvbnZlcnQgdGV4dCB0byB2bm9kZVxuICBWdWUucHJvdG90eXBlLl92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICAvLyBudW1iZXIgY29udmVyc2lvblxuICBWdWUucHJvdG90eXBlLl9uID0gdG9OdW1iZXI7XG4gIC8vIGVtcHR5IHZub2RlXG4gIFZ1ZS5wcm90b3R5cGUuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAvLyBsb29zZSBlcXVhbFxuICBWdWUucHJvdG90eXBlLl9xID0gbG9vc2VFcXVhbDtcbiAgLy8gbG9vc2UgaW5kZXhPZlxuICBWdWUucHJvdG90eXBlLl9pID0gbG9vc2VJbmRleE9mO1xuXG4gIC8vIHJlbmRlciBzdGF0aWMgdHJlZSBieSBpbmRleFxuICBWdWUucHJvdG90eXBlLl9tID0gZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgICBpbmRleCxcbiAgICBpc0luRm9yXG4gICkge1xuICAgIHZhciB0cmVlID0gdGhpcy5fc3RhdGljVHJlZXNbaW5kZXhdO1xuICAgIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAgIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlIGJ5IGRvaW5nIGEgc2hhbGxvdyBjbG9uZS5cbiAgICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodHJlZSlcbiAgICAgICAgPyBjbG9uZVZOb2Rlcyh0cmVlKVxuICAgICAgICA6IGNsb25lVk5vZGUodHJlZSlcbiAgICB9XG4gICAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICAgIHRyZWUgPSB0aGlzLl9zdGF0aWNUcmVlc1tpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbCh0aGlzLl9yZW5kZXJQcm94eSk7XG4gICAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgICByZXR1cm4gdHJlZVxuICB9O1xuXG4gIC8vIG1hcmsgbm9kZSBhcyBzdGF0aWMgKHYtb25jZSlcbiAgVnVlLnByb3RvdHlwZS5fbyA9IGZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgICB0cmVlLFxuICAgIGluZGV4LFxuICAgIGtleVxuICApIHtcbiAgICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgICByZXR1cm4gdHJlZVxuICB9O1xuXG4gIGZ1bmN0aW9uIG1hcmtTdGF0aWMgKHRyZWUsIGtleSwgaXNPbmNlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gICAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gICAgbm9kZS5rZXkgPSBrZXk7XG4gICAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG4gIH1cblxuICAvLyBmaWx0ZXIgcmVzb2x1dGlvbiBoZWxwZXJcbiAgVnVlLnByb3RvdHlwZS5fZiA9IGZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gICAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxuICB9O1xuXG4gIC8vIHJlbmRlciB2LWZvclxuICBWdWUucHJvdG90eXBlLl9sID0gZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gICAgdmFsLFxuICAgIHJlbmRlclxuICApIHtcbiAgICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfTtcblxuICAvLyByZW5kZXJTbG90XG4gIFZ1ZS5wcm90b3R5cGUuX3QgPSBmdW5jdGlvbiAoXG4gICAgbmFtZSxcbiAgICBmYWxsYmFjayxcbiAgICBwcm9wcyxcbiAgICBiaW5kT2JqZWN0XG4gICkge1xuICAgIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgICAgZXh0ZW5kKHByb3BzLCBiaW5kT2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzY29wZWRTbG90Rm4ocHJvcHMpIHx8IGZhbGxiYWNrXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzbG90Tm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXTtcbiAgICAgIC8vIHdhcm4gZHVwbGljYXRlIHNsb3QgdXNhZ2VcbiAgICAgIGlmIChzbG90Tm9kZXMgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBzbG90Tm9kZXMuX3JlbmRlcmVkICYmIHdhcm4oXG4gICAgICAgICAgXCJEdXBsaWNhdGUgcHJlc2VuY2Ugb2Ygc2xvdCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGZvdW5kIGluIHRoZSBzYW1lIHJlbmRlciB0cmVlIFwiICtcbiAgICAgICAgICBcIi0gdGhpcyB3aWxsIGxpa2VseSBjYXVzZSByZW5kZXIgZXJyb3JzLlwiLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgICAgc2xvdE5vZGVzLl9yZW5kZXJlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2xvdE5vZGVzIHx8IGZhbGxiYWNrXG4gICAgfVxuICB9O1xuXG4gIC8vIGFwcGx5IHYtYmluZCBvYmplY3RcbiAgVnVlLnByb3RvdHlwZS5fYiA9IGZ1bmN0aW9uIGJpbmRQcm9wcyAoXG4gICAgZGF0YSxcbiAgICB0YWcsXG4gICAgdmFsdWUsXG4gICAgYXNQcm9wXG4gICkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJyB8fCBrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlW2tleV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIGtleSlcbiAgICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH07XG5cbiAgLy8gY2hlY2sgdi1vbiBrZXlDb2Rlc1xuICBWdWUucHJvdG90eXBlLl9rID0gZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gICAgZXZlbnRLZXlDb2RlLFxuICAgIGtleSxcbiAgICBidWlsdEluQWxpYXNcbiAgKSB7XG4gICAgdmFyIGtleUNvZGVzID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbkFsaWFzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGtleUNvZGVzKSkge1xuICAgICAgcmV0dXJuIGtleUNvZGVzLmluZGV4T2YoZXZlbnRLZXlDb2RlKSA9PT0gLTFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGtleUNvZGVzICE9PSBldmVudEtleUNvZGVcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgdmFyIHNsb3RzID0ge307XG4gIGlmICghY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gc2xvdHNcbiAgfVxuICB2YXIgZGVmYXVsdFNsb3QgPSBbXTtcbiAgdmFyIG5hbWUsIGNoaWxkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mdW5jdGlvbmFsQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgICAgY2hpbGQuZGF0YSAmJiAobmFtZSA9IGNoaWxkLmRhdGEuc2xvdCkpIHtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWZhdWx0U2xvdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNpbmdsZSB3aGl0ZXNwYWNlXG4gIGlmIChkZWZhdWx0U2xvdC5sZW5ndGggJiYgIShcbiAgICBkZWZhdWx0U2xvdC5sZW5ndGggPT09IDEgJiZcbiAgICAoZGVmYXVsdFNsb3RbMF0udGV4dCA9PT0gJyAnIHx8IGRlZmF1bHRTbG90WzBdLmlzQ29tbWVudClcbiAgKSkge1xuICAgIHNsb3RzLmRlZmF1bHQgPSBkZWZhdWx0U2xvdDtcbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCsrO1xuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMucHJvcHNEYXRhID0gb3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSBvcHRpb25zLl9yZW5kZXJDaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICBvcHRzLl9wYXJlbnRFbG0gPSBvcHRpb25zLl9wYXJlbnRFbG07XG4gIG9wdHMuX3JlZkVsbSA9IG9wdGlvbnMuX3JlZkVsbTtcbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXIub3B0aW9ucztcbiAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgdmFyIGV4dGVuZE9wdGlvbnMgPSBDdG9yLmV4dGVuZE9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZFxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICBleHRlbmRPcHRpb25zLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgICAgZXh0ZW5kT3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgICAgIGV4dGVuZE9wdGlvbnMuX3Njb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIGV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIFZ1ZSQzIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlJDMpKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUkMyk7XG5zdGF0ZU1peGluKFZ1ZSQzKTtcbmV2ZW50c01peGluKFZ1ZSQzKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSQzKTtcbnJlbmRlck1peGluKFZ1ZSQzKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwbHVnaW4uaW5zdGFsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgcGx1Z2luLmluc3RhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghL15bYS16QS1aXVtcXHctXSokLy50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICAgICAnY2FuIG9ubHkgY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgdGhlIGh5cGhlbiwgJyArXG4gICAgICAgICAgJ2FuZCBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgY29uZmlnLmlzUmVzZXJ2ZWRUYWcoaWQpKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICAgICAgICAgJ2lkOiAnICsgaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxudmFyIHBhdHRlcm5UeXBlcyA9IFtTdHJpbmcsIFJlZ0V4cF07XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKVxuICB9XG59XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgaW5jbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIGV4Y2x1ZGU6IHBhdHRlcm5UeXBlc1xuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQodGhpcy4kc2xvdHMuZGVmYXVsdCk7XG4gICAgaWYgKHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnMpIHtcbiAgICAgIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIHBhdHRlcm5cbiAgICAgIHZhciBuYW1lID0gb3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZztcbiAgICAgIGlmIChuYW1lICYmIChcbiAgICAgICAgKHRoaXMuaW5jbHVkZSAmJiAhbWF0Y2hlcyh0aGlzLmluY2x1ZGUsIG5hbWUpKSB8fFxuICAgICAgICAodGhpcy5leGNsdWRlICYmIG1hdGNoZXModGhpcy5leGNsdWRlLCBuYW1lKSlcbiAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IG9wdHMuQ3Rvci5jaWQgKyAob3B0cy50YWcgPyAoXCI6OlwiICsgKG9wdHMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAodGhpcy5jYWNoZVtrZXldKSB7XG4gICAgICAgIHZub2RlLmNoaWxkID0gdGhpcy5jYWNoZVtrZXldLmNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYWNoZVtrZXldID0gdm5vZGU7XG4gICAgICB9XG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZVxuICB9LFxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgdmFyIHZub2RlID0gdGhpcyQxLmNhY2hlW2tleV07XG4gICAgICBjYWxsSG9vayh2bm9kZS5jaGlsZCwgJ2RlYWN0aXZhdGVkJyk7XG4gICAgICB2bm9kZS5jaGlsZC4kZGVzdHJveSgpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkgKFZ1ZSkge1xuICAvLyBjb25maWdcbiAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICBjb25maWdEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnOyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG4gIFZ1ZS51dGlsID0gdXRpbDtcbiAgVnVlLnNldCA9IHNldCQxO1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbmZpZy5fYXNzZXRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUkMyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUkMy5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5WdWUkMy52ZXJzaW9uID0gJzIuMS44JztcblxuLyogICovXG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoY2hpbGROb2RlLmNoaWxkKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNoaWxkLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZ2VuQ2xhc3NGcm9tRGF0YShkYXRhKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGNoaWxkLmNsYXNzXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5DbGFzc0Zyb21EYXRhIChkYXRhKSB7XG4gIHZhciBkeW5hbWljQ2xhc3MgPSBkYXRhLmNsYXNzO1xuICB2YXIgc3RhdGljQ2xhc3MgPSBkYXRhLnN0YXRpY0NsYXNzO1xuICBpZiAoc3RhdGljQ2xhc3MgfHwgZHluYW1pY0NsYXNzKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB2YXIgc3RyaW5naWZpZWQ7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZVtpXSkge1xuICAgICAgICBpZiAoKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSkge1xuICAgICAgICAgIHJlcyArPSBzdHJpbmdpZmllZCArICcgJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZVtrZXldKSB7IHJlcyArPSBrZXkgKyAnICc7IH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlciwnICtcbiAgJ2ZvbnQtZmFjZSxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUHJlVGFnID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gdGFnID09PSAncHJlJzsgfTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdG9yID0gZWw7XG4gICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICBpZiAoIWVsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgc2VsZWN0b3JcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVsXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiAnbXVsdGlwbGUnIGluIHZub2RlLmRhdGEuYXR0cnMpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlIChub2RlLCBrZXksIHZhbCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShrZXksIHZhbCk7XG59XG5cblxudmFyIG5vZGVPcHMgPSBPYmplY3QuZnJlZXplKHtcblx0Y3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuXHRjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcblx0Y3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuXHRjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuXHRpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcblx0cmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuXHRhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG5cdHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG5cdG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcblx0dGFnTmFtZTogdGFnTmFtZSxcblx0c2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuXHRzZXRBdHRyaWJ1dGU6IHNldEF0dHJpYnV0ZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWtleSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jaGlsZCB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUkMShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSAmJiByZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuXG4vKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzJDEgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gaXNVbmRlZiAocykge1xuICByZXR1cm4gcyA9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmIChzKSB7XG4gIHJldHVybiBzICE9IG51bGxcbn1cblxuZnVuY3Rpb24gc2FtZVZub2RlICh2bm9kZTEsIHZub2RlMikge1xuICByZXR1cm4gKFxuICAgIHZub2RlMS5rZXkgPT09IHZub2RlMi5rZXkgJiZcbiAgICB2bm9kZTEudGFnID09PSB2bm9kZTIudGFnICYmXG4gICAgdm5vZGUxLmlzQ29tbWVudCA9PT0gdm5vZGUyLmlzQ29tbWVudCAmJlxuICAgICF2bm9kZTEuZGF0YSA9PT0gIXZub2RlMi5kYXRhXG4gIClcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcyQxLmxlbmd0aDsgKytpKSB7XG4gICAgY2JzW2hvb2tzJDFbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChtb2R1bGVzW2pdW2hvb2tzJDFbaV1dICE9PSB1bmRlZmluZWQpIHsgY2JzW2hvb2tzJDFbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rcyQxW2ldXSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5QcmUgPSAwO1xuICBmdW5jdGlvbiBjcmVhdGVFbG0gKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBuZXN0ZWQpIHtcbiAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBpblByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhaW5QcmUgJiZcbiAgICAgICAgICAhdm5vZGUubnMgJiZcbiAgICAgICAgICAhKGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuaW5kZXhPZih0YWcpID4gLTEpICYmXG4gICAgICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodGFnKVxuICAgICAgICApIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2bm9kZS5lbG0gPSB2bm9kZS5uc1xuICAgICAgICA/IG5vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLCB0YWcpXG4gICAgICAgIDogbm9kZU9wcy5jcmVhdGVFbGVtZW50KHRhZywgdm5vZGUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIHtcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgaW5QcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZub2RlLmlzQ29tbWVudCkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNoaWxkKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8sIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jaGlsZCkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzUmVhY3RpdmF0ZWQpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNoaWxkKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY2hpbGQuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYpIHtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY2hpbGQpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY2hpbGQuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpLmNyZWF0ZSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGkuaW5zZXJ0KSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNoaWxkLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0QXR0cmlidXRlKHZub2RlLmVsbSwgaSwgJycpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLCBpLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKHJtIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKCFybSkge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCBlbG1Ub01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSkgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV0gOiBudWxsO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxtVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFlbG1Ub01vdmUpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICdJdCBzZWVtcyB0aGVyZSBhcmUgZHVwbGljYXRlIGtleXMgdGhhdCBpcyBjYXVzaW5nIGFuIHVwZGF0ZSBlcnJvci4gJyArXG4gICAgICAgICAgICAgICdNYWtlIHN1cmUgZWFjaCB2LWZvciBpdGVtIGhhcyBhIHVuaXF1ZSBrZXkuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZShlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKGVsbVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBuZXdTdGFydFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAodm5vZGUuaXNTdGF0aWMgJiZcbiAgICAgICAgb2xkVm5vZGUuaXNTdGF0aWMgJiZcbiAgICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgICAgKHZub2RlLmlzQ2xvbmVkIHx8IHZub2RlLmlzT25jZSkpIHtcbiAgICAgIHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgIHZub2RlLmNoaWxkID0gb2xkVm5vZGUuY2hpbGQ7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBoYXNEYXRhID0gaXNEZWYoZGF0YSk7XG4gICAgaWYgKGhhc0RhdGEgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGhhc0RhdGEgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMoZWxtLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChoYXNEYXRhKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbiAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgIGlmIChpbml0aWFsICYmIHZub2RlLnBhcmVudCkge1xuICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQocXVldWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBiYWlsZWQgPSBmYWxzZTtcbiAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbiAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxzdHlsZSxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IGVsbTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGQpKSB7XG4gICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgaWYgKCFjaGlsZHJlbk1hdGNoIHx8IGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhYmFpbGVkKSB7XG4gICAgICAgICAgICAgIGJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fFxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5LCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIGlmICghdm5vZGUpIHtcbiAgICAgIGlmIChvbGRWbm9kZSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBlbG0sIHBhcmVudDtcbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoIW9sZFZub2RlKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoJ3NlcnZlci1yZW5kZXJlZCcpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3NlcnZlci1yZW5kZXJlZCcpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGh5ZHJhdGluZykge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgZWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWxtKTtcbiAgICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudCwgbm9kZU9wcy5uZXh0U2libGluZyhlbG0pKTtcblxuICAgICAgICBpZiAodm5vZGUucGFyZW50KSB7XG4gICAgICAgICAgLy8gY29tcG9uZW50IHJvb3QgZWxlbWVudCByZXBsYWNlZC5cbiAgICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGNicy5jcmVhdGVbaV0oZW1wdHlOb2RlLCB2bm9kZS5wYXJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50LCBbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUuZGF0YS5ob29rIHx8ICh2bm9kZS5kYXRhLmhvb2sgPSB7fSksICdpbnNlcnQnLCBjYWxsSW5zZXJ0LCAnZGlyLWluc2VydCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLmRhdGEuaG9vayB8fCAodm5vZGUuZGF0YS5ob29rID0ge30pLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSwgJ2Rpci1wb3N0cGF0Y2gnKTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKCFvbGRWbm9kZS5kYXRhLmF0dHJzICYmICF2bm9kZS5kYXRhLmF0dHJzKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoYXR0cnMuX19vYl9fKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRTkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChhdHRyc1trZXldID09IG51bGwpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwga2V5KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZScgPyAnZmFsc2UnIDogJ3RydWUnKTtcbiAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoIWRhdGEuc3RhdGljQ2xhc3MgJiYgIWRhdGEuY2xhc3MgJiZcbiAgICAgICghb2xkRGF0YSB8fCAoIW9sZERhdGEuc3RhdGljQ2xhc3MgJiYgIW9sZERhdGEuY2xhc3MpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKHRyYW5zaXRpb25DbGFzcykge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGFkZCQyIChldmVudCwgaGFuZGxlciwgb25jZSwgY2FwdHVyZSkge1xuICBpZiAob25jZSkge1xuICAgIHZhciBvbGRIYW5kbGVyID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICByZW1vdmUkMyhldmVudCwgaGFuZGxlciwgY2FwdHVyZSk7XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxXG4gICAgICAgID8gb2xkSGFuZGxlcihldilcbiAgICAgICAgOiBvbGRIYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDMgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gIHRhcmdldCQxLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoIW9sZFZub2RlLmRhdGEub24gJiYgIXZub2RlLmRhdGEub24pIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDIsIHJlbW92ZSQzLCB2bm9kZS5jb250ZXh0KTtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoIW9sZFZub2RlLmRhdGEuZG9tUHJvcHMgJiYgIXZub2RlLmRhdGEuZG9tUHJvcHMpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAocHJvcHMuX19vYl9fKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmIChwcm9wc1trZXldID09IG51bGwpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgfVxuICAgIC8vICM0NTIxOiBpZiBhIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHVwZGF0ZSBiZWZvcmUgdGhlIGNoYW5nZSBldmVudCBpc1xuICAgIC8vIGRpc3BhdGNoZWQgb24gYSBjaGVja2JveC9yYWRpbyBpbnB1dCwgdGhlIGlucHV0J3MgY2hlY2tlZCBzdGF0ZSB3aWxsXG4gICAgLy8gYmUgcmVzZXQgYW5kIGZhaWwgdG8gdHJpZ2dlciBhbm90aGVyIHVwZGF0ZS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmIChrZXkgPT09ICdjaGVja2VkJyAmJiAhaXNEaXJ0eShlbG0sIGN1cikpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gY3VyID09IG51bGwgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgdm5vZGUsIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKFxuICBlbG0sXG4gIHZub2RlLFxuICBjaGVja1ZhbFxuKSB7XG4gIGlmICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgdm5vZGUudGFnID09PSAnb3B0aW9uJyB8fFxuICAgIGlzRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0lucHV0Q2hhbmdlZCh2bm9kZSwgY2hlY2tWYWwpXG4gICkpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBpc0RpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG0gJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0lucHV0Q2hhbmdlZCAodm5vZGUsIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSB2bm9kZS5lbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSB2bm9kZS5lbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoKG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyKSB8fCB2bm9kZS5lbG0udHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gIH1cbiAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMudHJpbSkge1xuICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jaGlsZCkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNoaWxkLl92bm9kZTtcbiAgICAgIGlmIChjaGlsZE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSkpIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5zdHlsZVtub3JtYWxpemUobmFtZSldID0gdmFsO1xuICB9XG59O1xuXG52YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIHRlc3RFbDtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgdGVzdEVsID0gdGVzdEVsIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiB0ZXN0RWwuc3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgdXBwZXIgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgdXBwZXI7XG4gICAgaWYgKHByZWZpeGVkIGluIHRlc3RFbC5zdHlsZSkge1xuICAgICAgcmV0dXJuIHByZWZpeGVkXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoIWRhdGEuc3RhdGljU3R5bGUgJiYgIWRhdGEuc3R5bGUgJiZcbiAgICAgICFvbGREYXRhLnN0YXRpY1N0eWxlICYmICFvbGREYXRhLnN0eWxlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZFZub2RlLmRhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGRWbm9kZS5kYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgdm5vZGUuZGF0YS5zdHlsZSA9IHN0eWxlLl9fb2JfXyA/IGV4dGVuZCh7fSwgc3R5bGUpIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChuZXdTdHlsZVtuYW1lXSA9PSBudWxsKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICFjbHMudHJpbSgpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9ICcgJyArIGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSArICcgJztcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhY2xzLnRyaW0oKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSAnICcgKyBlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgKyAnICc7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIudHJpbSgpKTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZCkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZCkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbnZhciByYWYgPSAoaW5Ccm93c2VyICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHx8IHNldFRpbWVvdXQ7XG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICAoZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSkpLnB1c2goY2xzKTtcbiAgYWRkQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlJDEoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHZhciB0cmFuc2l0aW9uZURlbGF5cyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25lRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10uc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSBzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChlbC5fbGVhdmVDYikge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKCFkYXRhKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGVsLl9lbnRlckNiIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyID8gYXBwZWFyQ2xhc3MgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciA/IGFwcGVhckFjdGl2ZUNsYXNzIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhciA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhciA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZCkgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9XG4gICAgZW50ZXJIb29rICYmXG4gICAgLy8gZW50ZXJIb29rIG1heSBiZSBhIGJvdW5kIG1ldGhvZCB3aGljaCBleHBvc2VzXG4gICAgLy8gdGhlIGxlbmd0aCBvZiBvcmlnaW5hbCBmbiBhcyBfbGVuZ3RoXG4gICAgKGVudGVySG9vay5fbGVuZ3RoIHx8IGVudGVySG9vay5sZW5ndGgpID4gMTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZS5kYXRhLmhvb2sgfHwgKHZub2RlLmRhdGEuaG9vayA9IHt9KSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICAgIHBlbmRpbmdOb2RlLmNvbnRleHQgPT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYikge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9LCAndHJhbnNpdGlvbi1pbnNlcnQnKTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChlbC5fZW50ZXJDYikge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKCFkYXRhKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZWwuX2xlYXZlQ2IgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPVxuICAgIGxlYXZlICYmXG4gICAgLy8gbGVhdmUgaG9vayBtYXkgYmUgYSBib3VuZCBtZXRob2Qgd2hpY2ggZXhwb3Nlc1xuICAgIC8vIHRoZSBsZW5ndGggb2Ygb3JpZ2luYWwgZm4gYXMgX2xlbmd0aFxuICAgIChsZWF2ZS5fbGVuZ3RoIHx8IGxlYXZlLmxlbmd0aCkgPiAxO1xuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpW3Zub2RlLmtleV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgYXBwZWFyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBhcHBlYXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpLFxuICAgIGFwcGVhckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKVxuICB9XG59KTtcblxuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4oKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoJDEgPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxudmFyIG1vZGVsYWJsZVRhZ1JFID0gL15pbnB1dHxzZWxlY3R8dGV4dGFyZWF8dnVlLWNvbXBvbmVudC1bMC05XSsoLVswLTlhLXpBLVpfLV0qKT8kLztcblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBtb2RlbCA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFtb2RlbGFibGVUYWdSRS50ZXN0KHZub2RlLnRhZykpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcInYtbW9kZWwgaXMgbm90IHN1cHBvcnRlZCBvbiBlbGVtZW50IHR5cGU6IDxcIiArICh2bm9kZS50YWcpICsgXCI+LiBcIiArXG4gICAgICAgICAgJ0lmIHlvdSBhcmUgd29ya2luZyB3aXRoIGNvbnRlbnRlZGl0YWJsZSwgaXRcXCdzIHJlY29tbWVuZGVkIHRvICcgK1xuICAgICAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LicsXG4gICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgdmFyIGNiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9O1xuICAgICAgY2IoKTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoY2IsIDApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGVsLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBpZiAoIWlzQW5kcm9pZCkge1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgZWwub3B0aW9ucyk7IH0pXG4gICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGVsLm9wdGlvbnMpO1xuICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbnNbaV0pLCB2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY2hpbGQgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNoaWxkLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24gPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiAmJiAhaXNJRTkpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh2YWx1ZSA9PT0gb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24gJiYgIWlzSUU5KSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBtb2RlbCxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgYSBzaW5nbGUgZWxlbWVudC9jb21wb25lbnQuXG4vLyBzdXBwb3J0cyB0cmFuc2l0aW9uIG1vZGUgKG91dC1pbiAvIGluLW91dClcblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmdcbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV0uZm47XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIHJldHVybiAvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZylcbiAgICA/IGgoJ2tlZXAtYWxpdmUnKVxuICAgIDogbnVsbFxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZzsgfSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbicpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGwgfHwgY2hpbGQuaXNTdGF0aWNcbiAgICAgID8gKFwiX192XCIgKyAoY2hpbGQudGFnICsgdGhpcy5fdWlkKSArIFwiX19cIilcbiAgICAgIDogY2hpbGQua2V5O1xuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH0pKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChvbGRDaGlsZCAmJiBvbGRDaGlsZC5kYXRhICYmICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQgJiYgKG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSkpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9LCBrZXkpO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSwga2V5KTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlLCBrZXkpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkge1xuICAgICAgICAgIGRlbGF5ZWRMZWF2ZSA9IGxlYXZlO1xuICAgICAgICB9LCBrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxuLy8gUHJvdmlkZXMgdHJhbnNpdGlvbiBzdXBwb3J0IGZvciBsaXN0IGl0ZW1zLlxuLy8gc3VwcG9ydHMgbW92ZSB0cmFuc2l0aW9ucyB1c2luZyB0aGUgRkxJUCB0ZWNobmlxdWUuXG5cbi8vIEJlY2F1c2UgdGhlIHZkb20ncyBjaGlsZHJlbiB1cGRhdGUgYWxnb3JpdGhtIGlzIFwidW5zdGFibGVcIiAtIGkuZS5cbi8vIGl0IGRvZXNuJ3QgZ3VhcmFudGVlIHRoZSByZWxhdGl2ZSBwb3NpdGlvbmluZyBvZiByZW1vdmVkIGVsZW1lbnRzLFxuLy8gd2UgZm9yY2UgdHJhbnNpdGlvbi1ncm91cCB0byB1cGRhdGUgaXRzIGNoaWxkcmVuIGludG8gdHdvIHBhc3Nlczpcbi8vIGluIHRoZSBmaXJzdCBwYXNzLCB3ZSByZW1vdmUgYWxsIG5vZGVzIHRoYXQgbmVlZCB0byBiZSByZW1vdmVkLFxuLy8gdHJpZ2dlcmluZyB0aGVpciBsZWF2aW5nIHRyYW5zaXRpb247IGluIHRoZSBzZWNvbmQgcGFzcywgd2UgaW5zZXJ0L21vdmVcbi8vIGludG8gdGhlIGZpbmFsIGRpc2lyZWQgc3RhdGUuIFRoaXMgd2F5IGluIHRoZSBzZWNvbmQgcGFzcyByZW1vdmVkXG4vLyBub2RlcyB3aWxsIHJlbWFpbiB3aGVyZSB0aGV5IHNob3VsZCBiZS5cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHNcbiAgICAgICAgICAgID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG4gICAgICAgICAgICA6IGMudGFnO1xuICAgICAgICAgIHdhcm4oKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIiArIG5hbWUgKyBcIj5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgdmFyIGtlcHQgPSBbXTtcbiAgICAgIHZhciByZW1vdmVkID0gW107XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICB2YXIgYyQxID0gcHJldkNoaWxkcmVuW2kkMV07XG4gICAgICAgIGMkMS5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKG1hcFtjJDEua2V5XSkge1xuICAgICAgICAgIGtlcHQucHVzaChjJDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZWQucHVzaChjJDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtlcHQgPSBoKHRhZywgbnVsbCwga2VwdCk7XG4gICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xuICAgIH1cblxuICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pXG4gIH0sXG5cbiAgYmVmb3JlVXBkYXRlOiBmdW5jdGlvbiBiZWZvcmVVcGRhdGUgKCkge1xuICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICB0aGlzLl9fcGF0Y2hfXyhcbiAgICAgIHRoaXMuX3Zub2RlLFxuICAgICAgdGhpcy5rZXB0LFxuICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgKTtcbiAgICB0aGlzLl92bm9kZSA9IHRoaXMua2VwdDtcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgdmFyIGYgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgcmV0dXJuICh0aGlzLl9oYXNNb3ZlID0gaW5mby5oYXNUcmFuc2Zvcm0pXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59O1xuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuVnVlJDMuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuVnVlJDMuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlJDMuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZSQzLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUkMy5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlJDMub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXG5WdWUkMy5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2gkMSA6IG5vb3A7XG5cbi8vIHdyYXAgbW91bnRcblZ1ZSQzLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIHRoaXMuX21vdW50KGVsLCBoeWRyYXRpbmcpXG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGluQnJvd3NlciAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgIFwiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiICtcbiAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgKTtcbn1cblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgIGlmIChkZXZ0b29scykge1xuICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSQzKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgaW5Ccm93c2VyICYmICFpc0VkZ2UgJiYgL0Nocm9tZVxcL1xcZCsvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICk7XG4gICAgfVxuICB9XG59LCAwKTtcblxuLyogICovXG5cbi8vIGNoZWNrIHdoZXRoZXIgY3VycmVudCBicm93c2VyIGVuY29kZXMgYSBjaGFyIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzXG5mdW5jdGlvbiBzaG91bGREZWNvZGUgKGNvbnRlbnQsIGVuY29kZWQpIHtcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gXCI8ZGl2IGE9XFxcIlwiICsgY29udGVudCArIFwiXFxcIj5cIjtcbiAgcmV0dXJuIGRpdi5pbm5lckhUTUwuaW5kZXhPZihlbmNvZGVkKSA+IDBcbn1cblxuLy8gIzM2NjNcbi8vIElFIGVuY29kZXMgbmV3bGluZXMgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXMgd2hpbGUgb3RoZXIgYnJvd3NlcnMgZG9uJ3RcbnZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IGluQnJvd3NlciA/IHNob3VsZERlY29kZSgnXFxuJywgJyYjMTA7JykgOiBmYWxzZTtcblxuLyogICovXG5cbnZhciBkZWNvZGVyO1xuXG5mdW5jdGlvbiBkZWNvZGUgKGh0bWwpIHtcbiAgZGVjb2RlciA9IGRlY29kZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRlY29kZXIuaW5uZXJIVE1MID0gaHRtbDtcbiAgcmV0dXJuIGRlY29kZXIudGV4dENvbnRlbnRcbn1cblxuLyogICovXG5cbnZhciBpc1VuYXJ5VGFnID0gbWFrZU1hcChcbiAgJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsZnJhbWUsaHIsaW1nLGlucHV0LGlzaW5kZXgsa2V5Z2VuLCcgK1xuICAnbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInLFxuICB0cnVlXG4pO1xuXG4vLyBFbGVtZW50cyB0aGF0IHlvdSBjYW4sIGludGVudGlvbmFsbHksIGxlYXZlIG9wZW5cbi8vIChhbmQgd2hpY2ggY2xvc2UgdGhlbXNlbHZlcylcbnZhciBjYW5CZUxlZnRPcGVuVGFnID0gbWFrZU1hcChcbiAgJ2NvbGdyb3VwLGRkLGR0LGxpLG9wdGlvbnMscCx0ZCx0Zm9vdCx0aCx0aGVhZCx0cixzb3VyY2UnLFxuICB0cnVlXG4pO1xuXG4vLyBIVE1MNSB0YWdzIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbCNlbGVtZW50cy0zXG4vLyBQaHJhc2luZyBDb250ZW50IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2RvbS5odG1sI3BocmFzaW5nLWNvbnRlbnRcbnZhciBpc05vblBocmFzaW5nVGFnID0gbWFrZU1hcChcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLGRpdixkbCxkdCxmaWVsZHNldCxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsZm9ybSwnICtcbiAgJ2gxLGgyLGgzLGg0LGg1LGg2LGhlYWQsaGVhZGVyLGhncm91cCxocixodG1sLGxlZ2VuZCxsaSxtZW51aXRlbSxtZXRhLCcgK1xuICAnb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLCcgK1xuICAndGl0bGUsdHIsdHJhY2snLFxuICB0cnVlXG4pO1xuXG4vKipcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGl0J3MgbW9zdGx5IHZlbmRvciBjb2RlLlxuICovXG5cbi8qIVxuICogSFRNTCBQYXJzZXIgQnkgSm9obiBSZXNpZyAoZWpvaG4ub3JnKVxuICogTW9kaWZpZWQgYnkgSnVyaXkgXCJrYW5nYXhcIiBaYXl0c2V2XG4gKiBPcmlnaW5hbCBjb2RlIGJ5IEVyaWsgQXJ2aWRzc29uLCBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlXG4gKiBodHRwOi8vZXJpay5lYWUubmV0L3NpbXBsZWh0bWxwYXJzZXIvc2ltcGxlaHRtbHBhcnNlci5qc1xuICovXG5cbi8vIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIHBhcnNpbmcgdGFncyBhbmQgYXR0cmlidXRlc1xudmFyIHNpbmdsZUF0dHJJZGVudGlmaWVyID0gLyhbXlxcc1wiJzw+Lz1dKykvO1xudmFyIHNpbmdsZUF0dHJBc3NpZ24gPSAvKD86PSkvO1xudmFyIHNpbmdsZUF0dHJWYWx1ZXMgPSBbXG4gIC8vIGF0dHIgdmFsdWUgZG91YmxlIHF1b3Rlc1xuICAvXCIoW15cIl0qKVwiKy8uc291cmNlLFxuICAvLyBhdHRyIHZhbHVlLCBzaW5nbGUgcXVvdGVzXG4gIC8nKFteJ10qKScrLy5zb3VyY2UsXG4gIC8vIGF0dHIgdmFsdWUsIG5vIHF1b3Rlc1xuICAvKFteXFxzXCInPTw+YF0rKS8uc291cmNlXG5dO1xudmFyIGF0dHJpYnV0ZSA9IG5ldyBSZWdFeHAoXG4gICdeXFxcXHMqJyArIHNpbmdsZUF0dHJJZGVudGlmaWVyLnNvdXJjZSArXG4gICcoPzpcXFxccyooJyArIHNpbmdsZUF0dHJBc3NpZ24uc291cmNlICsgJyknICtcbiAgJ1xcXFxzKig/OicgKyBzaW5nbGVBdHRyVmFsdWVzLmpvaW4oJ3wnKSArICcpKT8nXG4pO1xuXG4vLyBjb3VsZCB1c2UgaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvUkVDLXhtbC1uYW1lcy0xOTk5MDExNC8jTlQtUU5hbWVcbi8vIGJ1dCBmb3IgVnVlIHRlbXBsYXRlcyB3ZSBjYW4gZW5mb3JjZSBhIHNpbXBsZSBjaGFyc2V0XG52YXIgbmNuYW1lID0gJ1thLXpBLVpfXVtcXFxcd1xcXFwtXFxcXC5dKic7XG52YXIgcW5hbWVDYXB0dXJlID0gJygoPzonICsgbmNuYW1lICsgJ1xcXFw6KT8nICsgbmNuYW1lICsgJyknO1xudmFyIHN0YXJ0VGFnT3BlbiA9IG5ldyBSZWdFeHAoJ148JyArIHFuYW1lQ2FwdHVyZSk7XG52YXIgc3RhcnRUYWdDbG9zZSA9IC9eXFxzKihcXC8/KT4vO1xudmFyIGVuZFRhZyA9IG5ldyBSZWdFeHAoJ148XFxcXC8nICsgcW5hbWVDYXB0dXJlICsgJ1tePl0qPicpO1xudmFyIGRvY3R5cGUgPSAvXjwhRE9DVFlQRSBbXj5dKz4vaTtcbnZhciBjb21tZW50ID0gL148IS0tLztcbnZhciBjb25kaXRpb25hbENvbW1lbnQgPSAvXjwhXFxbLztcblxudmFyIElTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4gPSBmYWxzZTtcbid4Jy5yZXBsYWNlKC94KC4pPy9nLCBmdW5jdGlvbiAobSwgZykge1xuICBJU19SRUdFWF9DQVBUVVJJTkdfQlJPS0VOID0gZyA9PT0gJyc7XG59KTtcblxuLy8gU3BlY2lhbCBFbGVtZW50cyAoY2FuIGNvbnRhaW4gYW55dGhpbmcpXG52YXIgaXNTY3JpcHRPclN0eWxlID0gbWFrZU1hcCgnc2NyaXB0LHN0eWxlJywgdHJ1ZSk7XG52YXIgaGFzTGFuZyA9IGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiBhdHRyLm5hbWUgPT09ICdsYW5nJyAmJiBhdHRyLnZhbHVlICE9PSAnaHRtbCc7IH07XG52YXIgaXNTcGVjaWFsVGFnID0gZnVuY3Rpb24gKHRhZywgaXNTRkMsIHN0YWNrKSB7XG4gIGlmIChpc1NjcmlwdE9yU3R5bGUodGFnKSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGlzU0ZDICYmIHN0YWNrLmxlbmd0aCA9PT0gMSkge1xuICAgIC8vIHRvcC1sZXZlbCB0ZW1wbGF0ZSB0aGF0IGhhcyBubyBwcmUtcHJvY2Vzc29yXG4gICAgaWYgKHRhZyA9PT0gJ3RlbXBsYXRlJyAmJiAhc3RhY2tbMF0uYXR0cnMuc29tZShoYXNMYW5nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufTtcblxudmFyIHJlQ2FjaGUgPSB7fTtcblxudmFyIGx0UkUgPSAvJmx0Oy9nO1xudmFyIGd0UkUgPSAvJmd0Oy9nO1xudmFyIG5sUkUgPSAvJiMxMDsvZztcbnZhciBhbXBSRSA9IC8mYW1wOy9nO1xudmFyIHF1b3RlUkUgPSAvJnF1b3Q7L2c7XG5cbmZ1bmN0aW9uIGRlY29kZUF0dHIgKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcykge1xuICBpZiAoc2hvdWxkRGVjb2RlTmV3bGluZXMpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UobmxSRSwgJ1xcbicpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxuICAgIC5yZXBsYWNlKGx0UkUsICc8JylcbiAgICAucmVwbGFjZShndFJFLCAnPicpXG4gICAgLnJlcGxhY2UoYW1wUkUsICcmJylcbiAgICAucmVwbGFjZShxdW90ZVJFLCAnXCInKVxufVxuXG5mdW5jdGlvbiBwYXJzZUhUTUwgKGh0bWwsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBleHBlY3RIVE1MID0gb3B0aW9ucy5leHBlY3RIVE1MO1xuICB2YXIgaXNVbmFyeVRhZyQkMSA9IG9wdGlvbnMuaXNVbmFyeVRhZyB8fCBubztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3QsIGxhc3RUYWc7XG4gIHdoaWxlIChodG1sKSB7XG4gICAgbGFzdCA9IGh0bWw7XG4gICAgLy8gTWFrZSBzdXJlIHdlJ3JlIG5vdCBpbiBhIHNjcmlwdCBvciBzdHlsZSBlbGVtZW50XG4gICAgaWYgKCFsYXN0VGFnIHx8ICFpc1NwZWNpYWxUYWcobGFzdFRhZywgb3B0aW9ucy5zZmMsIHN0YWNrKSkge1xuICAgICAgdmFyIHRleHRFbmQgPSBodG1sLmluZGV4T2YoJzwnKTtcbiAgICAgIGlmICh0ZXh0RW5kID09PSAwKSB7XG4gICAgICAgIC8vIENvbW1lbnQ6XG4gICAgICAgIGlmIChjb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICB2YXIgY29tbWVudEVuZCA9IGh0bWwuaW5kZXhPZignLS0+Jyk7XG5cbiAgICAgICAgICBpZiAoY29tbWVudEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBhZHZhbmNlKGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25kaXRpb25hbF9jb21tZW50I0Rvd25sZXZlbC1yZXZlYWxlZF9jb25kaXRpb25hbF9jb21tZW50XG4gICAgICAgIGlmIChjb25kaXRpb25hbENvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgIHZhciBjb25kaXRpb25hbEVuZCA9IGh0bWwuaW5kZXhPZignXT4nKTtcblxuICAgICAgICAgIGlmIChjb25kaXRpb25hbEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBhZHZhbmNlKGNvbmRpdGlvbmFsRW5kICsgMik7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvY3R5cGU6XG4gICAgICAgIHZhciBkb2N0eXBlTWF0Y2ggPSBodG1sLm1hdGNoKGRvY3R5cGUpO1xuICAgICAgICBpZiAoZG9jdHlwZU1hdGNoKSB7XG4gICAgICAgICAgYWR2YW5jZShkb2N0eXBlTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5kIHRhZzpcbiAgICAgICAgdmFyIGVuZFRhZ01hdGNoID0gaHRtbC5tYXRjaChlbmRUYWcpO1xuICAgICAgICBpZiAoZW5kVGFnTWF0Y2gpIHtcbiAgICAgICAgICB2YXIgY3VySW5kZXggPSBpbmRleDtcbiAgICAgICAgICBhZHZhbmNlKGVuZFRhZ01hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgcGFyc2VFbmRUYWcoZW5kVGFnTWF0Y2hbMF0sIGVuZFRhZ01hdGNoWzFdLCBjdXJJbmRleCwgaW5kZXgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGFydCB0YWc6XG4gICAgICAgIHZhciBzdGFydFRhZ01hdGNoID0gcGFyc2VTdGFydFRhZygpO1xuICAgICAgICBpZiAoc3RhcnRUYWdNYXRjaCkge1xuICAgICAgICAgIGhhbmRsZVN0YXJ0VGFnKHN0YXJ0VGFnTWF0Y2gpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRleHQgPSAodm9pZCAwKSwgcmVzdCQxID0gKHZvaWQgMCksIG5leHQgPSAodm9pZCAwKTtcbiAgICAgIGlmICh0ZXh0RW5kID4gMCkge1xuICAgICAgICByZXN0JDEgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIWVuZFRhZy50ZXN0KHJlc3QkMSkgJiZcbiAgICAgICAgICAhc3RhcnRUYWdPcGVuLnRlc3QocmVzdCQxKSAmJlxuICAgICAgICAgICFjb21tZW50LnRlc3QocmVzdCQxKSAmJlxuICAgICAgICAgICFjb25kaXRpb25hbENvbW1lbnQudGVzdChyZXN0JDEpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIDwgaW4gcGxhaW4gdGV4dCwgYmUgZm9yZ2l2aW5nIGFuZCB0cmVhdCBpdCBhcyB0ZXh0XG4gICAgICAgICAgbmV4dCA9IHJlc3QkMS5pbmRleE9mKCc8JywgMSk7XG4gICAgICAgICAgaWYgKG5leHQgPCAwKSB7IGJyZWFrIH1cbiAgICAgICAgICB0ZXh0RW5kICs9IG5leHQ7XG4gICAgICAgICAgcmVzdCQxID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gaHRtbC5zdWJzdHJpbmcoMCwgdGV4dEVuZCk7XG4gICAgICAgIGFkdmFuY2UodGV4dEVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0RW5kIDwgMCkge1xuICAgICAgICB0ZXh0ID0gaHRtbDtcbiAgICAgICAgaHRtbCA9ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jaGFycyAmJiB0ZXh0KSB7XG4gICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFja2VkVGFnID0gbGFzdFRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHJlU3RhY2tlZFRhZyA9IHJlQ2FjaGVbc3RhY2tlZFRhZ10gfHwgKHJlQ2FjaGVbc3RhY2tlZFRhZ10gPSBuZXcgUmVnRXhwKCcoW1xcXFxzXFxcXFNdKj8pKDwvJyArIHN0YWNrZWRUYWcgKyAnW14+XSo+KScsICdpJykpO1xuICAgICAgdmFyIGVuZFRhZ0xlbmd0aCA9IDA7XG4gICAgICB2YXIgcmVzdCA9IGh0bWwucmVwbGFjZShyZVN0YWNrZWRUYWcsIGZ1bmN0aW9uIChhbGwsIHRleHQsIGVuZFRhZykge1xuICAgICAgICBlbmRUYWdMZW5ndGggPSBlbmRUYWcubGVuZ3RoO1xuICAgICAgICBpZiAoc3RhY2tlZFRhZyAhPT0gJ3NjcmlwdCcgJiYgc3RhY2tlZFRhZyAhPT0gJ3N0eWxlJyAmJiBzdGFja2VkVGFnICE9PSAnbm9zY3JpcHQnKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHRcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IS0tKFtcXHNcXFNdKj8pLS0+L2csICckMScpXG4gICAgICAgICAgICAucmVwbGFjZSgvPCFcXFtDREFUQVxcWyhbXFxzXFxTXSo/KV1dPi9nLCAnJDEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jaGFycykge1xuICAgICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9KTtcbiAgICAgIGluZGV4ICs9IGh0bWwubGVuZ3RoIC0gcmVzdC5sZW5ndGg7XG4gICAgICBodG1sID0gcmVzdDtcbiAgICAgIHBhcnNlRW5kVGFnKCc8LycgKyBzdGFja2VkVGFnICsgJz4nLCBzdGFja2VkVGFnLCBpbmRleCAtIGVuZFRhZ0xlbmd0aCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChodG1sID09PSBsYXN0ICYmIG9wdGlvbnMuY2hhcnMpIHtcbiAgICAgIG9wdGlvbnMuY2hhcnMoaHRtbCk7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFnc1xuICBwYXJzZUVuZFRhZygpO1xuXG4gIGZ1bmN0aW9uIGFkdmFuY2UgKG4pIHtcbiAgICBpbmRleCArPSBuO1xuICAgIGh0bWwgPSBodG1sLnN1YnN0cmluZyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcgKCkge1xuICAgIHZhciBzdGFydCA9IGh0bWwubWF0Y2goc3RhcnRUYWdPcGVuKTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHZhciBtYXRjaCA9IHtcbiAgICAgICAgdGFnTmFtZTogc3RhcnRbMV0sXG4gICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgc3RhcnQ6IGluZGV4XG4gICAgICB9O1xuICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuICAgICAgdmFyIGVuZCwgYXR0cjtcbiAgICAgIHdoaWxlICghKGVuZCA9IGh0bWwubWF0Y2goc3RhcnRUYWdDbG9zZSkpICYmIChhdHRyID0gaHRtbC5tYXRjaChhdHRyaWJ1dGUpKSkge1xuICAgICAgICBhZHZhbmNlKGF0dHJbMF0ubGVuZ3RoKTtcbiAgICAgICAgbWF0Y2guYXR0cnMucHVzaChhdHRyKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgbWF0Y2gudW5hcnlTbGFzaCA9IGVuZFsxXTtcbiAgICAgICAgYWR2YW5jZShlbmRbMF0ubGVuZ3RoKTtcbiAgICAgICAgbWF0Y2guZW5kID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBtYXRjaFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN0YXJ0VGFnIChtYXRjaCkge1xuICAgIHZhciB0YWdOYW1lID0gbWF0Y2gudGFnTmFtZTtcbiAgICB2YXIgdW5hcnlTbGFzaCA9IG1hdGNoLnVuYXJ5U2xhc2g7XG5cbiAgICBpZiAoZXhwZWN0SFRNTCkge1xuICAgICAgaWYgKGxhc3RUYWcgPT09ICdwJyAmJiBpc05vblBocmFzaW5nVGFnKHRhZ05hbWUpKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKCcnLCBsYXN0VGFnKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYW5CZUxlZnRPcGVuVGFnKHRhZ05hbWUpICYmIGxhc3RUYWcgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcoJycsIHRhZ05hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bmFyeSA9IGlzVW5hcnlUYWckJDEodGFnTmFtZSkgfHwgdGFnTmFtZSA9PT0gJ2h0bWwnICYmIGxhc3RUYWcgPT09ICdoZWFkJyB8fCAhIXVuYXJ5U2xhc2g7XG5cbiAgICB2YXIgbCA9IG1hdGNoLmF0dHJzLmxlbmd0aDtcbiAgICB2YXIgYXR0cnMgPSBuZXcgQXJyYXkobCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhcmdzID0gbWF0Y2guYXR0cnNbaV07XG4gICAgICAvLyBoYWNraXNoIHdvcmsgYXJvdW5kIEZGIGJ1ZyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0zNjk3NzhcbiAgICAgIGlmIChJU19SRUdFWF9DQVBUVVJJTkdfQlJPS0VOICYmIGFyZ3NbMF0uaW5kZXhPZignXCJcIicpID09PSAtMSkge1xuICAgICAgICBpZiAoYXJnc1szXSA9PT0gJycpIHsgZGVsZXRlIGFyZ3NbM107IH1cbiAgICAgICAgaWYgKGFyZ3NbNF0gPT09ICcnKSB7IGRlbGV0ZSBhcmdzWzRdOyB9XG4gICAgICAgIGlmIChhcmdzWzVdID09PSAnJykgeyBkZWxldGUgYXJnc1s1XTsgfVxuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogYXJnc1sxXSxcbiAgICAgICAgdmFsdWU6IGRlY29kZUF0dHIoXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc1xuICAgICAgICApXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghdW5hcnkpIHtcbiAgICAgIHN0YWNrLnB1c2goeyB0YWc6IHRhZ05hbWUsIGF0dHJzOiBhdHRycyB9KTtcbiAgICAgIGxhc3RUYWcgPSB0YWdOYW1lO1xuICAgICAgdW5hcnlTbGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIGF0dHJzLCB1bmFyeSwgbWF0Y2guc3RhcnQsIG1hdGNoLmVuZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFbmRUYWcgKHRhZywgdGFnTmFtZSwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBwb3M7XG4gICAgaWYgKHN0YXJ0ID09IG51bGwpIHsgc3RhcnQgPSBpbmRleDsgfVxuICAgIGlmIChlbmQgPT0gbnVsbCkgeyBlbmQgPSBpbmRleDsgfVxuXG4gICAgLy8gRmluZCB0aGUgY2xvc2VzdCBvcGVuZWQgdGFnIG9mIHRoZSBzYW1lIHR5cGVcbiAgICBpZiAodGFnTmFtZSkge1xuICAgICAgdmFyIG5lZWRsZSA9IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGZvciAocG9zID0gc3RhY2subGVuZ3RoIC0gMTsgcG9zID49IDA7IHBvcy0tKSB7XG4gICAgICAgIGlmIChzdGFja1twb3NdLnRhZy50b0xvd2VyQ2FzZSgpID09PSBuZWVkbGUpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vIHRhZyBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhbiBzaG9wXG4gICAgICBwb3MgPSAwO1xuICAgIH1cblxuICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgLy8gQ2xvc2UgYWxsIHRoZSBvcGVuIGVsZW1lbnRzLCB1cCB0aGUgc3RhY2tcbiAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICAgIG9wdGlvbnMuZW5kKHN0YWNrW2ldLnRhZywgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICBsYXN0VGFnID0gcG9zICYmIHN0YWNrW3BvcyAtIDFdLnRhZztcbiAgICB9IGVsc2UgaWYgKHRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2JyJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgdHJ1ZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdwJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgZmFsc2UsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgIG9wdGlvbnMuZW5kKHRhZ05hbWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcGFyc2VGaWx0ZXJzIChleHApIHtcbiAgdmFyIGluU2luZ2xlID0gZmFsc2U7XG4gIHZhciBpbkRvdWJsZSA9IGZhbHNlO1xuICB2YXIgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlO1xuICB2YXIgaW5SZWdleCA9IGZhbHNlO1xuICB2YXIgY3VybHkgPSAwO1xuICB2YXIgc3F1YXJlID0gMDtcbiAgdmFyIHBhcmVuID0gMDtcbiAgdmFyIGxhc3RGaWx0ZXJJbmRleCA9IDA7XG4gIHZhciBjLCBwcmV2LCBpLCBleHByZXNzaW9uLCBmaWx0ZXJzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBleHAubGVuZ3RoOyBpKyspIHtcbiAgICBwcmV2ID0gYztcbiAgICBjID0gZXhwLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGluU2luZ2xlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyNyAmJiBwcmV2ICE9PSAweDVDKSB7IGluU2luZ2xlID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluRG91YmxlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyMiAmJiBwcmV2ICE9PSAweDVDKSB7IGluRG91YmxlID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluVGVtcGxhdGVTdHJpbmcpIHtcbiAgICAgIGlmIChjID09PSAweDYwICYmIHByZXYgIT09IDB4NUMpIHsgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpblJlZ2V4KSB7XG4gICAgICBpZiAoYyA9PT0gMHgyZiAmJiBwcmV2ICE9PSAweDVDKSB7IGluUmVnZXggPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjID09PSAweDdDICYmIC8vIHBpcGVcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMHg3QyAmJlxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSAtIDEpICE9PSAweDdDICYmXG4gICAgICAhY3VybHkgJiYgIXNxdWFyZSAmJiAhcGFyZW5cbiAgICApIHtcbiAgICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gZmlyc3QgZmlsdGVyLCBlbmQgb2YgZXhwcmVzc2lvblxuICAgICAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoRmlsdGVyKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICBjYXNlIDB4MjI6IGluRG91YmxlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyBcIlxuICAgICAgICBjYXNlIDB4Mjc6IGluU2luZ2xlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyAnXG4gICAgICAgIGNhc2UgMHg2MDogaW5UZW1wbGF0ZVN0cmluZyA9IHRydWU7IGJyZWFrIC8vIGBcbiAgICAgICAgY2FzZSAweDI4OiBwYXJlbisrOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKFxuICAgICAgICBjYXNlIDB4Mjk6IHBhcmVuLS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyApXG4gICAgICAgIGNhc2UgMHg1Qjogc3F1YXJlKys7IGJyZWFrICAgICAgICAgICAgICAgIC8vIFtcbiAgICAgICAgY2FzZSAweDVEOiBzcXVhcmUtLTsgYnJlYWsgICAgICAgICAgICAgICAgLy8gXVxuICAgICAgICBjYXNlIDB4N0I6IGN1cmx5Kys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgIGNhc2UgMHg3RDogY3VybHktLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgIH1cbiAgICAgIGlmIChjID09PSAweDJmKSB7IC8vIC9cbiAgICAgICAgdmFyIGogPSBpIC0gMTtcbiAgICAgICAgdmFyIHAgPSAodm9pZCAwKTtcbiAgICAgICAgLy8gZmluZCBmaXJzdCBub24td2hpdGVzcGFjZSBwcmV2IGNoYXJcbiAgICAgICAgZm9yICg7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgcCA9IGV4cC5jaGFyQXQoaik7XG4gICAgICAgICAgaWYgKHAgIT09ICcgJykgeyBicmVhayB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwIHx8ICEvW1xcdyRdLy50ZXN0KHApKSB7XG4gICAgICAgICAgaW5SZWdleCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gIH0gZWxzZSBpZiAobGFzdEZpbHRlckluZGV4ICE9PSAwKSB7XG4gICAgcHVzaEZpbHRlcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaEZpbHRlciAoKSB7XG4gICAgKGZpbHRlcnMgfHwgKGZpbHRlcnMgPSBbXSkpLnB1c2goZXhwLnNsaWNlKGxhc3RGaWx0ZXJJbmRleCwgaSkudHJpbSgpKTtcbiAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4cHJlc3Npb24gPSB3cmFwRmlsdGVyKGV4cHJlc3Npb24sIGZpbHRlcnNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHByZXNzaW9uXG59XG5cbmZ1bmN0aW9uIHdyYXBGaWx0ZXIgKGV4cCwgZmlsdGVyKSB7XG4gIHZhciBpID0gZmlsdGVyLmluZGV4T2YoJygnKTtcbiAgaWYgKGkgPCAwKSB7XG4gICAgLy8gX2Y6IHJlc29sdmVGaWx0ZXJcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgZmlsdGVyICsgXCJcXFwiKShcIiArIGV4cCArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHZhciBuYW1lID0gZmlsdGVyLnNsaWNlKDAsIGkpO1xuICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTtcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgbmFtZSArIFwiXFxcIikoXCIgKyBleHAgKyBcIixcIiArIGFyZ3MpXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkZWZhdWx0VGFnUkUgPSAvXFx7XFx7KCg/Oi58XFxuKSs/KVxcfVxcfS9nO1xudmFyIHJlZ2V4RXNjYXBlUkUgPSAvWy0uKis/XiR7fSgpfFtcXF0vXFxcXF0vZztcblxudmFyIGJ1aWxkUmVnZXggPSBjYWNoZWQoZnVuY3Rpb24gKGRlbGltaXRlcnMpIHtcbiAgdmFyIG9wZW4gPSBkZWxpbWl0ZXJzWzBdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICB2YXIgY2xvc2UgPSBkZWxpbWl0ZXJzWzFdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICByZXR1cm4gbmV3IFJlZ0V4cChvcGVuICsgJygoPzoufFxcXFxuKSs/KScgKyBjbG9zZSwgJ2cnKVxufSk7XG5cbmZ1bmN0aW9uIHBhcnNlVGV4dCAoXG4gIHRleHQsXG4gIGRlbGltaXRlcnNcbikge1xuICB2YXIgdGFnUkUgPSBkZWxpbWl0ZXJzID8gYnVpbGRSZWdleChkZWxpbWl0ZXJzKSA6IGRlZmF1bHRUYWdSRTtcbiAgaWYgKCF0YWdSRS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDtcbiAgdmFyIG1hdGNoLCBpbmRleDtcbiAgd2hpbGUgKChtYXRjaCA9IHRhZ1JFLmV4ZWModGV4dCkpKSB7XG4gICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAvLyBwdXNoIHRleHQgdG9rZW5cbiAgICBpZiAoaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRleHQuc2xpY2UobGFzdEluZGV4LCBpbmRleCkpKTtcbiAgICB9XG4gICAgLy8gdGFnIHRva2VuXG4gICAgdmFyIGV4cCA9IHBhcnNlRmlsdGVycyhtYXRjaFsxXS50cmltKCkpO1xuICAgIHRva2Vucy5wdXNoKChcIl9zKFwiICsgZXhwICsgXCIpXCIpKTtcbiAgICBsYXN0SW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgfVxuICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0ZXh0LnNsaWNlKGxhc3RJbmRleCkpKTtcbiAgfVxuICByZXR1cm4gdG9rZW5zLmpvaW4oJysnKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmFzZVdhcm4gKG1zZykge1xuICBjb25zb2xlLmVycm9yKChcIltWdWUgcGFyc2VyXTogXCIgKyBtc2cpKTtcbn1cblxuZnVuY3Rpb24gcGx1Y2tNb2R1bGVGdW5jdGlvbiAoXG4gIG1vZHVsZXMsXG4gIGtleVxuKSB7XG4gIHJldHVybiBtb2R1bGVzXG4gICAgPyBtb2R1bGVzLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbVtrZXldOyB9KS5maWx0ZXIoZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH0pXG4gICAgOiBbXVxufVxuXG5mdW5jdGlvbiBhZGRQcm9wIChlbCwgbmFtZSwgdmFsdWUpIHtcbiAgKGVsLnByb3BzIHx8IChlbC5wcm9wcyA9IFtdKSkucHVzaCh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9KTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0ciAoZWwsIG5hbWUsIHZhbHVlKSB7XG4gIChlbC5hdHRycyB8fCAoZWwuYXR0cnMgPSBbXSkpLnB1c2goeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZERpcmVjdGl2ZSAoXG4gIGVsLFxuICBuYW1lLFxuICByYXdOYW1lLFxuICB2YWx1ZSxcbiAgYXJnLFxuICBtb2RpZmllcnNcbikge1xuICAoZWwuZGlyZWN0aXZlcyB8fCAoZWwuZGlyZWN0aXZlcyA9IFtdKSkucHVzaCh7IG5hbWU6IG5hbWUsIHJhd05hbWU6IHJhd05hbWUsIHZhbHVlOiB2YWx1ZSwgYXJnOiBhcmcsIG1vZGlmaWVyczogbW9kaWZpZXJzIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRIYW5kbGVyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICBtb2RpZmllcnMsXG4gIGltcG9ydGFudFxuKSB7XG4gIC8vIGNoZWNrIGNhcHR1cmUgbW9kaWZpZXJcbiAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMuY2FwdHVyZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMuY2FwdHVyZTtcbiAgICBuYW1lID0gJyEnICsgbmFtZTsgLy8gbWFyayB0aGUgZXZlbnQgYXMgY2FwdHVyZWRcbiAgfVxuICBpZiAobW9kaWZpZXJzICYmIG1vZGlmaWVycy5vbmNlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5vbmNlO1xuICAgIG5hbWUgPSAnficgKyBuYW1lOyAvLyBtYXJrIHRoZSBldmVudCBhcyBvbmNlXG4gIH1cbiAgdmFyIGV2ZW50cztcbiAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMubmF0aXZlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5uYXRpdmU7XG4gICAgZXZlbnRzID0gZWwubmF0aXZlRXZlbnRzIHx8IChlbC5uYXRpdmVFdmVudHMgPSB7fSk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzID0gZWwuZXZlbnRzIHx8IChlbC5ldmVudHMgPSB7fSk7XG4gIH1cbiAgdmFyIG5ld0hhbmRsZXIgPSB7IHZhbHVlOiB2YWx1ZSwgbW9kaWZpZXJzOiBtb2RpZmllcnMgfTtcbiAgdmFyIGhhbmRsZXJzID0gZXZlbnRzW25hbWVdO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcnMpKSB7XG4gICAgaW1wb3J0YW50ID8gaGFuZGxlcnMudW5zaGlmdChuZXdIYW5kbGVyKSA6IGhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7XG4gIH0gZWxzZSBpZiAoaGFuZGxlcnMpIHtcbiAgICBldmVudHNbbmFtZV0gPSBpbXBvcnRhbnQgPyBbbmV3SGFuZGxlciwgaGFuZGxlcnNdIDogW2hhbmRsZXJzLCBuZXdIYW5kbGVyXTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHNbbmFtZV0gPSBuZXdIYW5kbGVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIGdldFN0YXRpY1xuKSB7XG4gIHZhciBkeW5hbWljVmFsdWUgPVxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICc6JyArIG5hbWUpIHx8XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtYmluZDonICsgbmFtZSk7XG4gIGlmIChkeW5hbWljVmFsdWUgIT0gbnVsbCkge1xuICAgIHJldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKVxuICB9IGVsc2UgaWYgKGdldFN0YXRpYyAhPT0gZmFsc2UpIHtcbiAgICB2YXIgc3RhdGljVmFsdWUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCBuYW1lKTtcbiAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyIChlbCwgbmFtZSkge1xuICB2YXIgdmFsO1xuICBpZiAoKHZhbCA9IGVsLmF0dHJzTWFwW25hbWVdKSAhPSBudWxsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGxpc3RbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG52YXIgbGVuO1xudmFyIHN0cjtcbnZhciBjaHI7XG52YXIgaW5kZXgkMTtcbnZhciBleHByZXNzaW9uUG9zO1xudmFyIGV4cHJlc3Npb25FbmRQb3M7XG5cbi8qKlxuICogcGFyc2UgZGlyZWN0aXZlIG1vZGVsIHRvIGRvIHRoZSBhcnJheSB1cGRhdGUgdHJhbnNmb3JtLiBhW2lkeF0gPSB2YWwgPT4gJCRhLnNwbGljZSgkJGlkeCwgMSwgdmFsKVxuICpcbiAqIGZvciBsb29wIHBvc3NpYmxlIGNhc2VzOlxuICpcbiAqIC0gdGVzdFxuICogLSB0ZXN0W2lkeF1cbiAqIC0gdGVzdFt0ZXN0MVtpZHhdXVxuICogLSB0ZXN0W1wiYVwiXVtpZHhdXG4gKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFbaWR4XV1cbiAqIC0gdGVzdC54eHguYVtcImFzYVwiXVt0ZXN0MVtpZHhdXVxuICpcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZU1vZGVsICh2YWwpIHtcbiAgc3RyID0gdmFsO1xuICBsZW4gPSBzdHIubGVuZ3RoO1xuICBpbmRleCQxID0gZXhwcmVzc2lvblBvcyA9IGV4cHJlc3Npb25FbmRQb3MgPSAwO1xuXG4gIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXhwOiB2YWwsXG4gICAgICBpZHg6IG51bGxcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgfSBlbHNlIGlmIChjaHIgPT09IDB4NUIpIHtcbiAgICAgIHBhcnNlQnJhY2tldChjaHIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwOiB2YWwuc3Vic3RyaW5nKDAsIGV4cHJlc3Npb25Qb3MpLFxuICAgIGlkeDogdmFsLnN1YnN0cmluZyhleHByZXNzaW9uUG9zICsgMSwgZXhwcmVzc2lvbkVuZFBvcylcbiAgfVxufVxuXG5mdW5jdGlvbiBuZXh0ICgpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KCsraW5kZXgkMSlcbn1cblxuZnVuY3Rpb24gZW9mICgpIHtcbiAgcmV0dXJuIGluZGV4JDEgPj0gbGVuXG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nU3RhcnQgKGNocikge1xuICByZXR1cm4gY2hyID09PSAweDIyIHx8IGNociA9PT0gMHgyN1xufVxuXG5mdW5jdGlvbiBwYXJzZUJyYWNrZXQgKGNocikge1xuICB2YXIgaW5CcmFja2V0ID0gMTtcbiAgZXhwcmVzc2lvblBvcyA9IGluZGV4JDE7XG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChjaHIgPT09IDB4NUIpIHsgaW5CcmFja2V0Kys7IH1cbiAgICBpZiAoY2hyID09PSAweDVEKSB7IGluQnJhY2tldC0tOyB9XG4gICAgaWYgKGluQnJhY2tldCA9PT0gMCkge1xuICAgICAgZXhwcmVzc2lvbkVuZFBvcyA9IGluZGV4JDE7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZVN0cmluZyAoY2hyKSB7XG4gIHZhciBzdHJpbmdRdW90ZSA9IGNocjtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoY2hyID09PSBzdHJpbmdRdW90ZSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJSRSA9IC9edi18XkB8XjovO1xudmFyIGZvckFsaWFzUkUgPSAvKC4qPylcXHMrKD86aW58b2YpXFxzKyguKikvO1xudmFyIGZvckl0ZXJhdG9yUkUgPSAvXFwoKFxce1tefV0qXFx9fFteLF0qKSwoW14sXSopKD86LChbXixdKikpP1xcKS87XG52YXIgYmluZFJFID0gL146fF52LWJpbmQ6LztcbnZhciBvblJFID0gL15AfF52LW9uOi87XG52YXIgYXJnUkUgPSAvOiguKikkLztcbnZhciBtb2RpZmllclJFID0gL1xcLlteLl0rL2c7XG5cbnZhciBkZWNvZGVIVE1MQ2FjaGVkID0gY2FjaGVkKGRlY29kZSk7XG5cbi8vIGNvbmZpZ3VyYWJsZSBzdGF0ZVxudmFyIHdhcm4kMTtcbnZhciBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZTtcbnZhciBwbGF0Zm9ybU11c3RVc2VQcm9wO1xudmFyIHBsYXRmb3JtSXNQcmVUYWc7XG52YXIgcHJlVHJhbnNmb3JtcztcbnZhciB0cmFuc2Zvcm1zO1xudmFyIHBvc3RUcmFuc2Zvcm1zO1xudmFyIGRlbGltaXRlcnM7XG5cbi8qKlxuICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB3YXJuJDEgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlID0gb3B0aW9ucy5nZXRUYWdOYW1lc3BhY2UgfHwgbm87XG4gIHBsYXRmb3JtTXVzdFVzZVByb3AgPSBvcHRpb25zLm11c3RVc2VQcm9wIHx8IG5vO1xuICBwbGF0Zm9ybUlzUHJlVGFnID0gb3B0aW9ucy5pc1ByZVRhZyB8fCBubztcbiAgcHJlVHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncHJlVHJhbnNmb3JtTm9kZScpO1xuICB0cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Ob2RlJyk7XG4gIHBvc3RUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwb3N0VHJhbnNmb3JtTm9kZScpO1xuICBkZWxpbWl0ZXJzID0gb3B0aW9ucy5kZWxpbWl0ZXJzO1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIHByZXNlcnZlV2hpdGVzcGFjZSA9IG9wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlICE9PSBmYWxzZTtcbiAgdmFyIHJvb3Q7XG4gIHZhciBjdXJyZW50UGFyZW50O1xuICB2YXIgaW5WUHJlID0gZmFsc2U7XG4gIHZhciBpblByZSA9IGZhbHNlO1xuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIHBhcnNlSFRNTCh0ZW1wbGF0ZSwge1xuICAgIGV4cGVjdEhUTUw6IG9wdGlvbnMuZXhwZWN0SFRNTCxcbiAgICBpc1VuYXJ5VGFnOiBvcHRpb25zLmlzVW5hcnlUYWcsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICh0YWcsIGF0dHJzLCB1bmFyeSkge1xuICAgICAgLy8gY2hlY2sgbmFtZXNwYWNlLlxuICAgICAgLy8gaW5oZXJpdCBwYXJlbnQgbnMgaWYgdGhlcmUgaXMgb25lXG4gICAgICB2YXIgbnMgPSAoY3VycmVudFBhcmVudCAmJiBjdXJyZW50UGFyZW50Lm5zKSB8fCBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSh0YWcpO1xuXG4gICAgICAvLyBoYW5kbGUgSUUgc3ZnIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJiBucyA9PT0gJ3N2ZycpIHtcbiAgICAgICAgYXR0cnMgPSBndWFyZElFU1ZHQnVnKGF0dHJzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSB7XG4gICAgICAgIHR5cGU6IDEsXG4gICAgICAgIHRhZzogdGFnLFxuICAgICAgICBhdHRyc0xpc3Q6IGF0dHJzLFxuICAgICAgICBhdHRyc01hcDogbWFrZUF0dHJzTWFwKGF0dHJzKSxcbiAgICAgICAgcGFyZW50OiBjdXJyZW50UGFyZW50LFxuICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgIH07XG4gICAgICBpZiAobnMpIHtcbiAgICAgICAgZWxlbWVudC5ucyA9IG5zO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGb3JiaWRkZW5UYWcoZWxlbWVudCkgJiYgIWlzU2VydmVyUmVuZGVyaW5nKCkpIHtcbiAgICAgICAgZWxlbWVudC5mb3JiaWRkZW4gPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4kMShcbiAgICAgICAgICAnVGVtcGxhdGVzIHNob3VsZCBvbmx5IGJlIHJlc3BvbnNpYmxlIGZvciBtYXBwaW5nIHRoZSBzdGF0ZSB0byB0aGUgJyArXG4gICAgICAgICAgJ1VJLiBBdm9pZCBwbGFjaW5nIHRhZ3Mgd2l0aCBzaWRlLWVmZmVjdHMgaW4geW91ciB0ZW1wbGF0ZXMsIHN1Y2ggYXMgJyArXG4gICAgICAgICAgXCI8XCIgKyB0YWcgKyBcIj5cIiArICcsIGFzIHRoZXkgd2lsbCBub3QgYmUgcGFyc2VkLidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgcHJlLXRyYW5zZm9ybXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlVHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwcmVUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWluVlByZSkge1xuICAgICAgICBwcm9jZXNzUHJlKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgICBpblZQcmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGluVlByZSkge1xuICAgICAgICBwcm9jZXNzUmF3QXR0cnMoZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzRm9yKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzSWYoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NPbmNlKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gICAgICAgIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gICAgICAgIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICAgICAgICBlbGVtZW50LnBsYWluID0gIWVsZW1lbnQua2V5ICYmICFhdHRycy5sZW5ndGg7XG5cbiAgICAgICAgcHJvY2Vzc1JlZihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc1Nsb3QoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHRyYW5zZm9ybXMubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgIHRyYW5zZm9ybXNbaSQxXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzQXR0cnMoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkKSB7XG4gICAgICAgICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJDYW5ub3QgdXNlIDxcIiArIChlbC50YWcpICsgXCI+IGFzIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSBpdCBtYXkgXCIgK1xuICAgICAgICAgICAgICAnY29udGFpbiBtdWx0aXBsZSBub2RlczpcXG4nICsgdGVtcGxhdGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5hdHRyc01hcC5oYXNPd25Qcm9wZXJ0eSgndi1mb3InKSkge1xuICAgICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgJ0Nhbm5vdCB1c2Ugdi1mb3Igb24gc3RhdGVmdWwgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlICcgK1xuICAgICAgICAgICAgICAnaXQgcmVuZGVycyBtdWx0aXBsZSBlbGVtZW50czpcXG4nICsgdGVtcGxhdGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHRyZWUgbWFuYWdlbWVudFxuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSBlbGVtZW50O1xuICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhyb290KTtcbiAgICAgIH0gZWxzZSBpZiAoIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICAvLyBhbGxvdyByb290IGVsZW1lbnRzIHdpdGggdi1pZiwgdi1lbHNlLWlmIGFuZCB2LWVsc2VcbiAgICAgICAgaWYgKHJvb3QuaWYgJiYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkpIHtcbiAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhlbGVtZW50KTtcbiAgICAgICAgICBhZGRJZkNvbmRpdGlvbihyb290LCB7XG4gICAgICAgICAgICBleHA6IGVsZW1lbnQuZWxzZWlmLFxuICAgICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWQpIHtcbiAgICAgICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIFwiQ29tcG9uZW50IHRlbXBsYXRlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudDpcIiArXG4gICAgICAgICAgICBcIlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgIFwiSWYgeW91IGFyZSB1c2luZyB2LWlmIG9uIG11bHRpcGxlIGVsZW1lbnRzLCBcIiArXG4gICAgICAgICAgICBcInVzZSB2LWVsc2UtaWYgdG8gY2hhaW4gdGhlbSBpbnN0ZWFkLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQgJiYgIWVsZW1lbnQuZm9yYmlkZGVuKSB7XG4gICAgICAgIGlmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpIHtcbiAgICAgICAgICBwcm9jZXNzSWZDb25kaXRpb25zKGVsZW1lbnQsIGN1cnJlbnRQYXJlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuc2xvdFNjb3BlKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgICAgICAgY3VycmVudFBhcmVudC5wbGFpbiA9IGZhbHNlO1xuICAgICAgICAgIHZhciBuYW1lID0gZWxlbWVudC5zbG90VGFyZ2V0IHx8ICdkZWZhdWx0JzsoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyB8fCAoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyA9IHt9KSlbbmFtZV0gPSBlbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgICAgICBlbGVtZW50LnBhcmVudCA9IGN1cnJlbnRQYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghdW5hcnkpIHtcbiAgICAgICAgY3VycmVudFBhcmVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgICB9XG4gICAgICAvLyBhcHBseSBwb3N0LXRyYW5zZm9ybXNcbiAgICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IHBvc3RUcmFuc2Zvcm1zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgcG9zdFRyYW5zZm9ybXNbaSQyXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZW5kOiBmdW5jdGlvbiBlbmQgKCkge1xuICAgICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHdoaXRlc3BhY2VcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICB2YXIgbGFzdE5vZGUgPSBlbGVtZW50LmNoaWxkcmVuW2VsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICBpZiAobGFzdE5vZGUgJiYgbGFzdE5vZGUudHlwZSA9PT0gMyAmJiBsYXN0Tm9kZS50ZXh0ID09PSAnICcpIHtcbiAgICAgICAgZWxlbWVudC5jaGlsZHJlbi5wb3AoKTtcbiAgICAgIH1cbiAgICAgIC8vIHBvcCBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG4gICAgICBjdXJyZW50UGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAvLyBjaGVjayBwcmUgc3RhdGVcbiAgICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgICBpblZQcmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgICBpblByZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBjaGFyczogZnVuY3Rpb24gY2hhcnMgKHRleHQpIHtcbiAgICAgIGlmICghY3VycmVudFBhcmVudCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkICYmIHRleHQgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAnQ29tcG9uZW50IHRlbXBsYXRlIHJlcXVpcmVzIGEgcm9vdCBlbGVtZW50LCByYXRoZXIgdGhhbiBqdXN0IHRleHQ6XFxuXFxuJyArIHRlbXBsYXRlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJlxuICAgICAgICAgIGN1cnJlbnRQYXJlbnQudGFnID09PSAndGV4dGFyZWEnICYmXG4gICAgICAgICAgY3VycmVudFBhcmVudC5hdHRyc01hcC5wbGFjZWhvbGRlciA9PT0gdGV4dCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbiA9IGN1cnJlbnRQYXJlbnQuY2hpbGRyZW47XG4gICAgICB0ZXh0ID0gaW5QcmUgfHwgdGV4dC50cmltKClcbiAgICAgICAgPyBkZWNvZGVIVE1MQ2FjaGVkKHRleHQpXG4gICAgICAgIC8vIG9ubHkgcHJlc2VydmUgd2hpdGVzcGFjZSBpZiBpdHMgbm90IHJpZ2h0IGFmdGVyIGEgc3RhcnRpbmcgdGFnXG4gICAgICAgIDogcHJlc2VydmVXaGl0ZXNwYWNlICYmIGNoaWxkcmVuLmxlbmd0aCA/ICcgJyA6ICcnO1xuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgdmFyIGV4cHJlc3Npb247XG4gICAgICAgIGlmICghaW5WUHJlICYmIHRleHQgIT09ICcgJyAmJiAoZXhwcmVzc2lvbiA9IHBhcnNlVGV4dCh0ZXh0LCBkZWxpbWl0ZXJzKSkpIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IDIsXG4gICAgICAgICAgICBleHByZXNzaW9uOiBleHByZXNzaW9uLFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRleHQgIT09ICcgJyB8fCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiByb290XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NQcmUgKGVsKSB7XG4gIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1wcmUnKSAhPSBudWxsKSB7XG4gICAgZWwucHJlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmF3QXR0cnMgKGVsKSB7XG4gIHZhciBsID0gZWwuYXR0cnNMaXN0Lmxlbmd0aDtcbiAgaWYgKGwpIHtcbiAgICB2YXIgYXR0cnMgPSBlbC5hdHRycyA9IG5ldyBBcnJheShsKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGVsLmF0dHJzTGlzdFtpXS5uYW1lLFxuICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkoZWwuYXR0cnNMaXN0W2ldLnZhbHVlKVxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWVsLnByZSkge1xuICAgIC8vIG5vbiByb290IG5vZGUgaW4gcHJlIGJsb2NrcyB3aXRoIG5vIGF0dHJpYnV0ZXNcbiAgICBlbC5wbGFpbiA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0tleSAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEJpbmRpbmdBdHRyKGVsLCAna2V5Jyk7XG4gIGlmIChleHApIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm4kMShcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGVsLmtleSA9IGV4cDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmVmIChlbCkge1xuICB2YXIgcmVmID0gZ2V0QmluZGluZ0F0dHIoZWwsICdyZWYnKTtcbiAgaWYgKHJlZikge1xuICAgIGVsLnJlZiA9IHJlZjtcbiAgICBlbC5yZWZJbkZvciA9IGNoZWNrSW5Gb3IoZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGb3IgKGVsKSB7XG4gIHZhciBleHA7XG4gIGlmICgoZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZm9yJykpKSB7XG4gICAgdmFyIGluTWF0Y2ggPSBleHAubWF0Y2goZm9yQWxpYXNSRSk7XG4gICAgaWYgKCFpbk1hdGNoKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4kMShcbiAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cClcbiAgICAgICk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZWwuZm9yID0gaW5NYXRjaFsyXS50cmltKCk7XG4gICAgdmFyIGFsaWFzID0gaW5NYXRjaFsxXS50cmltKCk7XG4gICAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgICBpZiAoaXRlcmF0b3JNYXRjaCkge1xuICAgICAgZWwuYWxpYXMgPSBpdGVyYXRvck1hdGNoWzFdLnRyaW0oKTtcbiAgICAgIGVsLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO1xuICAgICAgaWYgKGl0ZXJhdG9yTWF0Y2hbM10pIHtcbiAgICAgICAgZWwuaXRlcmF0b3IyID0gaXRlcmF0b3JNYXRjaFszXS50cmltKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmFsaWFzID0gYWxpYXM7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJZiAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJyk7XG4gIGlmIChleHApIHtcbiAgICBlbC5pZiA9IGV4cDtcbiAgICBhZGRJZkNvbmRpdGlvbihlbCwge1xuICAgICAgZXhwOiBleHAsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScpICE9IG51bGwpIHtcbiAgICAgIGVsLmVsc2UgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgZWxzZWlmID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZS1pZicpO1xuICAgIGlmIChlbHNlaWYpIHtcbiAgICAgIGVsLmVsc2VpZiA9IGVsc2VpZjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmQ29uZGl0aW9ucyAoZWwsIHBhcmVudCkge1xuICB2YXIgcHJldiA9IGZpbmRQcmV2RWxlbWVudChwYXJlbnQuY2hpbGRyZW4pO1xuICBpZiAocHJldiAmJiBwcmV2LmlmKSB7XG4gICAgYWRkSWZDb25kaXRpb24ocHJldiwge1xuICAgICAgZXhwOiBlbC5lbHNlaWYsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybiQxKFxuICAgICAgXCJ2LVwiICsgKGVsLmVsc2VpZiA/ICgnZWxzZS1pZj1cIicgKyBlbC5lbHNlaWYgKyAnXCInKSA6ICdlbHNlJykgKyBcIiBcIiArXG4gICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFByZXZFbGVtZW50IChjaGlsZHJlbikge1xuICB2YXIgaSA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSAxKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5baV1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW5baV0udGV4dCAhPT0gJyAnKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBcInRleHQgXFxcIlwiICsgKGNoaWxkcmVuW2ldLnRleHQudHJpbSgpKSArIFwiXFxcIiBiZXR3ZWVuIHYtaWYgYW5kIHYtZWxzZSgtaWYpIFwiICtcbiAgICAgICAgICBcIndpbGwgYmUgaWdub3JlZC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2hpbGRyZW4ucG9wKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZElmQ29uZGl0aW9uIChlbCwgY29uZGl0aW9uKSB7XG4gIGlmICghZWwuaWZDb25kaXRpb25zKSB7XG4gICAgZWwuaWZDb25kaXRpb25zID0gW107XG4gIH1cbiAgZWwuaWZDb25kaXRpb25zLnB1c2goY29uZGl0aW9uKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc09uY2UgKGVsKSB7XG4gIHZhciBvbmNlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Ytb25jZScpO1xuICBpZiAob25jZSAhPSBudWxsKSB7XG4gICAgZWwub25jZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1Nsb3QgKGVsKSB7XG4gIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIGVsLnNsb3ROYW1lID0gZ2V0QmluZGluZ0F0dHIoZWwsICduYW1lJyk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwua2V5KSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiYGtleWAgZG9lcyBub3Qgd29yayBvbiA8c2xvdD4gYmVjYXVzZSBzbG90cyBhcmUgYWJzdHJhY3Qgb3V0bGV0cyBcIiArXG4gICAgICAgIFwiYW5kIGNhbiBwb3NzaWJseSBleHBhbmQgaW50byBtdWx0aXBsZSBlbGVtZW50cy4gXCIgK1xuICAgICAgICBcIlVzZSB0aGUga2V5IG9uIGEgd3JhcHBpbmcgZWxlbWVudCBpbnN0ZWFkLlwiXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xvdFRhcmdldCA9IGdldEJpbmRpbmdBdHRyKGVsLCAnc2xvdCcpO1xuICAgIGlmIChzbG90VGFyZ2V0KSB7XG4gICAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgfVxuICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIGVsLnNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzY29wZScpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQ29tcG9uZW50IChlbCkge1xuICB2YXIgYmluZGluZztcbiAgaWYgKChiaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdpcycpKSkge1xuICAgIGVsLmNvbXBvbmVudCA9IGJpbmRpbmc7XG4gIH1cbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICdpbmxpbmUtdGVtcGxhdGUnKSAhPSBudWxsKSB7XG4gICAgZWwuaW5saW5lVGVtcGxhdGUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBpLCBsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgYXJnLCBtb2RpZmllcnMsIGlzUHJvcDtcbiAgZm9yIChpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbmFtZSA9IHJhd05hbWUgPSBsaXN0W2ldLm5hbWU7XG4gICAgdmFsdWUgPSBsaXN0W2ldLnZhbHVlO1xuICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAvLyBtYXJrIGVsZW1lbnQgYXMgZHluYW1pY1xuICAgICAgZWwuaGFzQmluZGluZ3MgPSB0cnVlO1xuICAgICAgLy8gbW9kaWZpZXJzXG4gICAgICBtb2RpZmllcnMgPSBwYXJzZU1vZGlmaWVycyhuYW1lKTtcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTtcbiAgICAgICAgaXNQcm9wID0gZmFsc2U7XG4gICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnByb3ApIHtcbiAgICAgICAgICAgIGlzUHJvcCA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2lubmVySHRtbCcpIHsgbmFtZSA9ICdpbm5lckhUTUwnOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuY2FtZWwpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvcCB8fCBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgbmFtZSkpIHtcbiAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQXR0cihlbCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkgeyAvLyB2LW9uXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2Uob25SRSwgJycpO1xuICAgICAgICBhZGRIYW5kbGVyKGVsLCBuYW1lLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICAgIH0gZWxzZSB7IC8vIG5vcm1hbCBkaXJlY3RpdmVzXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoZGlyUkUsICcnKTtcbiAgICAgICAgLy8gcGFyc2UgYXJnXG4gICAgICAgIHZhciBhcmdNYXRjaCA9IG5hbWUubWF0Y2goYXJnUkUpO1xuICAgICAgICBpZiAoYXJnTWF0Y2ggJiYgKGFyZyA9IGFyZ01hdGNoWzFdKSkge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgfVxuICAgICAgICBhZGREaXJlY3RpdmUoZWwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBhcmcsIG1vZGlmaWVycyk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUgPT09ICdtb2RlbCcpIHtcbiAgICAgICAgICBjaGVja0ZvckFsaWFzTW9kZWwoZWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsaXRlcmFsIGF0dHJpYnV0ZVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGV4cHJlc3Npb24gPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgaWQ9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDppZD1cInZhbFwiPi4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkQXR0cihlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgIC8vICM0NTMwIGFsc28gYmluZCBzcGVjaWFsIGF0dHJpYnV0ZXMgYXMgcHJvcHMgZXZlbiBpZiB0aGV5IGFyZSBzdGF0aWNcbiAgICAgIC8vIHNvIHRoYXQgcGF0Y2hlcyBiZXR3ZWVuIGR5bmFtaWMvc3RhdGljIGFyZSBjb25zaXN0ZW50XG4gICAgICBpZiAocGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIG5hbWUpKSB7XG4gICAgICAgIGlmIChuYW1lID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCAndHJ1ZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW5Gb3IgKGVsKSB7XG4gIHZhciBwYXJlbnQgPSBlbDtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuZm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9kaWZpZXJzIChuYW1lKSB7XG4gIHZhciBtYXRjaCA9IG5hbWUubWF0Y2gobW9kaWZpZXJSRSk7XG4gIGlmIChtYXRjaCkge1xuICAgIHZhciByZXQgPSB7fTtcbiAgICBtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldFttLnNsaWNlKDEpXSA9IHRydWU7IH0pO1xuICAgIHJldHVybiByZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlQXR0cnNNYXAgKGF0dHJzKSB7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBtYXBbYXR0cnNbaV0ubmFtZV0gJiYgIWlzSUUpIHtcbiAgICAgIHdhcm4kMSgnZHVwbGljYXRlIGF0dHJpYnV0ZTogJyArIGF0dHJzW2ldLm5hbWUpO1xuICAgIH1cbiAgICBtYXBbYXR0cnNbaV0ubmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbmZ1bmN0aW9uIGlzRm9yYmlkZGVuVGFnIChlbCkge1xuICByZXR1cm4gKFxuICAgIGVsLnRhZyA9PT0gJ3N0eWxlJyB8fFxuICAgIChlbC50YWcgPT09ICdzY3JpcHQnICYmIChcbiAgICAgICFlbC5hdHRyc01hcC50eXBlIHx8XG4gICAgICBlbC5hdHRyc01hcC50eXBlID09PSAndGV4dC9qYXZhc2NyaXB0J1xuICAgICkpXG4gIClcbn1cblxudmFyIGllTlNCdWcgPSAvXnhtbG5zOk5TXFxkKy87XG52YXIgaWVOU1ByZWZpeCA9IC9eTlNcXGQrOi87XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBndWFyZElFU1ZHQnVnIChhdHRycykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXR0ciA9IGF0dHJzW2ldO1xuICAgIGlmICghaWVOU0J1Zy50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgIGF0dHIubmFtZSA9IGF0dHIubmFtZS5yZXBsYWNlKGllTlNQcmVmaXgsICcnKTtcbiAgICAgIHJlcy5wdXNoKGF0dHIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yQWxpYXNNb2RlbCAoZWwsIHZhbHVlKSB7XG4gIHZhciBfZWwgPSBlbDtcbiAgd2hpbGUgKF9lbCkge1xuICAgIGlmIChfZWwuZm9yICYmIF9lbC5hbGlhcyA9PT0gdmFsdWUpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OiBcIiArXG4gICAgICAgIFwiWW91IGFyZSBiaW5kaW5nIHYtbW9kZWwgZGlyZWN0bHkgdG8gYSB2LWZvciBpdGVyYXRpb24gYWxpYXMuIFwiICtcbiAgICAgICAgXCJUaGlzIHdpbGwgbm90IGJlIGFibGUgdG8gbW9kaWZ5IHRoZSB2LWZvciBzb3VyY2UgYXJyYXkgYmVjYXVzZSBcIiArXG4gICAgICAgIFwid3JpdGluZyB0byB0aGUgYWxpYXMgaXMgbGlrZSBtb2RpZnlpbmcgYSBmdW5jdGlvbiBsb2NhbCB2YXJpYWJsZS4gXCIgK1xuICAgICAgICBcIkNvbnNpZGVyIHVzaW5nIGFuIGFycmF5IG9mIG9iamVjdHMgYW5kIHVzZSB2LW1vZGVsIG9uIGFuIG9iamVjdCBwcm9wZXJ0eSBpbnN0ZWFkLlwiXG4gICAgICApO1xuICAgIH1cbiAgICBfZWwgPSBfZWwucGFyZW50O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNTdGF0aWNLZXk7XG52YXIgaXNQbGF0Zm9ybVJlc2VydmVkVGFnO1xuXG52YXIgZ2VuU3RhdGljS2V5c0NhY2hlZCA9IGNhY2hlZChnZW5TdGF0aWNLZXlzJDEpO1xuXG4vKipcbiAqIEdvYWwgb2YgdGhlIG9wdGltaXplcjogd2FsayB0aGUgZ2VuZXJhdGVkIHRlbXBsYXRlIEFTVCB0cmVlXG4gKiBhbmQgZGV0ZWN0IHN1Yi10cmVlcyB0aGF0IGFyZSBwdXJlbHkgc3RhdGljLCBpLmUuIHBhcnRzIG9mXG4gKiB0aGUgRE9NIHRoYXQgbmV2ZXIgbmVlZHMgdG8gY2hhbmdlLlxuICpcbiAqIE9uY2Ugd2UgZGV0ZWN0IHRoZXNlIHN1Yi10cmVlcywgd2UgY2FuOlxuICpcbiAqIDEuIEhvaXN0IHRoZW0gaW50byBjb25zdGFudHMsIHNvIHRoYXQgd2Ugbm8gbG9uZ2VyIG5lZWQgdG9cbiAqICAgIGNyZWF0ZSBmcmVzaCBub2RlcyBmb3IgdGhlbSBvbiBlYWNoIHJlLXJlbmRlcjtcbiAqIDIuIENvbXBsZXRlbHkgc2tpcCB0aGVtIGluIHRoZSBwYXRjaGluZyBwcm9jZXNzLlxuICovXG5mdW5jdGlvbiBvcHRpbWl6ZSAocm9vdCwgb3B0aW9ucykge1xuICBpZiAoIXJvb3QpIHsgcmV0dXJuIH1cbiAgaXNTdGF0aWNLZXkgPSBnZW5TdGF0aWNLZXlzQ2FjaGVkKG9wdGlvbnMuc3RhdGljS2V5cyB8fCAnJyk7XG4gIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgLy8gZmlyc3QgcGFzczogbWFyayBhbGwgbm9uLXN0YXRpYyBub2Rlcy5cbiAgbWFya1N0YXRpYyhyb290KTtcbiAgLy8gc2Vjb25kIHBhc3M6IG1hcmsgc3RhdGljIHJvb3RzLlxuICBtYXJrU3RhdGljUm9vdHMocm9vdCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzJDEgKGtleXMpIHtcbiAgcmV0dXJuIG1ha2VNYXAoXG4gICAgJ3R5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMnICtcbiAgICAoa2V5cyA/ICcsJyArIGtleXMgOiAnJylcbiAgKVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChub2RlKSB7XG4gIG5vZGUuc3RhdGljID0gaXNTdGF0aWMobm9kZSk7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICAvLyBkbyBub3QgbWFrZSBjb21wb25lbnQgc2xvdCBjb250ZW50IHN0YXRpYy4gdGhpcyBhdm9pZHNcbiAgICAvLyAxLiBjb21wb25lbnRzIG5vdCBhYmxlIHRvIG11dGF0ZSBzbG90IG5vZGVzXG4gICAgLy8gMi4gc3RhdGljIHNsb3QgY29udGVudCBmYWlscyBmb3IgaG90LXJlbG9hZGluZ1xuICAgIGlmIChcbiAgICAgICFpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmXG4gICAgICBub2RlLnRhZyAhPT0gJ3Nsb3QnICYmXG4gICAgICBub2RlLmF0dHJzTWFwWydpbmxpbmUtdGVtcGxhdGUnXSA9PSBudWxsXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIG1hcmtTdGF0aWMoY2hpbGQpO1xuICAgICAgaWYgKCFjaGlsZC5zdGF0aWMpIHtcbiAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY1Jvb3RzIChub2RlLCBpc0luRm9yKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBpZiAobm9kZS5zdGF0aWMgfHwgbm9kZS5vbmNlKSB7XG4gICAgICBub2RlLnN0YXRpY0luRm9yID0gaXNJbkZvcjtcbiAgICB9XG4gICAgLy8gRm9yIGEgbm9kZSB0byBxdWFsaWZ5IGFzIGEgc3RhdGljIHJvb3QsIGl0IHNob3VsZCBoYXZlIGNoaWxkcmVuIHRoYXRcbiAgICAvLyBhcmUgbm90IGp1c3Qgc3RhdGljIHRleHQuIE90aGVyd2lzZSB0aGUgY29zdCBvZiBob2lzdGluZyBvdXQgd2lsbFxuICAgIC8vIG91dHdlaWdoIHRoZSBiZW5lZml0cyBhbmQgaXQncyBiZXR0ZXIgb2ZmIHRvIGp1c3QgYWx3YXlzIHJlbmRlciBpdCBmcmVzaC5cbiAgICBpZiAobm9kZS5zdGF0aWMgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggJiYgIShcbiAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICBub2RlLmNoaWxkcmVuWzBdLnR5cGUgPT09IDNcbiAgICApKSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSB0cnVlO1xuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5jaGlsZHJlbltpXSwgaXNJbkZvciB8fCAhIW5vZGUuZm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICB3YWxrVGhyb3VnaENvbmRpdGlvbnNCbG9ja3Mobm9kZS5pZkNvbmRpdGlvbnMsIGlzSW5Gb3IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB3YWxrVGhyb3VnaENvbmRpdGlvbnNCbG9ja3MgKGNvbmRpdGlvbkJsb2NrcywgaXNJbkZvcikge1xuICBmb3IgKHZhciBpID0gMSwgbGVuID0gY29uZGl0aW9uQmxvY2tzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgbWFya1N0YXRpY1Jvb3RzKGNvbmRpdGlvbkJsb2Nrc1tpXS5ibG9jaywgaXNJbkZvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTdGF0aWMgKG5vZGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMikgeyAvLyBleHByZXNzaW9uXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgaWYgKG5vZGUudHlwZSA9PT0gMykgeyAvLyB0ZXh0XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gISEobm9kZS5wcmUgfHwgKFxuICAgICFub2RlLmhhc0JpbmRpbmdzICYmIC8vIG5vIGR5bmFtaWMgYmluZGluZ3NcbiAgICAhbm9kZS5pZiAmJiAhbm9kZS5mb3IgJiYgLy8gbm90IHYtaWYgb3Igdi1mb3Igb3Igdi1lbHNlXG4gICAgIWlzQnVpbHRJblRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgYnVpbHQtaW5cbiAgICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGNvbXBvbmVudFxuICAgICFpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvcihub2RlKSAmJlxuICAgIE9iamVjdC5rZXlzKG5vZGUpLmV2ZXJ5KGlzU3RhdGljS2V5KVxuICApKVxufVxuXG5mdW5jdGlvbiBpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciAobm9kZSkge1xuICB3aGlsZSAobm9kZS5wYXJlbnQpIHtcbiAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgaWYgKG5vZGUudGFnICE9PSAndGVtcGxhdGUnKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG5vZGUuZm9yKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbnZhciBmbkV4cFJFID0gL15cXHMqKFtcXHckX10rfFxcKFteKV0qP1xcKSlcXHMqPT58XmZ1bmN0aW9uXFxzKlxcKC87XG52YXIgc2ltcGxlUGF0aFJFID0gL15cXHMqW0EtWmEtel8kXVtcXHckXSooPzpcXC5bQS1aYS16XyRdW1xcdyRdKnxcXFsnLio/J118XFxbXCIuKj9cIl18XFxbXFxkK118XFxbW0EtWmEtel8kXVtcXHckXSpdKSpcXHMqJC87XG5cbi8vIGtleUNvZGUgYWxpYXNlc1xudmFyIGtleUNvZGVzID0ge1xuICBlc2M6IDI3LFxuICB0YWI6IDksXG4gIGVudGVyOiAxMyxcbiAgc3BhY2U6IDMyLFxuICB1cDogMzgsXG4gIGxlZnQ6IDM3LFxuICByaWdodDogMzksXG4gIGRvd246IDQwLFxuICAnZGVsZXRlJzogWzgsIDQ2XVxufTtcblxudmFyIG1vZGlmaWVyQ29kZSA9IHtcbiAgc3RvcDogJyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsnLFxuICBwcmV2ZW50OiAnJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7JyxcbiAgc2VsZjogJ2lmKCRldmVudC50YXJnZXQgIT09ICRldmVudC5jdXJyZW50VGFyZ2V0KXJldHVybjsnLFxuICBjdHJsOiAnaWYoISRldmVudC5jdHJsS2V5KXJldHVybjsnLFxuICBzaGlmdDogJ2lmKCEkZXZlbnQuc2hpZnRLZXkpcmV0dXJuOycsXG4gIGFsdDogJ2lmKCEkZXZlbnQuYWx0S2V5KXJldHVybjsnLFxuICBtZXRhOiAnaWYoISRldmVudC5tZXRhS2V5KXJldHVybjsnXG59O1xuXG5mdW5jdGlvbiBnZW5IYW5kbGVycyAoZXZlbnRzLCBuYXRpdmUpIHtcbiAgdmFyIHJlcyA9IG5hdGl2ZSA/ICduYXRpdmVPbjp7JyA6ICdvbjp7JztcbiAgZm9yICh2YXIgbmFtZSBpbiBldmVudHMpIHtcbiAgICByZXMgKz0gXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiOlwiICsgKGdlbkhhbmRsZXIobmFtZSwgZXZlbnRzW25hbWVdKSkgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICd9J1xufVxuXG5mdW5jdGlvbiBnZW5IYW5kbGVyIChcbiAgbmFtZSxcbiAgaGFuZGxlclxuKSB7XG4gIGlmICghaGFuZGxlcikge1xuICAgIHJldHVybiAnZnVuY3Rpb24oKXt9J1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICByZXR1cm4gKFwiW1wiICsgKGhhbmRsZXIubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBnZW5IYW5kbGVyKG5hbWUsIGhhbmRsZXIpOyB9KS5qb2luKCcsJykpICsgXCJdXCIpXG4gIH0gZWxzZSBpZiAoIWhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgcmV0dXJuIGZuRXhwUkUudGVzdChoYW5kbGVyLnZhbHVlKSB8fCBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlKVxuICAgICAgPyBoYW5kbGVyLnZhbHVlXG4gICAgICA6IChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIn1cIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29kZSA9ICcnO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHtcbiAgICAgICAgY29kZSArPSBtb2RpZmllckNvZGVba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgIGNvZGUgPSBnZW5LZXlGaWx0ZXIoa2V5cykgKyBjb2RlO1xuICAgIH1cbiAgICB2YXIgaGFuZGxlckNvZGUgPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlKVxuICAgICAgPyBoYW5kbGVyLnZhbHVlICsgJygkZXZlbnQpJ1xuICAgICAgOiBoYW5kbGVyLnZhbHVlO1xuICAgIHJldHVybiAnZnVuY3Rpb24oJGV2ZW50KXsnICsgY29kZSArIGhhbmRsZXJDb2RlICsgJ30nXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuS2V5RmlsdGVyIChrZXlzKSB7XG4gIHJldHVybiAoXCJpZihcIiArIChrZXlzLm1hcChnZW5GaWx0ZXJDb2RlKS5qb2luKCcmJicpKSArIFwiKXJldHVybjtcIilcbn1cblxuZnVuY3Rpb24gZ2VuRmlsdGVyQ29kZSAoa2V5KSB7XG4gIHZhciBrZXlWYWwgPSBwYXJzZUludChrZXksIDEwKTtcbiAgaWYgKGtleVZhbCkge1xuICAgIHJldHVybiAoXCIkZXZlbnQua2V5Q29kZSE9PVwiICsga2V5VmFsKVxuICB9XG4gIHZhciBhbGlhcyA9IGtleUNvZGVzW2tleV07XG4gIHJldHVybiAoXCJfaygkZXZlbnQua2V5Q29kZSxcIiArIChKU09OLnN0cmluZ2lmeShrZXkpKSArIChhbGlhcyA/ICcsJyArIEpTT04uc3RyaW5naWZ5KGFsaWFzKSA6ICcnKSArIFwiKVwiKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZCQyIChlbCwgZGlyKSB7XG4gIGVsLndyYXBEYXRhID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gKFwiX2IoXCIgKyBjb2RlICsgXCIsJ1wiICsgKGVsLnRhZykgKyBcIicsXCIgKyAoZGlyLnZhbHVlKSArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMucHJvcCA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBiYXNlRGlyZWN0aXZlcyA9IHtcbiAgYmluZDogYmluZCQyLFxuICBjbG9hazogbm9vcFxufTtcblxuLyogICovXG5cbi8vIGNvbmZpZ3VyYWJsZSBzdGF0ZVxudmFyIHdhcm4kMjtcbnZhciB0cmFuc2Zvcm1zJDE7XG52YXIgZGF0YUdlbkZucztcbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMkMTtcbnZhciBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWckMTtcbnZhciBzdGF0aWNSZW5kZXJGbnM7XG52YXIgb25jZUNvdW50O1xudmFyIGN1cnJlbnRPcHRpb25zO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZSAoXG4gIGFzdCxcbiAgb3B0aW9uc1xuKSB7XG4gIC8vIHNhdmUgcHJldmlvdXMgc3RhdGljUmVuZGVyRm5zIHNvIGdlbmVyYXRlIGNhbGxzIGNhbiBiZSBuZXN0ZWRcbiAgdmFyIHByZXZTdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnM7XG4gIHZhciBjdXJyZW50U3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zID0gW107XG4gIHZhciBwcmV2T25jZUNvdW50ID0gb25jZUNvdW50O1xuICBvbmNlQ291bnQgPSAwO1xuICBjdXJyZW50T3B0aW9ucyA9IG9wdGlvbnM7XG4gIHdhcm4kMiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdHJhbnNmb3JtcyQxID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Db2RlJyk7XG4gIGRhdGFHZW5GbnMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ2dlbkRhdGEnKTtcbiAgcGxhdGZvcm1EaXJlY3RpdmVzJDEgPSBvcHRpb25zLmRpcmVjdGl2ZXMgfHwge307XG4gIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyQxID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICB2YXIgY29kZSA9IGFzdCA/IGdlbkVsZW1lbnQoYXN0KSA6ICdfYyhcImRpdlwiKSc7XG4gIHN0YXRpY1JlbmRlckZucyA9IHByZXZTdGF0aWNSZW5kZXJGbnM7XG4gIG9uY2VDb3VudCA9IHByZXZPbmNlQ291bnQ7XG4gIHJldHVybiB7XG4gICAgcmVuZGVyOiAoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIGNvZGUgKyBcIn1cIiksXG4gICAgc3RhdGljUmVuZGVyRm5zOiBjdXJyZW50U3RhdGljUmVuZGVyRm5zXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRWxlbWVudCAoZWwpIHtcbiAgaWYgKGVsLnN0YXRpY1Jvb3QgJiYgIWVsLnN0YXRpY1Byb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5TdGF0aWMoZWwpXG4gIH0gZWxzZSBpZiAoZWwub25jZSAmJiAhZWwub25jZVByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5PbmNlKGVsKVxuICB9IGVsc2UgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbkZvcihlbClcbiAgfSBlbHNlIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwpXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnICYmICFlbC5zbG90VGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdlbkNoaWxkcmVuKGVsKSB8fCAndm9pZCAwJ1xuICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgcmV0dXJuIGdlblNsb3QoZWwpXG4gIH0gZWxzZSB7XG4gICAgLy8gY29tcG9uZW50IG9yIGVsZW1lbnRcbiAgICB2YXIgY29kZTtcbiAgICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgICBjb2RlID0gZ2VuQ29tcG9uZW50KGVsLmNvbXBvbmVudCwgZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGF0YSA9IGVsLnBsYWluID8gdW5kZWZpbmVkIDogZ2VuRGF0YShlbCk7XG5cbiAgICAgIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCB0cnVlKTtcbiAgICAgIGNvZGUgPSBcIl9jKCdcIiArIChlbC50YWcpICsgXCInXCIgKyAoZGF0YSA/IChcIixcIiArIGRhdGEpIDogJycpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCI7XG4gICAgfVxuICAgIC8vIG1vZHVsZSB0cmFuc2Zvcm1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFuc2Zvcm1zJDEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvZGUgPSB0cmFuc2Zvcm1zJDFbaV0oZWwsIGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gY29kZVxuICB9XG59XG5cbi8vIGhvaXN0IHN0YXRpYyBzdWItdHJlZXMgb3V0XG5mdW5jdGlvbiBnZW5TdGF0aWMgKGVsKSB7XG4gIGVsLnN0YXRpY1Byb2Nlc3NlZCA9IHRydWU7XG4gIHN0YXRpY1JlbmRlckZucy5wdXNoKChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgKGdlbkVsZW1lbnQoZWwpKSArIFwifVwiKSk7XG4gIHJldHVybiAoXCJfbShcIiArIChzdGF0aWNSZW5kZXJGbnMubGVuZ3RoIC0gMSkgKyAoZWwuc3RhdGljSW5Gb3IgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG59XG5cbi8vIHYtb25jZVxuZnVuY3Rpb24gZ2VuT25jZSAoZWwpIHtcbiAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwpXG4gIH0gZWxzZSBpZiAoZWwuc3RhdGljSW5Gb3IpIHtcbiAgICB2YXIga2V5ID0gJyc7XG4gICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LmZvcikge1xuICAgICAgICBrZXkgPSBwYXJlbnQua2V5O1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQyKFxuICAgICAgICBcInYtb25jZSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB2LWZvciB0aGF0IGlzIGtleWVkLiBcIlxuICAgICAgKTtcbiAgICAgIHJldHVybiBnZW5FbGVtZW50KGVsKVxuICAgIH1cbiAgICByZXR1cm4gKFwiX28oXCIgKyAoZ2VuRWxlbWVudChlbCkpICsgXCIsXCIgKyAob25jZUNvdW50KyspICsgKGtleSA/IChcIixcIiArIGtleSkgOiBcIlwiKSArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5TdGF0aWMoZWwpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSWYgKGVsKSB7XG4gIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBnZW5JZkNvbmRpdGlvbnMoZWwuaWZDb25kaXRpb25zLnNsaWNlKCkpXG59XG5cbmZ1bmN0aW9uIGdlbklmQ29uZGl0aW9ucyAoY29uZGl0aW9ucykge1xuICBpZiAoIWNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICdfZSgpJ1xuICB9XG5cbiAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbnMuc2hpZnQoKTtcbiAgaWYgKGNvbmRpdGlvbi5leHApIHtcbiAgICByZXR1cm4gKFwiKFwiICsgKGNvbmRpdGlvbi5leHApICsgXCIpP1wiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkgKyBcIjpcIiArIChnZW5JZkNvbmRpdGlvbnMoY29uZGl0aW9ucykpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpKVxuICB9XG5cbiAgLy8gdi1pZiB3aXRoIHYtb25jZSBzaG91bGQgZ2VuZXJhdGUgY29kZSBsaWtlIChhKT9fbSgwKTpfbSgxKVxuICBmdW5jdGlvbiBnZW5UZXJuYXJ5RXhwIChlbCkge1xuICAgIHJldHVybiBlbC5vbmNlID8gZ2VuT25jZShlbCkgOiBnZW5FbGVtZW50KGVsKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkZvciAoZWwpIHtcbiAgdmFyIGV4cCA9IGVsLmZvcjtcbiAgdmFyIGFsaWFzID0gZWwuYWxpYXM7XG4gIHZhciBpdGVyYXRvcjEgPSBlbC5pdGVyYXRvcjEgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IxKSkgOiAnJztcbiAgdmFyIGl0ZXJhdG9yMiA9IGVsLml0ZXJhdG9yMiA/IChcIixcIiArIChlbC5pdGVyYXRvcjIpKSA6ICcnO1xuICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIFwiX2woKFwiICsgZXhwICsgXCIpLFwiICtcbiAgICBcImZ1bmN0aW9uKFwiICsgYWxpYXMgKyBpdGVyYXRvcjEgKyBpdGVyYXRvcjIgKyBcIil7XCIgK1xuICAgICAgXCJyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCkpICtcbiAgICAnfSknXG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEgKGVsKSB7XG4gIHZhciBkYXRhID0gJ3snO1xuXG4gIC8vIGRpcmVjdGl2ZXMgZmlyc3QuXG4gIC8vIGRpcmVjdGl2ZXMgbWF5IG11dGF0ZSB0aGUgZWwncyBvdGhlciBwcm9wZXJ0aWVzIGJlZm9yZSB0aGV5IGFyZSBnZW5lcmF0ZWQuXG4gIHZhciBkaXJzID0gZ2VuRGlyZWN0aXZlcyhlbCk7XG4gIGlmIChkaXJzKSB7IGRhdGEgKz0gZGlycyArICcsJzsgfVxuXG4gIC8vIGtleVxuICBpZiAoZWwua2V5KSB7XG4gICAgZGF0YSArPSBcImtleTpcIiArIChlbC5rZXkpICsgXCIsXCI7XG4gIH1cbiAgLy8gcmVmXG4gIGlmIChlbC5yZWYpIHtcbiAgICBkYXRhICs9IFwicmVmOlwiICsgKGVsLnJlZikgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwucmVmSW5Gb3IpIHtcbiAgICBkYXRhICs9IFwicmVmSW5Gb3I6dHJ1ZSxcIjtcbiAgfVxuICAvLyBwcmVcbiAgaWYgKGVsLnByZSkge1xuICAgIGRhdGEgKz0gXCJwcmU6dHJ1ZSxcIjtcbiAgfVxuICAvLyByZWNvcmQgb3JpZ2luYWwgdGFnIG5hbWUgZm9yIGNvbXBvbmVudHMgdXNpbmcgXCJpc1wiIGF0dHJpYnV0ZVxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZGF0YSArPSBcInRhZzpcXFwiXCIgKyAoZWwudGFnKSArIFwiXFxcIixcIjtcbiAgfVxuICAvLyBtb2R1bGUgZGF0YSBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFHZW5GbnMubGVuZ3RoOyBpKyspIHtcbiAgICBkYXRhICs9IGRhdGFHZW5GbnNbaV0oZWwpO1xuICB9XG4gIC8vIGF0dHJpYnV0ZXNcbiAgaWYgKGVsLmF0dHJzKSB7XG4gICAgZGF0YSArPSBcImF0dHJzOntcIiArIChnZW5Qcm9wcyhlbC5hdHRycykpICsgXCJ9LFwiO1xuICB9XG4gIC8vIERPTSBwcm9wc1xuICBpZiAoZWwucHJvcHMpIHtcbiAgICBkYXRhICs9IFwiZG9tUHJvcHM6e1wiICsgKGdlblByb3BzKGVsLnByb3BzKSkgKyBcIn0sXCI7XG4gIH1cbiAgLy8gZXZlbnQgaGFuZGxlcnNcbiAgaWYgKGVsLmV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLmV2ZW50cykpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLm5hdGl2ZUV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLm5hdGl2ZUV2ZW50cywgdHJ1ZSkpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2xvdCB0YXJnZXRcbiAgaWYgKGVsLnNsb3RUYXJnZXQpIHtcbiAgICBkYXRhICs9IFwic2xvdDpcIiArIChlbC5zbG90VGFyZ2V0KSArIFwiLFwiO1xuICB9XG4gIC8vIHNjb3BlZCBzbG90c1xuICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICBkYXRhICs9IChnZW5TY29wZWRTbG90cyhlbC5zY29wZWRTbG90cykpICsgXCIsXCI7XG4gIH1cbiAgLy8gaW5saW5lLXRlbXBsYXRlXG4gIGlmIChlbC5pbmxpbmVUZW1wbGF0ZSkge1xuICAgIHZhciBpbmxpbmVUZW1wbGF0ZSA9IGdlbklubGluZVRlbXBsYXRlKGVsKTtcbiAgICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcbiAgICAgIGRhdGEgKz0gaW5saW5lVGVtcGxhdGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgZGF0YSA9IGRhdGEucmVwbGFjZSgvLCQvLCAnJykgKyAnfSc7XG4gIC8vIHYtYmluZCBkYXRhIHdyYXBcbiAgaWYgKGVsLndyYXBEYXRhKSB7XG4gICAgZGF0YSA9IGVsLndyYXBEYXRhKGRhdGEpO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMgKGVsKSB7XG4gIHZhciBkaXJzID0gZWwuZGlyZWN0aXZlcztcbiAgaWYgKCFkaXJzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSAnZGlyZWN0aXZlczpbJztcbiAgdmFyIGhhc1J1bnRpbWUgPSBmYWxzZTtcbiAgdmFyIGksIGwsIGRpciwgbmVlZFJ1bnRpbWU7XG4gIGZvciAoaSA9IDAsIGwgPSBkaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgbmVlZFJ1bnRpbWUgPSB0cnVlO1xuICAgIHZhciBnZW4gPSBwbGF0Zm9ybURpcmVjdGl2ZXMkMVtkaXIubmFtZV0gfHwgYmFzZURpcmVjdGl2ZXNbZGlyLm5hbWVdO1xuICAgIGlmIChnZW4pIHtcbiAgICAgIC8vIGNvbXBpbGUtdGltZSBkaXJlY3RpdmUgdGhhdCBtYW5pcHVsYXRlcyBBU1QuXG4gICAgICAvLyByZXR1cm5zIHRydWUgaWYgaXQgYWxzbyBuZWVkcyBhIHJ1bnRpbWUgY291bnRlcnBhcnQuXG4gICAgICBuZWVkUnVudGltZSA9ICEhZ2VuKGVsLCBkaXIsIHdhcm4kMik7XG4gICAgfVxuICAgIGlmIChuZWVkUnVudGltZSkge1xuICAgICAgaGFzUnVudGltZSA9IHRydWU7XG4gICAgICByZXMgKz0gXCJ7bmFtZTpcXFwiXCIgKyAoZGlyLm5hbWUpICsgXCJcXFwiLHJhd05hbWU6XFxcIlwiICsgKGRpci5yYXdOYW1lKSArIFwiXFxcIlwiICsgKGRpci52YWx1ZSA/IChcIix2YWx1ZTooXCIgKyAoZGlyLnZhbHVlKSArIFwiKSxleHByZXNzaW9uOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKFwiLGFyZzpcXFwiXCIgKyAoZGlyLmFyZykgKyBcIlxcXCJcIikgOiAnJykgKyAoZGlyLm1vZGlmaWVycyA/IChcIixtb2RpZmllcnM6XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLm1vZGlmaWVycykpKSA6ICcnKSArIFwifSxcIjtcbiAgICB9XG4gIH1cbiAgaWYgKGhhc1J1bnRpbWUpIHtcbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICddJ1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbklubGluZVRlbXBsYXRlIChlbCkge1xuICB2YXIgYXN0ID0gZWwuY2hpbGRyZW5bMF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIChcbiAgICBlbC5jaGlsZHJlbi5sZW5ndGggPiAxIHx8IGFzdC50eXBlICE9PSAxXG4gICkpIHtcbiAgICB3YXJuJDIoJ0lubGluZS10ZW1wbGF0ZSBjb21wb25lbnRzIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBjaGlsZCBlbGVtZW50LicpO1xuICB9XG4gIGlmIChhc3QudHlwZSA9PT0gMSkge1xuICAgIHZhciBpbmxpbmVSZW5kZXJGbnMgPSBnZW5lcmF0ZShhc3QsIGN1cnJlbnRPcHRpb25zKTtcbiAgICByZXR1cm4gKFwiaW5saW5lVGVtcGxhdGU6e3JlbmRlcjpmdW5jdGlvbigpe1wiICsgKGlubGluZVJlbmRlckZucy5yZW5kZXIpICsgXCJ9LHN0YXRpY1JlbmRlckZuczpbXCIgKyAoaW5saW5lUmVuZGVyRm5zLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIChcImZ1bmN0aW9uKCl7XCIgKyBjb2RlICsgXCJ9XCIpOyB9KS5qb2luKCcsJykpICsgXCJdfVwiKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlblNjb3BlZFNsb3RzIChzbG90cykge1xuICByZXR1cm4gKFwic2NvcGVkU2xvdHM6e1wiICsgKE9iamVjdC5rZXlzKHNsb3RzKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZ2VuU2NvcGVkU2xvdChrZXksIHNsb3RzW2tleV0pOyB9KS5qb2luKCcsJykpICsgXCJ9XCIpXG59XG5cbmZ1bmN0aW9uIGdlblNjb3BlZFNsb3QgKGtleSwgZWwpIHtcbiAgcmV0dXJuIGtleSArIFwiOmZ1bmN0aW9uKFwiICsgKFN0cmluZyhlbC5hdHRyc01hcC5zY29wZSkpICsgXCIpe1wiICtcbiAgICBcInJldHVybiBcIiArIChlbC50YWcgPT09ICd0ZW1wbGF0ZSdcbiAgICAgID8gZ2VuQ2hpbGRyZW4oZWwpIHx8ICd2b2lkIDAnXG4gICAgICA6IGdlbkVsZW1lbnQoZWwpKSArIFwifVwiXG59XG5cbmZ1bmN0aW9uIGdlbkNoaWxkcmVuIChlbCwgY2hlY2tTa2lwKSB7XG4gIHZhciBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuO1xuICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgdmFyIGVsJDEgPSBjaGlsZHJlblswXTtcbiAgICAvLyBvcHRpbWl6ZSBzaW5nbGUgdi1mb3JcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICAgIGVsJDEuZm9yICYmXG4gICAgICAgIGVsJDEudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgICAgIGVsJDEudGFnICE9PSAnc2xvdCcpIHtcbiAgICAgIHJldHVybiBnZW5FbGVtZW50KGVsJDEpXG4gICAgfVxuICAgIHZhciBub3JtYWxpemF0aW9uVHlwZSA9IGdldE5vcm1hbGl6YXRpb25UeXBlKGNoaWxkcmVuKTtcbiAgICByZXR1cm4gKFwiW1wiICsgKGNoaWxkcmVuLm1hcChnZW5Ob2RlKS5qb2luKCcsJykpICsgXCJdXCIgKyAoY2hlY2tTa2lwXG4gICAgICAgID8gbm9ybWFsaXphdGlvblR5cGUgPyAoXCIsXCIgKyBub3JtYWxpemF0aW9uVHlwZSkgOiAnJ1xuICAgICAgICA6ICcnKSlcbiAgfVxufVxuXG4vLyBkZXRlcm1pbmUgdGhlIG5vcm1hbGl6YXRpb24gbmVlZGVkIGZvciB0aGUgY2hpbGRyZW4gYXJyYXkuXG4vLyAwOiBubyBub3JtYWxpemF0aW9uIG5lZWRlZFxuLy8gMTogc2ltcGxlIG5vcm1hbGl6YXRpb24gbmVlZGVkIChwb3NzaWJsZSAxLWxldmVsIGRlZXAgbmVzdGVkIGFycmF5KVxuLy8gMjogZnVsbCBub3JtYWxpemF0aW9uIG5lZWRlZFxuZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvblR5cGUgKGNoaWxkcmVuKSB7XG4gIHZhciByZXMgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsID0gY2hpbGRyZW5baV07XG4gICAgaWYgKG5lZWRzTm9ybWFsaXphdGlvbihlbCkgfHxcbiAgICAgICAgKGVsLmlmICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZWVkc05vcm1hbGl6YXRpb24oYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMjtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChtYXliZUNvbXBvbmVudChlbCkgfHxcbiAgICAgICAgKGVsLmlmICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBtYXliZUNvbXBvbmVudChjLmJsb2NrKTsgfSkpKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5lZWRzTm9ybWFsaXphdGlvbiAoZWwpIHtcbiAgcmV0dXJuIGVsLmZvciB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScgfHwgZWwudGFnID09PSAnc2xvdCdcbn1cblxuZnVuY3Rpb24gbWF5YmVDb21wb25lbnQgKGVsKSB7XG4gIHJldHVybiBlbC50eXBlID09PSAxICYmICFpc1BsYXRmb3JtUmVzZXJ2ZWRUYWckMShlbC50YWcpXG59XG5cbmZ1bmN0aW9uIGdlbk5vZGUgKG5vZGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBnZW5FbGVtZW50KG5vZGUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblRleHQobm9kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5UZXh0ICh0ZXh0KSB7XG4gIHJldHVybiAoXCJfdihcIiArICh0ZXh0LnR5cGUgPT09IDJcbiAgICA/IHRleHQuZXhwcmVzc2lvbiAvLyBubyBuZWVkIGZvciAoKSBiZWNhdXNlIGFscmVhZHkgd3JhcHBlZCBpbiBfcygpXG4gICAgOiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMoSlNPTi5zdHJpbmdpZnkodGV4dC50ZXh0KSkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblNsb3QgKGVsKSB7XG4gIHZhciBzbG90TmFtZSA9IGVsLnNsb3ROYW1lIHx8ICdcImRlZmF1bHRcIic7XG4gIHZhciBjaGlsZHJlbiA9IGdlbkNoaWxkcmVuKGVsKTtcbiAgdmFyIHJlcyA9IFwiX3QoXCIgKyBzbG90TmFtZSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKTtcbiAgdmFyIGF0dHJzID0gZWwuYXR0cnMgJiYgKFwie1wiICsgKGVsLmF0dHJzLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gKChjYW1lbGl6ZShhLm5hbWUpKSArIFwiOlwiICsgKGEudmFsdWUpKTsgfSkuam9pbignLCcpKSArIFwifVwiKTtcbiAgdmFyIGJpbmQkJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kJ107XG4gIGlmICgoYXR0cnMgfHwgYmluZCQkMSkgJiYgIWNoaWxkcmVuKSB7XG4gICAgcmVzICs9IFwiLG51bGxcIjtcbiAgfVxuICBpZiAoYXR0cnMpIHtcbiAgICByZXMgKz0gXCIsXCIgKyBhdHRycztcbiAgfVxuICBpZiAoYmluZCQkMSkge1xuICAgIHJlcyArPSAoYXR0cnMgPyAnJyA6ICcsbnVsbCcpICsgXCIsXCIgKyBiaW5kJCQxO1xuICB9XG4gIHJldHVybiByZXMgKyAnKSdcbn1cblxuLy8gY29tcG9uZW50TmFtZSBpcyBlbC5jb21wb25lbnQsIHRha2UgaXQgYXMgYXJndW1lbnQgdG8gc2h1biBmbG93J3MgcGVzc2ltaXN0aWMgcmVmaW5lbWVudFxuZnVuY3Rpb24gZ2VuQ29tcG9uZW50IChjb21wb25lbnROYW1lLCBlbCkge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgdHJ1ZSk7XG4gIHJldHVybiAoXCJfYyhcIiArIGNvbXBvbmVudE5hbWUgKyBcIixcIiArIChnZW5EYXRhKGVsKSkgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gZ2VuUHJvcHMgKHByb3BzKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG4gICAgcmVzICs9IFwiXFxcIlwiICsgKHByb3AubmFtZSkgKyBcIlxcXCI6XCIgKyAodHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKHByb3AudmFsdWUpKSArIFwiLFwiO1xuICB9XG4gIHJldHVybiByZXMuc2xpY2UoMCwgLTEpXG59XG5cbi8vICMzODk1LCAjNDI2OFxuZnVuY3Rpb24gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzICh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIENvbXBpbGUgYSB0ZW1wbGF0ZS5cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSQxIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB2YXIgYXN0ID0gcGFyc2UodGVtcGxhdGUudHJpbSgpLCBvcHRpb25zKTtcbiAgb3B0aW1pemUoYXN0LCBvcHRpb25zKTtcbiAgdmFyIGNvZGUgPSBnZW5lcmF0ZShhc3QsIG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIGFzdDogYXN0LFxuICAgIHJlbmRlcjogY29kZS5yZW5kZXIsXG4gICAgc3RhdGljUmVuZGVyRm5zOiBjb2RlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59XG5cbi8qICAqL1xuXG4vLyBvcGVyYXRvcnMgbGlrZSB0eXBlb2YsIGluc3RhbmNlb2YgYW5kIGluIGFyZSBhbGxvd2VkXG52YXIgcHJvaGliaXRlZEtleXdvcmRSRSA9IG5ldyBSZWdFeHAoJ1xcXFxiJyArIChcbiAgJ2RvLGlmLGZvcixsZXQsbmV3LHRyeSx2YXIsY2FzZSxlbHNlLHdpdGgsYXdhaXQsYnJlYWssY2F0Y2gsY2xhc3MsY29uc3QsJyArXG4gICdzdXBlcix0aHJvdyx3aGlsZSx5aWVsZCxkZWxldGUsZXhwb3J0LGltcG9ydCxyZXR1cm4sc3dpdGNoLGRlZmF1bHQsJyArXG4gICdleHRlbmRzLGZpbmFsbHksY29udGludWUsZGVidWdnZXIsZnVuY3Rpb24sYXJndW1lbnRzJ1xuKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxifFxcXFxiJykgKyAnXFxcXGInKTtcbi8vIGNoZWNrIHZhbGlkIGlkZW50aWZpZXIgZm9yIHYtZm9yXG52YXIgaWRlbnRSRSA9IC9bQS1aYS16XyRdW1xcdyRdKi87XG4vLyBzdHJpcCBzdHJpbmdzIGluIGV4cHJlc3Npb25zXG52YXIgc3RyaXBTdHJpbmdSRSA9IC8nKD86W14nXFxcXF18XFxcXC4pKid8XCIoPzpbXlwiXFxcXF18XFxcXC4pKlwifGAoPzpbXmBcXFxcXXxcXFxcLikqXFwkXFx7fFxcfSg/OlteYFxcXFxdfFxcXFwuKSpgfGAoPzpbXmBcXFxcXXxcXFxcLikqYC9nO1xuXG4vLyBkZXRlY3QgcHJvYmxlbWF0aWMgZXhwcmVzc2lvbnMgaW4gYSB0ZW1wbGF0ZVxuZnVuY3Rpb24gZGV0ZWN0RXJyb3JzIChhc3QpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICBpZiAoYXN0KSB7XG4gICAgY2hlY2tOb2RlKGFzdCwgZXJyb3JzKTtcbiAgfVxuICByZXR1cm4gZXJyb3JzXG59XG5cbmZ1bmN0aW9uIGNoZWNrTm9kZSAobm9kZSwgZXJyb3JzKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIG5vZGUuYXR0cnNNYXApIHtcbiAgICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG5vZGUuYXR0cnNNYXBbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChuYW1lID09PSAndi1mb3InKSB7XG4gICAgICAgICAgICBjaGVja0Zvcihub2RlLCAoXCJ2LWZvcj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgZXJyb3JzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tFeHByZXNzaW9uKHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCBlcnJvcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoZWNrTm9kZShub2RlLmNoaWxkcmVuW2ldLCBlcnJvcnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDIpIHtcbiAgICBjaGVja0V4cHJlc3Npb24obm9kZS5leHByZXNzaW9uLCBub2RlLnRleHQsIGVycm9ycyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tGb3IgKG5vZGUsIHRleHQsIGVycm9ycykge1xuICBjaGVja0V4cHJlc3Npb24obm9kZS5mb3IgfHwgJycsIHRleHQsIGVycm9ycyk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLmFsaWFzLCAndi1mb3IgYWxpYXMnLCB0ZXh0LCBlcnJvcnMpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjEsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIGVycm9ycyk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMiwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgZXJyb3JzKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZGVudGlmaWVyIChpZGVudCwgdHlwZSwgdGV4dCwgZXJyb3JzKSB7XG4gIGlmICh0eXBlb2YgaWRlbnQgPT09ICdzdHJpbmcnICYmICFpZGVudFJFLnRlc3QoaWRlbnQpKSB7XG4gICAgZXJyb3JzLnB1c2goKFwiLSBpbnZhbGlkIFwiICsgdHlwZSArIFwiIFxcXCJcIiArIGlkZW50ICsgXCJcXFwiIGluIGV4cHJlc3Npb246IFwiICsgdGV4dCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRXhwcmVzc2lvbiAoZXhwLCB0ZXh0LCBlcnJvcnMpIHtcbiAgdHJ5IHtcbiAgICBuZXcgRnVuY3Rpb24oKFwicmV0dXJuIFwiICsgZXhwKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIga2V5d29yZE1hdGNoID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpLm1hdGNoKHByb2hpYml0ZWRLZXl3b3JkUkUpO1xuICAgIGlmIChrZXl3b3JkTWF0Y2gpIHtcbiAgICAgIGVycm9ycy5wdXNoKFxuICAgICAgICBcIi0gYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCBrZXl3b3JkIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIiBpbiBleHByZXNzaW9uIFwiICsgdGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JzLnB1c2goKFwiLSBpbnZhbGlkIGV4cHJlc3Npb246IFwiICsgdGV4dCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNDbGFzcyA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdjbGFzcycpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdGF0aWNDbGFzcykge1xuICAgIHZhciBleHByZXNzaW9uID0gcGFyc2VUZXh0KHN0YXRpY0NsYXNzLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgIGlmIChleHByZXNzaW9uKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImNsYXNzPVxcXCJcIiArIHN0YXRpY0NsYXNzICsgXCJcXFwiOiBcIiArXG4gICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBjbGFzcz1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmNsYXNzPVwidmFsXCI+LidcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChzdGF0aWNDbGFzcykge1xuICAgIGVsLnN0YXRpY0NsYXNzID0gSlNPTi5zdHJpbmdpZnkoc3RhdGljQ2xhc3MpO1xuICB9XG4gIHZhciBjbGFzc0JpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2NsYXNzJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKGNsYXNzQmluZGluZykge1xuICAgIGVsLmNsYXNzQmluZGluZyA9IGNsYXNzQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDEgKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNDbGFzcykge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNDbGFzczpcIiArIChlbC5zdGF0aWNDbGFzcykgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuY2xhc3NCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcImNsYXNzOlwiICsgKGVsLmNsYXNzQmluZGluZykgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG52YXIga2xhc3MkMSA9IHtcbiAgc3RhdGljS2V5czogWydzdGF0aWNDbGFzcyddLFxuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlLFxuICBnZW5EYXRhOiBnZW5EYXRhJDFcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlJDEgKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTtcbiAgaWYgKHN0YXRpY1N0eWxlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBleHByZXNzaW9uID0gcGFyc2VUZXh0KHN0YXRpY1N0eWxlLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgICAgaWYgKGV4cHJlc3Npb24pIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcInN0eWxlPVxcXCJcIiArIHN0YXRpY1N0eWxlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBzdHlsZT1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOnN0eWxlPVwidmFsXCI+LidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWwuc3RhdGljU3R5bGUgPSBKU09OLnN0cmluZ2lmeShwYXJzZVN0eWxlVGV4dChzdGF0aWNTdHlsZSkpO1xuICB9XG5cbiAgdmFyIHN0eWxlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnc3R5bGUnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pO1xuICBpZiAoc3R5bGVCaW5kaW5nKSB7XG4gICAgZWwuc3R5bGVCaW5kaW5nID0gc3R5bGVCaW5kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMiAoZWwpIHtcbiAgdmFyIGRhdGEgPSAnJztcbiAgaWYgKGVsLnN0YXRpY1N0eWxlKSB7XG4gICAgZGF0YSArPSBcInN0YXRpY1N0eWxlOlwiICsgKGVsLnN0YXRpY1N0eWxlKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5zdHlsZUJpbmRpbmcpIHtcbiAgICBkYXRhICs9IFwic3R5bGU6KFwiICsgKGVsLnN0eWxlQmluZGluZykgKyBcIiksXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIHN0eWxlJDEgPSB7XG4gIHN0YXRpY0tleXM6IFsnc3RhdGljU3R5bGUnXSxcbiAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSQxLFxuICBnZW5EYXRhOiBnZW5EYXRhJDJcbn07XG5cbnZhciBtb2R1bGVzJDEgPSBbXG4gIGtsYXNzJDEsXG4gIHN0eWxlJDFcbl07XG5cbi8qICAqL1xuXG52YXIgd2FybiQzO1xuXG5mdW5jdGlvbiBtb2RlbCQxIChcbiAgZWwsXG4gIGRpcixcbiAgX3dhcm5cbikge1xuICB3YXJuJDMgPSBfd2FybjtcbiAgdmFyIHZhbHVlID0gZGlyLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZGlyLm1vZGlmaWVycztcbiAgdmFyIHRhZyA9IGVsLnRhZztcbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBkeW5hbWljVHlwZSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dHlwZSddIHx8IGVsLmF0dHJzTWFwWyc6dHlwZSddO1xuICAgIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgZHluYW1pY1R5cGUpIHtcbiAgICAgIHdhcm4kMyhcbiAgICAgICAgXCI8aW5wdXQgOnR5cGU9XFxcIlwiICsgZHluYW1pY1R5cGUgKyBcIlxcXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46XFxuXCIgK1xuICAgICAgICBcInYtbW9kZWwgZG9lcyBub3Qgc3VwcG9ydCBkeW5hbWljIGlucHV0IHR5cGVzLiBVc2Ugdi1pZiBicmFuY2hlcyBpbnN0ZWFkLlwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAodGFnID09PSAnc2VsZWN0Jykge1xuICAgIGdlblNlbGVjdChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICBnZW5DaGVja2JveE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ3JhZGlvJykge1xuICAgIGdlblJhZGlvTW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2Uge1xuICAgIGdlbkRlZmF1bHRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH1cbiAgLy8gZW5zdXJlIHJ1bnRpbWUgZGlyZWN0aXZlIG1ldGFkYXRhXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGdlbkNoZWNrYm94TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgZWwuYXR0cnNNYXAuY2hlY2tlZCAhPSBudWxsKSB7XG4gICAgd2FybiQzKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY2hlY2tlZD46XFxuXCIgK1xuICAgICAgXCJpbmxpbmUgY2hlY2tlZCBhdHRyaWJ1dGVzIHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuIFwiICtcbiAgICAgICdEZWNsYXJlIGluaXRpYWwgdmFsdWVzIGluIHRoZSBjb21wb25lbnRcXCdzIGRhdGEgb3B0aW9uIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgdmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd2YWx1ZScpIHx8ICdudWxsJztcbiAgdmFyIHRydWVWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3RydWUtdmFsdWUnKSB8fCAndHJ1ZSc7XG4gIHZhciBmYWxzZVZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnZmFsc2UtdmFsdWUnKSB8fCAnZmFsc2UnO1xuICBhZGRQcm9wKGVsLCAnY2hlY2tlZCcsXG4gICAgXCJBcnJheS5pc0FycmF5KFwiICsgdmFsdWUgKyBcIilcIiArXG4gICAgICBcIj9faShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIik+LTFcIiArIChcbiAgICAgICAgdHJ1ZVZhbHVlQmluZGluZyA9PT0gJ3RydWUnXG4gICAgICAgICAgPyAoXCI6KFwiICsgdmFsdWUgKyBcIilcIilcbiAgICAgICAgICA6IChcIjpfcShcIiArIHZhbHVlICsgXCIsXCIgKyB0cnVlVmFsdWVCaW5kaW5nICsgXCIpXCIpXG4gICAgICApXG4gICk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLFxuICAgIFwidmFyICQkYT1cIiArIHZhbHVlICsgXCIsXCIgK1xuICAgICAgICAnJCRlbD0kZXZlbnQudGFyZ2V0LCcgK1xuICAgICAgICBcIiQkYz0kJGVsLmNoZWNrZWQ/KFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKTooXCIgKyBmYWxzZVZhbHVlQmluZGluZyArIFwiKTtcIiArXG4gICAgJ2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7JyArXG4gICAgICBcInZhciAkJHY9XCIgKyAobnVtYmVyID8gJ19uKCcgKyB2YWx1ZUJpbmRpbmcgKyAnKScgOiB2YWx1ZUJpbmRpbmcpICsgXCIsXCIgK1xuICAgICAgICAgICckJGk9X2koJCRhLCQkdik7JyArXG4gICAgICBcImlmKCQkYyl7JCRpPDAmJihcIiArIHZhbHVlICsgXCI9JCRhLmNvbmNhdCgkJHYpKX1cIiArXG4gICAgICBcImVsc2V7JCRpPi0xJiYoXCIgKyB2YWx1ZSArIFwiPSQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKX1cIiArXG4gICAgXCJ9ZWxzZXtcIiArIHZhbHVlICsgXCI9JCRjfVwiLFxuICAgIG51bGwsIHRydWVcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2VuUmFkaW9Nb2RlbCAoXG4gICAgZWwsXG4gICAgdmFsdWUsXG4gICAgbW9kaWZpZXJzXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBlbC5hdHRyc01hcC5jaGVja2VkICE9IG51bGwpIHtcbiAgICB3YXJuJDMoXG4gICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBjaGVja2VkPjpcXG5cIiArXG4gICAgICBcImlubGluZSBjaGVja2VkIGF0dHJpYnV0ZXMgd2lsbCBiZSBpZ25vcmVkIHdoZW4gdXNpbmcgdi1tb2RlbC4gXCIgK1xuICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICB2YWx1ZUJpbmRpbmcgPSBudW1iZXIgPyAoXCJfbihcIiArIHZhbHVlQmluZGluZyArIFwiKVwiKSA6IHZhbHVlQmluZGluZztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLCAoXCJfcShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIilcIikpO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlQmluZGluZyksIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5EZWZhdWx0TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ2lucHV0JyAmJiBlbC5hdHRyc01hcC52YWx1ZSkge1xuICAgICAgd2FybiQzKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiB2YWx1ZT1cXFwiXCIgKyAoZWwuYXR0cnNNYXAudmFsdWUpICsgXCJcXFwiPjpcXG5cIiArXG4gICAgICAgICdpbmxpbmUgdmFsdWUgYXR0cmlidXRlcyB3aWxsIGJlIGlnbm9yZWQgd2hlbiB1c2luZyB2LW1vZGVsLiAnICtcbiAgICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZWwudGFnID09PSAndGV4dGFyZWEnICYmIGVsLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgd2FybiQzKFxuICAgICAgICBcIjx0ZXh0YXJlYSB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjpcXG5cIiArXG4gICAgICAgICdpbmxpbmUgY29udGVudCBpbnNpZGUgPHRleHRhcmVhPiB3aWxsIGJlIGlnbm9yZWQgd2hlbiB1c2luZyB2LW1vZGVsLiAnICtcbiAgICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIGxhenkgPSByZWYubGF6eTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciB0cmltID0gcmVmLnRyaW07XG4gIHZhciBldmVudCA9IGxhenkgfHwgKGlzSUUgJiYgdHlwZSA9PT0gJ3JhbmdlJykgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gIHZhciBuZWVkQ29tcG9zaXRpb25HdWFyZCA9ICFsYXp5ICYmIHR5cGUgIT09ICdyYW5nZSc7XG4gIHZhciBpc05hdGl2ZSA9IGVsLnRhZyA9PT0gJ2lucHV0JyB8fCBlbC50YWcgPT09ICd0ZXh0YXJlYSc7XG5cbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9IGlzTmF0aXZlXG4gICAgPyAoXCIkZXZlbnQudGFyZ2V0LnZhbHVlXCIgKyAodHJpbSA/ICcudHJpbSgpJyA6ICcnKSlcbiAgICA6IHRyaW0gPyBcIih0eXBlb2YgJGV2ZW50ID09PSAnc3RyaW5nJyA/ICRldmVudC50cmltKCkgOiAkZXZlbnQpXCIgOiBcIiRldmVudFwiO1xuICB2YWx1ZUV4cHJlc3Npb24gPSBudW1iZXIgfHwgdHlwZSA9PT0gJ251bWJlcidcbiAgICA/IChcIl9uKFwiICsgdmFsdWVFeHByZXNzaW9uICsgXCIpXCIpXG4gICAgOiB2YWx1ZUV4cHJlc3Npb247XG5cbiAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcbiAgaWYgKGlzTmF0aXZlICYmIG5lZWRDb21wb3NpdGlvbkd1YXJkKSB7XG4gICAgY29kZSA9IFwiaWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpcmV0dXJuO1wiICsgY29kZTtcbiAgfVxuXG4gIC8vIGlucHV0cyB3aXRoIHR5cGU9XCJmaWxlXCIgYXJlIHJlYWQgb25seSBhbmQgc2V0dGluZyB0aGUgaW5wdXQnc1xuICAvLyB2YWx1ZSB3aWxsIHRocm93IGFuIGVycm9yLlxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgdHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgd2FybiQzKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgdHlwZT1cXFwiZmlsZVxcXCI+OlxcblwiICtcbiAgICAgIFwiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cblxuICBhZGRQcm9wKGVsLCAndmFsdWUnLCBpc05hdGl2ZSA/IChcIl9zKFwiICsgdmFsdWUgKyBcIilcIikgOiAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTtcbiAgaWYgKHRyaW0gfHwgbnVtYmVyIHx8IHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgYWRkSGFuZGxlcihlbCwgJ2JsdXInLCAnJGZvcmNlVXBkYXRlKCknKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5TZWxlY3QgKFxuICAgIGVsLFxuICAgIHZhbHVlLFxuICAgIG1vZGlmaWVyc1xuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZWwuY2hpbGRyZW4uc29tZShjaGVja09wdGlvbldhcm5pbmcpO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgYXNzaWdubWVudCA9IFwiQXJyYXkucHJvdG90eXBlLmZpbHRlclwiICtcbiAgICBcIi5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucyxmdW5jdGlvbihvKXtyZXR1cm4gby5zZWxlY3RlZH0pXCIgK1xuICAgIFwiLm1hcChmdW5jdGlvbihvKXt2YXIgdmFsID0gXFxcIl92YWx1ZVxcXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAobnVtYmVyID8gJ19uKHZhbCknIDogJ3ZhbCcpICsgXCJ9KVwiICtcbiAgICAoZWwuYXR0cnNNYXAubXVsdGlwbGUgPT0gbnVsbCA/ICdbMF0nIDogJycpO1xuXG4gIHZhciBjb2RlID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIGFzc2lnbm1lbnQpO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgY29kZSwgbnVsbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrT3B0aW9uV2FybmluZyAob3B0aW9uKSB7XG4gIGlmIChvcHRpb24udHlwZSA9PT0gMSAmJlxuICAgIG9wdGlvbi50YWcgPT09ICdvcHRpb24nICYmXG4gICAgb3B0aW9uLmF0dHJzTWFwLnNlbGVjdGVkICE9IG51bGwpIHtcbiAgICB3YXJuJDMoXG4gICAgICBcIjxzZWxlY3Qgdi1tb2RlbD1cXFwiXCIgKyAob3B0aW9uLnBhcmVudC5hdHRyc01hcFsndi1tb2RlbCddKSArIFwiXFxcIj46XFxuXCIgK1xuICAgICAgJ2lubGluZSBzZWxlY3RlZCBhdHRyaWJ1dGVzIG9uIDxvcHRpb24+IHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuICcgK1xuICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZW5Bc3NpZ25tZW50Q29kZSAodmFsdWUsIGFzc2lnbm1lbnQpIHtcbiAgdmFyIG1vZGVsUnMgPSBwYXJzZU1vZGVsKHZhbHVlKTtcbiAgaWYgKG1vZGVsUnMuaWR4ID09PSBudWxsKSB7XG4gICAgcmV0dXJuICh2YWx1ZSArIFwiPVwiICsgYXNzaWdubWVudClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJ2YXIgJCRleHAgPSBcIiArIChtb2RlbFJzLmV4cCkgKyBcIiwgJCRpZHggPSBcIiArIChtb2RlbFJzLmlkeCkgKyBcIjtcIiArXG4gICAgICBcImlmICghQXJyYXkuaXNBcnJheSgkJGV4cCkpe1wiICtcbiAgICAgICAgdmFsdWUgKyBcIj1cIiArIGFzc2lnbm1lbnQgKyBcIn1cIiArXG4gICAgICBcImVsc2V7JCRleHAuc3BsaWNlKCQkaWR4LCAxLCBcIiArIGFzc2lnbm1lbnQgKyBcIil9XCJcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdGV4dCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ3RleHRDb250ZW50JywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGh0bWwgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICdpbm5lckhUTUwnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpKTtcbiAgfVxufVxuXG52YXIgZGlyZWN0aXZlcyQxID0ge1xuICBtb2RlbDogbW9kZWwkMSxcbiAgdGV4dDogdGV4dCxcbiAgaHRtbDogaHRtbFxufTtcblxuLyogICovXG5cbnZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbnZhciBiYXNlT3B0aW9ucyA9IHtcbiAgZXhwZWN0SFRNTDogdHJ1ZSxcbiAgbW9kdWxlczogbW9kdWxlcyQxLFxuICBzdGF0aWNLZXlzOiBnZW5TdGF0aWNLZXlzKG1vZHVsZXMkMSksXG4gIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMkMSxcbiAgaXNSZXNlcnZlZFRhZzogaXNSZXNlcnZlZFRhZyxcbiAgaXNVbmFyeVRhZzogaXNVbmFyeVRhZyxcbiAgbXVzdFVzZVByb3A6IG11c3RVc2VQcm9wLFxuICBnZXRUYWdOYW1lc3BhY2U6IGdldFRhZ05hbWVzcGFjZSxcbiAgaXNQcmVUYWc6IGlzUHJlVGFnXG59O1xuXG5mdW5jdGlvbiBjb21waWxlJCQxIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICBvcHRpb25zID0gb3B0aW9uc1xuICAgID8gZXh0ZW5kKGV4dGVuZCh7fSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKVxuICAgIDogYmFzZU9wdGlvbnM7XG4gIHJldHVybiBjb21waWxlJDEodGVtcGxhdGUsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVUb0Z1bmN0aW9ucyAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zLFxuICB2bVxuKSB7XG4gIHZhciBfd2FybiA9IChvcHRpb25zICYmIG9wdGlvbnMud2FybikgfHwgd2FybjtcbiAgLy8gZGV0ZWN0IHBvc3NpYmxlIENTUCByZXN0cmljdGlvblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gMScpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgIF93YXJuKFxuICAgICAgICAgICdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiAnICtcbiAgICAgICAgICAnZW52aXJvbm1lbnQgd2l0aCBDb250ZW50IFNlY3VyaXR5IFBvbGljeSB0aGF0IHByb2hpYml0cyB1bnNhZmUtZXZhbC4gJyArXG4gICAgICAgICAgJ1RoZSB0ZW1wbGF0ZSBjb21waWxlciBjYW5ub3Qgd29yayBpbiB0aGlzIGVudmlyb25tZW50LiBDb25zaWRlciAnICtcbiAgICAgICAgICAncmVsYXhpbmcgdGhlIHBvbGljeSB0byBhbGxvdyB1bnNhZmUtZXZhbCBvciBwcmUtY29tcGlsaW5nIHlvdXIgJyArXG4gICAgICAgICAgJ3RlbXBsYXRlcyBpbnRvIHJlbmRlciBmdW5jdGlvbnMuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIga2V5ID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlcnNcbiAgICA/IFN0cmluZyhvcHRpb25zLmRlbGltaXRlcnMpICsgdGVtcGxhdGVcbiAgICA6IHRlbXBsYXRlO1xuICBpZiAoY2FjaGVba2V5XSkge1xuICAgIHJldHVybiBjYWNoZVtrZXldXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgY29tcGlsZWQgPSBjb21waWxlJCQxKHRlbXBsYXRlLCBvcHRpb25zKTtcbiAgcmVzLnJlbmRlciA9IG1ha2VGdW5jdGlvbihjb21waWxlZC5yZW5kZXIpO1xuICB2YXIgbCA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5sZW5ndGg7XG4gIHJlcy5zdGF0aWNSZW5kZXJGbnMgPSBuZXcgQXJyYXkobCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZuc1tpXSA9IG1ha2VGdW5jdGlvbihjb21waWxlZC5zdGF0aWNSZW5kZXJGbnNbaV0pO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHJlcy5yZW5kZXIgPT09IG5vb3AgfHwgcmVzLnN0YXRpY1JlbmRlckZucy5zb21lKGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4gPT09IG5vb3A7IH0pKSB7XG4gICAgICBfd2FybihcbiAgICAgICAgXCJmYWlsZWQgdG8gY29tcGlsZSB0ZW1wbGF0ZTpcXG5cXG5cIiArIHRlbXBsYXRlICsgXCJcXG5cXG5cIiArXG4gICAgICAgIGRldGVjdEVycm9ycyhjb21waWxlZC5hc3QpLmpvaW4oJ1xcbicpICtcbiAgICAgICAgJ1xcblxcbicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKGNhY2hlW2tleV0gPSByZXMpXG59XG5cbmZ1bmN0aW9uIG1ha2VGdW5jdGlvbiAoY29kZSkge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBub29wXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpZFRvVGVtcGxhdGUgPSBjYWNoZWQoZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBlbCA9IHF1ZXJ5KGlkKTtcbiAgcmV0dXJuIGVsICYmIGVsLmlubmVySFRNTFxufSk7XG5cbnZhciBtb3VudCA9IFZ1ZSQzLnByb3RvdHlwZS4kbW91bnQ7XG5WdWUkMy5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBxdWVyeShlbCk7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSB8fCBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJEbyBub3QgbW91bnQgVnVlIHRvIDxodG1sPiBvciA8Ym9keT4gLSBtb3VudCB0byBub3JtYWwgZWxlbWVudHMgaW5zdGVhZC5cIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgLy8gcmVzb2x2ZSB0ZW1wbGF0ZS9lbCBhbmQgY29udmVydCB0byByZW5kZXIgZnVuY3Rpb25cbiAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodGVtcGxhdGUuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGlkVG9UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAoXCJUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogXCIgKyAob3B0aW9ucy50ZW1wbGF0ZSkpLFxuICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZS5ub2RlVHlwZSkge1xuICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLmlubmVySFRNTDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybignaW52YWxpZCB0ZW1wbGF0ZSBvcHRpb246JyArIHRlbXBsYXRlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAgIHRlbXBsYXRlID0gZ2V0T3V0ZXJIVE1MKGVsKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICB2YXIgcmVmID0gY29tcGlsZVRvRnVuY3Rpb25zKHRlbXBsYXRlLCB7XG4gICAgICAgIHdhcm46IHdhcm4sXG4gICAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBzaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICAgICAgZGVsaW1pdGVyczogb3B0aW9ucy5kZWxpbWl0ZXJzXG4gICAgICB9LCB0aGlzKTtcbiAgICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgICAgdmFyIHN0YXRpY1JlbmRlckZucyA9IHJlZi5zdGF0aWNSZW5kZXJGbnM7XG4gICAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlcjtcbiAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW91bnQuY2FsbCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLyoqXG4gKiBHZXQgb3V0ZXJIVE1MIG9mIGVsZW1lbnRzLCB0YWtpbmcgY2FyZVxuICogb2YgU1ZHIGVsZW1lbnRzIGluIElFIGFzIHdlbGwuXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVySFRNTCAoZWwpIHtcbiAgaWYgKGVsLm91dGVySFRNTCkge1xuICAgIHJldHVybiBlbC5vdXRlckhUTUxcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUxcbiAgfVxufVxuXG5WdWUkMy5jb21waWxlID0gY29tcGlsZVRvRnVuY3Rpb25zO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZ1ZSQzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi92dWUvZGlzdC92dWUuY29tbW9uLmpzIiwiaW1wb3J0IHtUcmVlfSBmcm9tICcuL3RyZWUnO1xuZXhwb3J0IGZ1bmN0aW9uIGpzb25Ub1RyZWUobm9kZXNBcnIpIHtcbiAgbGV0IGhhc2hUYWJsZSA9IHt9O1xuICBsZXQgdHJlZTtcbiAgZm9yIChsZXQgaSA9IDAsIG5vZGVzTGVuID0gbm9kZXNBcnIubGVuZ3RoOyBpIDwgbm9kZXNMZW47IGkrKykge1xuICAgIGhhc2hUYWJsZVtub2Rlc0FycltpXVsncGFyZW50SWQnXV0gPyBoYXNoVGFibGVbbm9kZXNBcnJbaV1bJ3BhcmVudElkJ11dLnB1c2gobm9kZXNBcnJbaV0pIDogaGFzaFRhYmxlW25vZGVzQXJyW2ldWydwYXJlbnRJZCddXSA9IFtub2Rlc0FycltpXV07XG4gIH1cbiAgLy8gbm9kZSDnmoTlrZDoioLngrnnmoRJROaAu+aYr+Wkp+S6jm5vZGXnmoRJRFxuICBsZXQgbW9kS2V5c0FyciA9IHJlbW92ZUVsZUZyb21BcnIoT2JqZWN0LmtleXMoaGFzaFRhYmxlKSwgJ251bGwnKS5tYXAoTnVtYmVyKS5zb3J0KHNvcnROdW1iZXIpO1xuICBsZXQgcm9vdE5vZGVEYXRhID0gaGFzaFRhYmxlWydudWxsJ11bMF07XG4gIHRyZWUgPSBuZXcgVHJlZShyb290Tm9kZURhdGEpO1xuXG4gIGZvciAobGV0IGogPSAwLCBrZXlzTGVuID0gbW9kS2V5c0Fyci5sZW5ndGg7IGogPCBrZXlzTGVuOyBqKyspIHtcbiAgICBpZiAoaGFzaFRhYmxlLmhhc093blByb3BlcnR5KG1vZEtleXNBcnJbal0pKSB7XG4gICAgICBmb3IgKGxldCBrID0gMCwga2V5QXJyTGVuID0gaGFzaFRhYmxlW21vZEtleXNBcnJbal1dLmxlbmd0aDsgayA8IGtleUFyckxlbjsgaysrKSB7XG4gICAgICAgIHRyZWUuYWRkKGhhc2hUYWJsZVttb2RLZXlzQXJyW2pdXVtrXSwgK21vZEtleXNBcnJbal0sIHRyZWUudHJhdmVyc2VCRik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cmVlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFbGVGcm9tQXJyKGFyciwgZWxlKSB7XG4gIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGVsZSk7XG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyogQnkgZGVmYXVsdCB0aGUgc29ydCBtZXRob2Qgc29ydHMgZWxlbWVudHMgYWxwaGFiZXRpY2FsbHkuICovXG5mdW5jdGlvbiBzb3J0TnVtYmVyKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJlZVRvSnNvbih0cmVlKSB7XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBpLXRyZWUvanNvblRyZWVDb252ZXJ0ZXIuanMiLCIvKipcbiAqIFtRdWV1ZSBkZXNjcmlwdGlvbl1cbiAqIGVucXVldWUoZGF0YSkgYWRkcyBkYXRhIHRvIGEgcXVldWUuXG4gKiBkZXF1ZXVlIHJlbW92ZXMgdGhlIG9sZGVzdCBhZGRlZCBkYXRhIHRvIGEgcXVldWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBRdWV1ZSgpIHtcbiAgdGhpcy5fb2xkZXN0SW5kZXggPSAxO1xuICB0aGlzLl9uZXdlc3RJbmRleCA9IDE7XG4gIHRoaXMuX3N0b3JhZ2UgPSB7fTtcbn1cblxuUXVldWUucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX25ld2VzdEluZGV4IC0gdGhpcy5fb2xkZXN0SW5kZXg7XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdGhpcy5fc3RvcmFnZVt0aGlzLl9uZXdlc3RJbmRleF0gPSBkYXRhO1xuICB0aGlzLl9uZXdlc3RJbmRleCsrO1xufTtcblxuUXVldWUucHJvdG90eXBlLmRlcXVldWUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG9sZGVzdEluZGV4ID0gdGhpcy5fb2xkZXN0SW5kZXgsXG4gICAgICBuZXdlc3RJbmRleCA9IHRoaXMuX25ld2VzdEluZGV4LFxuICAgICAgZGVsZXRlZERhdGE7XG5cbiAgaWYgKG9sZGVzdEluZGV4ICE9PSBuZXdlc3RJbmRleCkge1xuICAgIGRlbGV0ZWREYXRhID0gdGhpcy5fc3RvcmFnZVtvbGRlc3RJbmRleF07XG4gICAgZGVsZXRlIHRoaXMuX3N0b3JhZ2Vbb2xkZXN0SW5kZXhdO1xuICAgIHRoaXMuX29sZGVzdEluZGV4Kys7XG5cbiAgICByZXR1cm4gZGVsZXRlZERhdGE7XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBpLXRyZWUvcXVldWUuanMiLCJpbXBvcnQge21lcmdlT2JqfSBmcm9tICcuLi9jb21tb24vdXRpbGl0aWVzJztcbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0QXBpRGF0YSh0cmVlLCBvcEVsZSkge1xuICBsZXQgcGVyQXBpRWxlID0gb3BFbGUuY2xvc2VzdCgnLnBlci1hcGknKTtcbiAgLy8gbGV0IHRyZWVFbGUgPSBwZXJBcGlFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXRyZWUnKVswXTtcbiAgcmV0dXJuIG1lcmdlT2JqKGNvbGxlY3RJbmZvKHBlckFwaUVsZSksIGNvbGxlY3REYXRhRnJvbVRyZWUodHJlZSkpO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0SW5mbyhwZXJBcGlFbGUpIHtcbiAgbGV0IGluZm9FbGUgPSBwZXJBcGlFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLWluZm8nKVswXTtcbiAgbGV0IE1vZGVzUm93RWxlID0gcGVyQXBpRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS1tb2Rlcy1yb3cnKVswXTtcbiAgbGV0IGluZm9EYXRhID0ge307XG4gIGluZm9EYXRhID0ge1xuICAgICdzZWN0aW9uJzogaW5mb0VsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktc2VjdGlvbicpWzBdLnZhbHVlLFxuICAgICd1cmknOiBpbmZvRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS11cmknKVswXS52YWx1ZSxcbiAgICAnbWV0aG9kJzogaW5mb0VsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktbWV0aG9kJylbMF0udmFsdWUsXG4gICAgJ2Rlc2NyaXB0aW9uJzogaW5mb0VsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktZGVzY3JpcHRpb24nKVswXS52YWx1ZSxcbiAgICAnd2lraUxpbmsnOiBpbmZvRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS13aWtpLWlucHV0JylbMF0udmFsdWUsXG4gICAgJ21vZGUnOiBnZXRNb2RlVmFsKE1vZGVzUm93RWxlKSxcbiAgICAnZGVidWdBZGRyJzogZ2V0RGVidWdBZGRyKE1vZGVzUm93RWxlKVxuICB9O1xuXG4gIHJldHVybiBpbmZvRGF0YTtcbn1cblxuZnVuY3Rpb24gZ2V0TW9kZVZhbChNb2Rlc1Jvd0VsZSkge1xuICB2YXIgcmFkaW9zID0gTW9kZXNSb3dFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLW1vZGUnKTtcbiAgdmFyIG1vZGVWYWw7XG4gIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSByYWRpb3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmFkaW9zW2ldLmNoZWNrZWQpIHtcbiAgICAgIG1vZGVWYWwgPSByYWRpb3NbaV0udmFsdWU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGVWYWw7XG59XG5cbmZ1bmN0aW9uIGdldERlYnVnQWRkcihNb2Rlc1Jvd0VsZSkge1xuICByZXR1cm4gTW9kZXNSb3dFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbW9kZS1kZWJ1Z2dpbmctYWRkcicpWzBdLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0VHJlZSh0cmVlRWxlKSB7XG5cdGxldCBsZWF2ZXMgPSBbXS5zbGljZS5jYWxsKHRyZWVFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZicpKTsgXG4gIGxldCB0cmVlRGF0YUFyciA9IFtdO1xuICBsZXQgdHJlZURhdGFPYmogPSB7fTtcbiAgbGV0IGxlYWZEYXRhO1xuICBmb3IgKGxldCBpID0gMCwgbGVhdmVzTGVuID0gbGVhdmVzLmxlbmd0aDsgaSA8IGxlYXZlc0xlbjsgaSsrKSB7XG4gICAgbGVhZkRhdGEgPSB7fTtcbiAgICBsZWFmRGF0YS5wYXJlbnRJZCA9IGxlYXZlc1tpXS5kYXRhc2V0LnBhcmVudDtcbiAgICBsZWFmRGF0YS5ub2RlSWQgPSBsZWF2ZXNbaV0uZGF0YXNldC5pbmRleDtcbiAgICBsZWFmRGF0YS5rZXkgPSBsZWF2ZXNbaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZi1rZXknKVswXS52YWx1ZTtcbiAgICBsZWFmRGF0YS52YWx1ZSA9IGxlYXZlc1tpXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsZWFmLXZhbHVlJylbMF0udmFsdWU7XG4gICAgbGVhZkRhdGEucXVhbnRpdHkgPSBsZWF2ZXNbaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZi1xdWFudGl0eScpWzBdLnZhbHVlO1xuICAgIHRyZWVEYXRhQXJyLnB1c2gobGVhZkRhdGEpO1xuICB9O1xuICB0cmVlRGF0YU9iai5ub2RlcyA9IHRyZWVEYXRhQXJyO1xuICByZXR1cm4gdHJlZURhdGFPYmo7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3REYXRhRnJvbVRyZWUoYXBpVHJlZSkge1xuICBsZXQgdHJlZSA9IGFwaVRyZWU7XG4gIGxldCBub2Rlc0FyciA9IFtdO1xuICBsZXQgdHJlZURhdGFPYmogPSB7fTtcbiAgbGV0IGRpbWVuc2lvbnNBcnIgPSBbXTtcbiAgbGV0IGNhbGxiYWNrID0gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlID09PSBudWxsKSByZXR1cm47XG4gICAgbGV0IG5vZGVEYXRhID0ge307XG4gICAgbm9kZURhdGEubm9kZUlkID0gbm9kZS5ub2RlSWQ7XG4gICAgbm9kZURhdGEuY29sdW1uID0gbm9kZS5jb2x1bW47XG4gICAgbm9kZURhdGEucGFyZW50SWQgPSBub2RlLnBhcmVudCA9PT0gbnVsbCA/IG51bGwgOiBub2RlLnBhcmVudC5ub2RlSWQ7XG4gICAgbm9kZURhdGEuY2hpbGRyZW5sZXZlbCA9IG5vZGUuY2hpbGRyZW5sZXZlbDtcbiAgICBub2RlRGF0YS50b3RhbG9mZnNldHlsZXZlbCA9ICBub2RlLnRvdGFsb2Zmc2V0eWxldmVsO1xuICAgIG5vZGVEYXRhLmRhdGEgPSBub2RlLmRhdGE7XG4gICAgbm9kZURhdGEuZGF0YS5oYXNDaGlsZCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcbiAgICBub2Rlc0Fyci5wdXNoKG5vZGVEYXRhKTtcbiAgfTtcbiAgdHJlZS50cmF2ZXJzZURGKGNhbGxiYWNrKTtcbiAgZGltZW5zaW9uc0FyciA9IHRyZWUuZGltZW5zaW9ucygpO1xuICB0cmVlRGF0YU9iai5kaW1lbnNpb25zID0ge307XG4gIHRyZWVEYXRhT2JqLmRpbWVuc2lvbnMuaFVuaXQgPSBkaW1lbnNpb25zQXJyWzBdO1xuICB0cmVlRGF0YU9iai5kaW1lbnNpb25zLnZVbml0ID0gZGltZW5zaW9uc0FyclsxXTtcbiAgdHJlZURhdGFPYmoubm9kZXMgPSBub2Rlc0FycjtcbiAgcmV0dXJuIHRyZWVEYXRhT2JqO1xufVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvYXBpLXRyZWUvdHJlZURhdGFDb2xsZWN0LmpzIiwiLyoqXG4gKiB3aWR0aCBvZiBzaW5nbGUgc3ZnIHBhdGg6IDMwcHhcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHtUcmVlfSBmcm9tICcuL3RyZWUnO1xuaW1wb3J0IHskaHR0cH0gZnJvbSAnLi4vY29tbW9uL2FqYXgnO1xuaW1wb3J0IHtwb3B1cH0gZnJvbSAnLi4vY29tbW9uL3BvcHVwJztcbmltcG9ydCB7cm9vdEFQSX0gZnJvbSAnLi4vZ2xvYmFsL2NvbnN0YW50JztcbmltcG9ydCB7Zmxhc2gsIHBhcnNlQW5kRmxhc2h9IGZyb20gJy4uL2NvbW1vbi9mbGFzaCc7XG5pbXBvcnQge2NvbGxlY3RBcGlEYXRhfSBmcm9tICcuL3RyZWVEYXRhQ29sbGVjdCc7XG5pbXBvcnQge2dldFRyYW5zbGF0ZVgsIHhociwgYmVhdXRpZnlKU09OLCBoaWdodGxpZ2h0SlNPTn0gZnJvbSAnLi91dGlsaXRpZXMnO1xuaW1wb3J0IHtqc29uVG9UcmVlfSBmcm9tICcuL2pzb25UcmVlQ29udmVydGVyJztcbmltcG9ydCB7dHdvV2F5RGF0YUJpbmRpbmd9IGZyb20gJy4uL2NvbW1vbi90d29XYXlEYXRhQmluZGluZyc7XG5pbXBvcnQge2NhbGxiYWNrc30gZnJvbSAnLi4vY29tbW9uL2NhbGxiYWNrcyc7XG5pbXBvcnQge3Njcm9sbEJhckh9IGZyb20gJy4uL2NvbW1vbi9zY3JvbGwnO1xuaW1wb3J0IHtnZW5lcmF0ZVVVSUR9IGZyb20gJy4uL2NvbW1vbi91dGlsaXRpZXMnO1xuXG5mdW5jdGlvbiBwZXJBcGlUcGwoZGF0YSwgaXNOZXdBcGkgPSBmYWxzZSkge1xuICBsZXQgYXBpVVVJRCA9IGdlbmVyYXRlVVVJRCgpO1xuICBsZXQgdHBsID1cbiAgICAgIGA8ZGl2IGNsYXNzPVwiYXBpLWluZm9cIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJhcGktbGFiZWxcIj5BUEk6PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJhcGktdXJpXCIgcGxhY2Vob2xkZXI9XCJcIiB2YWx1ZT1cIlwiIG1vZGVsPVwidXJpXCIgLz4gXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYXBpLWxhYmVsXCI+bWV0aG9kOjwvbGFiZWw+XG4gICAgICAgICAgPHNlbGVjdCBjbGFzcz1cImFwaS1tZXRob2RcIiBtb2RlbD1cIm1ldGhvZFwiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiR0VUXCI+R0VUPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJQT1NUXCI+UE9TVDwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiUEFUQ0hcIj5QQVRDSDwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiREVMRVRFXCI+REVMRVRFPC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPGxhYmVsPnNlY3Rpb246PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJhcGktc2VjdGlvblwiIHR5cGU9XCJ0ZXh0XCIgbW9kZWw9XCJzZWN0aW9uXCIgLz5cbiAgICAgICAgICA8bGFiZWwgZm9yPVwiXCI+ZGVzY3JpcHRpb246PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJhcGktZGVzY3JpcHRpb25cIiB0eXBlPVwidGV4dFwiIG1vZGVsPVwiZGVzY3JpcHRpb25cIiAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYXBpLXNhdmVcIiBkYXRhLW1ldGhvZD1cIiR7cGF0Y2hPclBvc3QoaXNOZXdBcGkpfVwiIGRhdGEtYWN0aW9uPVwiL2FwaXMke3NhdmVPckNyZWF0ZShkYXRhLCBpc05ld0FwaSl9XCIgPiR7aXNOZXdBcGkgPyAnY3JlYXRlJyA6ICdzYXZlJ308L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJhcGktcmVzcG9uZC1wcmV2aWV3LWJ0blwiPnByZXZpZXc8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJhcGktd2lraVwiIGJpbmQtdG9nZ2xlLWNsYXNzIGJpbmQ9XCJ3aWtpTGlua1wiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYXBpLXdpa2ktbGFiZWxcIj5XaWtpOiA8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiYXBpLXdpa2ktaW5wdXRcIiB0eXBlPVwidGV4dFwiIG1vZGVsPVwid2lraUxpbmtcIiAvPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImFwaS1tb2Rlcy1yb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiYXBpLW1vZGUtbGFiZWxcIj48aW5wdXQgY2xhc3M9XCJhcGktbW9kZVwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCIke2FwaVVVSUR9LW1vZGVcIiB2YWx1ZT1cIjBcIj7lvIDlj5E8L2xhYmVsPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJhcGktbW9kZS1sYWJlbCBhcGktbW9kZS1kZWJ1Z1wiPjxpbnB1dCBjbGFzcz1cImFwaS1tb2RlXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cIiR7YXBpVVVJRH0tbW9kZVwiIHZhbHVlPVwiMVwiPuiBlOiwgzxpbnB1dCBjbGFzcz1cIm1vZGUtZGVidWdnaW5nLWFkZHJcIiB0eXBlPVwidGV4dFwiIC8+PC9sYWJlbD5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiYXBpLW1vZGUtbGFiZWxcIj48aW5wdXQgY2xhc3M9XCJhcGktbW9kZVwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCIke2FwaVVVSUR9LW1vZGVcIiB2YWx1ZT1cIjJcIj7nur/kuIo8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiYXBpLXRyZWUtd3JhcHBlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYXBpLXRyZWUtY29udGVudC13cmFwcGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImFwaS10cmVlLWNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhcGktdHJlZS1mcmFtZVwiPlxuICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVwiYXBpLXN2Z1wiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIj48L3N2Zz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFwaS10cmVlXCI+PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiYXBpLXJlc3BvbmQtcHJldmlld1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcmV2aWV3LWNvbnRyb2wtd3JhcHBlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByZXZpZXctY29udHJvbFwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXByZXZpZXctdHlwZSBwcmV2aWV3LXJhd1wiPnJhdzwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBlci1wcmV2aWV3LXR5cGUgcHJldmlldy1iZWF1dGlmeVwiPmJlYXV0aWZ5PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXByZXZpZXctdHlwZSBwcmV2aWV3LWhpZ2hsaWdodFwiPnN5bnRheEhpZ2hsaWdodDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkYXRhLXZpZXcganNvblwiPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+YDtcbiAgcmV0dXJuIHRwbDtcbn1cblxuZnVuY3Rpb24gbGVhZlRwbCgpIHtcbiAgbGV0IGxlYWZDb250ZW50VHBsID0gYFxuICAgIDxpIGNsYXNzPVwicmVtb3ZlLWNoaWxkXCI+LTwvaT5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImxlYWYta2V5XCIgcGxhY2Vob2xkZXI9XCJrZXlcIiBtb2RlbD1cImRhdGFOYW1lXCIgLz5cbiAgICA8aSBjbGFzcz1cImdhcC1tYXJrXCI+LS0tPC9pPlxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwibGVhZi12YWx1ZVwiIHBsYWNlaG9sZGVyPVwidmFsdWVcIiBtb2RlbD1cImRhdGFWYWx1ZVwiIC8+XG4gICAgPHNlbGVjdCBjbGFzcz1cImxlYWYtdmFsdWUtdHlwZVwiIG1vZGVsPVwiZGF0YVR5cGVcIj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlN0cmluZ1wiPlN0cmluZzwvb3B0aW9uPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiSW50ZWdlclwiPkludGVnZXI8L29wdGlvbj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkZsb2F0XCI+RmxvYXQ8L29wdGlvbj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkJvb2xlYW5cIj5Cb29sZWFuPC9vcHRpb24+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJBcnJheVwiPkFycmF5PC9vcHRpb24+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJIYXNoXCI+SGFzaDwvb3B0aW9uPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiUmVnZXhcIj5SZWdleChzdHJpbmcpPC9vcHRpb24+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJGaXhlZFwiPkZpeGVkKHN0cmluZyk8L29wdGlvbj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk51bGxcIj5OdWxsPC9vcHRpb24+XG4gICAgPC9zZWxlY3Q+XG4gICAgPGkgY2xhc3M9XCJnYXAtbWFya1wiPi0tLTwvaT5cbiAgICA8aSBjbGFzcz1cImFkZC1jaGlsZFwiPis8L2k+XG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJsZWFmLXF1YW50aXR5XCIgcGxhY2Vob2xkZXI9XCJxdWFudGl0eVwiIG1vZGVsPVwiZGF0YVF1YW50aXR5XCIgLz5cbiAgICA8c3BhbiBjbGFzcz1cImxlYWYtaGlkZS1xdWFudGl0eVwiPjwvc3Bhbj5cbiAgYDtcbiAgcmV0dXJuIGxlYWZDb250ZW50VHBsO1xufVxuXG4vKiBkZWZhdWx0IGdldEJvdW5kaW5nUmVjdE9iaiAqL1xubGV0IGluaXRSZWN0T2JqID0ge1xuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICB0b3A6IDAsXG4gIHdpZHRoOiAwLFxuICBoZWlnaHQ6IDBcbn07XG5cbmxldCBsZWFmRGF0YVBsYWNlSG9sZGVyID0ge1xuICBkYXRhTmFtZTogJycsXG4gIGRhdGFUeXBlOiAnU3RyaW5nJyxcbiAgZGF0YVZhbHVlOiAnJyxcbiAgZGF0YVF1YW50aXR5OiAnMScsXG4gIGhhc0NoaWxkOiBmYWxzZVxufTtcblxuLypcbnNpbmdsZSBsZWFmIHdpZHRoOiA0NjBweDtcbiAqL1xuY29uc3QgcGVyTGVhZldpZHRoID0gNDYwO1xuY29uc3QgcGVyTGVhZkhlaWdodCA9IDIyO1xuY29uc3QgbGVhdmVzVmVydGljYWxHYXAgPSAzMDtcbmNvbnN0IHBlclNWR1BhdGhXaWR0aCA9IDMwO1xudmFyIHJvb3ROb2RlV2lkdGggPSBwZXJTVkdQYXRoV2lkdGggKyAxNDtcbnZhciBjYWxsYmFjayA9IHtcbiAgcGF0Y2hTdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgdGhpcy5hcGlSYXdEYXRhID0gZGF0YTtcbiAgICB0aGlzLmFwaURhdGFPYmogPSBKU09OLnBhcnNlKGRhdGEpLmRhdGE7XG4gICAgcGFyc2VBbmRGbGFzaChkYXRhKTtcbiAgfSxcbiAgcG9zdFN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICB0aGlzLmFwaVJhd0RhdGEgPSBkYXRhO1xuICAgIHRoaXMuYXBpRGF0YU9iaiA9IEpTT04ucGFyc2UoZGF0YSkuZGF0YTtcbiAgICBwYXJzZUFuZEZsYXNoKGRhdGEpO1xuICAgIHRoaXMuYXBpQ29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS1zYXZlJylbMF0udGV4dENvbnRlbnQgPSAnc2F2ZSc7XG4gICAgdGhpcy5hcGlDb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXNhdmUnKVswXS5kYXRhc2V0Lm1ldGhvZCA9ICdQQVRDSCc7XG4gIH0sXG4gIGRlbGV0ZVN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBmdW5jdGlvbiBkZXN0b3J5QXBpTGkoKSB7XG4gICAgICB0aGlzLnRhcmdldC5jbG9zZXN0KCcuYXBpLXVsJykucmVtb3ZlQ2hpbGQodGhpcy50YXJnZXQuY2xvc2VzdCgnLmFwaS1saScpKTtcbiAgICB9XG4gICAgcGFyc2VBbmRGbGFzaChkYXRhLCBkZXN0b3J5QXBpTGkuYmluZCh0aGlzKSk7XG4gIH0sXG4gIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBwYXJzZUFuZEZsYXNoKGRhdGEpO1xuICB9LFxuICBhcGlSZXNwb25kU3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgIGxldCBqc29uT2JqID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICB0aGlzLnByZXZpZXdEYXRhID0gZGF0YTtcbiAgICB0aGlzLnByZXZpZXdEYXRhT2JqID0ganNvbk9iajtcbiAgICBzd2l0Y2hQcmV2aWV3KHRoaXMucHJldmlld0RhdGFPYmosIGhpZ2h0bGlnaHRKU09OLCB0aGlzLmV2ZW50Q29udGV4dCwgJ2hpZ2hsaWdodCcpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBwYXRjaE9yUG9zdChpc05ld0FwaSkge1xuICByZXR1cm4gaXNOZXdBcGkgPyAnUE9TVCcgOiAnUEFUQ0gnO1xufVxuXG5mdW5jdGlvbiBzYXZlT3JDcmVhdGUoZGF0YSwgaXNOZXdBcGkpIHtcbiAgcmV0dXJuIGlzTmV3QXBpID8gJycgOiBgLyR7ZGF0YS5pZH1gO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQZXJBcGkoZGF0YSwgaXNOZXdBcGkpIHtcbiAgdmFyIHBlckFwaUVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwZXJBcGlFbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdwZXItYXBpJyk7XG4gIHBlckFwaUVsZS5kYXRhc2V0LmlkID0gaXNOZXdBcGkgPyAnJyA6IGRhdGEuaWQ7XG4gIHBlckFwaUVsZS5pbm5lckhUTUwgPSBwZXJBcGlUcGwoZGF0YSwgaXNOZXdBcGkpO1xuICBwZXJBcGlFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXVyaScpWzBdLnZhbHVlID0gaXNOZXdBcGkgPyAnJyA6IGRhdGEudXJpO1xuICByZXR1cm4gcGVyQXBpRWxlO1xufVxuZnVuY3Rpb24gY3JlYXRlTmV3QXBpSW5pdERhdGEoKSB7XG4gIGxldCBpbml0RGF0YSA9IHtcbiAgICBub2RlSWQ6IDAsXG4gICAgcGFyZW50SWQ6IG51bGwsXG4gICAgZGF0YTogbGVhZkRhdGFQbGFjZUhvbGRlclxuICB9O1xuICBsZXQgZmlyc3RDaGlsZERhdGEgPSB7XG4gICAgbm9kZUlkOiAxLFxuICAgIHBhcmVudElkOiAwLFxuICAgIGRhdGE6IGxlYWZEYXRhUGxhY2VIb2xkZXJcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtb2RlOiAnMCcsXG4gICAgZGVidWdBZGRyOiAnJyxcbiAgICBub2RlczogW2luaXREYXRhLCBmaXJzdENoaWxkRGF0YV1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEFwaURvbShkYXRhLCBjb250YWluZXJOb2RlLCBpc05ld0FwaSA9IGZhbHNlKSB7XG4gIGlmIChpc05ld0FwaSkge1xuICAgIGRhdGEgPSBjcmVhdGVOZXdBcGlJbml0RGF0YSgpO1xuICB9XG4gIHRoaXMuYXBpRGF0YU9iaiA9IGRhdGE7XG4gIHRoaXMuYXBpQ29udGFpbmVyID0gY29udGFpbmVyTm9kZTtcbiAgbGV0IHBlckFwaUVsZSA9IGNyZWF0ZVBlckFwaShkYXRhLCBpc05ld0FwaSk7XG4gIHRoaXMuYXBpQ29udGFpbmVyLmFwcGVuZENoaWxkKHBlckFwaUVsZSk7XG5cbiAgbGV0IGFwaUJpbmREYXRhID0gdHdvV2F5RGF0YUJpbmRpbmcoZGF0YSwgdGhpcy5hcGlDb250YWluZXIpO1xuICBkYXRhID0gYXBpQmluZERhdGE7XG5cbiAgdGhpcy5hcGlFbGUgPSB0aGlzLmFwaUNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwZXItYXBpJylbMF07XG5cbiAgdGhpcy5sZWFmSW5kZXggPSAxO1xuXG4gIHRoaXMuJGFwaVRyZWUgPSB0aGlzLmFwaUVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktdHJlZScpWzBdO1xuICB0aGlzLiRhcGlUcmVlRnJhbWUgPSB0aGlzLmFwaUVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktdHJlZS1mcmFtZScpWzBdO1xuICB0aGlzLiRhcGlUcmVlQ29udGVudCA9IHRoaXMuYXBpRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS10cmVlLWNvbnRlbnQnKVswXTtcbiAgLy8gaWYgKGlzTmV3QXBpKSB7XG4gIC8vICAgdGhpcy5pbml0QXBpVHJlZSgpO1xuICAvLyAgIHRoaXMuY2FsY0RpbWVuc2lvbnMoKTtcbiAgLy8gfSBlbHNlIHtcbiAgdGhpcy5yZW5kZXJFeGlzdFRyZWUoZGF0YSk7XG4gIC8vIH1cblxuICB0aGlzLmFwaVJldHVybkRhdGEgPSAnJztcblxuICB0aGlzLmFwaUVsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGJpbmRFdmVudC5iaW5kKHRoaXMpKTtcbiAgdGhpcy5zZXRNb2RlVmFsKGRhdGEubW9kZSk7XG4gIHRoaXMuc2V0RGVidWdBZGRyKGRhdGEuZGVidWdBZGRyKTtcbiAgdGhpcy5zY3JvbGxCYXIgPSBzY3JvbGxCYXJIKHtcbiAgICB3cmFwcGVyOiB0aGlzLmFwaUNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktdHJlZS13cmFwcGVyJylbMF0sXG4gICAgY29udGVudDogdGhpcy5hcGlDb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXRyZWUtY29udGVudC13cmFwcGVyJylbMF0sXG4gICAgb3ZlcmZsb3dFbGU6IHRoaXMuYXBpQ29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS10cmVlLWNvbnRlbnQnKVswXVxuICB9KTtcbn1cblxuQXBpRG9tLnByb3RvdHlwZS5yZW5kZXJFeGlzdFRyZWUgPSBmdW5jdGlvbihkYXRhKSB7XG4gIGxldCBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gIGxldCBwZXJUV0RCQXJyID0gW107XG4gIGlmIChkYXRhLm5vZGVzICYmIGRhdGEubm9kZXMubGVuZ3RoKSB7XG4gICAgbGV0IG5vZGVzQXJyID0gZGF0YS5ub2RlcztcbiAgICBsZXQgbm9kZURhdGEgPSB7fTtcbiAgICBsZXQgbGVhZjtcbiAgICBsZXQgbGVhZkRhdGEgPSB7fTtcbiAgICBsZXQgcGVyVFdEQjtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbm9kZXNBcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGxlYWYgPSB1bmRlZmluZWQ7XG4gICAgICBsZWFmID0gZ2VuZXJhdGVMZWFmKGRhdGEubm9kZXNbaV0pO1xuICAgICAgaWYgKGRhdGEubm9kZXNbaV0uZGF0YSA9PT0gdW5kZWZpbmVkIHx8IGRhdGEubm9kZXNbaV0uZGF0YSA9PT0gXCJcIikge1xuICAgICAgICBkYXRhLm5vZGVzW2ldLmRhdGEgPSBsZWFmRGF0YVBsYWNlSG9sZGVyO1xuICAgICAgfTtcbiAgICAgIGlmIChkYXRhLm5vZGVzW2ldLnBhcmVudElkID09PSBudWxsIHx8IGRhdGEubm9kZXNbaV0ucGFyZW50SWQgPT09ICdudWxsJykgbGVhZi5jbGFzc0xpc3QuYWRkKCdyb290LWxlYWYnKTtcbiAgICAgIHBlclRXREIgPSB0d29XYXlEYXRhQmluZGluZyhkYXRhLm5vZGVzW2ldLmRhdGEsIGxlYWYpO1xuICAgICAgZGF0YS5ub2Rlc1tpXS5kYXRhID0gcGVyVFdEQjtcbiAgICAgIHBlclRXREJBcnIucHVzaChwZXJUV0RCKTtcbiAgICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQobGVhZik7XG4gICAgfVxuICAgIHRoaXMubGVhZkluZGV4ICs9IChsZW4gLSAyKTtcbiAgfVxuICB0aGlzLmFwaVRyZWUgPSBqc29uVG9UcmVlKGRhdGEubm9kZXMpO1xuICB0aGlzLiRhcGlUcmVlLmFwcGVuZENoaWxkKGRvY0ZyYWcpO1xuICB0aGlzLmNhbGNEaW1lbnNpb25zKCk7XG4gIHRoaXMuZHJhd1NWRygpO1xufTtcblxuXG5mdW5jdGlvbiBnZW5lcmF0ZUxlYWYobm9kZURhdGEpIHtcbiAgdmFyIG5ld0xlYWZTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICBuZXdMZWFmU3Bhbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2xlYWYnKTtcbiAgbmV3TGVhZlNwYW4uc2V0QXR0cmlidXRlKCdiaW5kJywgJ2hhc0NoaWxkJyk7XG4gIG5ld0xlYWZTcGFuLnNldEF0dHJpYnV0ZSgnYmluZC10b2dnbGUtY2xhc3MnLCAnJyk7XG4gIG5ld0xlYWZTcGFuLmRhdGFzZXQucGFyZW50SWQgPSBub2RlRGF0YS5wYXJlbnRJZDtcbiAgbmV3TGVhZlNwYW4uZGF0YXNldC5ub2RlSWQgPSBub2RlRGF0YS5ub2RlSWQ7XG4gIG5ld0xlYWZTcGFuLmlubmVySFRNTCA9IGxlYWZUcGwoKTtcbiAgbmV3TGVhZlNwYW4uc3R5bGVbJ3RyYW5zZm9ybSddID0gJ3RyYW5zbGF0ZTNkKCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgocGVyTGVhZldpZHRoICsgcGVyU1ZHUGF0aFdpZHRoKSAqIChub2RlRGF0YS5jb2x1bW4gLSAxKSkgKyAncHgsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZChub2RlRGF0YS50b3RhbG9mZnNldHlsZXZlbCAqIChwZXJMZWFmSGVpZ2h0ICsgbGVhdmVzVmVydGljYWxHYXApKSArICdweCwgMCknO1xuICByZXR1cm4gbmV3TGVhZlNwYW47XG59XG5BcGlEb20ucHJvdG90eXBlLnNldERlYnVnQWRkciA9IGZ1bmN0aW9uKHZhbCkge1xuICB0aGlzLmFwaUNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtb2RlLWRlYnVnZ2luZy1hZGRyJylbMF0udmFsdWUgPSB2YWw7XG59O1xuQXBpRG9tLnByb3RvdHlwZS5zZXRNb2RlVmFsID0gZnVuY3Rpb24odmFsKSB7XG4gIHZhciByYWRpb3MgPSB0aGlzLmFwaUNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktbW9kZScpO1xuICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcmFkaW9zLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHZhbCA9PT0gcmFkaW9zW2ldLnZhbHVlKSB7XG4gICAgICByYWRpb3NbaV0uc2V0QXR0cmlidXRlKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgcmFkaW9zW2ldLnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBiaW5kRXZlbnQoZXYpIHtcbiAgLyogXyR0aGlzIGlzIEFwaURvbSwgd2hpbGUgdGhpcyBpcyBpdHMgd3JhcHBlcihvYmplY3QpLiAqL1xuICBsZXQgX3RoaXMgPSB0aGlzO1xuICBsZXQgZXZUYXJnZXRDbGFzc0xpc3QgPSBldi50YXJnZXQuY2xhc3NMaXN0O1xuICBsZXQgZXZlbnRDb250ZXh0ID0ge19ldjogZXYsIGRvbUNvbnRhaW5lcjogZXYudGFyZ2V0LmNsb3Nlc3QoJy5hcGktbGknKX07XG4gIHRoaXMuZXZlbnRDb250ZXh0ID0gZXZlbnRDb250ZXh0O1xuICBpZiAoZXZUYXJnZXRDbGFzc0xpc3QuY29udGFpbnMoJ2FwaS1zYXZlJykpIHtcbiAgICBsZXQgcGFyYW1zID0gY29sbGVjdEFwaURhdGEoX3RoaXMuYXBpVHJlZSwgX3RoaXMuJGFwaVRyZWUpO1xuICAgIGlmICh0aGlzLmFwaURhdGFPYmouaWQpIHtcbiAgICAgICRodHRwKHJvb3RBUEkgKyAnLycgKyB0aGlzLmFwaURhdGFPYmouaWQpXG4gICAgICAucGF0Y2gocGFyYW1zLCAnYXBpJylcbiAgICAgIC50aGVuKGNhbGxiYWNrLnBhdGNoU3VjY2Vzcy5iaW5kKHRoaXMpKVxuICAgICAgLmNhdGNoKGNhbGxiYWNrLmVycm9yKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmFwaURhdGFPYmouaWQpIHtcbiAgICAgICRodHRwKHJvb3RBUEkpXG4gICAgICAucG9zdChwYXJhbXMsICdhcGknKVxuICAgICAgLnRoZW4oY2FsbGJhY2sucG9zdFN1Y2Nlc3MuYmluZCh0aGlzKSlcbiAgICAgIC5jYXRjaChjYWxsYmFjay5lcnJvcik7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGlmIChldlRhcmdldENsYXNzTGlzdC5jb250YWlucygnYWRkLWNoaWxkJykpIHtcbiAgICBfdGhpcy5hZGRDaGlsZChldik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgaWYgKGV2VGFyZ2V0Q2xhc3NMaXN0LmNvbnRhaW5zKCdyZW1vdmUtY2hpbGQnKSkge1xuICAgIGlmIChldi50YXJnZXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3Jvb3QtbGVhZicpKSB7XG4gICAgICBwb3B1cChldiwge30sIGRlbGV0ZUFwaS5iaW5kKF90aGlzLCBldikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5kZWxOb2RlKGV2KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgaWYgKGV2VGFyZ2V0Q2xhc3NMaXN0LmNvbnRhaW5zKCdhcGktcmVzcG9uZC1wcmV2aWV3LWJ0bicpKSB7XG4gICAgaWYgKCF0aGlzLmFwaURhdGFPYmouaWQpIHtcbiAgICAgIGZsYXNoKHtlcnJvcjogJ1NhdmUgZmlyc3QuJ30pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBsZXQgcGFyYW1zID0ge2Rhd25fdXJpOiB0aGlzLmFwaURhdGFPYmoudXJpfTtcbiAgICBsZXQgY29udGV4dCA9IHt9O1xuICAgICRodHRwKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyAnL2FwaXJlc3BvbnNlJylcbiAgICAuZ2V0KHBhcmFtcylcbiAgICAudGhlbihjYWxsYmFjay5hcGlSZXNwb25kU3VjY2Vzcy5iaW5kKHRoaXMpKVxuICAgIC5jYXRjaChjYWxsYmFjay5lcnJvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgaWYgKGV2VGFyZ2V0Q2xhc3NMaXN0LmNvbnRhaW5zKCdhcGktd2lraS1sYWJlbCcpKSB7XG4gICAgZXYudGFyZ2V0LmNsb3Nlc3QoJy5hcGktd2lraScpLmNsYXNzTGlzdC50b2dnbGUoJ3RvZ2dsZS10cnVlJyk7XG4gIH1cbiAgaWYgKGV2VGFyZ2V0Q2xhc3NMaXN0LmNvbnRhaW5zKCdwcmV2aWV3LXJhdycpKSB7XG4gICAgcmV0dXJuIHN3aXRjaFByZXZpZXcodGhpcy5wcmV2aWV3RGF0YU9iaiwgSlNPTi5zdHJpbmdpZnksIHRoaXMuZXZlbnRDb250ZXh0LCAncmF3Jyk7XG4gIH07XG5cbiAgaWYgKGV2VGFyZ2V0Q2xhc3NMaXN0LmNvbnRhaW5zKCdwcmV2aWV3LWJlYXV0aWZ5JykpIHtcbiAgICByZXR1cm4gc3dpdGNoUHJldmlldyh0aGlzLnByZXZpZXdEYXRhT2JqLCBiZWF1dGlmeUpTT04sIHRoaXMuZXZlbnRDb250ZXh0LCAnYmVhdXRpZnknKTtcbiAgfTtcblxuICBpZiAoZXZUYXJnZXRDbGFzc0xpc3QuY29udGFpbnMoJ3ByZXZpZXctaGlnaGxpZ2h0JykpIHtcbiAgICByZXR1cm4gc3dpdGNoUHJldmlldyh0aGlzLnByZXZpZXdEYXRhT2JqLCBoaWdodGxpZ2h0SlNPTiwgdGhpcy5ldmVudENvbnRleHQsICdoaWdobGlnaHQnKTtcbiAgfTtcblxufVxuXG5mdW5jdGlvbiBzd2l0Y2hQcmV2aWV3KGRhdGFPYmosIGZuLCBwcmV2aWV3Q29udGV4dCwgcHJldmlld1R5cGUpIHtcbiAgbGV0IHByZXZpZXdTdHIgPSBmbi5jYWxsKG51bGwsIGRhdGFPYmopO1xuICBqc29uVmlldy5jYWxsKHByZXZpZXdDb250ZXh0LmRvbUNvbnRhaW5lciwgcHJldmlld1N0cik7XG4gIHN3aXRjaFByZXZpZXdTdGF0dXMocHJldmlld0NvbnRleHQsIHByZXZpZXdUeXBlKTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHN3aXRjaFByZXZpZXdTdGF0dXMocHJldmlld0NvbnRleHQsIGFwcGx5VHlwZSkge1xuICBsZXQgcHJldmlld1R5cGVzID0gWydyYXcnLCAnYmVhdXRpZnknLCAnaGlnaGxpZ2h0J107XG4gIGxldCBhcGlSZXNwb25kUHJldmlld0VsZSA9IHByZXZpZXdDb250ZXh0LmRvbUNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktcmVzcG9uZC1wcmV2aWV3JylbMF07XG4gIGxldCBhcGlSZXNwb25kUHJldmlld0VsZUNsYXNzQXJyID0gYXBpUmVzcG9uZFByZXZpZXdFbGUuY2xhc3NOYW1lLnRyaW0oKS5zcGxpdCgnICcpO1xuICBhcGlSZXNwb25kUHJldmlld0VsZUNsYXNzQXJyLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG4gICAgbGV0IGlkeCA9IHByZXZpZXdUeXBlcy5pbmRleE9mKGVsZW1lbnQpO1xuICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgYXJyYXkuc3BsaWNlKGFycmF5LmluZGV4T2YoZWxlbWVudCksIDEpO1xuICAgIH1cbiAgfSk7XG4gIGxldCBwcmV2aWV3VHlwZUVsZXNBcnIgPSBbXS5zbGljZS5jYWxsKHByZXZpZXdDb250ZXh0LmRvbUNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwZXItcHJldmlldy10eXBlJykpO1xuICBwcmV2aWV3VHlwZUVsZXNBcnIuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gIH0pO1xuICBwcmV2aWV3Q29udGV4dC5kb21Db250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncHJldmlldy0nICsgYXBwbHlUeXBlKVswXS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgYXBpUmVzcG9uZFByZXZpZXdFbGUuY2xhc3NOYW1lID0gYXBpUmVzcG9uZFByZXZpZXdFbGVDbGFzc0Fyci5qb2luKCcgJyk7XG4gIGFwaVJlc3BvbmRQcmV2aWV3RWxlLmNsYXNzTGlzdC5hZGQoYXBwbHlUeXBlKTtcbn1cblxuZnVuY3Rpb24gYXBpU2F2ZSgpIHtcblxufVxuZnVuY3Rpb24gYWRkTGVhZkNoaWxkKCkge1xuXG59XG5mdW5jdGlvbiByZW1vdmVMZWFmQ2hpbGQoKSB7XG5cbn1cbmZ1bmN0aW9uIGFwaVRlc3QoKSB7XG5cbn1cbmZ1bmN0aW9uIGpzb25WaWV3KGRhdGEpIHtcbiAgdmFyICRwcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwcmUnKTtcbiAgJHByZS5pbm5lckhUTUwgPSBkYXRhO1xuICBsZXQgJGRhdGFWaWV3RWxlID0gdGhpcy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkYXRhLXZpZXcnKVswXTtcbiAgJGRhdGFWaWV3RWxlLmlubmVySFRNTCA9ICcnO1xuICAkZGF0YVZpZXdFbGUuYXBwZW5kQ2hpbGQoJHByZSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUFwaShldikge1xuICBpZiAoIXRoaXMuYXBpRGF0YU9iai5pZCkge1xuICAgIGV2LnRhcmdldC5jbG9zZXN0KCcuYXBpLXVsJykucmVtb3ZlQ2hpbGQoZXYudGFyZ2V0LmNsb3Nlc3QoJy5hcGktbGknKSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgbGV0IHBhcmFtcyA9IHt9O1xuICBjb25zb2xlLmxvZyhyb290QVBJKTtcbiAgJGh0dHAocm9vdEFQSSArICcvJyArIHRoaXMuYXBpRGF0YU9iai5pZClcbiAgLmRlbGV0ZShwYXJhbXMpXG4gIC50aGVuKGNhbGxiYWNrcy5kZWxldGVTdWNjZXNzLmJpbmQoZXYpKVxuICAuY2F0Y2goY2FsbGJhY2tzLmVycm9yKTtcbn1cblxuQXBpRG9tLnByb3RvdHlwZS5zdG9yZUFwaVJldHVybkRhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHRoaXMuYXBpUmV0dXJuRGF0YSA9IGRhdGE7XG4gIHRoaXMuJGRhdGFCZWF1dGlmeS5jbGljaygpO1xufTtcblxuQXBpRG9tLnByb3RvdHlwZS5pbml0QXBpVHJlZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgaW5pdERhdGEgPSB7XG4gICAgbm9kZUlkOiAwLFxuICAgIGRhdGE6IGxlYWZEYXRhUGxhY2VIb2xkZXJcbiAgfTtcbiAgbGV0IGZpcnN0Q2hpbGREYXRhID0ge1xuICAgIG5vZGVJZDogMSxcbiAgICBkYXRhOiBsZWFmRGF0YVBsYWNlSG9sZGVyXG4gIH07XG4gIHRoaXMuYXBpVHJlZSA9IG5ldyBUcmVlKGluaXREYXRhKTtcbiAgdGhpcy5hcGlUcmVlLmFkZChmaXJzdENoaWxkRGF0YSwgMCwgdGhpcy5hcGlUcmVlLnRyYXZlcnNlQkYpO1xuXG4gIGxldCB0cmVlRG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICBsZXQgY2FsbGJhY2sgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgbGV0IGxlYWZFbGU7XG4gICAgbGV0IGxlYWZCaW5kRGF0YTtcbiAgICBub2RlLnBhcmVudElkID0gbm9kZS5wYXJlbnQgPyBub2RlLnBhcmVudC5ub2RlSWQgOiBudWxsO1xuICAgIGxlYWZFbGUgPSBnZW5lcmF0ZUxlYWYobm9kZSk7XG4gICAgbGVhZkJpbmREYXRhID0gdHdvV2F5RGF0YUJpbmRpbmcobGVhZkRhdGFQbGFjZUhvbGRlciwgbGVhZkVsZSk7XG4gICAgbm9kZS5kYXRhID0gbGVhZkJpbmREYXRhO1xuICAgIGlmIChub2RlLnBhcmVudElkID09PSBudWxsIHx8IG5vZGUucGFyZW50SWQgPT09ICdudWxsJykgbGVhZkVsZS5jbGFzc0xpc3QuYWRkKCdyb290LWxlYWYnKTtcbiAgICB0cmVlRG9jRnJhZy5hcHBlbmRDaGlsZChsZWFmRWxlKTtcbiAgfTtcblxuICB0aGlzLmFwaVRyZWUudHJhdmVyc2VCRihjYWxsYmFjayk7XG4gIHRoaXMuJGFwaVRyZWUuYXBwZW5kQ2hpbGQodHJlZURvY0ZyYWcpO1xuXG4gIHJldHVybiB0aGlzLmFwaVRyZWU7XG59O1xuXG5BcGlEb20ucHJvdG90eXBlLmRlbE5vZGUgPSBmdW5jdGlvbihjdHgpIHtcbiAgdmFyIGN1cnJlbnRMZWFmID0gY3R4LnRhcmdldC5jbG9zZXN0KCcubGVhZicpO1xuICB2YXIgY3VycmVudElkeCA9ICtjdHgudGFyZ2V0LnBhcmVudE5vZGUuZGF0YXNldC5ub2RlSWQ7XG4gIHZhciBwYXJlbnRJZHggPSAoK2N0eC50YXJnZXQucGFyZW50Tm9kZS5kYXRhc2V0LnBhcmVudElkID09PSAwKSA/IDAgOiArY3R4LnRhcmdldC5wYXJlbnROb2RlLmRhdGFzZXQucGFyZW50SWQ7XG5cbiAgdmFyIG5vZGVzQXJyID0gdGhpcy5hcGlUcmVlLnRyYXZlcnNlRGVzY2VuZGFudHMoY3VycmVudElkeCk7XG4gIHZhciBpZHhBcnIgPSBub2Rlc0FyclRvSWR4QXJyKG5vZGVzQXJyKTtcbiAgdGhpcy5hcGlUcmVlLnJlbW92ZShjdXJyZW50SWR4LCBwYXJlbnRJZHgsIHRoaXMuYXBpVHJlZS50cmF2ZXJzZUJGKTtcbiAgdGhpcy5yZW1vdmVOb2Rlc0Zyb21Eb20oaWR4QXJyKTtcblxuICB2YXIgb2JqID0gdGhpcy5hcGlUcmVlLmFwcGx5U3R5bGUoKTtcbiAgdGhpcy5zdHlsZU5vZGVzKG9iaik7XG4gIHRoaXMuc2V0UGFyZW50Tm9kZVZhbChwYXJlbnRJZHgpO1xuICB0aGlzLnNjcm9sbEJhci5yZW5kZXIoKTtcbn07XG5BcGlEb20ucHJvdG90eXBlLnJlbW92ZU5vZGVzRnJvbURvbSA9IGZ1bmN0aW9uKGFycikge1xuICB2YXIgYWxsTGVhdmVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy4kYXBpVHJlZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsZWFmJykpO1xuICB2YXIgYWxsTGVhdmVzTGVuID0gYWxsTGVhdmVzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxMZWF2ZXNMZW47IGkrKykge1xuICAgIGlmIChhcnIuaW5kZXhPZigrYWxsTGVhdmVzW2ldLmRhdGFzZXQubm9kZUlkKSAhPT0gLTEpIHtcbiAgICAgIHRoaXMuJGFwaVRyZWUucmVtb3ZlQ2hpbGQoYWxsTGVhdmVzW2ldKTtcbiAgICB9XG4gIH07XG59O1xuZnVuY3Rpb24gbm9kZXNBcnJUb0lkeEFycihub2Rlc0Fycikge1xuICB2YXIgbm9kZXNBcnJMZW4gPSBub2Rlc0Fyci5sZW5ndGg7XG4gIHZhciBpZHhBcnIgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlc0FyckxlbjsgaSsrKSB7XG4gICAgaWR4QXJyLnB1c2gobm9kZXNBcnJbaV0ubm9kZUlkKTtcbiAgfTtcbiAgcmV0dXJuIGlkeEFycjtcbn1cblxuQXBpRG9tLnByb3RvdHlwZS5zZXRQYXJlbnROb2RlVmFsID0gZnVuY3Rpb24oaWR4KSB7XG4gIHZhciBsZWF2ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLiRhcGlUcmVlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2xlYWYnKSk7XG4gIHZhciBxdWV1ZSA9IHRoaXMuYXBpVHJlZS50cmF2ZXJzZURpcmVjdENoaWxkKGlkeCk7XG4gIHZhciBxdWV1ZUxlbiA9IHF1ZXVlLl9uZXdlc3RJbmRleCAtIHF1ZXVlLl9vbGRlc3RJbmRleDtcbiAgZm9yICh2YXIgaSA9IDAsIHggPSBsZWF2ZXMubGVuZ3RoOyBpIDwgeDsgaSsrKSB7XG4gICAgaWYgKCtsZWF2ZXNbaV0uZGF0YXNldC5ub2RlSWQgPT09IGlkeCkge1xuICAgICAgaWYgKHF1ZXVlTGVuID4gMCkge1xuICAgICAgICAvLyBsZWF2ZXNbaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZi12YWx1ZScpWzBdLnZhbHVlID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBsZWF2ZXNbaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZi12YWx1ZScpWzBdLnZhbHVlID0gJyc7XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgfTtcbiAgfTtcbn07XG5cbkFwaURvbS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbihjdHgpIHtcbiAgdGhpcy5sZWFmSW5kZXggPSB0aGlzLmFwaVRyZWUubWF4SWQoKSArIDE7XG4gIHZhciBwYXJlbnRJZGV4ID0gK2N0eC50YXJnZXQucGFyZW50Tm9kZS5kYXRhc2V0Lm5vZGVJZDtcblxuICBsZXQgbGVhZkNoaWxkID0gY3JlYXRlTGVhZihwYXJlbnRJZGV4LCB0aGlzLmxlYWZJbmRleCk7XG4gIGxldCBjaGlsZE1vZGVsID0gdHdvV2F5RGF0YUJpbmRpbmcobGVhZkRhdGFQbGFjZUhvbGRlciwgbGVhZkNoaWxkKTtcbiAgbGV0IGxlYWZEYXRhID0ge1xuICAgIG5vZGVJZDogdGhpcy5sZWFmSW5kZXgsXG4gICAgZGF0YTogY2hpbGRNb2RlbFxuICB9O1xuICB0aGlzLmFwaVRyZWUuYWRkKGxlYWZEYXRhLCBwYXJlbnRJZGV4LCB0aGlzLmFwaVRyZWUudHJhdmVyc2VCRik7XG4gIHRoaXMuJGFwaVRyZWUuYXBwZW5kQ2hpbGQobGVhZkNoaWxkKTtcbiAgdmFyIG9iaiA9IHRoaXMuYXBpVHJlZS5hcHBseVN0eWxlKCk7XG4gIHRoaXMuc3R5bGVOb2RlcyhvYmopO1xuICB0aGlzLnNldFBhcmVudE5vZGVWYWwocGFyZW50SWRleCk7XG4gIHRoaXMuc2Nyb2xsQmFyLnJlbmRlcigpO1xufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVMZWFmU3BhbihwYXJlbnRJZCwgbm9kZUluZGV4KSB7XG4gIHZhciBuZXdMZWFmU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgbmV3TGVhZlNwYW4uc2V0QXR0cmlidXRlKCdjbGFzcycsICdsZWFmJyk7XG4gIG5ld0xlYWZTcGFuLnNldEF0dHJpYnV0ZSgnYmluZCcsICdoYXNDaGlsZCcpO1xuICBuZXdMZWFmU3Bhbi5zZXRBdHRyaWJ1dGUoJ2JpbmQtdG9nZ2xlLWNsYXNzJywgJycpO1xuICBuZXdMZWFmU3Bhbi5kYXRhc2V0LnBhcmVudElkID0gcGFyZW50SWQ7XG4gIG5ld0xlYWZTcGFuLmRhdGFzZXQubm9kZUlkID0gbm9kZUluZGV4O1xuICBuZXdMZWFmU3Bhbi5pbm5lckhUTUwgPSBsZWFmVHBsKCk7XG4gIHJldHVybiBuZXdMZWFmU3Bhbjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUxlYWYocGFyZW50SWR4LCBub2RlSWR4KSB7XG4gIHJldHVybiBnZW5lcmF0ZUxlYWZTcGFuKHBhcmVudElkeCwgbm9kZUlkeCk7XG59XG5BcGlEb20ucHJvdG90eXBlLnN0eWxlTm9kZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGxlYXZlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuJGFwaVRyZWUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGVhZicpKTtcblxuICBsZXQgbGVhdmVzSGFzaCA9IHt9O1xuICBmb3IgKGxldCBpID0gMCwgbGVhdmVzTGVuID0gbGVhdmVzLmxlbmd0aDsgaSA8IGxlYXZlc0xlbjsgaSsrKSB7XG4gICAgbGVhdmVzSGFzaFtsZWF2ZXNbaV0uZGF0YXNldC5ub2RlSWRdID0gbGVhdmVzW2ldO1xuICB9XG4gIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlSWQgPD0gMCkgcmV0dXJuO1xuICAgIGxlYXZlc0hhc2hbbm9kZS5ub2RlSWRdLnN0eWxlWyd0cmFuc2Zvcm0nXSA9ICd0cmFuc2xhdGUzZCgnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgocGVyTGVhZldpZHRoICsgcGVyU1ZHUGF0aFdpZHRoKSAqIChub2RlLmNvbHVtbiAtIDEpKSArICdweCwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQobm9kZS50b3RhbG9mZnNldHlsZXZlbCAqIChwZXJMZWFmSGVpZ2h0ICsgbGVhdmVzVmVydGljYWxHYXApKSArICdweCwgMCknO1xuICB9O1xuICB0aGlzLmFwaVRyZWUudHJhdmVyc2VCRihjYWxsYmFjayk7XG4gIHRoaXMuZGltZW5zaW9uQXJyID0gdGhpcy5jYWxjRGltZW5zaW9ucygpO1xuICB0aGlzLmRyYXdTVkcoKTtcbn07XG5cbi8qIHV0aWxzICovXG5mdW5jdGlvbiBjbG9uZVJlY3RPYmoob2JqKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiBvYmoudG9wLFxuICAgIGJvdHRvbTogb2JqLmJvdHRvbSxcbiAgICBsZWZ0OiBvYmoubGVmdCxcbiAgICByaWdodDogb2JqLnJpZ2h0LFxuICAgIHdpZHRoOiBvYmoud2lkdGgsXG4gICAgaGVpZ2h0OiBvYmouaGVpZ2h0XG4gIH07XG59XG5cbi8qIG1hbmlwdWxhdGUgU1ZHICovXG5BcGlEb20ucHJvdG90eXBlLmNsZWFyU1ZHID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdmcgPSB0aGlzLiRhcGlUcmVlRnJhbWUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXN2ZycpWzBdO1xuICB3aGlsZSAoc3ZnLmxhc3RDaGlsZCkge1xuICAgIHN2Zy5yZW1vdmVDaGlsZChzdmcubGFzdENoaWxkKTtcbiAgfVxufTtcbi8qKlxuICogW2RyYXdTVkcgZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cbiAqL1xuQXBpRG9tLnByb3RvdHlwZS5kcmF3U1ZHID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2xlYXJTVkcoKTtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIgc3ZnUGFydGlhbHMgPSBbXTtcbiAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlLnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgc3ZnUGFydGlhbHMucHVzaCh0aGF0LmNyZWF0ZVNpbmdsZVNWRyhub2RlLm5vZGVJZCwgbm9kZS5jb2x1bW4sIG5vZGUucGFyZW50LnRvdGFsb2Zmc2V0eWxldmVsLCAobm9kZS50b3RhbG9mZnNldHlsZXZlbCAtIG5vZGUucGFyZW50LnRvdGFsb2Zmc2V0eWxldmVsKSkpO1xuICAgIH07XG4gIH07XG4gIHRoaXMuYXBpVHJlZS50cmF2ZXJzZURGKGNhbGxiYWNrKTtcblxuICB2YXIgZG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdmdQYXJ0aWFscy5sZW5ndGg7IGkrKykge1xuICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQoc3ZnUGFydGlhbHNbaV0pO1xuICB9XG4gIHRoaXMuJGFwaVRyZWVGcmFtZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktc3ZnJylbMF0uYXBwZW5kQ2hpbGQoZG9jRnJhZyk7XG5cbn07XG5cbkFwaURvbS5wcm90b3R5cGUuY3JlYXRlU2luZ2xlU1ZHID0gZnVuY3Rpb24oaWR4LCBob3JpLCBwYXJlbnRWZXJ0LCBkdmVydCkge1xuXG4gIHZhciBzdmducyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG4gIHZhciBuZXdQYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCAncGF0aCcpO1xuICB2YXIgY29udHJvbFJhdGUgPSAwLjI7XG4gIHZhciBteCwgbXksIHF4LCBxeSwgcXh4LCBxeXksIHR4LCB0eTtcbiAgaG9yaSA9IGhvcmkgLSAxO1xuICBkdmVydCA9IGR2ZXJ0O1xuICBwYXJlbnRWZXJ0ID0gcGFyZW50VmVydDtcblxuICBteCA9IGhvcmkgKiA0OTA7IC8qIHNpbmdsZSBsZWFmIHdpZHRoIHBsdXMgc2luZ2xlIHN2ZyBwYXRoIHdpZHRoICovXG4gIG15ID0gcGFyZW50VmVydCAqIDUyICsgODtcbiAgcXggPSBteCArIDEwO1xuICBxeSA9IG15O1xuICBxeHggPSBteCArIDE1O1xuICBxeXkgPSAobXkgKyAoZHZlcnQgLyAyKSAqIDUyKTtcbiAgdHggPSBteCArIDMwO1xuICB0eSA9IG15ICsgZHZlcnQgKiA1MjtcblxuICBuZXdQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgJ00gJyArIG14ICsgJyAnICsgbXkgKyAnIFEgJyArIHF4ICsgJyAnICsgcXkgKyAnLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF4eCArICcgJyArIHF5eSArICcgVCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eCArICcgJyArIHR5ICsgJycpO1xuICBuZXdQYXRoLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnYXBpLXN2Zy1wYXRoJyk7XG4gIG5ld1BhdGguc2V0QXR0cmlidXRlKCdkYXRhLWlkeCcsIGlkeCk7XG5cbiAgcmV0dXJuIG5ld1BhdGg7XG59O1xuXG4vKiBjYWxjdWxhdGUgZGltZW5zaW9ucyAqL1xuQXBpRG9tLnByb3RvdHlwZS5jYWxjRGltZW5zaW9ucyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaG9yaU1heCwgdmVydGljYWxNYXgsIGhvcmlBcnIgPSBbXSwgdmVydEFyciA9IFtdO1xuXG4gIGhvcmlBcnIgPSB0aGlzLmFwaVRyZWUuZGVwdGgoKTtcbiAgaG9yaU1heCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhvcmlBcnIpO1xuICB2ZXJ0aWNhbE1heCA9IHRoaXMuYXBpVHJlZS5fcm9vdC5jaGlsZHJlbmxldmVsO1xuICB0aGlzLiRhcGlUcmVlRnJhbWUuc3R5bGUud2lkdGggPSBob3JpTWF4ICogNTIwICsgJ3B4JztcbiAgdGhpcy4kYXBpVHJlZUNvbnRlbnQuc3R5bGUud2lkdGggPSBob3JpTWF4ICogNTIwICsgJ3B4JztcbiAgdGhpcy4kYXBpVHJlZUZyYW1lLnN0eWxlLmhlaWdodCA9IHZlcnRpY2FsTWF4ICogNTIgLSAodmVydGljYWxNYXggPiAxID8gMTAgOiAwKSArICdweCc7XG4gIHRoaXMuJGFwaVRyZWVDb250ZW50LnN0eWxlLmhlaWdodCA9IHZlcnRpY2FsTWF4ICogNTIgLSAodmVydGljYWxNYXggPiAxID8gMTAgOiAwKSArICdweCc7XG4gIHJldHVybiBbaG9yaU1heCwgdmVydGljYWxNYXhdO1xuXG59O1xuXG4vKiBjYWxjdWxhdGUgb2Zmc2V0ICovXG5cbkFwaURvbS5wcm90b3R5cGUubm9kZUxlZnRPZmZzZXQgPSBmdW5jdGlvbihlbCkge1xuICB2YXIgZWxSZWN0T2JqZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBib2R5UmVjdE9iaiA9IHRoaXMuJGFwaVRyZWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBjbG9uZUJvZHlSZWN0T2JqID0gY2xvbmVSZWN0T2JqKGJvZHlSZWN0T2JqKTtcbiAgdmFyIGNsb25lRWxSZWN0T2JqZWN0ID0gY2xvbmVSZWN0T2JqKGVsUmVjdE9iamVjdCk7XG4gIGNsb25lRWxSZWN0T2JqZWN0LnRvcCArPSBNYXRoLmFicyhjbG9uZUJvZHlSZWN0T2JqLnRvcCk7XG4gIGNsb25lRWxSZWN0T2JqZWN0LmJvdHRvbSArPSBNYXRoLmFicyhjbG9uZUJvZHlSZWN0T2JqLnRvcCk7XG4gIGNsb25lRWxSZWN0T2JqZWN0LmxlZnQgKz0gTWF0aC5hYnMoY2xvbmVCb2R5UmVjdE9iai5sZWZ0KTtcbiAgY2xvbmVFbFJlY3RPYmplY3QucmlnaHQgKz0gTWF0aC5hYnMoY2xvbmVCb2R5UmVjdE9iai5sZWZ0KTtcbiAgcmV0dXJuIGNsb25lRWxSZWN0T2JqZWN0O1xufTtcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2FwaS10cmVlL3RyZWVEb20uanMiLCJleHBvcnQgZnVuY3Rpb24gZ2V0TWF4T2ZBcnJheShudW1BcnJheSkge1xuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgbnVtQXJyYXkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzQ2xhc3MoZWxlbSwgY2xhc3NOYW1lKSB7XG4gIHJldHVybiBlbGVtLmNsYXNzTmFtZS5zcGxpdCgnICcpLmluZGV4T2YoY2xhc3NOYW1lKSA+IC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJvd3NlclByZWZpeCgpIHtcbiAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLCBwcmVmaXggPSAnJztcbiAgcHJlZml4ID0gKHVhLmluZGV4T2YoJ2Nocm9tZScpID49IDAgfHwgd2luZG93Lm9wZW5EYXRhYmFzZSkgPyAnLXdlYmtpdC0nIDogKHVhLmluZGV4T2YoJ2ZpcmVmb3gnKSA+PSAwKSA/ICctbW96LScgOiB3aW5kb3cub3BlcmEgPyAnLW8tJyA6IChkb2N1bWVudC5hbGwgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdPcGVyYScpID09PSAtMSkgPyAnLW1zLScgOiAnJztcbiAgcmV0dXJuIHByZWZpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zZm9ybShlbCkge1xuICB2YXIgdHJhbnNmb3JtID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoJy13ZWJraXQtdHJhbnNmb3JtJyk7XG4gIHZhciByZXN1bHRzID0gdHJhbnNmb3JtLm1hdGNoKC9tYXRyaXgoPzooM2QpXFwoLXswLDF9XFxkKyg/OiwgLXswLDF9XFxkKykqKD86LCAoLXswLDF9XFxkKykpKD86LCAoLXswLDF9XFxkKykpKD86LCAoLXswLDF9XFxkKykpLCAtezAsMX1cXGQrXFwpfFxcKC17MCwxfVxcZCsoPzosIC17MCwxfVxcZCspKig/OiwgKC17MCwxfVxcZCspKSg/OiwgKC17MCwxfVxcZCspKVxcKSkvKTtcblxuICBpZiAoIXJlc3VsdHMpIHJldHVybiBbMCwgMCwgMF07XG4gIGlmIChyZXN1bHRzWzFdID09ICczZCcpIHJldHVybiByZXN1bHRzLnNsaWNlKDIsNSk7XG5cbiAgcmVzdWx0cy5wdXNoKDApO1xuICByZXR1cm4gcmVzdWx0cy5zbGljZSg1LCA4KTsgLy8gcmV0dXJucyB0aGUgW1gsWSxaLDFdIHZhbHVlc1xufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRlWChlbCkge1xuLy8gICAvLyBjaHJvbWUgd29uJ3QgdXNlIHByZWZpeFxuLy8gICAvLyB2YXIgc3R5bGVfYXR0ciA9IGJyb3dzZXJQcmVmaXgoKSArICd0cmFuc2Zvcm0nO1xuLy8gICB2YXIgc3R5bGVfYXR0ciA9ICd0cmFuc2Zvcm0nO1xuLy8gICB2YXIgdHJhbnNmb3JtID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc3R5bGVfYXR0cik7XG4vLyAgIHZhciByZXN1bHRzID0gdHJhbnNmb3JtLm1hdGNoKC9tYXRyaXgoPzooM2QpXFwoLXswLDF9XFxkKyg/OiwgLXswLDF9XFxkKykqKD86LCAoLXswLDF9XFxkKykpKD86LCAoLXswLDF9XFxkKykpKD86LCAoLXswLDF9XFxkKykpLCAtezAsMX1cXGQrXFwpfFxcKC17MCwxfVxcZCsoPzosIC17MCwxfVxcZCspKig/OiwgKC17MCwxfVxcZCspKSg/OiwgKC17MCwxfVxcZCspKVxcKSkvKTtcbi8vICAgaWYgKCFyZXN1bHRzKSByZXR1cm4gWzAsIDAsIDBdO1xuLy8gICBpZiAocmVzdWx0c1sxXSA9PT0gJzNkJykgcmV0dXJuIHJlc3VsdHMuc2xpY2UoMiw1KTtcbi8vICAgcmVzdWx0cy5wdXNoKDApO1xuLy8gICByZXR1cm4gKyhyZXN1bHRzLnNsaWNlKDUsIDgpWzBdKTsgLy8gcmV0dXJucyB0aGUgW1gsWSxaLDFdIHZhbHVlc1xuLy8gfVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRlWChlbCkge1xuICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCdzdHlsZScpLnNwbGl0KCd0cmFuc2xhdGUzZCcpWzFdLnNwbGl0KCcsICcpWzBdLnNsaWNlKDEpLnNwbGl0KCdweCcpWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRlWShvYmopIHtcbiAgaWYgKCF3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkgcmV0dXJuO1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG9iaiksXG4gICAgICB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gfHwgc3R5bGUud2Via2l0VHJhbnNmb3JtIHx8IHN0eWxlLm1velRyYW5zZm9ybTtcbiAgdmFyIG1hdCA9IHRyYW5zZm9ybS5tYXRjaCgvXm1hdHJpeDNkXFwoKC4rKVxcKSQvKTtcbiAgaWYgKG1hdCkgcmV0dXJuIHBhcnNlRmxvYXQobWF0WzFdLnNwbGl0KCcsICcpWzEzXSk7XG4gIG1hdCA9IHRyYW5zZm9ybS5tYXRjaCgvXm1hdHJpeFxcKCguKylcXCkkLyk7XG4gIHJldHVybiBtYXQgPyBwYXJzZUZsb2F0KG1hdFsxXS5zcGxpdCgnLCAnKVs1XSkgOiAwO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemUob2JqLCBwcmVmaXgpIHtcbiAgdmFyIHN0ciA9IFtdO1xuICBmb3IgKHZhciBwIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgIHZhciBrID0gcHJlZml4ID8gcHJlZml4ICsgJ1snICsgcCArICddJyA6IHAsIHYgPSBvYmpbcF07XG4gICAgICBzdHIucHVzaCh0eXBlb2YgdiA9PT0gJ29iamVjdCcgP1xuICAgICAgICBzZXJpYWxpemUodiwgaykgOlxuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoaykgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodikpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyLmpvaW4oJyYnKTtcbn1cblxuXG4vKipcbiAqIFtzdHJpbmdpZnkgd2l0aCA0IHNwYWNlcyBhdCBlYWNoIGxldmVsXVxuICogQHBhcmFtICB7W29iamVjdF19IGpzT2JqIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1tzdHJpbmddfSAgICAgICBbZGVzY3JpcHRpb25dXG4gKiBKU09OLnN0cmluZ2lmeShqc09iaiwgbnVsbCwgXCJcXHRcIik7IC8vIHN0cmluZ2lmeSB3aXRoIHRhYnMgaW5zZXJ0ZWQgYXQgZWFjaCBsZXZlbFxuICovXG5leHBvcnQgZnVuY3Rpb24gYmVhdXRpZnlKU09OKGpzT2JqKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShqc09iaiwgbnVsbCwgNCk7XG59XG5cbi8qKlxuICogW2hpZ2h0bGlnaHRKU09OIHdvcmtzIG9uIEpTT04gb2JqZWN0LCBub3Qgc3RyaW5nXVxuICogQHBhcmFtICB7SlNPTiBvYmplY3R9IGpzb24gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhpZ2h0bGlnaHRKU09OKGpzb24pIHtcbiAganNvbiA9IEpTT04uc3RyaW5naWZ5KGpzb24sIHVuZGVmaW5lZCwgNCk7XG4gIGpzb24gPSBqc29uLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcbiAgcmV0dXJuIGpzb24ucmVwbGFjZSgvKFwiKFxcXFx1W2EtekEtWjAtOV17NH18XFxcXFtedV18W15cXFxcXCJdKSpcIihcXHMqOik/fFxcYih0cnVlfGZhbHNlfG51bGwpXFxifC0/XFxkKyg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/KS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIHZhciBjbHMgPSAnbnVtYmVyJztcbiAgICBpZiAoL15cIi8udGVzdChtYXRjaCkpIHtcbiAgICAgIGlmICgvOiQvLnRlc3QobWF0Y2gpKSB7XG4gICAgICAgIGNscyA9ICdrZXknO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xzID0gJ3N0cmluZyc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgvdHJ1ZXxmYWxzZS8udGVzdChtYXRjaCkpIHtcbiAgICAgIGNscyA9ICdib29sZWFuJztcbiAgICB9IGVsc2UgaWYgKC9udWxsLy50ZXN0KG1hdGNoKSkge1xuICAgICAgY2xzID0gJ251bGwnO1xuICAgIH1cbiAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiJyArIGNscyArICdcIj4nICsgbWF0Y2ggKyAnPC9zcGFuPic7XG4gIH0pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2FwaS10cmVlL3V0aWxpdGllcy5qcyIsIihmdW5jdGlvbigpIHtcbiAgdmFyIHNsaWNlID0gW10uc2xpY2U7XG5cbiAgdGhpcy5BY3Rpb25DYWJsZSA9IHtcbiAgICBJTlRFUk5BTDoge1xuICAgICAgXCJtZXNzYWdlX3R5cGVzXCI6IHtcbiAgICAgICAgXCJ3ZWxjb21lXCI6IFwid2VsY29tZVwiLFxuICAgICAgICBcInBpbmdcIjogXCJwaW5nXCIsXG4gICAgICAgIFwiY29uZmlybWF0aW9uXCI6IFwiY29uZmlybV9zdWJzY3JpcHRpb25cIixcbiAgICAgICAgXCJyZWplY3Rpb25cIjogXCJyZWplY3Rfc3Vic2NyaXB0aW9uXCJcbiAgICAgIH0sXG4gICAgICBcImRlZmF1bHRfbW91bnRfcGF0aFwiOiBcIi9jYWJsZVwiLFxuICAgICAgXCJwcm90b2NvbHNcIjogW1wiYWN0aW9uY2FibGUtdjEtanNvblwiLCBcImFjdGlvbmNhYmxlLXVuc3VwcG9ydGVkXCJdXG4gICAgfSxcbiAgICBjcmVhdGVDb25zdW1lcjogZnVuY3Rpb24odXJsKSB7XG4gICAgICB2YXIgcmVmO1xuICAgICAgaWYgKHVybCA9PSBudWxsKSB7XG4gICAgICAgIHVybCA9IChyZWYgPSB0aGlzLmdldENvbmZpZyhcInVybFwiKSkgIT0gbnVsbCA/IHJlZiA6IHRoaXMuSU5URVJOQUwuZGVmYXVsdF9tb3VudF9wYXRoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBBY3Rpb25DYWJsZS5Db25zdW1lcih0aGlzLmNyZWF0ZVdlYlNvY2tldFVSTCh1cmwpKTtcbiAgICB9LFxuICAgIGdldENvbmZpZzogZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICBlbGVtZW50ID0gZG9jdW1lbnQuaGVhZC5xdWVyeVNlbGVjdG9yKFwibWV0YVtuYW1lPSdhY3Rpb24tY2FibGUtXCIgKyBuYW1lICsgXCInXVwiKTtcbiAgICAgIHJldHVybiBlbGVtZW50ICE9IG51bGwgPyBlbGVtZW50LmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIikgOiB2b2lkIDA7XG4gICAgfSxcbiAgICBjcmVhdGVXZWJTb2NrZXRVUkw6IGZ1bmN0aW9uKHVybCkge1xuICAgICAgdmFyIGE7XG4gICAgICBpZiAodXJsICYmICEvXndzcz86L2kudGVzdCh1cmwpKSB7XG4gICAgICAgIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgYS5ocmVmID0gdXJsO1xuICAgICAgICBhLmhyZWYgPSBhLmhyZWY7XG4gICAgICAgIGEucHJvdG9jb2wgPSBhLnByb3RvY29sLnJlcGxhY2UoXCJodHRwXCIsIFwid3NcIik7XG4gICAgICAgIHJldHVybiBhLmhyZWY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgfVxuICAgIH0sXG4gICAgc3RhcnREZWJ1Z2dpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVidWdnaW5nID0gdHJ1ZTtcbiAgICB9LFxuICAgIHN0b3BEZWJ1Z2dpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVidWdnaW5nID0gbnVsbDtcbiAgICB9LFxuICAgIGxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWVzc2FnZXM7XG4gICAgICBtZXNzYWdlcyA9IDEgPD0gYXJndW1lbnRzLmxlbmd0aCA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSA6IFtdO1xuICAgICAgaWYgKHRoaXMuZGVidWdnaW5nKSB7XG4gICAgICAgIG1lc3NhZ2VzLnB1c2goRGF0ZS5ub3coKSk7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBbXCJbQWN0aW9uQ2FibGVdXCJdLmNvbmNhdChzbGljZS5jYWxsKG1lc3NhZ2VzKSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cgIT09IG51bGwpIHtcbiAgICB3aW5kb3cuQWN0aW9uQ2FibGUgPSB0aGlzLkFjdGlvbkNhYmxlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlICE9PSBudWxsKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB0aGlzLkFjdGlvbkNhYmxlO1xuICB9XG5cbn0pLmNhbGwod2luZG93KTtcbihmdW5jdGlvbigpIHtcbiAgdmFyIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9O1xuXG4gIEFjdGlvbkNhYmxlLkNvbm5lY3Rpb25Nb25pdG9yID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciBjbGFtcCwgbm93LCBzZWNvbmRzU2luY2U7XG5cbiAgICBDb25uZWN0aW9uTW9uaXRvci5wb2xsSW50ZXJ2YWwgPSB7XG4gICAgICBtaW46IDMsXG4gICAgICBtYXg6IDMwXG4gICAgfTtcblxuICAgIENvbm5lY3Rpb25Nb25pdG9yLnN0YWxlVGhyZXNob2xkID0gNjtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb25Nb25pdG9yKGNvbm5lY3Rpb24pIHtcbiAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICB0aGlzLnZpc2liaWxpdHlEaWRDaGFuZ2UgPSBiaW5kKHRoaXMudmlzaWJpbGl0eURpZENoYW5nZSwgdGhpcyk7XG4gICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHRzID0gMDtcbiAgICB9XG5cbiAgICBDb25uZWN0aW9uTW9uaXRvci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5pc1J1bm5pbmcoKSkge1xuICAgICAgICB0aGlzLnN0YXJ0ZWRBdCA9IG5vdygpO1xuICAgICAgICBkZWxldGUgdGhpcy5zdG9wcGVkQXQ7XG4gICAgICAgIHRoaXMuc3RhcnRQb2xsaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMudmlzaWJpbGl0eURpZENoYW5nZSk7XG4gICAgICAgIHJldHVybiBBY3Rpb25DYWJsZS5sb2coXCJDb25uZWN0aW9uTW9uaXRvciBzdGFydGVkLiBwb2xsSW50ZXJ2YWwgPSBcIiArICh0aGlzLmdldFBvbGxJbnRlcnZhbCgpKSArIFwiIG1zXCIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb25uZWN0aW9uTW9uaXRvci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nKCkpIHtcbiAgICAgICAgdGhpcy5zdG9wcGVkQXQgPSBub3coKTtcbiAgICAgICAgdGhpcy5zdG9wUG9sbGluZygpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLnZpc2liaWxpdHlEaWRDaGFuZ2UpO1xuICAgICAgICByZXR1cm4gQWN0aW9uQ2FibGUubG9nKFwiQ29ubmVjdGlvbk1vbml0b3Igc3RvcHBlZFwiKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLmlzUnVubmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICh0aGlzLnN0YXJ0ZWRBdCAhPSBudWxsKSAmJiAodGhpcy5zdG9wcGVkQXQgPT0gbnVsbCk7XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb25Nb25pdG9yLnByb3RvdHlwZS5yZWNvcmRQaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5waW5nZWRBdCA9IG5vdygpO1xuICAgIH07XG5cbiAgICBDb25uZWN0aW9uTW9uaXRvci5wcm90b3R5cGUucmVjb3JkQ29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA9IDA7XG4gICAgICB0aGlzLnJlY29yZFBpbmcoKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmRpc2Nvbm5lY3RlZEF0O1xuICAgICAgcmV0dXJuIEFjdGlvbkNhYmxlLmxvZyhcIkNvbm5lY3Rpb25Nb25pdG9yIHJlY29yZGVkIGNvbm5lY3RcIik7XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb25Nb25pdG9yLnByb3RvdHlwZS5yZWNvcmREaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRpc2Nvbm5lY3RlZEF0ID0gbm93KCk7XG4gICAgICByZXR1cm4gQWN0aW9uQ2FibGUubG9nKFwiQ29ubmVjdGlvbk1vbml0b3IgcmVjb3JkZWQgZGlzY29ubmVjdFwiKTtcbiAgICB9O1xuXG4gICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLnN0YXJ0UG9sbGluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdG9wUG9sbGluZygpO1xuICAgICAgcmV0dXJuIHRoaXMucG9sbCgpO1xuICAgIH07XG5cbiAgICBDb25uZWN0aW9uTW9uaXRvci5wcm90b3R5cGUuc3RvcFBvbGxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjbGVhclRpbWVvdXQodGhpcy5wb2xsVGltZW91dCk7XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb25Nb25pdG9yLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wb2xsVGltZW91dCA9IHNldFRpbWVvdXQoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5yZWNvbm5lY3RJZlN0YWxlKCk7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnBvbGwoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLCB0aGlzLmdldFBvbGxJbnRlcnZhbCgpKTtcbiAgICB9O1xuXG4gICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLmdldFBvbGxJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGludGVydmFsLCBtYXgsIG1pbiwgcmVmO1xuICAgICAgcmVmID0gdGhpcy5jb25zdHJ1Y3Rvci5wb2xsSW50ZXJ2YWwsIG1pbiA9IHJlZi5taW4sIG1heCA9IHJlZi5tYXg7XG4gICAgICBpbnRlcnZhbCA9IDUgKiBNYXRoLmxvZyh0aGlzLnJlY29ubmVjdEF0dGVtcHRzICsgMSk7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChjbGFtcChpbnRlcnZhbCwgbWluLCBtYXgpICogMTAwMCk7XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb25Nb25pdG9yLnByb3RvdHlwZS5yZWNvbm5lY3RJZlN0YWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5jb25uZWN0aW9uSXNTdGFsZSgpKSB7XG4gICAgICAgIEFjdGlvbkNhYmxlLmxvZyhcIkNvbm5lY3Rpb25Nb25pdG9yIGRldGVjdGVkIHN0YWxlIGNvbm5lY3Rpb24uIHJlY29ubmVjdEF0dGVtcHRzID0gXCIgKyB0aGlzLnJlY29ubmVjdEF0dGVtcHRzICsgXCIsIHBvbGxJbnRlcnZhbCA9IFwiICsgKHRoaXMuZ2V0UG9sbEludGVydmFsKCkpICsgXCIgbXMsIHRpbWUgZGlzY29ubmVjdGVkID0gXCIgKyAoc2Vjb25kc1NpbmNlKHRoaXMuZGlzY29ubmVjdGVkQXQpKSArIFwiIHMsIHN0YWxlIHRocmVzaG9sZCA9IFwiICsgdGhpcy5jb25zdHJ1Y3Rvci5zdGFsZVRocmVzaG9sZCArIFwiIHNcIik7XG4gICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMrKztcbiAgICAgICAgaWYgKHRoaXMuZGlzY29ubmVjdGVkUmVjZW50bHkoKSkge1xuICAgICAgICAgIHJldHVybiBBY3Rpb25DYWJsZS5sb2coXCJDb25uZWN0aW9uTW9uaXRvciBza2lwcGluZyByZW9wZW5pbmcgcmVjZW50IGRpc2Nvbm5lY3RcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQWN0aW9uQ2FibGUubG9nKFwiQ29ubmVjdGlvbk1vbml0b3IgcmVvcGVuaW5nXCIpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24ucmVvcGVuKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLmNvbm5lY3Rpb25Jc1N0YWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVmO1xuICAgICAgcmV0dXJuIHNlY29uZHNTaW5jZSgocmVmID0gdGhpcy5waW5nZWRBdCkgIT0gbnVsbCA/IHJlZiA6IHRoaXMuc3RhcnRlZEF0KSA+IHRoaXMuY29uc3RydWN0b3Iuc3RhbGVUaHJlc2hvbGQ7XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb25Nb25pdG9yLnByb3RvdHlwZS5kaXNjb25uZWN0ZWRSZWNlbnRseSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGlzY29ubmVjdGVkQXQgJiYgc2Vjb25kc1NpbmNlKHRoaXMuZGlzY29ubmVjdGVkQXQpIDwgdGhpcy5jb25zdHJ1Y3Rvci5zdGFsZVRocmVzaG9sZDtcbiAgICB9O1xuXG4gICAgQ29ubmVjdGlvbk1vbml0b3IucHJvdG90eXBlLnZpc2liaWxpdHlEaWRDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFwidmlzaWJsZVwiKSB7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5jb25uZWN0aW9uSXNTdGFsZSgpIHx8ICFfdGhpcy5jb25uZWN0aW9uLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgIEFjdGlvbkNhYmxlLmxvZyhcIkNvbm5lY3Rpb25Nb25pdG9yIHJlb3BlbmluZyBzdGFsZSBjb25uZWN0aW9uIG9uIHZpc2liaWxpdHljaGFuZ2UuIHZpc2JpbGl0eVN0YXRlID0gXCIgKyBkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUpO1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY29ubmVjdGlvbi5yZW9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSwgMjAwKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbm93ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgfTtcblxuICAgIHNlY29uZHNTaW5jZSA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICAgIHJldHVybiAobm93KCkgLSB0aW1lKSAvIDEwMDA7XG4gICAgfTtcblxuICAgIGNsYW1wID0gZnVuY3Rpb24obnVtYmVyLCBtaW4sIG1heCkge1xuICAgICAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCBudW1iZXIpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbm5lY3Rpb25Nb25pdG9yO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwod2luZG93KTtcbihmdW5jdGlvbigpIHtcbiAgdmFyIGksIG1lc3NhZ2VfdHlwZXMsIHByb3RvY29scywgcmVmLCBzdXBwb3J0ZWRQcm90b2NvbHMsIHVuc3VwcG9ydGVkUHJvdG9jb2wsXG4gICAgc2xpY2UgPSBbXS5zbGljZSxcbiAgICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgICBpbmRleE9mID0gW10uaW5kZXhPZiB8fCBmdW5jdGlvbihpdGVtKSB7IGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTsgfSByZXR1cm4gLTE7IH07XG5cbiAgcmVmID0gQWN0aW9uQ2FibGUuSU5URVJOQUwsIG1lc3NhZ2VfdHlwZXMgPSByZWYubWVzc2FnZV90eXBlcywgcHJvdG9jb2xzID0gcmVmLnByb3RvY29scztcblxuICBzdXBwb3J0ZWRQcm90b2NvbHMgPSAyIDw9IHByb3RvY29scy5sZW5ndGggPyBzbGljZS5jYWxsKHByb3RvY29scywgMCwgaSA9IHByb3RvY29scy5sZW5ndGggLSAxKSA6IChpID0gMCwgW10pLCB1bnN1cHBvcnRlZFByb3RvY29sID0gcHJvdG9jb2xzW2krK107XG5cbiAgQWN0aW9uQ2FibGUuQ29ubmVjdGlvbiA9IChmdW5jdGlvbigpIHtcbiAgICBDb25uZWN0aW9uLnJlb3BlbkRlbGF5ID0gNTAwO1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdGlvbihjb25zdW1lcikge1xuICAgICAgdGhpcy5jb25zdW1lciA9IGNvbnN1bWVyO1xuICAgICAgdGhpcy5vcGVuID0gYmluZCh0aGlzLm9wZW4sIHRoaXMpO1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gdGhpcy5jb25zdW1lci5zdWJzY3JpcHRpb25zO1xuICAgICAgdGhpcy5tb25pdG9yID0gbmV3IEFjdGlvbkNhYmxlLkNvbm5lY3Rpb25Nb25pdG9yKHRoaXMpO1xuICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICBpZiAodGhpcy5pc09wZW4oKSkge1xuICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgQWN0aW9uQ2FibGUubG9nKFwiQXR0ZW1wdGVkIHRvIG9wZW4gV2ViU29ja2V0LCBidXQgZXhpc3Rpbmcgc29ja2V0IGlzIFwiICsgKHRoaXMuZ2V0U3RhdGUoKSkpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeGlzdGluZyBjb25uZWN0aW9uIG11c3QgYmUgY2xvc2VkIGJlZm9yZSBvcGVuaW5nXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQWN0aW9uQ2FibGUubG9nKFwiT3BlbmluZyBXZWJTb2NrZXQsIGN1cnJlbnQgc3RhdGUgaXMgXCIgKyAodGhpcy5nZXRTdGF0ZSgpKSArIFwiLCBzdWJwcm90b2NvbHM6IFwiICsgcHJvdG9jb2xzKTtcbiAgICAgICAgaWYgKHRoaXMud2ViU29ja2V0ICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnVuaW5zdGFsbEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndlYlNvY2tldCA9IG5ldyBXZWJTb2NrZXQodGhpcy5jb25zdW1lci51cmwsIHByb3RvY29scyk7XG4gICAgICAgIHRoaXMuaW5zdGFsbEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgdGhpcy5tb25pdG9yLnN0YXJ0KCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgdmFyIGFsbG93UmVjb25uZWN0LCByZWYxO1xuICAgICAgYWxsb3dSZWNvbm5lY3QgPSAoYXJnICE9IG51bGwgPyBhcmcgOiB7XG4gICAgICAgIGFsbG93UmVjb25uZWN0OiB0cnVlXG4gICAgICB9KS5hbGxvd1JlY29ubmVjdDtcbiAgICAgIGlmICghYWxsb3dSZWNvbm5lY3QpIHtcbiAgICAgICAgdGhpcy5tb25pdG9yLnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgcmV0dXJuIChyZWYxID0gdGhpcy53ZWJTb2NrZXQpICE9IG51bGwgPyByZWYxLmNsb3NlKCkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnJlb3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVycm9yLCBlcnJvcjE7XG4gICAgICBBY3Rpb25DYWJsZS5sb2coXCJSZW9wZW5pbmcgV2ViU29ja2V0LCBjdXJyZW50IHN0YXRlIGlzIFwiICsgKHRoaXMuZ2V0U3RhdGUoKSkpO1xuICAgICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgICAgIHJldHVybiBBY3Rpb25DYWJsZS5sb2coXCJGYWlsZWQgdG8gcmVvcGVuIFdlYlNvY2tldFwiLCBlcnJvcik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgQWN0aW9uQ2FibGUubG9nKFwiUmVvcGVuaW5nIFdlYlNvY2tldCBpbiBcIiArIHRoaXMuY29uc3RydWN0b3IucmVvcGVuRGVsYXkgKyBcIm1zXCIpO1xuICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5vcGVuLCB0aGlzLmNvbnN0cnVjdG9yLnJlb3BlbkRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlbigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRQcm90b2NvbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlZjE7XG4gICAgICByZXR1cm4gKHJlZjEgPSB0aGlzLndlYlNvY2tldCkgIT0gbnVsbCA/IHJlZjEucHJvdG9jb2wgOiB2b2lkIDA7XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmlzT3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNTdGF0ZShcIm9wZW5cIik7XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmlzQWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1N0YXRlKFwib3BlblwiLCBcImNvbm5lY3RpbmdcIik7XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmlzUHJvdG9jb2xTdXBwb3J0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWYxO1xuICAgICAgcmV0dXJuIHJlZjEgPSB0aGlzLmdldFByb3RvY29sKCksIGluZGV4T2YuY2FsbChzdXBwb3J0ZWRQcm90b2NvbHMsIHJlZjEpID49IDA7XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmlzU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWYxLCBzdGF0ZXM7XG4gICAgICBzdGF0ZXMgPSAxIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMCkgOiBbXTtcbiAgICAgIHJldHVybiByZWYxID0gdGhpcy5nZXRTdGF0ZSgpLCBpbmRleE9mLmNhbGwoc3RhdGVzLCByZWYxKSA+PSAwO1xuICAgIH07XG5cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlZjEsIHN0YXRlLCB2YWx1ZTtcbiAgICAgIGZvciAoc3RhdGUgaW4gV2ViU29ja2V0KSB7XG4gICAgICAgIHZhbHVlID0gV2ViU29ja2V0W3N0YXRlXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAoKHJlZjEgPSB0aGlzLndlYlNvY2tldCkgIT0gbnVsbCA/IHJlZjEucmVhZHlTdGF0ZSA6IHZvaWQgMCkpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmluc3RhbGxFdmVudEhhbmRsZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZXZlbnROYW1lLCBoYW5kbGVyO1xuICAgICAgZm9yIChldmVudE5hbWUgaW4gdGhpcy5ldmVudHMpIHtcbiAgICAgICAgaGFuZGxlciA9IHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRbXCJvblwiICsgZXZlbnROYW1lXSA9IGhhbmRsZXI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnVuaW5zdGFsbEV2ZW50SGFuZGxlcnMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBldmVudE5hbWU7XG4gICAgICBmb3IgKGV2ZW50TmFtZSBpbiB0aGlzLmV2ZW50cykge1xuICAgICAgICB0aGlzLndlYlNvY2tldFtcIm9uXCIgKyBldmVudE5hbWVdID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICAgbWVzc2FnZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIGlkZW50aWZpZXIsIG1lc3NhZ2UsIHJlZjEsIHR5cGU7XG4gICAgICAgIGlmICghdGhpcy5pc1Byb3RvY29sU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVmMSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSksIGlkZW50aWZpZXIgPSByZWYxLmlkZW50aWZpZXIsIG1lc3NhZ2UgPSByZWYxLm1lc3NhZ2UsIHR5cGUgPSByZWYxLnR5cGU7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgbWVzc2FnZV90eXBlcy53ZWxjb21lOlxuICAgICAgICAgICAgdGhpcy5tb25pdG9yLnJlY29yZENvbm5lY3QoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmlwdGlvbnMucmVsb2FkKCk7XG4gICAgICAgICAgY2FzZSBtZXNzYWdlX3R5cGVzLnBpbmc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb25pdG9yLnJlY29yZFBpbmcoKTtcbiAgICAgICAgICBjYXNlIG1lc3NhZ2VfdHlwZXMuY29uZmlybWF0aW9uOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9ucy5ub3RpZnkoaWRlbnRpZmllciwgXCJjb25uZWN0ZWRcIik7XG4gICAgICAgICAgY2FzZSBtZXNzYWdlX3R5cGVzLnJlamVjdGlvbjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmlwdGlvbnMucmVqZWN0KGlkZW50aWZpZXIpO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLm5vdGlmeShpZGVudGlmaWVyLCBcInJlY2VpdmVkXCIsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIEFjdGlvbkNhYmxlLmxvZyhcIldlYlNvY2tldCBvbm9wZW4gZXZlbnQsIHVzaW5nICdcIiArICh0aGlzLmdldFByb3RvY29sKCkpICsgXCInIHN1YnByb3RvY29sXCIpO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoIXRoaXMuaXNQcm90b2NvbFN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgQWN0aW9uQ2FibGUubG9nKFwiUHJvdG9jb2wgaXMgdW5zdXBwb3J0ZWQuIFN0b3BwaW5nIG1vbml0b3IgYW5kIGRpc2Nvbm5lY3RpbmcuXCIpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NlKHtcbiAgICAgICAgICAgIGFsbG93UmVjb25uZWN0OiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2xvc2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIEFjdGlvbkNhYmxlLmxvZyhcIldlYlNvY2tldCBvbmNsb3NlIGV2ZW50XCIpO1xuICAgICAgICBpZiAodGhpcy5kaXNjb25uZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm1vbml0b3IucmVjb3JkRGlzY29ubmVjdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLm5vdGlmeUFsbChcImRpc2Nvbm5lY3RlZFwiLCB7XG4gICAgICAgICAgd2lsbEF0dGVtcHRSZWNvbm5lY3Q6IHRoaXMubW9uaXRvci5pc1J1bm5pbmcoKVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBY3Rpb25DYWJsZS5sb2coXCJXZWJTb2NrZXQgb25lcnJvciBldmVudFwiKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbm5lY3Rpb247XG5cbiAgfSkoKTtcblxufSkuY2FsbCh3aW5kb3cpO1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuICBBY3Rpb25DYWJsZS5TdWJzY3JpcHRpb25zID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbnMoY29uc3VtZXIpIHtcbiAgICAgIHRoaXMuY29uc3VtZXIgPSBjb25zdW1lcjtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgIH1cblxuICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKGNoYW5uZWxOYW1lLCBtaXhpbikge1xuICAgICAgdmFyIGNoYW5uZWwsIHBhcmFtcywgc3Vic2NyaXB0aW9uO1xuICAgICAgY2hhbm5lbCA9IGNoYW5uZWxOYW1lO1xuICAgICAgcGFyYW1zID0gdHlwZW9mIGNoYW5uZWwgPT09IFwib2JqZWN0XCIgPyBjaGFubmVsIDoge1xuICAgICAgICBjaGFubmVsOiBjaGFubmVsXG4gICAgICB9O1xuICAgICAgc3Vic2NyaXB0aW9uID0gbmV3IEFjdGlvbkNhYmxlLlN1YnNjcmlwdGlvbih0aGlzLmNvbnN1bWVyLCBwYXJhbXMsIG1peGluKTtcbiAgICAgIHJldHVybiB0aGlzLmFkZChzdWJzY3JpcHRpb24pO1xuICAgIH07XG5cbiAgICBTdWJzY3JpcHRpb25zLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICB0aGlzLmNvbnN1bWVyLmVuc3VyZUFjdGl2ZUNvbm5lY3Rpb24oKTtcbiAgICAgIHRoaXMubm90aWZ5KHN1YnNjcmlwdGlvbiwgXCJpbml0aWFsaXplZFwiKTtcbiAgICAgIHRoaXMuc2VuZENvbW1hbmQoc3Vic2NyaXB0aW9uLCBcInN1YnNjcmliZVwiKTtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcblxuICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5mb3JnZXQoc3Vic2NyaXB0aW9uKTtcbiAgICAgIGlmICghdGhpcy5maW5kQWxsKHN1YnNjcmlwdGlvbi5pZGVudGlmaWVyKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5zZW5kQ29tbWFuZChzdWJzY3JpcHRpb24sIFwidW5zdWJzY3JpYmVcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG5cbiAgICBTdWJzY3JpcHRpb25zLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihpZGVudGlmaWVyKSB7XG4gICAgICB2YXIgaSwgbGVuLCByZWYsIHJlc3VsdHMsIHN1YnNjcmlwdGlvbjtcbiAgICAgIHJlZiA9IHRoaXMuZmluZEFsbChpZGVudGlmaWVyKTtcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdWJzY3JpcHRpb24gPSByZWZbaV07XG4gICAgICAgIHRoaXMuZm9yZ2V0KHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHRoaXMubm90aWZ5KHN1YnNjcmlwdGlvbiwgXCJyZWplY3RlZFwiKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuXG4gICAgU3Vic2NyaXB0aW9ucy5wcm90b3R5cGUuZm9yZ2V0ID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKSB7XG4gICAgICB2YXIgcztcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZWYgPSB0aGlzLnN1YnNjcmlwdGlvbnM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IHJlZltpXTtcbiAgICAgICAgICBpZiAocyAhPT0gc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2gocyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkuY2FsbCh0aGlzKTtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcblxuICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLmZpbmRBbGwgPSBmdW5jdGlvbihpZGVudGlmaWVyKSB7XG4gICAgICB2YXIgaSwgbGVuLCByZWYsIHJlc3VsdHMsIHM7XG4gICAgICByZWYgPSB0aGlzLnN1YnNjcmlwdGlvbnM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcyA9IHJlZltpXTtcbiAgICAgICAgaWYgKHMuaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLnJlbG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzLCBzdWJzY3JpcHRpb247XG4gICAgICByZWYgPSB0aGlzLnN1YnNjcmlwdGlvbnM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uID0gcmVmW2ldO1xuICAgICAgICByZXN1bHRzLnB1c2godGhpcy5zZW5kQ29tbWFuZChzdWJzY3JpcHRpb24sIFwic3Vic2NyaWJlXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBTdWJzY3JpcHRpb25zLnByb3RvdHlwZS5ub3RpZnlBbGwgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzLCBjYWxsYmFja05hbWUsIGksIGxlbiwgcmVmLCByZXN1bHRzLCBzdWJzY3JpcHRpb247XG4gICAgICBjYWxsYmFja05hbWUgPSBhcmd1bWVudHNbMF0sIGFyZ3MgPSAyIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBbXTtcbiAgICAgIHJlZiA9IHRoaXMuc3Vic2NyaXB0aW9ucztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdWJzY3JpcHRpb24gPSByZWZbaV07XG4gICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLm5vdGlmeS5hcHBseSh0aGlzLCBbc3Vic2NyaXB0aW9uLCBjYWxsYmFja05hbWVdLmNvbmNhdChzbGljZS5jYWxsKGFyZ3MpKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIFN1YnNjcmlwdGlvbnMucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MsIGNhbGxiYWNrTmFtZSwgaSwgbGVuLCByZXN1bHRzLCBzdWJzY3JpcHRpb24sIHN1YnNjcmlwdGlvbnM7XG4gICAgICBzdWJzY3JpcHRpb24gPSBhcmd1bWVudHNbMF0sIGNhbGxiYWNrTmFtZSA9IGFyZ3VtZW50c1sxXSwgYXJncyA9IDMgPD0gYXJndW1lbnRzLmxlbmd0aCA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IFtdO1xuICAgICAgaWYgKHR5cGVvZiBzdWJzY3JpcHRpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9ucyA9IHRoaXMuZmluZEFsbChzdWJzY3JpcHRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3Vic2NyaXB0aW9ucyA9IFtzdWJzY3JpcHRpb25dO1xuICAgICAgfVxuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gc3Vic2NyaXB0aW9ucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb25zW2ldO1xuICAgICAgICByZXN1bHRzLnB1c2godHlwZW9mIHN1YnNjcmlwdGlvbltjYWxsYmFja05hbWVdID09PSBcImZ1bmN0aW9uXCIgPyBzdWJzY3JpcHRpb25bY2FsbGJhY2tOYW1lXS5hcHBseShzdWJzY3JpcHRpb24sIGFyZ3MpIDogdm9pZCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBTdWJzY3JpcHRpb25zLnByb3RvdHlwZS5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbiwgY29tbWFuZCkge1xuICAgICAgdmFyIGlkZW50aWZpZXI7XG4gICAgICBpZGVudGlmaWVyID0gc3Vic2NyaXB0aW9uLmlkZW50aWZpZXI7XG4gICAgICByZXR1cm4gdGhpcy5jb25zdW1lci5zZW5kKHtcbiAgICAgICAgY29tbWFuZDogY29tbWFuZCxcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllclxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBTdWJzY3JpcHRpb25zO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwod2luZG93KTtcbihmdW5jdGlvbigpIHtcbiAgQWN0aW9uQ2FibGUuU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciBleHRlbmQ7XG5cbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oY29uc3VtZXIsIHBhcmFtcywgbWl4aW4pIHtcbiAgICAgIHRoaXMuY29uc3VtZXIgPSBjb25zdW1lcjtcbiAgICAgIGlmIChwYXJhbXMgPT0gbnVsbCkge1xuICAgICAgICBwYXJhbXMgPSB7fTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaWRlbnRpZmllciA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG4gICAgICBleHRlbmQodGhpcywgbWl4aW4pO1xuICAgIH1cblxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucGVyZm9ybSA9IGZ1bmN0aW9uKGFjdGlvbiwgZGF0YSkge1xuICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICBkYXRhID0ge307XG4gICAgICB9XG4gICAgICBkYXRhLmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgIHJldHVybiB0aGlzLnNlbmQoZGF0YSk7XG4gICAgfTtcblxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVyLnNlbmQoe1xuICAgICAgICBjb21tYW5kOiBcIm1lc3NhZ2VcIixcbiAgICAgICAgaWRlbnRpZmllcjogdGhpcy5pZGVudGlmaWVyLFxuICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVyLnN1YnNjcmlwdGlvbnMucmVtb3ZlKHRoaXMpO1xuICAgIH07XG5cbiAgICBleHRlbmQgPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciBrZXksIHZhbHVlO1xuICAgICAgaWYgKHByb3BlcnRpZXMgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKGtleSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgdmFsdWUgPSBwcm9wZXJ0aWVzW2tleV07XG4gICAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHdpbmRvdyk7XG4oZnVuY3Rpb24oKSB7XG4gIEFjdGlvbkNhYmxlLkNvbnN1bWVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIENvbnN1bWVyKHVybCkge1xuICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgQWN0aW9uQ2FibGUuU3Vic2NyaXB0aW9ucyh0aGlzKTtcbiAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG5ldyBBY3Rpb25DYWJsZS5Db25uZWN0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbi5zZW5kKGRhdGEpO1xuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbi5vcGVuKCk7XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLmNsb3NlKHtcbiAgICAgICAgYWxsb3dSZWNvbm5lY3Q6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmVuc3VyZUFjdGl2ZUNvbm5lY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5jb25uZWN0aW9uLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbi5vcGVuKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHdpbmRvdyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL0FjdGlvbkNhYmxlLmpzIiwiaW1wb3J0IHtmbGFzaCwgcGFyc2VBbmRGbGFzaH0gZnJvbSAnLi9mbGFzaCc7XG5leHBvcnQgbGV0IGNhbGxiYWNrcyA9IHtcbiAgZGVsZXRlU3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgIGZ1bmN0aW9uIGRlc3RvcnlBcGlMaSgpIHtcbiAgICAgIHRoaXMudGFyZ2V0LmNsb3Nlc3QoJy5hcGktdWwnKS5yZW1vdmVDaGlsZCh0aGlzLnRhcmdldC5jbG9zZXN0KCcuYXBpLWxpJykpO1xuICAgIH1cbiAgICBwYXJzZUFuZEZsYXNoKGRhdGEsIGRlc3RvcnlBcGlMaS5iaW5kKHRoaXMpKTtcbiAgfSxcbiAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICB9LFxuICBlcnJvcjogZnVuY3Rpb24oZGF0YSkge1xuICAgIHBhcnNlQW5kRmxhc2goZGF0YSk7XG4gIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL2NvbW1vbi9jYWxsYmFja3MuanMiLCJpbXBvcnQge3JvclBhcmFtcyBhcyBSUHN9IGZyb20gJy4uL2NvbW1vbi9jc3JmJztcbi8qKlxuICogW2hhbmRsZU1ldGhvZCBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBsaW5rIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1t0eXBlXX0gICAgICBbZGVzY3JpcHRpb25dXG4gKiBIYW5kbGVzIFwiZGF0YS1tZXRob2RcIiBvbiBsaW5rcyBzdWNoIGFzOlxuICogPGEgaHJlZj1cIi91c2Vycy81XCIgZGF0YS1tZXRob2Q9XCJkZWxldGVcIiByZWw9XCJub2ZvbGxvd1wiIGRhdGEtY29uZmlybT1cIkFyZSB5b3Ugc3VyZT9cIj5EZWxldGU8L2E+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVNZXRob2QobGluaywgb2JqID0ge30pIHtcbiAgdmFyIGhyZWYgPSBsaW5rLmdldEF0dHJpYnV0ZSgnaHJlZicpLFxuICAgIG1ldGhvZCA9IGxpbmsuZGF0YXNldC5tZXRob2QsXG4gICAgdGFyZ2V0ID0gbGluay5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpLFxuICAgIGNzcmZUb2tlbiA9IFJQcy5jc3JmVG9rZW4oKSxcbiAgICBjc3JmUGFyYW0gPSBSUHMuY3NyZlBhcmFtKCk7XG4gIHZhciBwYXJhbXNPYmogPSB7XG4gICAgaHJlZjogaHJlZixcbiAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBjc3JmVG9rZW46IGNzcmZUb2tlbixcbiAgICBjc3JmUGFyYW06IGNzcmZQYXJhbVxuICB9O1xuICB2YXIgZm9ybUVsZSA9IGNyZWF0ZUZvcm0ocGFyYW1zT2JqLCBvYmopO1xuICBhcHBlbmRGb3JtVG9Eb20oZm9ybUVsZSk7XG4gIHN1Ym1pdEZvcm0oZm9ybUVsZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JtKHBhcmFtcywgb2JqKSB7XG4gIHZhciBmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICBmLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGYuc2V0QXR0cmlidXRlKCdtZXRob2QnLCdwb3N0Jyk7XG4gIGYuc2V0QXR0cmlidXRlKCdhY3Rpb24nLHBhcmFtcy5ocmVmKTtcbiAgaWYgKHBhcmFtcy50YXJnZXQpIHtcbiAgICBmLnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgcGFyYW1zLnRhcmdldCk7XG4gIH07XG5cbiAgdmFyIGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBpLnNldEF0dHJpYnV0ZSgndHlwZScsJ2hpZGRlbicpO1xuICBpLnNldEF0dHJpYnV0ZSgnbmFtZScsJ19tZXRob2QnKTtcbiAgaS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJyxwYXJhbXMubWV0aG9kKTtcblxuICB2YXIgcztcbiAgaWYgKHBhcmFtcy5jc3JmUGFyYW0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgcGFyYW1zLmNzcmZUb2tlbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAhUlBzLmlzQ3Jvc3NEb21haW4ocGFyYW1zLmhyZWYpKSB7XG4gICAgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCdoaWRkZW4nKTtcbiAgICBzLnNldEF0dHJpYnV0ZSgnbmFtZScsIHBhcmFtcy5jc3JmUGFyYW0pO1xuICAgIHMuc2V0QXR0cmlidXRlKCd2YWx1ZScscGFyYW1zLmNzcmZUb2tlbik7XG4gIH1cbiAgZi5hcHBlbmRDaGlsZChpKTtcblxuICAvLyBmb3IgKGxldCBrZXkgaW4gb2JqLmRhdGEpIHtcbiAgLy8gICBpZiAob2JqLmRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAvLyAgICAgbGV0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAvLyAgICAgdC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCdoaWRkZW4nKTtcbiAgLy8gICAgIHQuc2V0QXR0cmlidXRlKCduYW1lJywnJyArIG9iai5ucyArICdbJyArIGtleSArICddJyk7XG4gIC8vICAgICB0LnNldEF0dHJpYnV0ZSgndmFsdWUnLG9iai5kYXRhW2tleV0pO1xuICAvLyAgICAgZi5hcHBlbmRDaGlsZCh0KTtcbiAgLy8gICB9XG4gIC8vIH1cblxuICBpZiAocykge1xuICAgIGYuYXBwZW5kQ2hpbGQocyk7XG4gIH07XG4gIHJldHVybiBmO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRGb3JtVG9Eb20oZm9ybSkge1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xufVxuZnVuY3Rpb24gc3VibWl0Rm9ybShmb3JtKSB7XG4gIGZvcm0uc3VibWl0KCk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL2hhbmRsZU1ldGhvZC5qcyIsImV4cG9ydCBmdW5jdGlvbiBodG1sRXNjYXBlKHN0cikge1xuXHRzdHIgPSAnJyArIHN0cjsgLy8gZm9yIG51bWJlcnMgZXRjLlxuICByZXR1cm4gc3RyLnJlcGxhY2UoLyYvZywgJyZhbXA7JykgLy8gZmlyc3QhXG4gICAgICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgICAgICAgICAucmVwbGFjZSgvJy9nLCAnJiMzOTsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL2AvZywgJyYjOTY7Jyk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvY29tbW9uL2h0bWxFc2NhcGUuanMiLCJpbXBvcnQge3N0clRvRG9tLCBkZWJvdW5jZX0gZnJvbSAnLi91dGlsaXRpZXMnO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVNjcm9sbFN0cigpIHtcbiAgbGV0IHNjcm9sbFN0ciA9IGBcbiAgICA8ZGl2IGNsYXNzPVwib3B1aS1zY3JvbGwtY3RybC1zY3JvbGxcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm9wdWktc2Nyb2xsLWF4aXNcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm9wdWktc2Nyb2xsLXNsaWRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm9wdWktc2Nyb2xsLXMtdG9wXCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3B1aS1zY3JvbGwtcy1ib3R0b21cIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcHVpLXNjcm9sbC1zLWJsb2NrXCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGA7XG4gIHJldHVybiBzY3JvbGxTdHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxCYXJIKGIpIHtcbiAgcmV0dXJuIG5ldyBhKGIpO1xufVxuXG5mdW5jdGlvbiBhKHgpIHtcbiAgdmFyIHEgPSB0aGlzO1xuICB0aGlzLm9wdGlvbnMgPSB4O1xuICBsZXQgbmV3U2Nyb2xsU3RyID0gZ2VuZXJhdGVTY3JvbGxTdHIoKTtcbiAgbGV0IG5ld1Njcm9sbEVsZSA9IHN0clRvRG9tKG5ld1Njcm9sbFN0cik7XG4gIHZhciBZID0geC5zY3JvbGxiYXIgfHwgbmV3U2Nyb2xsRWxlXG4gICAgLCBqID0geC5jb250ZW50XG4gICAgLCBOID0geC5vdmVyZmxvd0VsZVxuICAgICwgaSA9IHguaW5pdFBvcyB8fCAwXG4gICAgLCBNID0geC5pbml0RG9tIHx8IG51bGxcbiAgICAsIFUgPSB4Lm1vdXNld2hlZWwgfHwgdHJ1ZVxuICAgICwgbCA9IHgubW91c2V3aGVlbGxvY2sgfHwgZmFsc2VcbiAgICAsIEggPSB4LndoZWVsZGVsdGEgfHwgMVxuICAgICwgeiA9IHguY3RybGJsb2NrIHx8IDBcbiAgICAsIEogPSB4LnN0ZXAgfHwgMC4xXG4gICAgLCByID0geC5sZW5ndGhcbiAgICAsIEkgPSB4LnNjYWxlIHx8IDBcbiAgICAsIEcgPSB4LnRoZW1lIHx8ICcnXG4gICAgLCBhZCA9IHgucmVmcmVzaCB8fCBmYWxzZTtcbiAgdmFyIFMgPSAwLCBUID0gMCwgaCA9IDAsIFYgPSBmdW5jdGlvbihhZykge1xuICAgIHZhciBhZiA9IHBhcnNlSW50KFMgLSBUKTtcbiAgICBpZiAoYWYgPiAwKSB7XG4gICAgICB2YXIgYWcgPSBhZy52YWx1ZTtcbiAgICAgIGouc2Nyb2xsTGVmdCA9IGFmICogYWc7XG4gICAgfVxuICB9XG4gICxcbiAgICB2ID0gbmV3U2Nyb2xsRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ29wdWktc2Nyb2xsLWF4aXMnKVswXSxcbiAgZyA9IG5ld1Njcm9sbEVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdvcHVpLXNjcm9sbC1zbGlkZXInKVswXSxcbiAgdSA9IG5ld1Njcm9sbEVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdvcHVpLXNjcm9sbC1zLXRvcCcpWzBdLFxuICBGID0gbmV3U2Nyb2xsRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ29wdWktc2Nyb2xsLXMtYm90dG9tJylbMF0sXG4gIGFlID0gbmV3U2Nyb2xsRWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ29wdWktc2Nyb2xsLXMtYmxvY2snKVswXSxcbiAgVyA9IDAsIFEgPSB6IHx8IDAsIGsgPSAwLCBSID0gUSwgbSA9IDAsIEMgPSAwLCBMID0gMCwgZCA9IDAsIHQgPSBudWxsICwgYiA9IG51bGwgLCBhYiwgUCwgRDtcbiAgdmFyIHkgPSBmdW5jdGlvbigpIHtcbiAgICBYID0gZmFsc2U7XG4gICAgYyA9IGZhbHNlO1xuICB9XG4gIDtcbiAgaWYgKCF4LnNjcm9sbGJhcikge1xuICAgIHgud3JhcHBlci5hcHBlbmRDaGlsZChuZXdTY3JvbGxFbGUpO1xuICB9XG4gIGouY2xhc3NMaXN0LmFkZCgnb3B1aS1zY3JvbGwtY3RybC1jb250ZW50Jyk7XG4gIFkuY2xhc3NMaXN0LmFkZCgnb3B1aS1zY3JvbGwtY3RybC1zY3JvbGwnKTtcbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbihhZykge1xuICAgIGlmICghYWQpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoRCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBUID0gai5vZmZzZXRXaWR0aDtcbiAgICAgIGggPSBZLm9mZnNldFdpZHRoO1xuICAgICAgUyA9IE4ub2Zmc2V0V2lkdGg7XG4gICAgfSBjYXRjaCAoYWgpIHt9XG4gICAgVyA9IGFnIHx8IHIgfHwgVCAtIDI7XG4gICAgWS5zdHlsZS53aWR0aCA9IFcgKyAncHgnO1xuICAgIHYuc3R5bGUud2lkdGggPSBXICsgJ3B4JztcbiAgICBpZiAoVyA+PSAwICYmIFMgPj0gMCkge1xuICAgICAgaWYgKFMgPD0gVyArIDIpIHtcbiAgICAgICAgWS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgWS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIH1cbiAgICAgIGlmIChJICE9IChTIC8gVykpIHtcbiAgICAgICAgSSA9IFMgLyBXO1xuICAgICAgICBvKEkpO1xuICAgICAgICBaKHEubWVtT2Zmc2V0WCk7XG4gICAgICB9XG4gICAgICB2YXIgYWYgPSAwO1xuICAgICAgaWYgKE0pIHtcbiAgICAgICAgaWYgKE0ub2Zmc2V0TGVmdCArIE0uc2Nyb2xsV2lkdGggPj0gUykge1xuICAgICAgICAgIGFmID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoTS5vZmZzZXRMZWZ0ICsgTS5zY3JvbGxXaWR0aCA8PSBUKSB7XG4gICAgICAgICAgICBhZiA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFmID0gTS5vZmZzZXRMZWZ0IC8gUztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coYWYpO1xuICAgICAgICBaKGFmKTtcbiAgICAgIH1cbiAgICAgIGlmIChpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGkpO1xuICAgICAgICBaKGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICA7XG4gIEQgPSBzZXRJbnRlcnZhbCh0aGlzLnJlbmRlciwgNTApO1xuICAvLyBZLmlubmVySFRNTCA9ICcnO1xuXG4gIGcub25EcmFnc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgO1xuICBnLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuICAgIGcuY2xhc3NMaXN0LmFkZCgnb3B1aS1zY3JvbGwtc2xpZGVyLWhvdmVyJyk7XG4gICAgWS5jbGFzc0xpc3QuYWRkKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC1ob3ZlcicpO1xuICB9KTtcbiAgZy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbigpIHtcbiAgICBnLmNsYXNzTGlzdC5hZGQoJ29wdWktc2Nyb2xsLXNsaWRlci10b3VjaCcpO1xuICAgIFkuY2xhc3NMaXN0LmFkZCgnb3B1aS1zY3JvbGwtY3RybC1zY3JvbGwtdG91Y2gnKTtcbiAgfSk7XG4gIGcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcbiAgICBnLmNsYXNzTGlzdC5yZW1vdmUoJ29wdWktc2Nyb2xsLXNsaWRlci1ob3ZlcicpO1xuICB9KTtcbiAgZy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZnVuY3Rpb24oKSB7XG4gICAgZy5jbGFzc0xpc3QucmVtb3ZlKCdvcHVpLXNjcm9sbC1zbGlkZXItdG91Y2gnKTtcbiAgfSk7XG4gIFkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG4gICAgWS5jbGFzc0xpc3QuYWRkKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC1ob3ZlcicpO1xuICB9KTtcbiAgWS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbigpIHtcbiAgICBZLmNsYXNzTGlzdC5hZGQoJ29wdWktc2Nyb2xsLWN0cmwtc2Nyb2xsLXRvdWNoJyk7XG4gIH0pO1xuICBZLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG4gICAgWS5jbGFzc0xpc3QucmVtb3ZlKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC1ob3ZlcicpO1xuICB9KTtcbiAgWS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZnVuY3Rpb24oKSB7XG4gICAgWS5jbGFzc0xpc3QucmVtb3ZlKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC10b3VjaCcpO1xuICB9KTtcbiAgdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHMpO1xuICBpZiAoVSAmJiAhdGhpcy5vbndoZWVsKSB7XG4gICAgaWYgKCFqLmNsYXNzTGlzdC5jb250YWlucygnb3B1aS1zY3JvbGwtb253aGVlbCcpKSB7XG4gICAgICBqLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTU1vdXNlU2Nyb2xsJywgcCk7XG4gICAgICBqLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCBwKTtcbiAgICAgIGouY2xhc3NMaXN0LmFkZCgnb3B1aS1zY3JvbGwtb253aGVlbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaikge1xuICAgIGouYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIWQpIHtcbiAgICAgICAgWihqLnNjcm9sbExlZnQgLyAoai5zY3JvbGxXaWR0aCAtIGoub2Zmc2V0V2lkdGgpLCAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24oYWYpIHtcbiAgICB0ID0gZG9jdW1lbnQub25zZWxlY3RzdGFydDtcbiAgICBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIDtcbiAgICBiID0gd2luZG93LnNldEludGVydmFsKG4sIDQwKTtcbiAgICBOLnN0eWxlWyctbW96LXVzZXItc2VsZWN0J10gPSAnbm9uZSc7XG4gICAgTi5zdHlsZVsnLXdlYmtpdC11c2VyLXNlbGVjdCddID0gJ25vbmUnO1xuXG4gICAgTCA9IGFmLmNsaWVudFggLSBnLm9mZnNldExlZnQ7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGFhKTtcbiAgICBkID0gMTtcbiAgICBhZi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG4gIGZ1bmN0aW9uIEsoYWcsIGFoLCBhZikge1xuICAgIGlmIChhZikge1xuICAgICAgYWcgPSBhZyA+IGFmID8gYWYgOiBhZztcbiAgICB9XG4gICAgcmV0dXJuIGFnID49IGFoID8gYWcgOiBhaDtcbiAgfVxuICBmdW5jdGlvbiBuKCkge1xuICAgIFYuY2FsbCh3aW5kb3csIHtcbiAgICAgIHZhbHVlOiBDLFxuICAgICAgc2NhbGU6IElcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBPKCkge1xuICAgIGlmIChhYikge1xuICAgICAgY2xlYXJJbnRlcnZhbChhYik7XG4gICAgfVxuICAgIEUoKTtcbiAgICBhYiA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKFgpIHtcbiAgICAgICAgRSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChhYik7XG4gICAgICB9XG4gICAgfSwgMTAwKTtcbiAgfVxuICBmdW5jdGlvbiBhYygpIHtcbiAgICBpZiAoUCkge1xuICAgICAgY2xlYXJJbnRlcnZhbChQKTtcbiAgICB9XG4gICAgQigpO1xuICAgIFAgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChjKSB7XG4gICAgICAgIEIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoUCk7XG4gICAgICB9XG4gICAgfSwgMTAwKTtcbiAgfVxuICBmdW5jdGlvbiBFKCkge1xuICAgIHZhciBhZiA9IEMgLSBKO1xuICAgIGFmID0gKGFmIDwgMCkgPyAwIDogYWY7XG4gICAgWihhZik7XG4gIH1cbiAgZnVuY3Rpb24gQigpIHtcbiAgICB2YXIgYWYgPSBDICsgSjtcbiAgICBhZiA9IChhZiA+IDEpID8gMSA6IGFmO1xuICAgIFooYWYpO1xuICB9XG4gIGZ1bmN0aW9uIGYoYWYpIHtcbiAgICBhZiA9IHdpbmRvdy5ldmVudCB8fCBhZjtcbiAgICB2YXIgYWcgPSBLKGFmLmNsaWVudFggLSBMLCBSLCBtKTtcbiAgICBDID0gKGFnIC0gUikgLyAobSAtIFIpO1xuICAgIGcuc3R5bGUubGVmdCA9IGFnICsgJ3B4JztcbiAgICBxLm1lbU9mZnNldFggPSBhZztcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gYWEoKSB7XG4gICAgWS5jbGFzc0xpc3QucmVtb3ZlKCdvcHVpLXNjcm9sbC1jdHJsLXNjcm9sbC1ob3ZlcicpO1xuICAgIFkuY2xhc3NMaXN0LnJlbW92ZSgnb3B1aS1zY3JvbGwtY3RybC1zY3JvbGwtdG91Y2gnKTtcbiAgICBnLmNsYXNzTGlzdC5yZW1vdmUoJ29wdWktc2Nyb2xsLXNsaWRlci1ob3ZlcicpO1xuICAgIGcuY2xhc3NMaXN0LnJlbW92ZSgnb3B1aS1zY3JvbGwtc2xpZGVyLXRvdWNoJyk7XG4gICAgTi5zdHlsZVsnLW1vei11c2VyLXNlbGVjdCddID0gJyc7XG4gICAgTi5zdHlsZVsnLXdlYmtpdC11c2VyLXNlbGVjdCddID0gJyc7XG4gICAgaWYgKGIpIHtcbiAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKGIpO1xuICAgIH1cbiAgICBpZiAodCkge1xuICAgICAgZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH1cbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgYWEpO1xuICAgIGcuY2xhc3NMaXN0LmFkZCgnb3B1aS1zY3JvbGwtc2xpZGVyJyk7XG4gICAgZCA9IDA7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIHMoYWYpIHtcbiAgICBaKChhZi5vZmZzZXRYIHx8IGFmLmxheWVyWCkgLyBXKTtcbiAgfVxuICBmdW5jdGlvbiBaKGFoLCBhZikge1xuICAgIGFoID0gYWggPCAwID8gMCA6IGFoO1xuICAgIGFoID0gYWggPiAxID8gMSA6IGFoO1xuICAgIEMgPSBhaDtcbiAgICB2YXIgYWcgPSAobSAtIFIpICogQyArIFI7XG4gICAgZy5zdHlsZS5sZWZ0ID0gYWcgKyAncHgnO1xuICAgIHEubWVtT2Zmc2V0WCA9IGFnO1xuICAgIGlmICghYWYpIHtcbiAgICAgIG4oKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcChhZikge1xuICAgIC8vIGFmLnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gYWYgPSBhZi5vcmlnaW5hbEV2ZW50O1xuICAgIC8vIGlmIChhZikge1xuICAgIC8vICAgdGhpcy5vbndoZWVsID0gMTtcbiAgICAvLyAgIHZhciBhaSA9ICgtYWYud2hlZWxEZWx0YSB8fCAoYWYuZGV0YWlsICYmIGFmLmRldGFpbCAqIDQwKSB8fCAwKSAvIEg7XG4gICAgLy8gICB2YXIgYWggPSBhaTtcbiAgICAvLyAgIHZhciBhZyA9IGFoID4gMCA/IGouc2Nyb2xsTGVmdCArIDIgOiBqLnNjcm9sbExlZnQgLSAyO1xuICAgIC8vICAgTi5zdHlsZS56b29tID0gJzEnO1xuICAgIC8vICAgaWYgKGFnID4gMCAmJiAoYWcgPCAoTi5vZmZzZXRXaWR0aCAtIGoub2Zmc2V0V2lkdGggKyA1KSB8fCAoTi5vZmZzZXRXaWR0aCAtIGouc2Nyb2xsV2lkdGggPCAwICYmIGFoIDwgMCkpKSB7XG4gICAgLy8gICAgIGouc2Nyb2xsTGVmdCArPSBhaDtcbiAgICAvLyAgICAgQyA9IGouc2Nyb2xsTGVmdCAvIChqLnNjcm9sbFdpZHRoIC0gai5vZmZzZXRXaWR0aCk7XG4gICAgLy8gICB9IGVsc2Uge1xuICAgIC8vICAgICBpZiAoIWwgfHwgWS5zdHlsZS5kaXNwbGF5ID09ICdub25lJykge1xuICAgIC8vICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0ICs9IGFoO1xuICAgIC8vICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCArPSBhaDtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgfVxuICBmdW5jdGlvbiBvKGFmKSB7XG4gICAgSSA9IChhZiA+IDEwKSA/IDEwIDogYWY7XG4gICAgaWYgKEkgPD0gMSkge1xuICAgICAgZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBnLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIHZhciBhZyA9IFcgLSAyICogUTtcbiAgICBrID0gcGFyc2VJbnQoYWcgLyBJKTtcbiAgICBrID0gKGsgPCAxNSkgPyAxNSA6IGs7XG4gICAgbSA9IFcgLSBRIC0gaztcbiAgICBnLnN0eWxlLndpZHRoID0gayArICdweCc7XG4gIH1cbiAgaWYgKEkgPiAxKSB7XG4gICAgbyhJKTtcbiAgfVxuICBsZXQgZGVib3VuY2VkV2luZG93UmVzaXplID0gZGVib3VuY2UocmVSZW5kZXIsIDIwMCwgZmFsc2UpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VkV2luZG93UmVzaXplKTtcbiAgZnVuY3Rpb24gcmVSZW5kZXIoKSB7XG4gICAgcS5yZW5kZXIoKTtcbiAgfVxuICB0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodCkge1xuICAgICAgZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH1cbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgYWEpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB5KTtcbiAgICBpZiAoYikge1xuICAgICAgY2xlYXJJbnRlcnZhbChiKTtcbiAgICB9XG4gICAgaWYgKGFiKSB7XG4gICAgICBjbGVhckludGVydmFsKGFiKTtcbiAgICB9XG4gICAgaWYgKFApIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoUCk7XG4gICAgfVxuICAgIGlmIChEKSB7XG4gICAgICBjbGVhckludGVydmFsKEQpO1xuICAgIH1cbiAgfTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vc2Nyb2xsLmpzIiwiLyoqXG4gKiBbc2VyaWFsaXplIGNvbnZlcnRzIHJlY3Vyc2l2ZSBvYmplY3RzXVxuICogQHBhcmFtICB7W3R5cGVdfSBvYmogICAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7W3R5cGVdfSBwcmVmaXggW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICogY29uc29sZS5sb2coc2VyaWFsaXplKHtmb286IFwiaGkgdGhlcmVcIiwgYmFyOiB7IGJsYWg6IDEyMywgcXV1eDogWzEsIDIsIDNdIH19KSk7XG4gKiBmb289aGklMjB0aGVyZSZiYXIlNUJibGFoJTVEPTEyMyZiYXIlNUJxdXV4JTVEJTVCMCU1RD0xJmJhciU1QnF1dXglNUQlNUIxJTVEPTImYmFyJTVCcXV1eCU1RCU1QjIlNUQ9M1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplKG9iaiwgcHJlZml4KSB7XG4gIHZhciBzdHIgPSBbXTtcbiAgZm9yICh2YXIgcCBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICB2YXIgayA9IHByZWZpeCA/IHByZWZpeCArICdbJyArIHAgKyAnXScgOiBwLCB2ID0gb2JqW3BdO1xuICAgICAgc3RyLnB1c2godHlwZW9mIHYgPT0gJ29iamVjdCcgP1xuICAgICAgICBzZXJpYWxpemUodiwgaykgOlxuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoaykgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodikpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyLmpvaW4oJyYnKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vc2VyaWFsaXplLmpzIiwiaW1wb3J0IHtwb3B1cH0gZnJvbSAnLi4vY29tbW9uL3BvcHVwJztcbmV4cG9ydCBmdW5jdGlvbiBzbGlkZShldiwgcGFyYW1zLCBjYWxsYmFjaykge1xuICBsZXQgc2xpZGVFbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc2xpZGVFbGUuY2xhc3NMaXN0LmFkZCgnc2xpZGUtbGF5ZXInKTtcbiAgc2xpZGVFbGUuaW5uZXJIVE1MID0gZ2VuZXJhdGVTbGlkZVRwbChwYXJhbXMuY29udGVudCk7XG4gIHBvc2l0aW9uU2xpZGVFbGUoc2xpZGVFbGUsIGV2KTtcbiAgYmluZFNsaWRlRXZlbnRzKHNsaWRlRWxlLCBldiwgcGFyYW1zLCBjYWxsYmFjayk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2xpZGVFbGUpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVNsaWRlVHBsKGNvbnRlbnQpIHtcbiAgbGV0IHRwbCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwic2xpZGUtc2hhZG93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtY29udGVudFwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwic2xpZGUtdGV4dFwiPiR7Y29udGVudH08L2Rpdj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cInNsaWRlLWJ0bnNcIj5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cInNsaWRlLWJ0biBzbGlkZS1jYW5jZWwtYnRuXCI+Y2FuY2VsPC9zcGFuPlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwic2xpZGUtYnRuIHNsaWRlLWNvbmZpcm0tYnRuXCI+Y29uZmlybTwvc3Bhbj5cblx0XHRcdFx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblx0YDtcbiAgcmV0dXJuIHRwbDtcbn1cblxuZnVuY3Rpb24gYmluZFNsaWRlRXZlbnRzKGVsZSwgZXYsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgZWxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NsaWRlLWNhbmNlbC1idG4nKVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlU2xpZGUpO1xuICBlbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2xpZGUtc2hhZG93JylbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGlja1NoYWRvdyk7XG4gIGVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzbGlkZS1jb25maXJtLWJ0bicpWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY29uZmlybS5iaW5kKHRoaXMsIGV2LCBlbGUsIHBhcmFtcywgY2FsbGJhY2spKTtcbn1cblxuZnVuY3Rpb24gY29uZmlybShldiwgZWxlLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlKTtcbn1cblxuZnVuY3Rpb24gcG9zaXRpb25TbGlkZUVsZShlbGUsIGNvb3JkaW5hdGVzKSB7XG4gIC8vIGVsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzbGlkZS1jb250ZW50JylbMF0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKCcgKyBjb29yZGluYXRlcy5jbGllbnRYICsgJ3B4LCAnICsgY29vcmRpbmF0ZXMuY2xpZW50WSArICdweCwgMCknO1xufVxuXG5mdW5jdGlvbiBjbGlja1NoYWRvdyhldikge1xuICBpZiAoZXYudGFyZ2V0ICE9PSBldi5jdXJyZW50VGFyZ2V0KSByZXR1cm47XG4gIHBvcHVwKGV2LCB1bmRlZmluZWQsIGNsb3NlU2xpZGUuYmluZCh0aGlzLCBldikpO1xufVxuXG5mdW5jdGlvbiBjbG9zZVNsaWRlKGV2KSB7XG4gIGxldCBwb3BMYXllciA9IGV2LnRhcmdldC5jbG9zZXN0KCcuc2xpZGUtbGF5ZXInKTtcbiAgaWYgKHBvcExheWVyKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChwb3BMYXllcik7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vc2xpZGUuanMiLCJpbXBvcnQge2h0bWxFc2NhcGV9IGZyb20gJy4vaHRtbEVzY2FwZSc7XG5leHBvcnQgZnVuY3Rpb24gaHRtbChsaXRlcmFsU2VjdGlvbnMsIC4uLnN1YnN0cykge1xuICAvLyBVc2UgcmF3IGxpdGVyYWwgc2VjdGlvbnM6IHdlIGRvbuKAmXQgd2FudFxuICAvLyBiYWNrc2xhc2hlcyAoXFxuIGV0Yy4pIHRvIGJlIGludGVycHJldGVkXG4gIGxldCByYXcgPSBsaXRlcmFsU2VjdGlvbnMucmF3O1xuXG4gIGxldCByZXN1bHQgPSAnJztcblxuICBzdWJzdHMuZm9yRWFjaCgoc3Vic3QsIGkpID0+IHtcbiAgICAvLyBSZXRyaWV2ZSB0aGUgbGl0ZXJhbCBzZWN0aW9uIHByZWNlZGluZ1xuICAgIC8vIHRoZSBjdXJyZW50IHN1YnN0aXR1dGlvblxuICAgIGxldCBsaXQgPSByYXdbaV07XG5cbiAgICAvLyBJbiB0aGUgZXhhbXBsZSwgbWFwKCkgcmV0dXJucyBhbiBhcnJheTpcbiAgICAvLyBJZiBzdWJzdGl0dXRpb24gaXMgYW4gYXJyYXkgKGFuZCBub3QgYSBzdHJpbmcpLFxuICAgIC8vIHdlIHR1cm4gaXQgaW50byBhIHN0cmluZ1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0KSkge1xuICAgICAgc3Vic3QgPSBzdWJzdC5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgc3Vic3RpdHV0aW9uIGlzIHByZWNlZGVkIGJ5IGEgZG9sbGFyIHNpZ24sXG4gICAgLy8gd2UgZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBpdFxuICAgIGlmIChsaXQuZW5kc1dpdGgoJyQnKSkge1xuICAgICAgc3Vic3QgPSBodG1sRXNjYXBlKHN1YnN0KTtcbiAgICAgIGxpdCA9IGxpdC5zbGljZSgwLCAtMSk7XG4gICAgfVxuICAgIHJlc3VsdCArPSBsaXQ7XG4gICAgcmVzdWx0ICs9IHN1YnN0O1xuICB9KTtcbiAgLy8gVGFrZSBjYXJlIG9mIGxhc3QgbGl0ZXJhbCBzZWN0aW9uXG4gIC8vIChOZXZlciBmYWlscywgYmVjYXVzZSBhbiBlbXB0eSB0ZW1wbGF0ZSBzdHJpbmdcbiAgLy8gcHJvZHVjZXMgb25lIGxpdGVyYWwgc2VjdGlvbiwgYW4gZW1wdHkgc3RyaW5nKVxuICByZXN1bHQgKz0gcmF3W3Jhdy5sZW5ndGggLSAxXTsgLy8gKEEpXG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vdGVtcGxhdGUuanMiLCIvLyBsZWZ0OiAzNywgdXA6IDM4LCByaWdodDogMzksIGRvd246IDQwLFxuLy8gc3BhY2ViYXI6IDMyLCBwYWdldXA6IDMzLCBwYWdlZG93bjogMzQsIGVuZDogMzUsIGhvbWU6IDM2XG52YXIga2V5cyA9IHszNzogMSwgMzg6IDEsIDM5OiAxLCA0MDogMX07XG5cbmZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGUpIHtcbiAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuICBpZiAoZS5wcmV2ZW50RGVmYXVsdClcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdEZvclNjcm9sbEtleXMoZSkge1xuICBpZiAoa2V5c1tlLmtleUNvZGVdKSB7XG4gICAgcHJldmVudERlZmF1bHQoZSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlU2Nyb2xsKCkge1xuICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIC8vIG9sZGVyIEZGXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCBwcmV2ZW50RGVmYXVsdCwgZmFsc2UpO1xuICB3aW5kb3cub253aGVlbCA9IHByZXZlbnREZWZhdWx0OyAvLyBtb2Rlcm4gc3RhbmRhcmRcbiAgd2luZG93Lm9ubW91c2V3aGVlbCA9IGRvY3VtZW50Lm9ubW91c2V3aGVlbCA9IHByZXZlbnREZWZhdWx0OyAvLyBvbGRlciBicm93c2VycywgSUVcbiAgd2luZG93Lm9udG91Y2htb3ZlICA9IHByZXZlbnREZWZhdWx0OyAvLyBtb2JpbGVcbiAgZG9jdW1lbnQub25rZXlkb3duICA9IHByZXZlbnREZWZhdWx0Rm9yU2Nyb2xsS2V5cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZVNjcm9sbCgpIHtcbiAgaWYgKHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTU1vdXNlU2Nyb2xsJywgcHJldmVudERlZmF1bHQsIGZhbHNlKTtcbiAgd2luZG93Lm9ubW91c2V3aGVlbCA9IGRvY3VtZW50Lm9ubW91c2V3aGVlbCA9IG51bGw7XG4gIHdpbmRvdy5vbndoZWVsID0gbnVsbDtcbiAgd2luZG93Lm9udG91Y2htb3ZlID0gbnVsbDtcbiAgZG9jdW1lbnQub25rZXlkb3duID0gbnVsbDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9jb21tb24vdG9nZ2xlU2Nyb2xsLmpzIiwiaW1wb3J0IHskaHR0cH0gZnJvbSAnLi4vY29tbW9uL2FqYXgnO1xuaW1wb3J0IHtyb290QVBJfSBmcm9tICcuLi9nbG9iYWwvY29uc3RhbnQnO1xuaW1wb3J0IHtodG1sfSBmcm9tICcuLi9jb21tb24vdGVtcGxhdGUnO1xuaW1wb3J0IHtwb3B1cH0gZnJvbSAnLi4vY29tbW9uL3BvcHVwJztcbmltcG9ydCB7c2xpZGV9IGZyb20gJy4uL2NvbW1vbi9zbGlkZSc7XG5pbXBvcnQge2luc2VydEFmdGVyLCBzdHJUb0RvbSwgZGVib3VuY2V9IGZyb20gJy4uL2NvbW1vbi91dGlsaXRpZXMnO1xuaW1wb3J0IHtmbGFzaCwgcGFyc2VBbmRGbGFzaH0gZnJvbSAnLi4vY29tbW9uL2ZsYXNoJztcbmltcG9ydCB7QXBpRG9tfSBmcm9tICcuLi9hcGktdHJlZS90cmVlRG9tJztcbmltcG9ydCB7dHdvV2F5RGF0YUJpbmRpbmd9IGZyb20gJy4uL2NvbW1vbi90d29XYXlEYXRhQmluZGluZyc7XG5cbmxldCBwYXlsb2FkID0ge307XG5sZXQgYXBpc0FyciA9IFtdO1xuXG52YXIgY2FsbGJhY2sgPSB7XG4gIGdldEFwaVN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBhZGRBcGlUcmVlKEpTT04ucGFyc2UoZGF0YSksIHRoaXMsIGZhbHNlKTtcbiAgfSxcbiAgZ2V0QWxsQXBpc1N1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBsZXQgZGF0YUJhayA9IGRhdGE7XG4gICAgbGV0IEpTT05CYWsgPSBKU09OLnBhcnNlKGRhdGFCYWspO1xuICAgIGlmIChKU09OQmFrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbmV3QXBpQnRuKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlbmRlckFsbEFwaXMoZGF0YSk7XG4gICAgYmluZGV2ZW50cygpO1xuICAgIGxpc3RlbkFwaVF1ZXJ5KCk7XG4gIH0sXG4gIHBhdGNoU3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgIHBhcnNlQW5kRmxhc2goZGF0YSk7XG4gIH0sXG4gIHBvc3RTdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgcGFyc2VBbmRGbGFzaChkYXRhKTtcbiAgfSxcbiAgZGVsZXRlU3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgIGZ1bmN0aW9uIGRlc3RvcnlBcGlMaSgpIHtcbiAgICAgIHRoaXMudGFyZ2V0LmNsb3Nlc3QoJy5hcGktdWwnKS5yZW1vdmVDaGlsZCh0aGlzLnRhcmdldC5jbG9zZXN0KCcuYXBpLWxpJykpO1xuICAgIH1cbiAgICBwYXJzZUFuZEZsYXNoKGRhdGEsIGRlc3RvcnlBcGlMaS5iaW5kKHRoaXMpKTtcbiAgfSxcbiAgYXBpUXVlcnlTdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgbGV0IHNlYXJjaExpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktc2VhcmNoLXJlc3VsdCcpWzBdO1xuICAgIGxldCBkYXRhT2JqID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICBsZXQgY29udGVudFN0ciA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwLCBMZW4gPSBkYXRhT2JqLmxlbmd0aDsgaSA8IExlbjsgaSsrKSB7XG4gICAgICBjb250ZW50U3RyICs9IGA8ZGl2IGNsYXNzPSdwZXItc2VhcmNoLXJlc3VsdCc+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC11cmlcIj4ke2RhdGFPYmpbaV0udXJpfTwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJwZXItcmVzdWx0LWNvbHVtbiBwZXItcmVzdWx0LXNlY3Rpb25cIj4ke2RhdGFPYmpbaV0uc2VjdGlvbn08L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1tZXRob2RcIj4ke2RhdGFPYmpbaV0ubWV0aG9kfTwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJwZXItcmVzdWx0LWNvbHVtbiBwZXItcmVzdWx0LWRlc2NyaXB0aW9uXCI+JHtkYXRhT2JqW2ldLmRlc2NyaXB0aW9ufTwvc3Bhbj5cbiAgICAgIDwvZGl2PmA7XG4gICAgfVxuICAgIHNlYXJjaExpc3QuaW5uZXJIVE1MID0gY29udGVudFN0cjtcbiAgICBkYXRhT2JqLmxlbmd0aCA+IDAgPyBzZWFyY2hMaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKSA6IHNlYXJjaExpc3QuY2xhc3NMaXN0LmFkZCgnaGlkZScpOyAgICBcbiAgfSxcbiAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICB9LFxuICBlcnJvcjogZnVuY3Rpb24oZGF0YSkge1xuICAgIGlmICghZGF0YS5kYXRhKSB7XG4gICAgICBuZXdBcGlCdG4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcGFyc2VBbmRGbGFzaChkYXRhKTtcbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBpbml0WGhyKCkge1xuICBnZXRBbGxBcGlzKCk7XG59XG5cbmxldCBkZWJvdW5jZWRBcGlRdWVyeUlucHV0ID0gZGVib3VuY2UoYXBpUXVlcnksIDEwMCwgZmFsc2UpO1xuZnVuY3Rpb24gbGlzdGVuQXBpUXVlcnkoKSB7XG4gIGxldCBhcGlRdWVyeUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXF1ZXJ5JylbMF07XG4gIGxldCBpbldyYXBwZXIgPSBmYWxzZTtcbiAgYXBpUXVlcnlJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGRlYm91bmNlZEFwaVF1ZXJ5SW5wdXQpO1xuICBhcGlRdWVyeUlucHV0LnBhcmVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uKGV2KSB7XG4gICAgaWYgKCFjaGVja0lmRm9jdXMuYXBwbHkoYXBpUXVlcnlJbnB1dCwgZXYpKSB7XG4gICAgICBjbGVhclNlYXJjaFJlc3VsdCgpO1xuICAgIH07XG4gICAgaW5XcmFwcGVyID0gZmFsc2U7XG4gIH0pO1xuICBhcGlRdWVyeUlucHV0LnBhcmVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgaW5XcmFwcGVyID0gdHJ1ZTtcbiAgfSk7XG4gIGFwaVF1ZXJ5SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgaWYgKCFpbldyYXBwZXIpIGNsZWFyU2VhcmNoUmVzdWx0KCk7XG4gIH0pO1xuICBhcGlRdWVyeUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgYXBpUXVlcnkpO1xufVxuZnVuY3Rpb24gY2hlY2tJZkZvY3VzKGV2KSB7XG4gIHJldHVybiB0aGlzID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xufVxuZnVuY3Rpb24gYXBpUXVlcnkoZXYpIHtcbiAgaWYgKGV2LnRhcmdldC52YWx1ZS5sZW5ndGggPD0gMCkge1xuICAgIGNsZWFyU2VhcmNoUmVzdWx0KCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHBheWxvYWQgPSB7cTogZXYudGFyZ2V0LnZhbHVlfTtcbiAgJGh0dHAod2luZG93LmxvY2F0aW9uLm9yaWdpbiArICcvaW5zdGFudHNlYXJjaCcpXG4gIC5nZXQocGF5bG9hZClcbiAgLnRoZW4oY2FsbGJhY2suYXBpUXVlcnlTdWNjZXNzLmJpbmQoZXYpKVxuICAuY2F0Y2goY2FsbGJhY2suZXJyb3IpO1xufVxuZnVuY3Rpb24gY2xlYXJTZWFyY2hSZXN1bHQoKSB7XG4gIGxldCBhcGlTZWFyY2hSZXN1bHRFbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktc2VhcmNoLXJlc3VsdCcpWzBdO1xuICBhcGlTZWFyY2hSZXN1bHRFbGUuaW5uZXJIVE1MID0gJyc7XG4gIGFwaVNlYXJjaFJlc3VsdEVsZS5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG59XG5mdW5jdGlvbiB0b2dnbGVGb2xkTGkoY29udGV4dCwgZXYpIHtcbiAgaWYgKCFldikge1xuICAgIGNvbnRleHQuY2xhc3NMaXN0LnRvZ2dsZSgndW5mb2xkJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZXYudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYXBpLWxpLXdpa2knKSkge1xuICAgIGNvbnRleHQuY2xhc3NMaXN0LnRvZ2dsZSgndW5mb2xkJyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGJpbmRFdmVudFRvQXBpTGlEZXNjcmlwdGlvbihldikge1xuICB0b2dnbGVGb2xkTGkodGhpcywgZXYpO1xuICBpZiAodGhpcy5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm47XG4gIH07XG4gICRodHRwKHJvb3RBUEkgKyAnLycgKyB0aGlzLnBhcmVudE5vZGUuZGF0YXNldC5hcGlJZClcbiAgLmdldChwYXlsb2FkKVxuICAudGhlbihjYWxsYmFjay5nZXRBcGlTdWNjZXNzLmJpbmQodGhpcy5wYXJlbnROb2RlKSlcbiAgLmNhdGNoKGNhbGxiYWNrLmVycm9yKTtcbn1cbmZ1bmN0aW9uIGJpbmRldmVudHMoKSB7XG4gIGxldCBhcGlMaXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcGktbGktc3VtbWFyeScpO1xuICBbXS5zbGljZS5jYWxsKGFwaUxpcykuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgYmluZEV2ZW50VG9BcGlMaURlc2NyaXB0aW9uLmNhbGwodGhpcywgZXYpO1xuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGFkZEFwaVRyZWUoZGF0YSA9IHt9LCBjb250YWluZXJOb2RlLCBpc05ld0FwaSkge1xuICBsZXQgbmV3QXBpID0gbmV3IEFwaURvbShkYXRhLCBjb250YWluZXJOb2RlLCBpc05ld0FwaSk7XG4gIGFwaXNBcnIucHVzaChuZXdBcGkpO1xufVxuXG5sZXQgZGVib3VuY2VkTmV3QXBpQnRuID0gZGVib3VuY2UocHJvY2Vzc05ld0FwaUNsaWNrLCA1MDAsIHRydWUpO1xubGV0IGRlYm91bmNlZEVudkJ0biA9IGRlYm91bmNlKHByb2Nlc3NPcGVuRW52U2V0dGluZ3MsIDUwMCwgdHJ1ZSk7XG5mdW5jdGlvbiBwcm9jZXNzT3BlbkVudlNldHRpbmdzKGV2LCBlbCkge1xuICBsZXQgcGFyYW1zID0ge1xuICAgIGNvbnRlbnQ6IHNsaWRlQ29udGVudCgpXG4gIH07XG4gIHNsaWRlKGV2LCBwYXJhbXMpO1xufVxuZnVuY3Rpb24gc2xpZGVDb250ZW50KCkge1xuICBsZXQgdHBsU3RyID0gYFxuICAgIDx1bD5cbiAgICAgIDxsaT5cbiAgICAgICAgPGxhYmVsPmhvc3Q6PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiYy1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgPGxhYmVsPmFjY291bnQ6PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiYy1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgPGxhYmVsPmxhYmVsOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCBjbGFzcz1cImMtaW5wdXRcIiB0eXBlPVwidGV4dFwiIC8+XG4gICAgICAgIDxpbnB1dCBjbGFzcz1cIlwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNoZWNrIGF2YWlsYWJpbGl0eVwiIC8+XG4gICAgICA8L2xpPlxuICAgIDwvdWw+XG4gIGA7XG4gIHJldHVybiB0cGxTdHI7XG59XG5mdW5jdGlvbiBwcm9jZXNzTmV3QXBpQ2xpY2soKSB7XG4gIGxldCBhcGlVbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS11bCcpWzBdO1xuICBpZiAoIWFwaVVsKSB7XG4gICAgY3JlYXRlQXBpVWwoKTtcbiAgICBhcGlVbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS11bCcpWzBdO1xuICB9XG4gIGxldCBiYXNlQXBpTGkgPSBzdHJUb0RvbShuZXdBcGlMaVRwbCgpKTtcbiAgYXBpVWwuaW5zZXJ0QmVmb3JlKGJhc2VBcGlMaSwgYXBpVWwuZmlyc3RDaGlsZCk7XG4gIGFkZEFwaVRyZWUoe30sIGJhc2VBcGlMaSwgdHJ1ZSk7XG4gIHRvZ2dsZUZvbGRMaShiYXNlQXBpTGkuY2hpbGRyZW5bMF0pO1xuICBiYXNlQXBpTGkuY2hpbGRyZW5bMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgYmluZEV2ZW50VG9BcGlMaURlc2NyaXB0aW9uLmNhbGwodGhpcywgZXYpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBcGlVbCgpIHtcbiAgbGV0IGFwaUxpc3RFbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgbGV0IGFwaVVsRWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgbGV0IG5ld0FwaURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS1hZGQtcXVlcnknKVswXTtcbiAgYXBpTGlzdEVsZS5jbGFzc0xpc3QuYWRkKCdhcGktdWwtd3JhcHBlcicpO1xuICBhcGlVbEVsZS5jbGFzc0xpc3QuYWRkKCdhcGktdWwnKTtcbiAgYXBpTGlzdEVsZS5hcHBlbmRDaGlsZChhcGlVbEVsZSk7XG4gIGluc2VydEFmdGVyKGFwaUxpc3RFbGUsIG5ld0FwaURpdik7XG59XG5mdW5jdGlvbiBuZXdBcGlCdG4oKSB7XG4gIGxldCBuZXdBcGlEaXY7XG4gIGxldCBoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZGVyJylbMF07XG4gIGxldCBuZXdBcGlTdHIgPSBgXG4gICAgPGRpdiBjbGFzcz1cImFwaS1hZGQtcXVlcnlcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiYWRkLWFwaS1idG5cIj5uZXcgQVBJPC9zcGFuPlxuICAgICAgPGRpdiBjbGFzcz1cImFwaS1zZWFyY2gtd3JhcHBlclwiPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJhcGktcXVlcnlcIiB0eXBlPVwic2VhcmNoXCIgcGxhY2Vob2xkZXI9XCJzZWFyY2hcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFwaS1zZWFyY2gtcmVzdWx0IGhpZGVcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGEgY2xhc3M9XCJjLWhpZGUgaWNvbi10ZXh0LWxpbmsgYy1mbG9hdC1yaWdodCBkZXYtZW52LXNldHRpbmdzXCIgaHJlZj1cImphdmFzY3JpcHQ6O1wiPjxzcGFuIGNsYXNzPVwiaWNvbi10ZXh0LWljb25cIj48c3ZnIGNsYXNzPVwiaWNvbiBpY29uLXNldHRpbmdzIGljb24tZml0XCI+PHVzZSB4bGluazpocmVmPVwiI2ljb24tc2V0dGluZ3NcIj48L3VzZT48L3N2Zz48L3NwYW4+PHNwYW4gY2xhc3M9XCJpY29uLXRleHQtdGV4dFwiPueOr+Wig+WQjOatpeaVsOaNrumFjee9rjwvc3Bhbj48L2E+XG4gICAgPC9kaXY+XG4gIGA7XG4gIG5ld0FwaURpdiA9IHN0clRvRG9tKG5ld0FwaVN0cik7XG4gIG5ld0FwaURpdi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhZGQtYXBpLWJ0bicpWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGVib3VuY2VkTmV3QXBpQnRuKTtcbiAgbmV3QXBpRGl2LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Rldi1lbnYtc2V0dGluZ3MnKVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRlYm91bmNlZEVudkJ0bik7XG4gIGluc2VydEFmdGVyKG5ld0FwaURpdiwgaGVhZGVyKTtcbiAgcmV0dXJuIG5ld0FwaURpdjtcbn1cblxuZnVuY3Rpb24gbmV3QXBpTGlUcGwoZGF0YSA9IHt9KSB7XG4gIHZhciB0cGwgPSBgXG4gICAgPGxpIGNsYXNzPVwiYXBpLWxpXCIgZGF0YS1hcGktaWQ9XCIke2RhdGEuaWQgfHwgbnVsbH1cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJhcGktbGktc3VtbWFyeVwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImFwaS1saS1jb2xsYXBzZVwiPjxzdmcgY2xhc3M9XCJpY29uIGljb24tZG93blwiPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uLWRvd25cIj48L3VzZT48L3N2Zz48L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiYXBpLWxpLXVyaVwiIGJpbmQ9XCJ1cmlcIj4ke2RhdGEudXJpIHx8ICcoTm8gdXJpKSd9PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImFwaS1saS1kZXNcIiBiaW5kPVwiZGVzY3JpcHRpb25cIj4ke2RhdGEuZGVzY3JpcHRpb24gPyBkYXRhLmRlc2NyaXB0aW9uIDogJyhObyBkZXNjcmlwdGlvbiknfTwvc3Bhbj5cbiAgICAgICAgPGEgaHJlZj1cIiR7ZGF0YS53aWtpTGlua31cIiBjbGFzcz1cImFwaS1saS13aWtpXCIgYmluZC1hdHRyLWhyZWY9XCJ3aWtpTGlua1wiIGJpbmQ9XCJ3aWtpTGlua1wiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGF0YS53aWtpTGluayA/IGRhdGEud2lraUxpbmsgOiAnKE5vIHdpa2lMaW5rKSd9PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9saT5cbiAgYDtcbiAgcmV0dXJuIHRwbDtcbn1cbmZ1bmN0aW9uIHJlbmRlckFsbEFwaXMoZGF0YSkge1xuICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgY29uc3QgdG1wbCA9IGRhdGEgPT4gaHRtbGBcbiAgICAgIDx1bCBjbGFzcz1cImFwaS11bFwiPlxuICAgICAgJHtkYXRhLm1hcChpdGVtID0+IGh0bWxgXG4gICAgICAgICR7bmV3QXBpTGlUcGwoaXRlbSl9XG4gICAgICBgKX1cbiAgICAgIDwvdWw+XG4gIGA7XG4gIGxldCBhcGlMaXN0RWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGFwaUxpc3RFbGUuY2xhc3NMaXN0LmFkZCgnYXBpLXVsLXdyYXBwZXInKTtcbiAgYXBpTGlzdEVsZS5pbm5lckhUTUwgPSB0bXBsKGRhdGEpO1xuICBpbnNlcnRBZnRlcihhcGlMaXN0RWxlLCBuZXdBcGlCdG4oKSk7XG59XG5cbmZ1bmN0aW9uIGdldEFsbEFwaXMoKSB7XG4gICRodHRwKHJvb3RBUEkpXG4gIC5nZXQocGF5bG9hZClcbiAgLnRoZW4oY2FsbGJhY2suZ2V0QWxsQXBpc1N1Y2Nlc3MpXG4gIC5jYXRjaChjYWxsYmFjay5lcnJvcik7XG59XG5cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL21vZHVsZXMvYXBpT3BlcmF0aW9uLmpzIiwiaW1wb3J0IHtoYW5kbGVNZXRob2R9IGZyb20gJy4uL2NvbW1vbi9oYW5kbGVNZXRob2QnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxpbmtzKCkge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHByb2Nlc3NEYXRhTGluaywgZmFsc2UpO1xufVxuZnVuY3Rpb24gcHJvY2Vzc0RhdGFMaW5rKGUpIHtcbiAgdmFyIGUgPSB3aW5kb3cuZSB8fCBlO1xuXG4gIGlmIChlLnRhcmdldC50YWdOYW1lICE9PSAnQScpXG4gICAgICByZXR1cm47XG5cbiAgLy8gRG8gc29tZXRoaW5nXG4gIGlmIChlLnRhcmdldC5kYXRhc2V0Lm1ldGhvZCA9PT0gJ2RlbGV0ZScpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaGFuZGxlTWV0aG9kKGUudGFyZ2V0KTtcbiAgfVxuICBpZiAoZS50YXJnZXQuZGF0YXNldC5tZXRob2QgPT09ICdQQVRDSCcpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaGFuZGxlTWV0aG9kKGUudGFyZ2V0KTtcbiAgfVxuICAvLyBpZiAoZS50YXJnZXQuZGF0YXNldC5tZXRob2QgPT09ICdwYXRjaCcpIHtcbiAgLy8gICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIC8vICAgaGFuZGxlTWV0aG9kKGUudGFyZ2V0LCB7XG4gIC8vICAgICBuczogJ2FwaScsXG4gIC8vICAgICBkYXRhOiB7XG4gIC8vICAgICAgIHNlY3Rpb246ICd3aXNlJyxcbiAgLy8gICAgICAgaWQ6ICcyJ1xuICAvLyAgICAgfVxuICAvLyAgIH0pO1xuICAvLyB9XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9tb2R1bGVzL2RhdGFMaW5rcy5qcyIsImltcG9ydCB7JGh0dHB9IGZyb20gJy4uL2NvbW1vbi9hamF4JztcbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCB7aW5zZXJ0QWZ0ZXIsIHN0clRvRG9tLCBkZWJvdW5jZX0gZnJvbSAnLi4vY29tbW9uL3V0aWxpdGllcyc7XG5cbmxldCBwYXlsb2FkID0ge307XG5sZXQgY2FsbGJhY2sgPSB7XG4gIGFwaVF1ZXJ5U3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgIGxldCBzZWFyY2hMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXBpLXNlYXJjaC1yZXN1bHQnKVswXTtcbiAgICBsZXQgZGF0YU9iaiA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgbGV0IGNvbnRlbnRTdHIgPSAnJztcbiAgICBsZXQgaGVhZFN0ciA9IGBcbiAgICA8ZGl2IGNsYXNzPVwicmVzdWx0LWhlYWRcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1pbnB1dFwiPmlucHV0PC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3M9XCJwZXItcmVzdWx0LWNvbHVtbiBwZXItcmVzdWx0LXBhY2thZ2VWZXJzaW9uXCI+cGFja2FnZVZlcnNpb248L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzcz1cInBlci1yZXN1bHQtY29sdW1uIHBlci1yZXN1bHQtY2lQYWNrYWdlTmFtZVwiPmNpUGFja2FnZU5hbWU8L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzcz1cInBlci1yZXN1bHQtY29sdW1uIHBlci1yZXN1bHQtY2lQYWNrYWdlVmVyc2lvblwiPmNpUGFja2FnZVZlcnNpb248L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzcz1cInBlci1yZXN1bHQtY29sdW1uIHBlci1yZXN1bHQtc3RhdHVzXCI+c3RhdHVzPC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIGA7XG4gICAgY29udGVudFN0ciArPSBoZWFkU3RyO1xuICAgIGZvciAobGV0IGkgPSAwLCBMZW4gPSBkYXRhT2JqLmxlbmd0aDsgaSA8IExlbjsgaSsrKSB7XG4gICAgICBjb250ZW50U3RyICs9IGA8ZGl2IGNsYXNzPSdwZXItc2VhcmNoLXJlc3VsdCc+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1pbnB1dFwiPiR7ZGF0YU9ialtpXS5pbnB1dH08L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1wYWNrYWdlVmVyc2lvblwiPiR7ZGF0YU9ialtpXS5wYWNrYWdlVmVyc2lvbn08L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwicGVyLXJlc3VsdC1jb2x1bW4gcGVyLXJlc3VsdC1jaVBhY2thZ2VOYW1lXCI+JHtkYXRhT2JqW2ldLmNpUGFja2FnZU5hbWV9PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInBlci1yZXN1bHQtY29sdW1uIHBlci1yZXN1bHQtY2lQYWNrYWdlVmVyc2lvblwiPiR7ZGF0YU9ialtpXS5jaVBhY2thZ2VWZXJzaW9ufTwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJwZXItcmVzdWx0LWNvbHVtbiBwZXItcmVzdWx0LXN0YXR1c1wiPiR7ZGF0YU9ialtpXS5zdGF0dXN9PC9zcGFuPlxuICAgICAgPC9kaXY+YDtcbiAgICB9XG4gICAgc2VhcmNoTGlzdC5pbm5lckhUTUwgPSBjb250ZW50U3RyO1xuICAgIGRhdGFPYmoubGVuZ3RoID4gMCA/IHNlYXJjaExpc3QuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpIDogc2VhcmNoTGlzdC5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG4gIH1cbn07XG5cbmxldCBkZWJvdW5jZWRBcGlRdWVyeUlucHV0ID0gZGVib3VuY2UoYXBpUXVlcnksIDEwMCwgZmFsc2UpO1xuZnVuY3Rpb24gbGlzdGVuQXBpUXVlcnkoKSB7XG4gIGxldCBhcGlRdWVyeUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2VhcmNoLWlucHV0JylbMF07XG4gIGxldCBpbldyYXBwZXIgPSBmYWxzZTtcbiAgYXBpUXVlcnlJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGRlYm91bmNlZEFwaVF1ZXJ5SW5wdXQpO1xuICBhcGlRdWVyeUlucHV0LnBhcmVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uKGV2KSB7XG4gICAgaWYgKCFjaGVja0lmRm9jdXMuYXBwbHkoYXBpUXVlcnlJbnB1dCwgZXYpKSB7XG4gICAgICBjbGVhclNlYXJjaFJlc3VsdCgpO1xuICAgIH07XG4gICAgaW5XcmFwcGVyID0gZmFsc2U7XG4gIH0pO1xuICBhcGlRdWVyeUlucHV0LnBhcmVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgaW5XcmFwcGVyID0gdHJ1ZTtcbiAgfSk7XG4gIGFwaVF1ZXJ5SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgaWYgKCFpbldyYXBwZXIpIGNsZWFyU2VhcmNoUmVzdWx0KCk7XG4gIH0pO1xuICBhcGlRdWVyeUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgYXBpUXVlcnkpO1xufVxuZnVuY3Rpb24gY2hlY2tJZkZvY3VzKGV2KSB7XG4gIHJldHVybiB0aGlzID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xufVxuZnVuY3Rpb24gYXBpUXVlcnkoZXYpIHtcbiAgaWYgKGV2LnRhcmdldC52YWx1ZS5sZW5ndGggPD0gMCkge1xuICAgIGNsZWFyU2VhcmNoUmVzdWx0KCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHBheWxvYWQgPSB7cTogZXYudGFyZ2V0LnZhbHVlfTtcbiAgJGh0dHAod2luZG93LmxvY2F0aW9uLm9yaWdpbiArICcvcGx1Z2luc19pbnN0YW50c2VhcmNoJylcbiAgLmdldChwYXlsb2FkKVxuICAudGhlbihjYWxsYmFjay5hcGlRdWVyeVN1Y2Nlc3MuYmluZChldikpXG4gIC5jYXRjaChjYWxsYmFjay5lcnJvcik7XG59XG5mdW5jdGlvbiBjbGVhclNlYXJjaFJlc3VsdCgpIHtcbiAgbGV0IGFwaVNlYXJjaFJlc3VsdEVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwaS1zZWFyY2gtcmVzdWx0JylbMF07XG4gIGFwaVNlYXJjaFJlc3VsdEVsZS5pbm5lckhUTUwgPSAnJztcbiAgYXBpU2VhcmNoUmVzdWx0RWxlLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZjcCgpIHtcbiAgICBsZXQgQXBwID0ge307XG5cbiAgICBBcHAuY2FibGUgPSBBY3Rpb25DYWJsZS5jcmVhdGVDb25zdW1lcigpO1xuXG5cbiAgICBWdWUuY29tcG9uZW50KCdwbHVnaW4taXRlbScsIHtcbiAgICAgIHByb3BzOiBbJ3BsdWdpbnMnXSxcbiAgICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsdWdpbnNJbnB1dDogZ2MsXG4gICAgICAgICAgc2hvd0xvZ3M6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cInBsdWdpbnMtd3JhcFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwbHVnaW4td3JhcFwiIHYtZm9yPVwiKHBlcnBsdWdpbixpbmRleCkgaW4gcGx1Z2luc0lucHV0XCI+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwZXItcm93LXBsdWdpbiBjLWdyaWQtcm93IGMtZ2FwLXRvcCBjLXBhZC1sZWZ0XCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYy1ncmlkLXNwYW4xMCBwYWNrYWdlLW5hbWVcIj57eyBwZXJwbHVnaW4ucGFja2FnZU5hbWUgfX08L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYy1ncmlkLXNwYW42IHBhY2thZ2UtdmVyc2lvblwiPnt7IHBlcnBsdWdpbi5wYWNrYWdlVmVyc2lvbiB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjLWdyaWQtc3BhbjEwIHBhY2thZ2UtY2ktcGFja2FnZS1uYW1lXCI+e3sgcGVycGx1Z2luLmNpUGFja2FnZU5hbWUgfX08L3NwYW4+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjLWdyaWQtc3BhbjZcIj57eyBwZXJwbHVnaW4uY2lQYWNrYWdlVmVyc2lvbiB9fTwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYy1ncmlkLXNwYW44XCI+e3sgcGVycGx1Z2luLmNpUGFja2FnZVZlcnNpb25QYXRjaCB9fTwvZGl2PlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImMtZ3JpZC1zcGFuNSBwYWNrYWdlLXN0YXR1c1wiPnt7IHBlcnBsdWdpbi5zdGF0dXMgfX08L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYy1ncmlkLXNwYW4zIHBhY2thZ2UtbG9nIGMtY2VudGVyXCI+PHN2ZyBjbGFzcz1cImljb24gaWNvbi1tb3JlXCIgQGNsaWNrPVwidG9nZ2xlTG9nKHBlcnBsdWdpbilcIj48dXNlIHhsaW5rOmhyZWY9XCIjaWNvbi1tb3JlXCI+PC91c2U+PC9zdmc+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYWNrYWdlLWxvZ1wiIHYtaWY9XCJwZXJwbHVnaW4uc2hvd0xvZ3NcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvYWRpbmctcGxhY2Vob2xkZXIgYy1jZW50ZXIgYy1wYWQtdG9wXCIgdi1pZj1cIiFwZXJwbHVnaW4ubG9nXCI+cHJvY2Vzc2luZzwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGVyLXBoYXNlLWxvZ1wiIHYtZm9yPVwiKHZhbCwga2V5KSBpbiBwZXJwbHVnaW4ubG9nXCI+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJwYWNrYWdlLWxvZy1oZWFkXCI+e3sga2V5IH19PC9wPlxuICAgICAgICAgICAgICAgIDxwcmUgY2xhc3M9XCJwYWNrYWdlLWxvZy1wcmVcIiB2LWh0bWw9J3ZhbC5kZXRhaWwnPjwvcHJlPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PmAsXG4gICAgICBtZXRob2RzOiB7XG4gICAgICAgIHRvZ2dsZUxvZzogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIGlmICghaXRlbS5zaG93TG9ncykge1xuICAgICAgICAgICAgaXRlbS5nYyA9IEFwcC5jYWJsZS5zdWJzY3JpcHRpb25zLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgJ2NoYW5uZWwnOiBcIkNpUGx1Z2luTG9nc0NoYW5uZWxcIixcbiAgICAgICAgICAgICAgICAncGx1Z2luX2lkJzogaXRlbS5pZFxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucGVyZm9ybSgnc2VuZF9jdXJyZW50X2xvZycsIHtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luX2lkOiBpdGVtLmlkXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICBpdGVtLmxvZyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICBpZiAoaXRlbS5zdGF0dXMgPT09ICdmYWlsZWQnIHx8IGl0ZW0uc3RhdHVzID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5nYy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGl0ZW0uc3RhdHVzID09PSAnZmFpbGVkJyB8fCBpdGVtLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7fSBlbHNlIHtcbiAgICAgICAgICAgICAgaXRlbS5nYy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtLnNob3dMb2dzID0gIWl0ZW0uc2hvd0xvZ3M7XG4gICAgICAgIH0sXG4gICAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24oaWQpIHt9XG4gICAgICB9XG5cbiAgICB9KTtcblxuXG5cbiAgICBsZXQgYXBwID0gbmV3IFZ1ZSh7XG4gICAgICBlbDogJyNhcHAnLFxuXG4gICAgICBjb21wdXRlZDoge1xuICAgICAgfSxcblxuICAgIH0pO1xuXG4gICAgLyogdXNlIEFjdGlvbkNhYmxlIHRvIHVwZGF0ZSBzdGF0dXMgb2YgcGVuZGluZyBwbHVnaW4gKi9cblxuICAgIGlmIChnYy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IobGV0IGkgPSAwLCBsZW5ndGgxID0gZ2MubGVuZ3RoOyBpIDwgbGVuZ3RoMTsgaSsrKXtcbiAgICAgICAgaWYgKGdjW2ldWydzdGF0dXMnXSAhPT0gJ2ZhaWxlZCcgJiYgZ2NbaV1bJ3N0YXR1cyddICE9PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICBnY1tpXVsnZ2NwJ10gPSBBcHAuY2FibGUuc3Vic2NyaXB0aW9ucy5jcmVhdGUoe1xuICAgICAgICAgICAgJ2NoYW5uZWwnOiBcIkNpUGx1Z2luU3RhdHVzQ2hhbm5lbFwiLFxuICAgICAgICAgICAgJ3BsdWdpbl9pZCc6IGdjW2ldWydpZCddXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdGhpcy5wZXJmb3JtKCdzZW5kX2N1cnJlbnRfc3RhdHVzJywge1xuICAgICAgICAgICAgICAgIHBsdWdpbl9pZDogZ2NbaV1bJ2lkJ11cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWNlaXZlZDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICBnY1tpXVsnc3RhdHVzJ10gPSBkYXRhLnBsdWdpbl9zdGF0dXM7XG4gICAgICAgICAgICAgIGlmIChkYXRhLnBsdWdpbl9zdGF0dXMgPT09ICdmYWlsZWQnIHx8IGRhdGEucGx1Z2luX3N0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgICAgZ2NbaV1bJ2djcCddLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxpc3RlbkFwaVF1ZXJ5KCk7XG5cblxuICAgIC8vIEFwcC5jaV9wbHVnaW5fbG9ncyA9IEFwcC5jYWJsZS5zdWJzY3JpcHRpb25zLmNyZWF0ZShcIkNpUGx1Z2luTG9nc0NoYW5uZWxcIiwge1xuICAgIC8vICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAvLyAgICAgLy8gQ2FsbGVkIHdoZW4gdGhlIHN1YnNjcmlwdGlvbiBpcyByZWFkeSBmb3IgdXNlIG9uIHRoZSBzZXJ2ZXJcbiAgICAvLyAgICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgIC8vICAgICB0aGF0LnBlcmZvcm0oJ2ZvbGxvdycsIHtcbiAgICAvLyAgICAgICAncGx1Z2luX2lkJzpcbiAgICAvLyAgICAgfSlcbiAgICAvLyAgIH0sXG5cbiAgICAvLyAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgIC8vIENhbGxlZCB3aGVuIHRoZSBzdWJzY3JpcHRpb24gaGFzIGJlZW4gdGVybWluYXRlZCBieSB0aGUgc2VydmVyXG4gICAgLy8gICB9LFxuXG4gICAgLy8gICByZWNlaXZlZDogZnVuY3Rpb24oZGF0YSkge1xuICAgIC8vICAgICAvLyBDYWxsZWQgd2hlbiB0aGVyZSdzIGluY29taW5nIGRhdGEgb24gdGhlIHdlYnNvY2tldCBmb3IgdGhpcyBjaGFubmVsXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgIC8vICAgfVxuICAgIC8vIH0pO1xuXG4gICAgLy8gQXBwLmNvbW1lbnRzID0gQXBwLmNhYmxlLnN1YnNjcmlwdGlvbnMuY3JlYXRlKFwiQ29tbWVudHNDaGFubmVsXCIsIHtcbiAgICAvLyAgIGNvbGxlY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICByZXR1cm4gJChcIltkYXRhLWNoYW5uZWw9J2NvbW1lbnRzJ11cIik7XG4gICAgLy8gICB9LFxuICAgIC8vICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAvLyAgICAgY29uc29sZS5sb2coJ2Nvbm5lY3RlZCcpO1xuICAgIC8vICAgICByZXR1cm4gc2V0VGltZW91dCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAvLyAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICAgICBfdGhpcy5mb2xsb3dDdXJyZW50TWVzc2FnZSgpO1xuICAgIC8vICAgICAgICAgcmV0dXJuIF90aGlzLmluc3RhbGxQYWdlQ2hhbmdlQ2FsbGJhY2soKTtcbiAgICAvLyAgICAgICB9O1xuICAgIC8vICAgICB9KSh0aGlzKSwgMTAwMCk7XG4gICAgLy8gICB9LFxuICAgIC8vICAgcmVjZWl2ZWQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAvLyAgICAgaWYgKCF0aGlzLnVzZXJJc0N1cnJlbnRVc2VyKGRhdGEuY29tbWVudCkpIHtcbiAgICAvLyAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uKCkuYXBwZW5kKGRhdGEuY29tbWVudCk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH0sXG4gICAgLy8gICB1c2VySXNDdXJyZW50VXNlcjogZnVuY3Rpb24oY29tbWVudCkge1xuICAgIC8vICAgICByZXR1cm4gJChjb21tZW50KS5hdHRyKCdkYXRhLXVzZXItaWQnKSA9PT0gJCgnbWV0YVtuYW1lPWN1cnJlbnQtdXNlcl0nKS5hdHRyKCdpZCcpO1xuICAgIC8vICAgfSxcbiAgICAvLyAgIGZvbGxvd0N1cnJlbnRNZXNzYWdlOiBmdW5jdGlvbigpIHtcbiAgICAvLyAgICAgdmFyIG1lc3NhZ2VJZDtcbiAgICAvLyAgICAgaWYgKG1lc3NhZ2VJZCA9IHRoaXMuY29sbGVjdGlvbigpLmRhdGEoJ21lc3NhZ2UtaWQnKSkge1xuICAgIC8vICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm0oJ2ZvbGxvdycsIHtcbiAgICAvLyAgICAgICAgIG1lc3NhZ2VfaWQ6IG1lc3NhZ2VJZFxuICAgIC8vICAgICAgIH0pO1xuICAgIC8vICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm0oJ3VuZm9sbG93Jyk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH0sXG4gICAgLy8gICBpbnN0YWxsUGFnZUNoYW5nZUNhbGxiYWNrOiBmdW5jdGlvbigpIHtcbiAgICAvLyAgICAgaWYgKCF0aGlzLmluc3RhbGxlZFBhZ2VDaGFuZ2VDYWxsYmFjaykge1xuICAgIC8vICAgICAgIHRoaXMuaW5zdGFsbGVkUGFnZUNoYW5nZUNhbGxiYWNrID0gdHJ1ZTtcbiAgICAvLyAgICAgICByZXR1cm4gJChkb2N1bWVudCkub24oJ3R1cmJvbGlua3M6bG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICAgICAgcmV0dXJuIEFwcC5jb21tZW50cy5mb2xsb3dDdXJyZW50TWVzc2FnZSgpO1xuICAgIC8vICAgICAgIH0pO1xuICAgIC8vICAgICB9XG4gICAgLy8gICB9XG4gICAgLy8gfSk7XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250LWVuZC9qYXZhc2NyaXB0cy9tb2R1bGVzL2Zpc0NpUGx1Z2lucy5qcyIsImltcG9ydCB7dHdlZXRCb3h9IGZyb20gJy4vdHdlZXRCb3gnO1xuZXhwb3J0IGZ1bmN0aW9uIGhvbWUoKSB7XG5cdHR3ZWV0Qm94KCk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL21vZHVsZXMvaG9tZXBhZ2UuanMiLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdDaVBsdWdpbnMoKSB7XG5cbiAgVnVlLmNvbXBvbmVudCgnbmV3LXBsdWdpbnMnLCB7XG4gICAgcHJvcHM6IFsndGV4dGFyZWFJbnB1dCddLFxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGx1Z2luc0lucHV0OiB1bmRlZmluZWQsXG4gICAgICAgIGNhblN1Ym1pdDogdHJ1ZSxcbiAgICAgICAgcHJvY2Vzc2VkOiAwLFxuICAgICAgICBpbml0UGF0Y2hDaVBhY2thZ2VWZXJzaW9uOiAwLFxuICAgICAgICBwcm9jZXNzZWRQbHVnaW5zSW5wdXREYXRhOiBudWxsXG4gICAgICB9XG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgPGRpdiBjbGFzcz1cIm5ldy1wbHVnaW5zLXdyYXBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImMtZ3JpZC1yb3dcIj5cblxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwbHVnaW5zSW5wdXQgYy1ncmlkLXNwYW4xMFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhpbnRcIj5mb3JtYXQ6IHBhY2thZ2VOYW1lQHZlcnNpb248L2Rpdj5cbiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cInBsdWdpbnMtaW5wdXQtYXJlYVwiIG5hbWU9XCJ0ZXh0YXJlYVwiIHJvd3M9XCIxNlwiIHBsYWNlaG9sZGVyPVwi5re75YqgcGx1Z2luc1wiIHYtbW9kZWw9XCJwbHVnaW5zSW5wdXRcIj48L3RleHRhcmVhPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInBsdWdpbnMgYy1ncmlkLXNwYW4zOFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBsdWdpbnMtd3JhcFwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGx1Z2lucy1ocmVhZCBjLWdyaWQtcm93XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImMtZ3JpZC1zcGFuMTBcIj5wYWNrYWdlTmFtZTwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjLWdyaWQtc3BhbjZcIj52ZXJzaW9uPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImMtZ3JpZC1zcGFuMTRcIj5DSS1wYWNrYWdlTmFtZTwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjLWdyaWQtc3BhbjhcIj5DSS1wYWNrYWdlVmVyc2lvbjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjLWdyaWQtc3BhbjEwXCI+Q0ktcGFja2FnZVZlcnNpb25QYXRjaDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGVyLXJvdy1wbHVnaW4gYy1ncmlkLXJvdyBjLWdhcC10b3BcIiB2LWZvcj1cIihpdGVtLCBpZHgpIGluIHByb2Nlc3NlZFBsdWdpbnNJbnB1dERhdGFcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImMtZ3JpZC1zcGFuMTAgcGFja2FnZS1uYW1lXCI+e3sgaXRlbS5wYWNrYWdlTmFtZSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImMtZ3JpZC1zcGFuNiBwYWNrYWdlLXZlcnNpb25cIj57eyBpdGVtLnBhY2thZ2VWZXJzaW9uIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYy1ncmlkLXNwYW4xNCBwYWNrYWdlLWNpLXBhY2thZ2UtbmFtZVwiPnt7IGl0ZW0uY2lQYWNrYWdlTmFtZSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImMtZ3JpZC1zcGFuOCBwYWNrYWdlLWNpLXBhY2thZ2UtdmVyc2lvblwiPnt7IGl0ZW0uY2lQYWNrYWdlVmVyc2lvbiB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImMtZ3JpZC1zcGFuMTAgcGFja2FnZS1jaS1wYWNrYWdlLXZlcnNpb24tcGF0Y2hcIiB2LWlmPVwiaXRlbS5jaVBhY2thZ2VWZXJzaW9uXCI+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1pbnVzLXBhdGNoXCIgQGNsaWNrPVwibWludXNQYXRjaFZlcnNpb24oaXRlbSwgaWR4KVwiPi08L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBhdGNoLXZlcnNpb25cIj57eyBpdGVtLmNpUGFja2FnZVZlcnNpb25QYXRjaCB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGx1cy1wYXRjaFwiIEBjbGljaz1cInBsdXNQYXRjaFZlcnNpb24oaXRlbSwgaWR4KVwiPis8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYy1oaWRlXCIgdi1pZj1cInByb2Nlc3NlZFBsdWdpbnNJbnB1dFwiPnt7IHByb2Nlc3NlZFBsdWdpbnNJbnB1dCB9fTwvZGl2PlxuXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwic3VibWl0LXJvdyBjLWNlbnRlciBjLWdhcC10b3AgYy1nYXAtYm90dG9tXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImMtYnRuXCIgQGNsaWNrPVwic3VibWl0XCI+SW5zdGFsbCBvbiBCdWlsZENsb3VkIGNvbXBpbGUgbWFjaGluZXM8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5gLFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIHByb2Nlc3NlZFBsdWdpbnNJbnB1dDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYXJyID0gW107XG4gICAgICAgICAgICB2YXIgdmFsO1xuICAgICAgICAgICAgdmFyIHNwbGl0QXJyID0gW107XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NlZCArPSAxO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbnNJbnB1dCkgcmV0dXJuIGFycjtcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IHRoaXMucGx1Z2luc0lucHV0LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGxpbmVzW2ldLnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gbGluZXNbaV0udHJpbSgpLnJlcGxhY2UoL15cXFwifF5cXCd8XFwnJHxcXFwiJC9nLCAnJyk7XG4gICAgICAgICAgICAgICAgc3BsaXRBcnIgPSB2YWwuc3BsaXQoJ0AnKTtcbiAgICAgICAgICAgICAgICBhcnIucHVzaCh7XG4gICAgICAgICAgICAgICAgICBpbnB1dDogdmFsLFxuICAgICAgICAgICAgICAgICAgcGFja2FnZU5hbWU6IHNwbGl0QXJyWzBdLFxuICAgICAgICAgICAgICAgICAgcGFja2FnZVZlcnNpb246IHNwbGl0QXJyWzFdIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgY2lQYWNrYWdlTmFtZTogc3BsaXRBcnJbMV0gPyAoICcnICsgc3BsaXRBcnJbMF0gKyAnXycgKyBzcGxpdEFyclsxXS5zcGxpdCgnLicpLmpvaW4oJ18nKSApIDogJycsXG4gICAgICAgICAgICAgICAgICBjaVBhY2thZ2VWZXJzaW9uOiBzcGxpdEFyclsxXSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgIGNpUGFja2FnZVZlcnNpb25QYXRjaDogMCxcbiAgICAgICAgICAgICAgICAgIGNpUGFja2FnZU5hbWVQcmVmaXg6ICdmaXMtbXNwcmQtJ1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc2VkUGx1Z2luc0lucHV0RGF0YSA9IGFycjtcbiAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH1cblxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgc3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5jYW5TdWJtaXQgPSB0cnVlO1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBzdWJtaXRGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZmlzLWNpLXBsZ2lucy1mb3JtJylbMF07XG4gICAgICAgIHZhciBzdWJtaXRFbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdmaXMtY2ktcGxnaW5zLWZvcm0tc3VibWl0LWJ0bicpWzBdO1xuICAgICAgICB2YXIgcGx1Z2luSW5wdXRFbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwbHVnaW4taW5wdXQnKVswXTtcbiAgICAgICAgdmFyIHRtcEZvcm1FbGU7XG4gICAgICAgIGlmICh0aGF0LnByb2Nlc3NlZFBsdWdpbnNJbnB1dC5sZW5ndGggPT09IDApIHthbGVydCgnMCcpOyByZXR1cm47fVxuICAgICAgICBpZiAoIXRoYXQuY2hlY2tWYWxpZGF0aW9uKHRoYXQucHJvY2Vzc2VkUGx1Z2luc0lucHV0KSkge2FsZXJ0KFwi5YyF5ZCN5LiN6IO95LulZmlz5byA5aS0XFxu5b+F6aG75bim5q2j56Gu55qE54mI5pys5Y+3XFxu54mI5pys5Y+35LiN6IO95bim5pyJ4oCY77yd4oCZLOKAmO+9nuKAmSzigJg84oCZLCc8PScsJz4nLCc+PScsJ14n562J5qCH6K6w44CCXCIpOyByZXR1cm47fVxuICAgICAgICB0aGF0LnByb2Nlc3NlZFBsdWdpbnNJbnB1dC5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgICAgICAgZm9yICh2YXIgZWwgaW4gZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzT3duUHJvcGVydHkoZWwpKSB7XG4gICAgICAgICAgICAgIHRtcEZvcm1FbGUgPSB0aGF0LmNyZWF0ZUZvcm1FbGUoJ2NpX3BsdWdpbnNbXVsnICsgZWwgKyAnXScsIGVsZW1lbnRbZWxdKTtcbiAgICAgICAgICAgICAgc3VibWl0Rm9ybS5hcHBlbmRDaGlsZCh0bXBGb3JtRWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhhdC5jYW5TdWJtaXQpIHtcbiAgICAgICAgICBzdWJtaXRFbGUuY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNoZWNrVmFsaWRhdGlvbjogZnVuY3Rpb24oYXJyKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0ciA9IEpTT04uc3RyaW5naWZ5KGFycik7XG4gICAgICAgIHZhciBvYmpBcnIgPSBKU09OLnBhcnNlKHN0cik7XG4gICAgICAgIHZhciBlbGU7XG4gICAgICAgIHZhciByZSA9IC9bXkEtWmEtejAtOUBcXC5cXC1fXS9nO1xuICAgICAgICBjb25zb2xlLmxvZyhvYmpBcnIpO1xuICAgICAgICBmb3IodmFyIGkgPSAwLCBsZW5ndGgxID0gb2JqQXJyLmxlbmd0aDsgaSA8IGxlbmd0aDE7IGkrKyl7XG4gICAgICAgICAgZWxlID0gb2JqQXJyW2ldO1xuXG4gICAgICAgICAgaWYgKGVsZS5oYXNPd25Qcm9wZXJ0eSgnaW5wdXQnKSkge1xuXG4gICAgICAgICAgICBpZiAoZWxlLmlucHV0LmluZGV4T2YoJ2ZpcycpID09PSAwIHx8IGVsZS5pbnB1dC5zcGxpdCgnQCcpLmxlbmd0aCA9PT0gMSB8fCBlbGUuaW5wdXQuaW5kZXhPZignQCcpID09PSBlbGUuaW5wdXQubGVuZ3RoIC0gMSApIHtcbiAgICAgICAgICAgICAgdGhhdC5jYW5TdWJtaXQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVsZS5pbnB1dCk7XG4gICAgICAgICAgICBpZihyZS5leGVjKGVsZS5pbnB1dCkpIHtcbiAgICAgICAgICAgICAgdGhhdC5jYW5TdWJtaXQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiB0aGF0LmNhblN1Ym1pdDtcbiAgICAgIH0sXG4gICAgICBjcmVhdGVGb3JtRWxlOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgaW5wdXRFbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlLnNldEF0dHJpYnV0ZSgnbmFtZScsIG5hbWUpO1xuICAgICAgICBpbnB1dEVsZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gaW5wdXRFbGU7XG4gICAgICB9LFxuICAgICAgZ2V0UGF0Y2hDaVBhY2thZ2VWZXJzaW9uOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIGxldCB2ZXJzaW9uID0gaXRlbS5wYWNrYWdlVmVyc2lvbjtcbiAgICAgICAgbGV0IHZlckFyciA9IHZlcnNpb24uc3BsaXQoJy0nKTtcbiAgICAgICAgbGV0IHZlckFyckxlbjtcbiAgICAgICAgbGV0IHNlY1BhcnRBcnI7XG4gICAgICAgIGxldCBmaXJzdFBhcnRBcnI7XG4gICAgICAgIGlmICh2ZXJBcnIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgZmlyc3RQYXJ0QXJyID0gdmVyc2lvbi5zcGxpdCgnLicpO1xuICAgICAgICAgIHZlckFyckxlbiA9IGZpcnN0UGFydEFyci5sZW5ndGg7XG4gICAgICAgICAgaWYgKHZlckFyckxlbiA9PT0gMikgZmlyc3RQYXJ0QXJyWzJdID0gMDtcbiAgICAgICAgICBpZiAodmVyQXJyTGVuID09PSAxKSB7Zmlyc3RQYXJ0QXJyWzFdID0gMDsgZmlyc3RQYXJ0QXJyWzJdID0gMDt9XG4gICAgICAgICAgdmVyQXJyTGVuID0gZmlyc3RQYXJ0QXJyLmxlbmd0aDtcbiAgICAgICAgICBmaXJzdFBhcnRBcnJbdmVyQXJyTGVuIC0gMV0gPSArZmlyc3RQYXJ0QXJyW3ZlckFyckxlbiAtIDFdICsgaXRlbS5jaVBhY2thZ2VWZXJzaW9uUGF0Y2g7IFxuICAgICAgICAgIGl0ZW0uY2lQYWNrYWdlVmVyc2lvbiA9IGZpcnN0UGFydEFyci5qb2luKCcuJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2ZXJBcnIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgc2VjUGFydEFyciA9IHZlckFyclsxXS5zcGxpdCgnLicpO1xuICAgICAgICAgIGlmIChzZWNQYXJ0QXJyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdmVyQXJyWzFdID0gdmVyQXJyWzFdICsgJy4nICsgIGl0ZW0uY2lQYWNrYWdlVmVyc2lvblBhdGNoO1xuICAgICAgICAgICAgaXRlbS5jaVBhY2thZ2VWZXJzaW9uID0gdmVyQXJyLmpvaW4oJy0nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VjUGFydEFyclsxXSA9ICtzZWNQYXJ0QXJyWzFdICsgaXRlbS5jaVBhY2thZ2VWZXJzaW9uUGF0Y2g7XG4gICAgICAgICAgICB2ZXJBcnJbMV0gPSBzZWNQYXJ0QXJyLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIGl0ZW0uY2lQYWNrYWdlVmVyc2lvbiA9IHZlckFyci5qb2luKCctJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBtaW51c1BhdGNoVmVyc2lvbjogZnVuY3Rpb24oaXRlbSwgaWR4KSB7XG4gICAgICAgIGl0ZW0uY2lQYWNrYWdlVmVyc2lvblBhdGNoID0gaXRlbS5jaVBhY2thZ2VWZXJzaW9uUGF0Y2ggPT09IDAgPyAwIDogKGl0ZW0uY2lQYWNrYWdlVmVyc2lvblBhdGNoIC0gMSk7XG4gICAgICAgIHRoaXMuZ2V0UGF0Y2hDaVBhY2thZ2VWZXJzaW9uKGl0ZW0pO1xuICAgICAgfSxcbiAgICAgIHBsdXNQYXRjaFZlcnNpb246IGZ1bmN0aW9uKGl0ZW0sIGlkeCkge1xuICAgICAgICBpdGVtLmNpUGFja2FnZVZlcnNpb25QYXRjaCA9IGl0ZW0uY2lQYWNrYWdlVmVyc2lvblBhdGNoID09PSA1ID8gNSA6IChpdGVtLmNpUGFja2FnZVZlcnNpb25QYXRjaCArIDEpO1xuICAgICAgICB0aGlzLmdldFBhdGNoQ2lQYWNrYWdlVmVyc2lvbihpdGVtKTtcbiAgICAgIH1cblxuICAgIH0gIFxuXG4gIH0pO1xuXG5cbiAgdmFyIGFwcCA9IG5ldyBWdWUoe1xuICAgIGVsOiAnI2FwcCdcbiAgfSk7ICBcblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnQtZW5kL2phdmFzY3JpcHRzL21vZHVsZXMvbmV3Q2lQbHVnaW5zLmpzIiwiZnVuY3Rpb24gc2V0Rm9jdXMoZWwpIHtcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgdmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoZWwsIDApO1xuICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWV0Qm94KCkge1xuICB2YXIgZG9jID0gZG9jdW1lbnQ7XG4gIHZhciB0YiA9IGRvYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0d2VldC1ib3gnKVswXTtcbiAgaWYgKCF0YikgcmV0dXJuIG51bGw7XG4gIHZhciB0YmQgPSB0Yi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JylbMF07XG4gIHZhciB0YmRTdHJpbmcgPSAnPGRpdj48YnI+PC9kaXY+JztcblxuICB0Yi5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgdGIuY2xhc3NMaXN0LnJlbW92ZSgnY29uZGVuc2VkJyk7XG4gICAgaWYgKHRiLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKSAmJiB0Yi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JylbMF0uaW5uZXJUZXh0LnRyaW0oKS5sZW5ndGgpIHtcblxuICAgICAgdGIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvd1BsYWNlaG9sZGVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRiLmNsYXNzTGlzdC5hZGQoJ3Nob3dQbGFjZWhvbGRlcicpO1xuICAgIH1cbiAgICBpZiAodGJkLmlubmVySFRNTCA9PT0gJ1doYXRcXCdzIGhhcHBlbmluZz8nKSB7XG5cbiAgICAgIHRiZC5pbm5lckhUTUwgPSAnPGJyPic7XG4gICAgfVxuICB9KTtcbiAgdGIuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihldikge1xuICAgIGlmICh0Yi5pbm5lckhUTUwpIHtcbiAgICAgIGlmICh0Yi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JylbMF0gJiYgdGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpWzBdLnRleHRDb250ZW50KSB7XG4gICAgICAgIHRiLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3dQbGFjZWhvbGRlcicpO1xuICAgICAgfSBlbHNlIHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0Yi5pbm5lckhUTUwgPSB0YmRTdHJpbmc7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHNldEZvY3VzKHRiLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKVswXSk7XG5cbiAgICAgIH0sIDApO1xuICAgIH07XG4gIH0pO1xuXG4gIHRiLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihldikge1xuICAgIGlmICh0Yi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JylbMF0gJiYgdGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpWzBdLnRleHRDb250ZW50KSB7XG4gICAgICB0Yi5jbGFzc0xpc3QucmVtb3ZlKCdzaG93UGxhY2Vob2xkZXInKTtcbiAgICB9O1xuICAgIGlmICh0Yi5pbm5lckhUTUwgPT09ICc8YnI+Jykge1xuICAgICAgdGIuaW5uZXJIVE1MID0gdGJkU3RyaW5nO1xuICAgICAgc2V0Rm9jdXModGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpWzBdKTtcbiAgICB9XG4gIH0pO1xufVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udC1lbmQvamF2YXNjcmlwdHMvbW9kdWxlcy90d2VldEJveC5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiXSwic291cmNlUm9vdCI6IiJ9