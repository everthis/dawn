<p>img标签的alt和title的区别</p>
<h3>正则</h3>
<p>email匹配</p>
<p>function参数</p>
<h3>Git</h3>
<p>何时使用git rebase</p>
<p>深度clone object (JSON.parse(JSON.stringify(obj)))</p>

<h3>CSS</h3>
<p>CSS解析，优先级(right to left, inline-ID-class.attribute-element)</p>
<p>margin／padding 百分比计算(父元素宽度)</p>

<h3>JS</h3>
<p>闭包</p>
<p>GC</p>
<pre>
http://stackoverflow.com/questions/2681511/memory-release-from-local-variable-in-javascript
	Generally, no. Variables declared with var are local and are garbage collected when you return. If you omit the var then the variables are global, and using the delete keyword may be useful for global variables in some instances, but generally it's good practice to declare all variables with var anyway to not pollute the window namespace.

delete can be useful when using prototype-based inheritence though, e.g:

function myclass() {
    this.variable = 'myvalue'
    ...
    delete this.variable // finished with this variable
}
var inst = new myclass()
Bear in mind that if inst is deleted or becomes out of scope (garbage collected) all the attributes in it will be deleted as well. delete can also be useful for deleting items from hash tables:

var d = {}
d['blah'] = 'myvalue'
...
delete d['blah']
There are some browser-specific garbage collection bugs. IE sometimes has problems cleaning attributes in DOM elements and closures etc for example, though many of these problems have been reduced in IE8 I believe.
</pre>
<p>页面性能优化</p>
<p>promise callback函数和setTimeout 执行顺序</p>
<p>promise.then promise.then.then是同一个promise吗？</p>
<p>promise是怎么实现链式调用的？</p>
<p>水平垂直居中</p>
<p>float .float+div+div 的排列</p>
<p>清除浮动</p>
<p>实现bind</p>
<p>arrow function中的this</p>
<p>proxy与set</p>
<p>如何实现JSON.stringify</p>
<p>JS继承的种类</p>
<p>amd的循环依赖解决办法</p>
<p>数组去重</p>
<p>bindEvent(兼容IE)</p>
function _inherits(subClass, superClass) { subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
<p>webpack loader和plugin的区别</p>
<p>webpack与FIS的区别</p>
<p>
	var a = 1;
	var A = function() {
	  this.a = 2;
	};
	var b = new A();
	var c = A();
	console.log(a);
	console.log(b.a);
	console.log(c.a);
</p>

<p>
	var a = 1;
	(function() {
		console.log(a);
		a = 2;
		var a;
	})();
	console.log(a);
</p>

<p>stacking context and stacking order</p>

<h3>coding</h3>
<p>给定一个数组（有整数组成），以及一个正整数k，找出数组中两个数的叉的绝对值为k的组合的数量。</p>
<p>给定一个二维矩阵，从左上角开始，从外向内，顺时针输出所有的元素</p>