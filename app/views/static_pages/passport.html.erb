<% provide(:title, "Passport") %>
<% provide(:c_layout, 'blank') %>

<% if @params_obj[:env] != 'rdtest' && @params_obj[:env] != 'qatest' %>
<% passEnv = ''%>
<% else %>
<% passEnv = '.' + @params_obj[:env]%>
<% end %>

<script src="http://passport<%=passEnv%>.everthis.com/passApi/js/wrapper.js"></script>

<div style="width: 248px;border: 1px solid #efefef;box-shadow: 1px 1px 1px #efefef;margin:0 auto;">
  <div id="login1"></div>
</div>
<script>
(function() {
    passport.use('login', {
        tangram:true
    }, function(magic){
    var login1 = new magic.passport.login({
        product : "pp",
        loginType: 1,
        defaultCss:true,//是否加载CSS
        loginMerge:true,//是否合并
        hasRegUrl:true,//是否有注册链接
        autosuggest:true,//是否自动提示
        hasPlaceholder:true,//是否有placeholder
        sms:true,//短信登录
        u: window.location.origin + '/passportSuccess.html',
        isPhone: false,
        safeFlag: 0,
        staticPage: window.location.origin + '/v3Jump.html'
        });
        login1.render('login1');
    });

    function debounce(func, wait, immediate) {
      var timeout;
      return function() {
        var context = this, args = arguments;
        var later = function() {
          timeout = null;
          if (!immediate) func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
      };
    }

    var nodesArr = [];

    function docHeight (argument) {
       var body = document.body,
           html = document.documentElement;

       var height = Math.max( body.scrollHeight, body.offsetHeight,
                              html.clientHeight, html.scrollHeight, html.offsetHeight );
       return height;
    }
    function processNodesAddtion (argument) {
      var returnHeight = 0;
      var nodeOffsetH = 0;
      var documentHeight = docHeight();
      var msg = {"type": "styles"};
      for (var i = nodesArr.length - 1; i >= 0; i--) {
        nodeOffsetH = nodesArr[i].offsetHeight;
          returnHeight = nodeOffsetH > returnHeight ? nodeOffsetH : returnHeight ;
      }
      returnHeight = returnHeight > documentHeight ? returnHeight : documentHeight;
      msg.height = returnHeight;
      parent.postMessage(msg,"*");
      nodesArr = [];
    }

    var debouncedNodesAddtion = debounce(processNodesAddtion, 200, false);

    var observer = new MutationObserver(function(mutations) {
        // For the sake of...observation...let's output the mutation to console to see how this all works
        mutations.forEach(function(mutation) {
            if (mutation.type === "childList" && mutation.addedNodes && mutation.addedNodes.length ) {
                for (var i = mutation.addedNodes.length - 1; i >= 0; i--) {
                    nodesArr.push(mutation.addedNodes[i]);
                }
            }
            debouncedNodesAddtion();
        });
    });

    // Notify me of everything!
    var observerConfig = {
        attributes: true,
        childList: true,
        characterData: true
    };

    // Node, config
    // In this case we'll listen to all changes to body and child nodes
    var targetNode = document.body;
    observer.observe(targetNode, observerConfig);


})();


</script>
