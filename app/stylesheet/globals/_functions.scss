@function strip-unit($value) {
    @if type-of($value) != "number" {
        @warn "You tried to remove unit from NaN (#{type-of($value)})";
        @return $value;
    }
    @return $value / ($value * 0 + 1);
}

/* first and last item of list*/
@function first($list) {
    @return nth($list, 1);
}

@function last($list) {
    @return nth($list, length($list));
}

/* Last index of value x */
@function last-index($list, $value) {
    @for $i from length($list) * -1 through -1 {
        @if nth($list, abs($i)) == $value {
            @return abs($i);
        }
    }
    @return null;
}

@function prepend($list, $value) {
    @return join($value, $list);
}

/* Inserting value at index n */
@function insert-nth($list, $index, $value) {
    $result: null;
    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
    }
    @else if $index < 1 {
        @warn "List index 0 must be a non-zero integer for `insert-nth`";
    }
    @else if $index > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
    }
    @else {
        $result: ();
        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value);
            }
            $result: append($result, nth($list, $i));
        }
    }
    @return $result;
}

/* Replacing value x */
@function replace($list, $old-value, $new-value, $recursive: false) {
    $result: ();
    @for $i from 1 through length($list) {
        @if type-of(nth($list, $i)) == list and $recursive {
            $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
        }
        @else {
            @if nth($list, $i) == $old-value {
                $result: append($result, $new-value);
            }
            @else {
                $result: append($result, nth($list, $i));
            }
        }
    }
    @return $result;
}

/* Replacing value at index n */
@function replace-nth($list, $index, $value) {
    $result: null;
    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
    }
    @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `replace-nth`.";
    }
    @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
    }
    @else {
        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);
        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value);
            }
            @else {
                $result: append($result, nth($list, $i));
            }
        }
    }
    @return $result;
}

/* Removing values x */
@function remove($list, $value, $recursive: false) {
    $result: ();
    @for $i from 1 through length($list) {
        @if type-of(nth($list, $i)) == list and $recursive {
            $result: append($result, remove(nth($list, $i), $value, $recursive));
        }
        @else if nth($list, $i) != $value {
            $result: append($result, nth($list, $i));
        }
    }
    @return $result;
}

/* Removing value at index n */
@function remove-nth($list, $index) {
    $result: null;
    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
    }
    @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `remove-nth`.";
    }
    @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
    }
    @else {
        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);
        @for $i from 1 through length($list) {
            @if $i != $index {
                $result: append($result, nth($list, $i));
            }
        }
    }
    @return $result;
}

/* Slicing a list */
@function slice($list, $start: 1, $end: length($list)) {
    $result: null;
    @if type-of($start) != number or type-of($end) != number {
        @warn "Either $start or $end are not a number for `slice`.";
    }
    @else if $start > $end {
        @warn "The start index has to be lesser than or equals to the end index for `slice`.";
    }
    @else if $start < 1 or $end < 1 {
        @warn "List indexes must be non-zero integers for `slice`.";
    }
    @else if $start > length($list) {
        @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
    }
    @else if $end > length($list) {
        @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
    }
    @else {
        $result: ();
        @for $i from $start through $end {
            $result: append($result, nth($list, $i));
        }
    }
    @return $result;
}

/* Reverse a list */
@function reverse($list, $recursive: false) {
    $result: ();
    @for $i from length($list) * -1 through -1 {
        @if type-of(nth($list, abs($i))) == list and $recursive {
            $result: append($result, reverse(nth($list, abs($i)), $recursive));
        }
        @else {
            $result: append($result, nth($list, abs($i)));
        }
    }
    @return $result;
}

/* Convert a list into a string */
@function to-string($list, $glue: '', $is-nested: false) {
  $result: null;
  @for $i from 1 through length($list) {
    $e: nth($list, $i);
    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    }
    @else {
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
    }
  }

  @return $result;
}

/* Shift indexes of a list */
@function loop($list, $value: 1) {
  $result: ();
  @for $i from 0 to length($list) {
    $result: append($result, nth($list, ($i - $value) % length($list) + 1));
  }
  @return $result;
}