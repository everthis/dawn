/* Pro tip: Use functions when you need to calculate a value that may be reused somewhere else. */
@function pi() {
  @return 3.14159265359;
}
@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}
// square root function using the Babylonian method
// http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method
@function sqrt($square, $tolerance: .001, $estimate: $square/2) {
  @if abs($square - $estimate*$estimate) < $tolerance {
    @return $estimate;
  }
  @return sqrt($square, $tolerance, ($estimate + $square/$estimate)/2);
}
/* FACTORIAL */
@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}
// absolute value function
@function abs($number) {
  @if $number >= 0 {
    @return $number;
  }
  @return -1*$number;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}

/* http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass#coding-the-atan-function */

$default-threshold: pi()/180/20;

@function convert-angle($value, $unit-name) {
  $factors: (
    rad: 1rad,
    deg: 180deg/pi(),
    grad: 200grad/pi(),
    turn: .5turn/pi()
  );

  @if not unitless($value) {
    @warn '`#{$value}` should be unitless';
    @return false;
  }

  @if not map-has-key($factors, $unit-name) {
    @warn 'unit `#{$unit-name}` is not a valid unit - please make sure it is either `deg`, `rad`, `grad` or `turn`';
    @return false;
  }

  @return $value*map-get($factors, $unit-name);
}

/* inverse trigonometric functions */
@function asin($z, $unit-name: deg, $threshold: $default-threshold) {
  $sum: 0;
  $complement: false;
  $sign: if($z != 0, $z/abs($z), 1);
  $z: abs($z);
  
  /* check whether abs($z) <= 1 and throw an error if it returns false because, in such a case, our $term won't get under the $threshold value and, we'll have an infinite loop. */
  @if $z > 1 {
    @warn 'illegal `#{$z}` value for function';
    @return false;
  }

  @if $z > sin(pi()/4) {
    $complement: true;
    $z: sqrt(1 - pow($z, 2));
  }

  $term: $z;
  $i: 0;
  $k: 1;

  @while $term > $threshold {
    $sum: $sum + $term;

    $i: $i + 1;
    $k: $k*(2*$i - 1)/(2*$i);
    $j: 2*$i + 1;

    $term: $k*pow($z, $j)/$j;
  }

  @return convert-angle($sign*(if($complement, pi()/2 - $sum, $sum)), $unit-name);
}

@function acos($z, $unit-name: deg, $threshold: $default-threshold) {
  @return convert-angle(pi()/2, $unit-name) - asin($z, $unit-name, $threshold);
}

@function atan($z, $unit-name: deg, $threshold: $default-threshold) {  
  @return asin($z/sqrt(1 + pow($z, 2)), $unit-name, $threshold);
}

/* return fibonacci sequences */
@function fibonacci($n) {
  $fib: 0 1;
  @for $i from 1 through $n {
    $new: nth($fib, length($fib)) + nth($fib, length($fib) - 1);
    $fib: append($fib, $new);
  }
  @return $fib;
}

/* Juggler sequence */ 
@function juggler($n) {
  $juggler: ($n);
  @while nth($juggler, length($juggler)) != 1 {
    $last    : nth($juggler, length($juggler));
    $x       : if($last % 2 == 0, 1/2, 3/2);
    $new     : pow($last, $x);
    $juggler : append($juggler, $new);
  }
  @return $juggler;
}

/* Look-and-say sequence */
/* 
Start from last character
Check the number of identical characters previous to and including this one (basically 1, 2 or 3)
Prepend this count and the character to the new entry
Start back to next unchecked character 
*/
@function look-and-say($n) {
  $sequence: (1);
  @for $i from 1 through $n {
    $last-entry : nth($sequence, length($sequence));
    $new-entry  : ();
    $count     : 0;
    @for $j from length($last-entry) * -1 through -1 { 
      $j      : abs($j);
      $last   : nth($last-entry, $j);

      $last-1 : null;
      $last-2 : null;
      @if $j > 1 { $last-1: nth($last-entry, $j - 1); }
      @if $j > 2 { $last-2: nth($last-entry, $j - 2); }

      @if $count == 0 {
        @if $last == $last-1 and $last == $last-2 { 
          $count: 3; 
        }
        @else if $last == $last-1 { 
          $count: 2; 
        }
        @else { 
          $count: 1;
        }
        // Prepend new numbers to new line
        $new-line: join($count $last, $new-entry);  
      }  
      $count: $count - 1;
    }
    // Appending new line to result
    $sequence: append($sequence, $new-entry);
  }  
  // Returning the whole sequence
  @return $sequence;
}